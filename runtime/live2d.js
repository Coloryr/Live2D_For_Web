!function(){"use strict";var t,e,i,r,n={6190:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismDefaultParameterId=void 0,e.CubismDefaultParameterId=Object.freeze({HitAreaPrefix:"HitArea",HitAreaHead:"Head",HitAreaBody:"Body",PartsIdCore:"Parts01Core",PartsArmPrefix:"Parts01Arm_",PartsArmLPrefix:"Parts01ArmL_",PartsArmRPrefix:"Parts01ArmR_",ParamAngleX:"ParamAngleX",ParamAngleY:"ParamAngleY",ParamAngleZ:"ParamAngleZ",ParamEyeLOpen:"ParamEyeLOpen",ParamEyeLSmile:"ParamEyeLSmile",ParamEyeROpen:"ParamEyeROpen",ParamEyeRSmile:"ParamEyeRSmile",ParamEyeBallX:"ParamEyeBallX",ParamEyeBallY:"ParamEyeBallY",ParamEyeBallForm:"ParamEyeBallForm",ParamBrowLY:"ParamBrowLY",ParamBrowRY:"ParamBrowRY",ParamBrowLX:"ParamBrowLX",ParamBrowRX:"ParamBrowRX",ParamBrowLAngle:"ParamBrowLAngle",ParamBrowRAngle:"ParamBrowRAngle",ParamBrowLForm:"ParamBrowLForm",ParamBrowRForm:"ParamBrowRForm",ParamMouthForm:"ParamMouthForm",ParamMouthOpenY:"ParamMouthOpenY",ParamCheek:"ParamCheek",ParamBodyAngleX:"ParamBodyAngleX",ParamBodyAngleY:"ParamBodyAngleY",ParamBodyAngleZ:"ParamBodyAngleZ",ParamBreath:"ParamBreath",ParamArmLA:"ParamArmLA",ParamArmRA:"ParamArmRA",ParamArmLB:"ParamArmLB",ParamArmRB:"ParamArmRB",ParamHandL:"ParamHandL",ParamHandR:"ParamHandR",ParamHairFront:"ParamHairFront",ParamHairSide:"ParamHairSide",ParamHairBack:"ParamHairBack",ParamHairFluffy:"ParamHairFluffy",ParamShoulderY:"ParamShoulderY",ParamBustX:"ParamBustX",ParamBustY:"ParamBustY",ParamBaseX:"ParamBaseX",ParamBaseY:"ParamBaseY",ParamNONE:"NONE:"});var a,s=o(i(6190));(a=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).HitAreaBody=s.CubismDefaultParameterId.HitAreaBody,a.HitAreaHead=s.CubismDefaultParameterId.HitAreaHead,a.HitAreaPrefix=s.CubismDefaultParameterId.HitAreaPrefix,a.ParamAngleX=s.CubismDefaultParameterId.ParamAngleX,a.ParamAngleY=s.CubismDefaultParameterId.ParamAngleY,a.ParamAngleZ=s.CubismDefaultParameterId.ParamAngleZ,a.ParamArmLA=s.CubismDefaultParameterId.ParamArmLA,a.ParamArmLB=s.CubismDefaultParameterId.ParamArmLB,a.ParamArmRA=s.CubismDefaultParameterId.ParamArmRA,a.ParamArmRB=s.CubismDefaultParameterId.ParamArmRB,a.ParamBaseX=s.CubismDefaultParameterId.ParamBaseX,a.ParamBaseY=s.CubismDefaultParameterId.ParamBaseY,a.ParamBodyAngleX=s.CubismDefaultParameterId.ParamBodyAngleX,a.ParamBodyAngleY=s.CubismDefaultParameterId.ParamBodyAngleY,a.ParamBodyAngleZ=s.CubismDefaultParameterId.ParamBodyAngleZ,a.ParamBreath=s.CubismDefaultParameterId.ParamBreath,a.ParamBrowLAngle=s.CubismDefaultParameterId.ParamBrowLAngle,a.ParamBrowLForm=s.CubismDefaultParameterId.ParamBrowLForm,a.ParamBrowLX=s.CubismDefaultParameterId.ParamBrowLX,a.ParamBrowLY=s.CubismDefaultParameterId.ParamBrowLY,a.ParamBrowRAngle=s.CubismDefaultParameterId.ParamBrowRAngle,a.ParamBrowRForm=s.CubismDefaultParameterId.ParamBrowRForm,a.ParamBrowRX=s.CubismDefaultParameterId.ParamBrowRX,a.ParamBrowRY=s.CubismDefaultParameterId.ParamBrowRY,a.ParamBustX=s.CubismDefaultParameterId.ParamBustX,a.ParamBustY=s.CubismDefaultParameterId.ParamBustY,a.ParamCheek=s.CubismDefaultParameterId.ParamCheek,a.ParamEyeBallForm=s.CubismDefaultParameterId.ParamEyeBallForm,a.ParamEyeBallX=s.CubismDefaultParameterId.ParamEyeBallX,a.ParamEyeBallY=s.CubismDefaultParameterId.ParamEyeBallY,a.ParamEyeLOpen=s.CubismDefaultParameterId.ParamEyeLOpen,a.ParamEyeLSmile=s.CubismDefaultParameterId.ParamEyeLSmile,a.ParamEyeROpen=s.CubismDefaultParameterId.ParamEyeROpen,a.ParamEyeRSmile=s.CubismDefaultParameterId.ParamEyeRSmile,a.ParamHairBack=s.CubismDefaultParameterId.ParamHairBack,a.ParamHairFluffy=s.CubismDefaultParameterId.ParamHairFluffy,a.ParamHairFront=s.CubismDefaultParameterId.ParamHairFront,a.ParamHairSide=s.CubismDefaultParameterId.ParamHairSide,a.ParamHandL=s.CubismDefaultParameterId.ParamHandL,a.ParamHandR=s.CubismDefaultParameterId.ParamHandR,a.ParamMouthForm=s.CubismDefaultParameterId.ParamMouthForm,a.ParamMouthOpenY=s.CubismDefaultParameterId.ParamMouthOpenY,a.ParamNONE=s.CubismDefaultParameterId.ParamNONE,a.ParamShoulderY=s.CubismDefaultParameterId.ParamShoulderY,a.PartsArmLPrefix=s.CubismDefaultParameterId.PartsArmLPrefix,a.PartsArmPrefix=s.CubismDefaultParameterId.PartsArmPrefix,a.PartsArmRPrefix=s.CubismDefaultParameterId.PartsArmRPrefix,a.PartsIdCore=s.CubismDefaultParameterId.PartsIdCore},4468:function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.CSM_LOG_LEVEL=e.CSM_LOG_LEVEL_OFF=e.CSM_LOG_LEVEL_ERROR=e.CSM_LOG_LEVEL_WARNING=e.CSM_LOG_LEVEL_INFO=e.CSM_LOG_LEVEL_DEBUG=e.CSM_LOG_LEVEL_VERBOSE=void 0,e.CSM_LOG_LEVEL_VERBOSE=0,e.CSM_LOG_LEVEL_DEBUG=1,e.CSM_LOG_LEVEL_INFO=2,e.CSM_LOG_LEVEL_WARNING=3,e.CSM_LOG_LEVEL_ERROR=4,e.CSM_LOG_LEVEL_OFF=5,e.CSM_LOG_LEVEL=e.CSM_LOG_LEVEL_VERBOSE},1687:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&o(e,t,i);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismModelSettingJson=void 0;var u,l=i(8496),h=i(3165),c=i(8282),p=i(7205),d="FileReferences",g="UserData",m="Name",_="File",f="Ids",y="Sound",v="FadeInTime",b="FadeOutTime",C="LipSync",S="EyeBlink";!function(t){t[t.FrequestNode_Groups=0]="FrequestNode_Groups",t[t.FrequestNode_Moc=1]="FrequestNode_Moc",t[t.FrequestNode_Motions=2]="FrequestNode_Motions",t[t.FrequestNode_Expressions=3]="FrequestNode_Expressions",t[t.FrequestNode_Textures=4]="FrequestNode_Textures",t[t.FrequestNode_Physics=5]="FrequestNode_Physics",t[t.FrequestNode_Pose=6]="FrequestNode_Pose",t[t.FrequestNode_HitAreas=7]="FrequestNode_HitAreas"}(u||(u={}));var P=function(t){function e(e,i){var r=t.call(this)||this;return r._json=p.CubismJson.create(e,i),r._json&&(r._jsonValue=new c.csmVector,r._jsonValue.pushBack(r._json.getRoot().getValueByString("Groups")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Moc")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Motions")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Expressions")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Textures")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Physics")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Pose")),r._jsonValue.pushBack(r._json.getRoot().getValueByString("HitAreas"))),r}return n(e,t),e.prototype.release=function(){p.CubismJson.delete(this._json),this._jsonValue=null},e.prototype.GetJson=function(){return this._json},e.prototype.getModelFileName=function(){return this.isExistModelFile()?this._jsonValue.at(u.FrequestNode_Moc).getRawString():""},e.prototype.getTextureCount=function(){return this.isExistTextureFiles()?this._jsonValue.at(u.FrequestNode_Textures).getSize():0},e.prototype.getTextureDirectory=function(){return this._jsonValue.at(u.FrequestNode_Textures).getRawString()},e.prototype.getTextureFileName=function(t){return this._jsonValue.at(u.FrequestNode_Textures).getValueByIndex(t).getRawString()},e.prototype.getHitAreasCount=function(){return this.isExistHitAreas()?this._jsonValue.at(u.FrequestNode_HitAreas).getSize():0},e.prototype.getHitAreaId=function(t){return h.CubismFramework.getIdManager().getId(this._jsonValue.at(u.FrequestNode_HitAreas).getValueByIndex(t).getValueByString("Id").getRawString())},e.prototype.getHitAreaName=function(t){return this._jsonValue.at(u.FrequestNode_HitAreas).getValueByIndex(t).getValueByString(m).getRawString()},e.prototype.getPhysicsFileName=function(){return this.isExistPhysicsFile()?this._jsonValue.at(u.FrequestNode_Physics).getRawString():""},e.prototype.getPoseFileName=function(){return this.isExistPoseFile()?this._jsonValue.at(u.FrequestNode_Pose).getRawString():""},e.prototype.getExpressionCount=function(){return this.isExistExpressionFile()?this._jsonValue.at(u.FrequestNode_Expressions).getSize():0},e.prototype.getExpressionName=function(t){return this._jsonValue.at(u.FrequestNode_Expressions).getValueByIndex(t).getValueByString(m).getRawString()},e.prototype.getExpressionFileName=function(t){return this._jsonValue.at(u.FrequestNode_Expressions).getValueByIndex(t).getValueByString(_).getRawString()},e.prototype.getMotionGroupCount=function(){return this.isExistMotionGroups()?this._jsonValue.at(u.FrequestNode_Motions).getKeys().getSize():0},e.prototype.getMotionGroupName=function(t){return this.isExistMotionGroups()?this._jsonValue.at(u.FrequestNode_Motions).getKeys().at(t):null},e.prototype.getMotionCount=function(t){return this.isExistMotionGroupName(t)?this._jsonValue.at(u.FrequestNode_Motions).getValueByString(t).getSize():0},e.prototype.getMotionFileName=function(t,e){return this.isExistMotionGroupName(t)?this._jsonValue.at(u.FrequestNode_Motions).getValueByString(t).getValueByIndex(e).getValueByString(_).getRawString():""},e.prototype.getMotionSoundFileName=function(t,e){return this.isExistMotionSoundFile(t,e)?this._jsonValue.at(u.FrequestNode_Motions).getValueByString(t).getValueByIndex(e).getValueByString(y).getRawString():""},e.prototype.getMotionFadeInTimeValue=function(t,e){return this.isExistMotionFadeIn(t,e)?this._jsonValue.at(u.FrequestNode_Motions).getValueByString(t).getValueByIndex(e).getValueByString(v).toFloat():-1},e.prototype.getMotionFadeOutTimeValue=function(t,e){return this.isExistMotionFadeOut(t,e)?this._jsonValue.at(u.FrequestNode_Motions).getValueByString(t).getValueByIndex(e).getValueByString(b).toFloat():-1},e.prototype.getUserDataFile=function(){return this.isExistUserDataFile()?this._json.getRoot().getValueByString(d).getValueByString(g).getRawString():""},e.prototype.getLayoutMap=function(t){var e=this._json.getRoot().getValueByString("Layout").getMap();if(null==e)return!1;for(var i=!1,r=e.begin();r.notEqual(e.end());r.preIncrement())t.setValue(r.ptr().first,r.ptr().second.toFloat()),i=!0;return i},e.prototype.getEyeBlinkParameterCount=function(){if(!this.isExistEyeBlinkParameters())return 0;for(var t=0,e=0;e<this._jsonValue.at(u.FrequestNode_Groups).getSize();e++){var i=this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(e);if(!i.isNull()&&!i.isError()&&i.getValueByString(m).getRawString()==S){t=i.getValueByString(f).getVector().getSize();break}}return t},e.prototype.getEyeBlinkParameterId=function(t){if(!this.isExistEyeBlinkParameters())return null;for(var e=0;e<this._jsonValue.at(u.FrequestNode_Groups).getSize();e++){var i=this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(e);if(!i.isNull()&&!i.isError()&&i.getValueByString(m).getRawString()==S)return h.CubismFramework.getIdManager().getId(i.getValueByString(f).getValueByIndex(t).getRawString())}return null},e.prototype.getLipSyncParameterCount=function(){if(!this.isExistLipSyncParameters())return 0;for(var t=0,e=0;e<this._jsonValue.at(u.FrequestNode_Groups).getSize();e++){var i=this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(e);if(!i.isNull()&&!i.isError()&&i.getValueByString(m).getRawString()==C){t=i.getValueByString(f).getVector().getSize();break}}return t},e.prototype.getLipSyncParameterId=function(t){if(!this.isExistLipSyncParameters())return null;for(var e=0;e<this._jsonValue.at(u.FrequestNode_Groups).getSize();e++){var i=this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(e);if(!i.isNull()&&!i.isError()&&i.getValueByString(m).getRawString()==C)return h.CubismFramework.getIdManager().getId(i.getValueByString(f).getValueByIndex(t).getRawString())}return null},e.prototype.isExistModelFile=function(){var t=this._jsonValue.at(u.FrequestNode_Moc);return!t.isNull()&&!t.isError()},e.prototype.isExistTextureFiles=function(){var t=this._jsonValue.at(u.FrequestNode_Textures);return!t.isNull()&&!t.isError()},e.prototype.isExistHitAreas=function(){var t=this._jsonValue.at(u.FrequestNode_HitAreas);return!t.isNull()&&!t.isError()},e.prototype.isExistPhysicsFile=function(){var t=this._jsonValue.at(u.FrequestNode_Physics);return!t.isNull()&&!t.isError()},e.prototype.isExistPoseFile=function(){var t=this._jsonValue.at(u.FrequestNode_Pose);return!t.isNull()&&!t.isError()},e.prototype.isExistExpressionFile=function(){var t=this._jsonValue.at(u.FrequestNode_Expressions);return!t.isNull()&&!t.isError()},e.prototype.isExistMotionGroups=function(){var t=this._jsonValue.at(u.FrequestNode_Motions);return!t.isNull()&&!t.isError()},e.prototype.isExistMotionGroupName=function(t){var e=this._jsonValue.at(u.FrequestNode_Motions).getValueByString(t);return!e.isNull()&&!e.isError()},e.prototype.isExistMotionSoundFile=function(t,e){var i=this._jsonValue.at(u.FrequestNode_Motions).getValueByString(t).getValueByIndex(e).getValueByString(y);return!i.isNull()&&!i.isError()},e.prototype.isExistMotionFadeIn=function(t,e){var i=this._jsonValue.at(u.FrequestNode_Motions).getValueByString(t).getValueByIndex(e).getValueByString(v);return!i.isNull()&&!i.isError()},e.prototype.isExistMotionFadeOut=function(t,e){var i=this._jsonValue.at(u.FrequestNode_Motions).getValueByString(t).getValueByIndex(e).getValueByString(b);return!i.isNull()&&!i.isError()},e.prototype.isExistUserDataFile=function(){var t=this._json.getRoot().getValueByString(d).getValueByString(g);return!t.isNull()&&!t.isError()},e.prototype.isExistEyeBlinkParameters=function(){if(this._jsonValue.at(u.FrequestNode_Groups).isNull()||this._jsonValue.at(u.FrequestNode_Groups).isError())return!1;for(var t=0;t<this._jsonValue.at(u.FrequestNode_Groups).getSize();++t)if(this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(t).getValueByString(m).getRawString()==S)return!0;return!1},e.prototype.isExistLipSyncParameters=function(){if(this._jsonValue.at(u.FrequestNode_Groups).isNull()||this._jsonValue.at(u.FrequestNode_Groups).isError())return!1;for(var t=0;t<this._jsonValue.at(u.FrequestNode_Groups).getSize();++t)if(this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(t).getValueByString(m).getRawString()==C)return!0;return!1},e}(l.ICubismModelSetting);e.CubismModelSettingJson=P;var M=s(i(1687));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismModelSettingJson=M.CubismModelSettingJson},7377:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.BreathParameterData=e.CubismBreath=void 0;var a=function(){function t(){this._currentTime=0}return t.create=function(){return new t},t.delete=function(t){null!=t&&(t=null)},t.prototype.setParameters=function(t){this._breathParameters=t},t.prototype.getParameters=function(){return this._breathParameters},t.prototype.updateParameters=function(t,e){this._currentTime+=e;for(var i=2*this._currentTime*3.14159,r=0;r<this._breathParameters.getSize();++r){var n=this._breathParameters.at(r);t.addParameterValueById(n.parameterId,n.offset+n.peak*Math.sin(i/n.cycle),n.weight)}},t}();e.CubismBreath=a;e.BreathParameterData=function(t,e,i,r,n){this.parameterId=null==t?null:t,this.offset=null==e?0:e,this.peak=null==i?0:i,this.cycle=null==r?0:r,this.weight=null==n?0:n};var s,u=o(i(7377));(s=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).BreathParameterData=u.BreathParameterData,s.CubismBreath=u.CubismBreath},2809:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.EyeState=e.CubismEyeBlink=void 0;var a,s=i(8282),u=function(){function t(t){if(this._blinkingState=a.EyeState_First,this._nextBlinkingTime=0,this._stateStartTimeSeconds=0,this._blinkingIntervalSeconds=4,this._closingSeconds=.1,this._closedSeconds=.05,this._openingSeconds=.15,this._userTimeSeconds=0,this._parameterIds=new s.csmVector,null!=t)for(var e=0;e<t.getEyeBlinkParameterCount();++e)this._parameterIds.pushBack(t.getEyeBlinkParameterId(e))}return t.create=function(e){return void 0===e&&(e=null),new t(e)},t.delete=function(t){null!=t&&(t=null)},t.prototype.setBlinkingInterval=function(t){this._blinkingIntervalSeconds=t},t.prototype.setBlinkingSetting=function(t,e,i){this._closingSeconds=t,this._closedSeconds=e,this._openingSeconds=i},t.prototype.setParameterIds=function(t){this._parameterIds=t},t.prototype.getParameterIds=function(){return this._parameterIds},t.prototype.updateParameters=function(e,i){var r;this._userTimeSeconds+=i;var n=0;switch(this._blinkingState){case a.EyeState_Closing:(n=(this._userTimeSeconds-this._stateStartTimeSeconds)/this._closingSeconds)>=1&&(n=1,this._blinkingState=a.EyeState_Closed,this._stateStartTimeSeconds=this._userTimeSeconds),r=1-n;break;case a.EyeState_Closed:(n=(this._userTimeSeconds-this._stateStartTimeSeconds)/this._closedSeconds)>=1&&(this._blinkingState=a.EyeState_Opening,this._stateStartTimeSeconds=this._userTimeSeconds),r=0;break;case a.EyeState_Opening:(n=(this._userTimeSeconds-this._stateStartTimeSeconds)/this._openingSeconds)>=1&&(n=1,this._blinkingState=a.EyeState_Interval,this._nextBlinkingTime=this.determinNextBlinkingTiming()),r=n;break;case a.EyeState_Interval:this._nextBlinkingTime<this._userTimeSeconds&&(this._blinkingState=a.EyeState_Closing,this._stateStartTimeSeconds=this._userTimeSeconds),r=1;break;case a.EyeState_First:default:this._blinkingState=a.EyeState_Interval,this._nextBlinkingTime=this.determinNextBlinkingTiming(),r=1}t.CloseIfZero||(r=-r);for(var o=0;o<this._parameterIds.getSize();++o)e.setParameterValueById(this._parameterIds.at(o),r)},t.prototype.determinNextBlinkingTiming=function(){var t=Math.random();return this._userTimeSeconds+t*(2*this._blinkingIntervalSeconds-1)},t.CloseIfZero=!0,t}();e.CubismEyeBlink=u,function(t){t[t.EyeState_First=0]="EyeState_First",t[t.EyeState_Interval=1]="EyeState_Interval",t[t.EyeState_Closing=2]="EyeState_Closing",t[t.EyeState_Closed=3]="EyeState_Closed",t[t.EyeState_Opening=4]="EyeState_Opening"}(a=e.EyeState||(e.EyeState={}));var l,h=o(i(2809));(l=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismEyeBlink=h.CubismEyeBlink,l.EyeState=h.EyeState},5185:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.PartData=e.CubismPose=void 0;var a=i(3165),s=i(8282),u=i(7205),l="FadeInTime",h="Link",c=function(){function t(){this._fadeTimeSeconds=.5,this._lastModel=null,this._partGroups=new s.csmVector,this._partGroupCounts=new s.csmVector}return t.create=function(e,i){var r=new t,n=u.CubismJson.create(e,i),o=n.getRoot();o.getValueByString(l).isNull()||(r._fadeTimeSeconds=o.getValueByString(l).toFloat(.5),r._fadeTimeSeconds<=0&&(r._fadeTimeSeconds=.5));for(var s=o.getValueByString("Groups"),c=s.getSize(),d=0;d<c;++d){for(var g=s.getValueByIndex(d),m=g.getSize(),_=0,f=0;f<m;++f){var y=g.getValueByIndex(f),v=new p,b=a.CubismFramework.getIdManager().getId(y.getValueByString("Id").getRawString());if(v.partId=b,!y.getValueByString(h).isNull())for(var C=y.getValueByString(h),S=C.getSize(),P=0;P<S;++P){var M=new p,x=a.CubismFramework.getIdManager().getId(C.getValueByIndex(P).getString());M.partId=x,v.link.pushBack(M)}r._partGroups.pushBack(v.clone()),++_}r._partGroupCounts.pushBack(_)}return u.CubismJson.delete(n),r},t.delete=function(t){null!=t&&(t=null)},t.prototype.updateParameters=function(t,e){t!=this._lastModel&&this.reset(t),this._lastModel=t,e<0&&(e=0);for(var i=0,r=0;r<this._partGroupCounts.getSize();r++){var n=this._partGroupCounts.at(r);this.doFade(t,e,i,n),i+=n}this.copyPartOpacities(t)},t.prototype.reset=function(t){for(var e=0,i=0;i<this._partGroupCounts.getSize();++i){for(var r=this._partGroupCounts.at(i),n=e;n<e+r;++n){this._partGroups.at(n).initialize(t);var o=this._partGroups.at(n).partIndex,a=this._partGroups.at(n).parameterIndex;if(!(o<0)){t.setPartOpacityByIndex(o,n==e?1:0),t.setParameterValueByIndex(a,n==e?1:0);for(var s=0;s<this._partGroups.at(n).link.getSize();++s)this._partGroups.at(n).link.at(s).initialize(t)}}e+=r}},t.prototype.copyPartOpacities=function(t){for(var e=0;e<this._partGroups.getSize();++e){var i=this._partGroups.at(e);if(0!=i.link.getSize())for(var r=this._partGroups.at(e).partIndex,n=t.getPartOpacityByIndex(r),o=0;o<i.link.getSize();++o){var a=i.link.at(o).partIndex;a<0||t.setPartOpacityByIndex(a,n)}}},t.prototype.doFade=function(t,e,i,r){for(var n=-1,o=1,a=i;a<i+r;++a){var s=this._partGroups.at(a).partIndex,u=this._partGroups.at(a).parameterIndex;if(t.getParameterValueByIndex(u)>.001){if(n>=0)break;n=a,o=t.getPartOpacityByIndex(s),(o+=e/this._fadeTimeSeconds)>1&&(o=1)}}for(n<0&&(n=0,o=1),a=i;a<i+r;++a){var l=this._partGroups.at(a).partIndex;if(n==a)t.setPartOpacityByIndex(l,o);else{var h=t.getPartOpacityByIndex(l),c=void 0;(1-(c=o<.5?-.5*o/.5+1:.5*(1-o)/.5))*(1-o)>.15&&(c=1-.15/(1-o)),h>c&&(h=c),t.setPartOpacityByIndex(l,h)}}},t}();e.CubismPose=c;var p=function(){function t(t){if(this.parameterIndex=0,this.partIndex=0,this.link=new s.csmVector,null!=t){this.partId=t.partId;for(var e=t.link.begin();e.notEqual(t.link.end());e.preIncrement())this.link.pushBack(e.ptr().clone())}}return t.prototype.assignment=function(t){this.partId=t.partId;for(var e=t.link.begin();e.notEqual(t.link.end());e.preIncrement())this.link.pushBack(e.ptr().clone());return this},t.prototype.initialize=function(t){this.parameterIndex=t.getParameterIndex(this.partId),this.partIndex=t.getPartIndex(this.partId),t.setParameterValueByIndex(this.parameterIndex,1)},t.prototype.clone=function(){var e=new t;e.partId=this.partId,e.parameterIndex=this.parameterIndex,e.partIndex=this.partIndex,e.link=new s.csmVector;for(var i=this.link.begin();i.notEqual(this.link.end());i.increment())e.link.pushBack(i.ptr().clone());return e},t}();e.PartData=p;var d,g=o(i(5185));(d=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismPose=g.CubismPose,d.PartData=g.PartData},8496:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.ICubismModelSetting=void 0;e.ICubismModelSetting=function(){};var a=o(i(8496));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).ICubismModelSetting=a.ICubismModelSetting},1012:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismId=void 0;var a=i(53),s=function(){function t(t){this._id="string"!=typeof t?t:new a.csmString(t)}return t.prototype.getString=function(){return this._id},t.prototype.isEqual=function(e){return"string"==typeof e?this._id.isEqual(e):e instanceof a.csmString?this._id.isEqual(e.s):e instanceof t&&this._id.isEqual(e._id.s)},t.prototype.isNotEqual=function(e){return"string"==typeof e?!this._id.isEqual(e):e instanceof a.csmString?!this._id.isEqual(e.s):e instanceof t&&!this._id.isEqual(e._id.s)},t}();e.CubismId=s;var u=o(i(1012));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismId=u.CubismId},4551:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismIdManager=void 0;var a=i(8282),s=i(1012),u=function(){function t(){this._ids=new a.csmVector}return t.prototype.release=function(){for(var t=0;t<this._ids.getSize();++t)this._ids.set(t,void 0);this._ids=null},t.prototype.registerIds=function(t){for(var e=0;e<t.length;e++)this.registerId(t[e])},t.prototype.registerId=function(t){var e=null;return"string"!=typeof t?this.registerId(t.s):(null!=(e=this.findId(t))||(e=new s.CubismId(t),this._ids.pushBack(e)),e)},t.prototype.getId=function(t){return this.registerId(t)},t.prototype.isExist=function(t){return"string"==typeof t?null!=this.findId(t):this.isExist(t.s)},t.prototype.findId=function(t){for(var e=0;e<this._ids.getSize();++e)if(this._ids.at(e).getString().isEqual(t))return this._ids.at(e);return null},t}();e.CubismIdManager=u;var l=o(i(4551));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismIdManager=l.CubismIdManager},3165:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.LogLevel=e.Option=e.CubismFramework=e.csmDelete=e.Constant=e.strtod=void 0;var a=i(4551),s=i(2700),u=i(9372),l=i(7205);e.strtod=function(t,e){for(var i=0,r=1;;r++){var n=t.slice(r-1,r);if("e"!=n&&"-"!=n&&"E"!=n){var o=t.substring(0,r),a=Number(o);if(isNaN(a))break;i=r}}var s=parseFloat(t);return isNaN(s)&&(s=NaN),e[0]=t.slice(i),s};var h=!1,c=!1,p=null,d=null;e.Constant=Object.freeze({vertexOffset:0,vertexStep:2}),e.csmDelete=function(t){t&&(t=void 0)};var g=function(){function t(){}return t.startUp=function(t){if(void 0===t&&(t=null),h)return(0,u.CubismLogInfo)("CubismFramework.startUp() is already done."),h;if(null!=(p=t)&&Live2DCubismCore.Logging.csmSetLogFunction(p.logFunction),h=!0){var e=Live2DCubismCore.Version.csmGetVersion(),i=(4278190080&e)>>24,r=(16711680&e)>>16,n=65535&e,o=e;(0,u.CubismLogInfo)("Live2D Cubism Core version: {0}.{1}.{2} ({3})",("00"+i).slice(-2),("00"+r).slice(-2),("0000"+n).slice(-4),o)}return(0,u.CubismLogInfo)("CubismFramework.startUp() is complete."),h},t.cleanUp=function(){h=!1,c=!1,p=null,d=null},t.initialize=function(){(0,u.CSM_ASSERT)(h),h?c?(0,u.CubismLogWarning)("CubismFramework.initialize() skipped, already initialized."):(l.Value.staticInitializeNotForClientCall(),d=new a.CubismIdManager,c=!0,(0,u.CubismLogInfo)("CubismFramework.initialize() is complete.")):(0,u.CubismLogWarning)("CubismFramework is not started.")},t.dispose=function(){(0,u.CSM_ASSERT)(h),h?c?(l.Value.staticReleaseNotForClientCall(),d.release(),d=null,s.CubismRenderer.staticRelease(),c=!1,(0,u.CubismLogInfo)("CubismFramework.dispose() is complete.")):(0,u.CubismLogWarning)("CubismFramework.dispose() skipped, not initialized."):(0,u.CubismLogWarning)("CubismFramework is not started.")},t.isStarted=function(){return h},t.isInitialized=function(){return c},t.coreLogFunction=function(t){Live2DCubismCore.Logging.csmGetLogFunction()&&Live2DCubismCore.Logging.csmGetLogFunction()(t)},t.getLoggingLevel=function(){return null!=p?p.loggingLevel:m.LogLevel_Off},t.getIdManager=function(){return d},t}();e.CubismFramework=g;var m;e.Option=function(){},function(t){t[t.LogLevel_Verbose=0]="LogLevel_Verbose",t[t.LogLevel_Debug=1]="LogLevel_Debug",t[t.LogLevel_Info=2]="LogLevel_Info",t[t.LogLevel_Warning=3]="LogLevel_Warning",t[t.LogLevel_Error=4]="LogLevel_Error",t[t.LogLevel_Off=5]="LogLevel_Off"}(m=e.LogLevel||(e.LogLevel={}));var _,f=o(i(3165));(_=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).Constant=f.Constant,_.csmDelete=f.csmDelete,_.CubismFramework=f.CubismFramework},5437:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismMath=void 0;var a=i(8241),s=function(){function t(){}return t.range=function(t,e,i){return t<e?t=e:t>i&&(t=i),t},t.sin=function(t){return Math.sin(t)},t.cos=function(t){return Math.cos(t)},t.abs=function(t){return Math.abs(t)},t.sqrt=function(t){return Math.sqrt(t)},t.cbrt=function(t){if(0===t)return t;var e,i=t,r=i<0;return r&&(i=-i),e=i===1/0?1/0:(i/((e=Math.exp(Math.log(i)/3))*e)+2*e)/3,r?-e:e},t.getEasingSine=function(t){return t<0?0:t>1?1:.5-.5*this.cos(t*Math.PI)},t.max=function(t,e){return t>e?t:e},t.min=function(t,e){return t>e?e:t},t.degreesToRadian=function(t){return t/180*Math.PI},t.radianToDegrees=function(t){return 180*t/Math.PI},t.directionToRadian=function(t,e){for(var i=Math.atan2(e.y,e.x)-Math.atan2(t.y,t.x);i<-Math.PI;)i+=2*Math.PI;for(;i>Math.PI;)i-=2*Math.PI;return i},t.directionToDegrees=function(t,e){var i=this.directionToRadian(t,e),r=this.radianToDegrees(i);return e.x-t.x>0&&(r=-r),r},t.radianToDirection=function(t){var e=new a.CubismVector2;return e.x=this.sin(t),e.y=this.cos(t),e},t.quadraticEquation=function(e,i,r){return this.abs(e)<t.Epsilon?this.abs(i)<t.Epsilon?-r:-r/i:-(i+this.sqrt(i*i-4*e*r))/(2*e)},t.cardanoAlgorithmForBezier=function(e,i,r,n){if(this.sqrt(e)<t.Epsilon)return this.range(this.quadraticEquation(i,r,n),0,1);var o=i/e,a=r/e,s=(3*a-o*o)/3,u=s/3,l=(2*o*o*o-9*o*a+n/e*27)/27,h=l/2,c=h*h+u*u*u,p=.51;if(c<0){var d=-s/3,g=d*d*d,m=this.sqrt(g),_=-l/(2*m),f=this.range(_,-1,1),y=Math.acos(f),v=2*this.cbrt(m),b=v*this.cos(y/3)-o/3;if(this.abs(b-.5)<p)return this.range(b,0,1);var C=v*this.cos((y+2*Math.PI)/3)-o/3;if(this.abs(C-.5)<p)return this.range(C,0,1);var S=v*this.cos((y+4*Math.PI)/3)-o/3;return this.range(S,0,1)}if(0==c){var P,M=2*(P=h<0?this.cbrt(-h):-this.cbrt(h))-o/3;return this.abs(M-.5)<p?this.range(M,0,1):(C=-P-o/3,this.range(C,0,1))}var x=this.sqrt(c),w=this.cbrt(x-h)-this.cbrt(x+h)-o/3;return this.range(w,0,1)},t.Epsilon=1e-5,t}();e.CubismMath=s;var u=o(i(5437));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismMath=u.CubismMath},6683:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismMatrix44=void 0;var a=function(){function t(){this._tr=new Float32Array(16),this.loadIdentity()}return t.multiply=function(t,e,i){for(var r=new Float32Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),n=0;n<4;++n)for(var o=0;o<4;++o)for(var a=0;a<4;++a)r[o+4*n]+=t[a+4*n]*e[o+4*a];for(n=0;n<16;++n)i[n]=r[n]},t.prototype.loadIdentity=function(){var t=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);this.setMatrix(t)},t.prototype.setMatrix=function(t){for(var e=0;e<16;++e)this._tr[e]=t[e]},t.prototype.getArray=function(){return this._tr},t.prototype.getScaleX=function(){return this._tr[0]},t.prototype.getScaleY=function(){return this._tr[5]},t.prototype.getTranslateX=function(){return this._tr[12]},t.prototype.getTranslateY=function(){return this._tr[13]},t.prototype.transformX=function(t){return this._tr[0]*t+this._tr[12]},t.prototype.transformY=function(t){return this._tr[5]*t+this._tr[13]},t.prototype.invertTransformX=function(t){return(t-this._tr[12])/this._tr[0]},t.prototype.invertTransformY=function(t){return(t-this._tr[13])/this._tr[5]},t.prototype.translateRelative=function(e,i){var r=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,e,i,0,1]);t.multiply(r,this._tr,this._tr)},t.prototype.translate=function(t,e){this._tr[12]=t,this._tr[13]=e},t.prototype.translateX=function(t){this._tr[12]=t},t.prototype.translateY=function(t){this._tr[13]=t},t.prototype.scaleRelative=function(e,i){var r=new Float32Array([e,0,0,0,0,i,0,0,0,0,1,0,0,0,0,1]);t.multiply(r,this._tr,this._tr)},t.prototype.scale=function(t,e){this._tr[0]=t,this._tr[5]=e},t.prototype.multiplyByMatrix=function(e){t.multiply(e.getArray(),this._tr,this._tr)},t.prototype.clone=function(){for(var e=new t,i=0;i<this._tr.length;i++)e._tr[i]=this._tr[i];return e},t}();e.CubismMatrix44=a;var s=o(i(6683));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismMatrix44=s.CubismMatrix44},9006:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&o(e,t,i);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismModelMatrix=void 0;var u=function(t){function e(e,i){var r=t.call(this)||this;return r._width=void 0!==e?e:0,r._height=void 0!==i?i:0,r.setHeight(2),r}return n(e,t),e.prototype.setWidth=function(t){var e=t/this._width,i=e;this.scale(e,i)},e.prototype.setHeight=function(t){var e=t/this._height,i=e;this.scale(e,i)},e.prototype.setPosition=function(t,e){this.translate(t,e)},e.prototype.setCenterPosition=function(t,e){this.centerX(t),this.centerY(e)},e.prototype.top=function(t){this.setY(t)},e.prototype.bottom=function(t){var e=this._height*this.getScaleY();this.translateY(t-e)},e.prototype.left=function(t){this.setX(t)},e.prototype.right=function(t){var e=this._width*this.getScaleX();this.translateX(t-e)},e.prototype.centerX=function(t){var e=this._width*this.getScaleX();this.translateX(t-e/2)},e.prototype.setX=function(t){this.translateX(t)},e.prototype.centerY=function(t){var e=this._height*this.getScaleY();this.translateY(t-e/2)},e.prototype.setY=function(t){this.translateY(t)},e.prototype.setupFromLayout=function(t){for(var e=t.begin();e.notEqual(t.end());e.preIncrement()){var i=e.ptr().first,r=e.ptr().second;"width"==i?this.setWidth(r):"height"==i&&this.setHeight(r)}for(e=t.begin();e.notEqual(t.end());e.preIncrement())i=e.ptr().first,r=e.ptr().second,"x"==i?this.setX(r):"y"==i?this.setY(r):"center_x"==i?this.centerX(r):"center_y"==i?this.centerY(r):"top"==i?this.top(r):"bottom"==i?this.bottom(r):"left"==i?this.left(r):"right"==i&&this.right(r)},e}(i(6683).CubismMatrix44);e.CubismModelMatrix=u;var l=s(i(9006));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismModelMatrix=l.CubismModelMatrix},7676:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismTargetPoint=void 0;var a=i(5437),s=function(){function t(){this._faceTargetX=0,this._faceTargetY=0,this._faceX=0,this._faceY=0,this._faceVX=0,this._faceVY=0,this._lastTimeSeconds=0,this._userTimeSeconds=0}return t.prototype.update=function(t){this._userTimeSeconds+=t;var e=4/30;if(0!=this._lastTimeSeconds){var i=30*(this._userTimeSeconds-this._lastTimeSeconds);this._lastTimeSeconds=this._userTimeSeconds;var r=i*e/4.5,n=this._faceTargetX-this._faceX,o=this._faceTargetY-this._faceY;if(!(a.CubismMath.abs(n)<=.01&&a.CubismMath.abs(o)<=.01)){var s=a.CubismMath.sqrt(n*n+o*o),u=e*o/s,l=e*n/s-this._faceVX,h=u-this._faceVY,c=a.CubismMath.sqrt(l*l+h*h);(c<-r||c>r)&&(l*=r/c,h*=r/c),this._faceVX+=l,this._faceVY+=h;var p=.5*(a.CubismMath.sqrt(r*r+16*r*s-8*r*s)-r),d=a.CubismMath.sqrt(this._faceVX*this._faceVX+this._faceVY*this._faceVY);d>p&&(this._faceVX*=p/d,this._faceVY*=p/d),this._faceX+=this._faceVX,this._faceY+=this._faceVY}}else this._lastTimeSeconds=this._userTimeSeconds},t.prototype.getX=function(){return this._faceX},t.prototype.getY=function(){return this._faceY},t.prototype.set=function(t,e){this._faceTargetX=t,this._faceTargetY=e},t}();e.CubismTargetPoint=s;var u=o(i(7676));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismTargetPoint=u.CubismTargetPoint},8241:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismVector2=void 0;var a=function(){function t(t,e){this.x=t,this.y=e,this.x=null==t?0:t,this.y=null==e?0:e}return t.prototype.add=function(e){var i=new t(0,0);return i.x=this.x+e.x,i.y=this.y+e.y,i},t.prototype.substract=function(e){var i=new t(0,0);return i.x=this.x-e.x,i.y=this.y-e.y,i},t.prototype.multiply=function(e){var i=new t(0,0);return i.x=this.x*e.x,i.y=this.y*e.y,i},t.prototype.multiplyByScaler=function(e){return this.multiply(new t(e,e))},t.prototype.division=function(e){var i=new t(0,0);return i.x=this.x/e.x,i.y=this.y/e.y,i},t.prototype.divisionByScalar=function(e){return this.division(new t(e,e))},t.prototype.getLength=function(){return Math.sqrt(this.x*this.x+this.y*this.y)},t.prototype.getDistanceWith=function(t){return Math.sqrt((this.x-t.x)*(this.x-t.x)+(this.y-t.y)*(this.y-t.y))},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y},t.prototype.normalize=function(){var t=Math.pow(this.x*this.x+this.y*this.y,.5);this.x=this.x/t,this.y=this.y/t},t.prototype.isEqual=function(t){return this.x==t.x&&this.y==t.y},t.prototype.isNotEqual=function(t){return!this.isEqual(t)},t}();e.CubismVector2=a;var s=o(i(8241));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismVector2=s.CubismVector2},6502:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&o(e,t,i);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismViewMatrix=void 0;var u=i(6683),l=function(t){function e(){var e=t.call(this)||this;return e._screenLeft=0,e._screenRight=0,e._screenTop=0,e._screenBottom=0,e._maxLeft=0,e._maxRight=0,e._maxTop=0,e._maxBottom=0,e._maxScale=0,e._minScale=0,e}return n(e,t),e.prototype.adjustTranslate=function(t,e){this._tr[0]*this._maxLeft+(this._tr[12]+t)>this._screenLeft&&(t=this._screenLeft-this._tr[0]*this._maxLeft-this._tr[12]),this._tr[0]*this._maxRight+(this._tr[12]+t)<this._screenRight&&(t=this._screenRight-this._tr[0]*this._maxRight-this._tr[12]),this._tr[5]*this._maxTop+(this._tr[13]+e)<this._screenTop&&(e=this._screenTop-this._tr[5]*this._maxTop-this._tr[13]),this._tr[5]*this._maxBottom+(this._tr[13]+e)>this._screenBottom&&(e=this._screenBottom-this._tr[5]*this._maxBottom-this._tr[13]);var i=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,t,e,0,1]);u.CubismMatrix44.multiply(i,this._tr,this._tr)},e.prototype.adjustScale=function(t,e,i){var r=this.getMaxScale(),n=this.getMinScale(),o=i*this._tr[0];o<n?this._tr[0]>0&&(i=n/this._tr[0]):o>r&&this._tr[0]>0&&(i=r/this._tr[0]);var a=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,t,e,0,1]),s=new Float32Array([i,0,0,0,0,i,0,0,0,0,1,0,0,0,0,1]),l=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,-t,-e,0,1]);u.CubismMatrix44.multiply(l,this._tr,this._tr),u.CubismMatrix44.multiply(s,this._tr,this._tr),u.CubismMatrix44.multiply(a,this._tr,this._tr)},e.prototype.setScreenRect=function(t,e,i,r){this._screenLeft=t,this._screenRight=e,this._screenBottom=i,this._screenTop=r},e.prototype.setMaxScreenRect=function(t,e,i,r){this._maxLeft=t,this._maxRight=e,this._maxTop=r,this._maxBottom=i},e.prototype.setMaxScale=function(t){this._maxScale=t},e.prototype.setMinScale=function(t){this._minScale=t},e.prototype.getMaxScale=function(){return this._maxScale},e.prototype.getMinScale=function(){return this._minScale},e.prototype.isMaxScale=function(){return this.getScaleX()>=this._maxScale},e.prototype.isMinScale=function(){return this.getScaleX()<=this._minScale},e.prototype.getScreenLeft=function(){return this._screenLeft},e.prototype.getScreenRight=function(){return this._screenRight},e.prototype.getScreenBottom=function(){return this._screenBottom},e.prototype.getScreenTop=function(){return this._screenTop},e.prototype.getMaxLeft=function(){return this._maxLeft},e.prototype.getMaxRight=function(){return this._maxRight},e.prototype.getMaxBottom=function(){return this._maxBottom},e.prototype.getMaxTop=function(){return this._maxTop},e}(u.CubismMatrix44);e.CubismViewMatrix=l;var h=s(i(6502));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismViewMatrix=h.CubismViewMatrix},79:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismMoc=void 0;var a=i(9372),s=i(192),u=function(){function t(t){this._moc=t,this._modelCount=0}return t.create=function(e){var i=null,r=Live2DCubismCore.Moc.fromArrayBuffer(e);return r&&(i=new t(r)),i},t.delete=function(t){t._moc._release(),t._moc=null,t=null},t.prototype.createModel=function(){var t=null,e=Live2DCubismCore.Model.fromMoc(this._moc);return e&&((t=new s.CubismModel(e)).initialize(),++this._modelCount),t},t.prototype.deleteModel=function(t){null!=t&&(t.release(),t=null,--this._modelCount)},t.prototype.release=function(){(0,a.CSM_ASSERT)(0==this._modelCount),this._moc._release(),this._moc=null},t}();e.CubismMoc=u;var l=o(i(79));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismMoc=l.CubismMoc},192:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismModel=void 0;var a=i(3165),s=i(2700),u=i(9474),l=i(8282),h=i(9372),c=function(){function t(t){this._model=t,this._parameterValues=null,this._parameterMaximumValues=null,this._parameterMinimumValues=null,this._partOpacities=null,this._savedParameters=new l.csmVector,this._parameterIds=new l.csmVector,this._drawableIds=new l.csmVector,this._partIds=new l.csmVector,this._notExistPartId=new u.csmMap,this._notExistParameterId=new u.csmMap,this._notExistParameterValues=new u.csmMap,this._notExistPartOpacities=new u.csmMap}return t.prototype.update=function(){this._model.update(),this._model.drawables.resetDynamicFlags()},t.prototype.getCanvasWidth=function(){return null==this._model?0:this._model.canvasinfo.CanvasWidth/this._model.canvasinfo.PixelsPerUnit},t.prototype.getCanvasHeight=function(){return null==this._model?0:this._model.canvasinfo.CanvasHeight/this._model.canvasinfo.PixelsPerUnit},t.prototype.saveParameters=function(){for(var t=this._model.parameters.count,e=this._savedParameters.getSize(),i=0;i<t;++i)i<e?this._savedParameters.set(i,this._parameterValues[i]):this._savedParameters.pushBack(this._parameterValues[i])},t.prototype.getModel=function(){return this._model},t.prototype.getPartIndex=function(t){var e,i=this._model.parts.count;for(e=0;e<i;++e)if(t==this._partIds.at(e))return e;return this._notExistPartId.isExist(t)?this._notExistPartId.getValue(t):(e=i+this._notExistPartId.getSize(),this._notExistPartId.setValue(t,e),this._notExistPartOpacities.appendKey(e),e)},t.prototype.getPartCount=function(){return this._model.parts.count},t.prototype.setPartOpacityByIndex=function(t,e){this._notExistPartOpacities.isExist(t)?this._notExistPartOpacities.setValue(t,e):((0,h.CSM_ASSERT)(0<=t&&t<this.getPartCount()),this._partOpacities[t]=e)},t.prototype.setPartOpacityById=function(t,e){var i=this.getPartIndex(t);i<0||this.setPartOpacityByIndex(i,e)},t.prototype.getPartOpacityByIndex=function(t){return this._notExistPartOpacities.isExist(t)?this._notExistPartOpacities.getValue(t):((0,h.CSM_ASSERT)(0<=t&&t<this.getPartCount()),this._partOpacities[t])},t.prototype.getPartOpacityById=function(t){var e=this.getPartIndex(t);return e<0?0:this.getPartOpacityByIndex(e)},t.prototype.getParameterIndex=function(t){var e,i=this._model.parameters.count;for(e=0;e<i;++e)if(t==this._parameterIds.at(e))return e;return this._notExistParameterId.isExist(t)?this._notExistParameterId.getValue(t):(e=this._model.parameters.count+this._notExistParameterId.getSize(),this._notExistParameterId.setValue(t,e),this._notExistParameterValues.appendKey(e),e)},t.prototype.getParameterCount=function(){return this._model.parameters.count},t.prototype.getParameterMaximumValue=function(t){return this._model.parameters.maximumValues[t]},t.prototype.getParameterMinimumValue=function(t){return this._model.parameters.minimumValues[t]},t.prototype.getParameterDefaultValue=function(t){return this._model.parameters.defaultValues[t]},t.prototype.getParameterValueByIndex=function(t){return this._notExistParameterValues.isExist(t)?this._notExistParameterValues.getValue(t):((0,h.CSM_ASSERT)(0<=t&&t<this.getParameterCount()),this._parameterValues[t])},t.prototype.getParameterValueById=function(t){var e=this.getParameterIndex(t);return this.getParameterValueByIndex(e)},t.prototype.setParameterValueByIndex=function(t,e,i){void 0===i&&(i=1),this._notExistParameterValues.isExist(t)?this._notExistParameterValues.setValue(t,1==i?e:this._notExistParameterValues.getValue(t)*(1-i)+e*i):((0,h.CSM_ASSERT)(0<=t&&t<this.getParameterCount()),this._model.parameters.maximumValues[t]<e&&(e=this._model.parameters.maximumValues[t]),this._model.parameters.minimumValues[t]>e&&(e=this._model.parameters.minimumValues[t]),this._parameterValues[t]=1==i?e:this._parameterValues[t]=this._parameterValues[t]*(1-i)+e*i)},t.prototype.setParameterValueById=function(t,e,i){void 0===i&&(i=1);var r=this.getParameterIndex(t);this.setParameterValueByIndex(r,e,i)},t.prototype.addParameterValueByIndex=function(t,e,i){void 0===i&&(i=1),this.setParameterValueByIndex(t,this.getParameterValueByIndex(t)+e*i)},t.prototype.addParameterValueById=function(t,e,i){void 0===i&&(i=1);var r=this.getParameterIndex(t);this.addParameterValueByIndex(r,e,i)},t.prototype.multiplyParameterValueById=function(t,e,i){void 0===i&&(i=1);var r=this.getParameterIndex(t);this.multiplyParameterValueByIndex(r,e,i)},t.prototype.multiplyParameterValueByIndex=function(t,e,i){void 0===i&&(i=1),this.setParameterValueByIndex(t,this.getParameterValueByIndex(t)*(1+(e-1)*i))},t.prototype.getDrawableIndex=function(t){for(var e=this._model.drawables.count,i=0;i<e;++i)if(this._drawableIds.at(i)==t)return i;return-1},t.prototype.getDrawableCount=function(){return this._model.drawables.count},t.prototype.getDrawableId=function(t){var e=this._model.drawables.ids;return a.CubismFramework.getIdManager().getId(e[t])},t.prototype.getDrawableRenderOrders=function(){return this._model.drawables.renderOrders},t.prototype.getDrawableTextureIndices=function(t){return this._model.drawables.textureIndices[t]},t.prototype.getDrawableDynamicFlagVertexPositionsDidChange=function(t){var e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(e[t])},t.prototype.getDrawableVertexIndexCount=function(t){return this._model.drawables.indexCounts[t]},t.prototype.getDrawableVertexCount=function(t){return this._model.drawables.vertexCounts[t]},t.prototype.getDrawableVertices=function(t){return this.getDrawableVertexPositions(t)},t.prototype.getDrawableVertexIndices=function(t){return this._model.drawables.indices[t]},t.prototype.getDrawableVertexPositions=function(t){return this._model.drawables.vertexPositions[t]},t.prototype.getDrawableVertexUvs=function(t){return this._model.drawables.vertexUvs[t]},t.prototype.getDrawableOpacity=function(t){return this._model.drawables.opacities[t]},t.prototype.getDrawableCulling=function(t){var e=this._model.drawables.constantFlags;return!Live2DCubismCore.Utils.hasIsDoubleSidedBit(e[t])},t.prototype.getDrawableBlendMode=function(t){var e=this._model.drawables.constantFlags;return Live2DCubismCore.Utils.hasBlendAdditiveBit(e[t])?s.CubismBlendMode.CubismBlendMode_Additive:Live2DCubismCore.Utils.hasBlendMultiplicativeBit(e[t])?s.CubismBlendMode.CubismBlendMode_Multiplicative:s.CubismBlendMode.CubismBlendMode_Normal},t.prototype.getDrawableInvertedMaskBit=function(t){var e=this._model.drawables.constantFlags;return Live2DCubismCore.Utils.hasIsInvertedMaskBit(e[t])},t.prototype.getDrawableMasks=function(){return this._model.drawables.masks},t.prototype.getDrawableMaskCounts=function(){return this._model.drawables.maskCounts},t.prototype.isUsingMasking=function(){for(var t=0;t<this._model.drawables.count;++t)if(!(this._model.drawables.maskCounts[t]<=0))return!0;return!1},t.prototype.getDrawableDynamicFlagIsVisible=function(t){var e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasIsVisibleBit(e[t])},t.prototype.getDrawableDynamicFlagVisibilityDidChange=function(t){var e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasVisibilityDidChangeBit(e[t])},t.prototype.getDrawableDynamicFlagOpacityDidChange=function(t){var e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasOpacityDidChangeBit(e[t])},t.prototype.getDrawableDynamicFlagRenderOrderDidChange=function(t){var e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasRenderOrderDidChangeBit(e[t])},t.prototype.loadParameters=function(){var t=this._model.parameters.count,e=this._savedParameters.getSize();t>e&&(t=e);for(var i=0;i<t;++i)this._parameterValues[i]=this._savedParameters.at(i)},t.prototype.initialize=function(){(0,h.CSM_ASSERT)(this._model),this._parameterValues=this._model.parameters.values,this._partOpacities=this._model.parts.opacities,this._parameterMaximumValues=this._model.parameters.maximumValues,this._parameterMinimumValues=this._model.parameters.minimumValues;var t=this._model.parameters.ids,e=this._model.parameters.count;this._parameterIds.prepareCapacity(e);for(var i=0;i<e;++i)this._parameterIds.pushBack(a.CubismFramework.getIdManager().getId(t[i]));var r=this._model.parts.ids,n=this._model.parts.count;for(this._partIds.prepareCapacity(n),i=0;i<n;++i)this._partIds.pushBack(a.CubismFramework.getIdManager().getId(r[i]));var o=this._model.drawables.ids,s=this._model.drawables.count;for(this._drawableIds.prepareCapacity(s),i=0;i<s;++i)this._drawableIds.pushBack(a.CubismFramework.getIdManager().getId(o[i]))},t.prototype.release=function(){this._model.release(),this._model=null},t}();e.CubismModel=c;var p=o(i(192));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismModel=p.CubismModel},7704:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismModelUserData=e.CubismModelUserDataNode=void 0;var a=i(3165),s=i(53),u=i(8282),l=i(8931),h=function(){};e.CubismModelUserDataNode=h;var c=function(){function t(){this._userDataNodes=new u.csmVector,this._artMeshUserDataNode=new u.csmVector}return t.create=function(e,i){var r=new t;return r.parseUserData(e,i),r},t.delete=function(t){null!=t&&(t.release(),t=null)},t.prototype.getArtMeshUserDatas=function(){return this._artMeshUserDataNode},t.prototype.parseUserData=function(t,e){for(var i=new l.CubismModelUserDataJson(t,e),r=a.CubismFramework.getIdManager().getId("ArtMesh"),n=i.getUserDataCount(),o=0;o<n;o++){var u=new h;u.targetId=i.getUserDataId(o),u.targetType=a.CubismFramework.getIdManager().getId(i.getUserDataTargetType(o)),u.value=new s.csmString(i.getUserDataValue(o)),this._userDataNodes.pushBack(u),u.targetType==r&&this._artMeshUserDataNode.pushBack(u)}i.release(),i=void 0},t.prototype.release=function(){for(var t=0;t<this._userDataNodes.getSize();++t)this._userDataNodes.set(t,null);this._userDataNodes=null},t}();e.CubismModelUserData=c;var p,d=o(i(7704));(p=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismModelUserData=d.CubismModelUserData,p.CubismModelUserDataNode=d.CubismModelUserDataNode},8931:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismModelUserDataJson=void 0;var a=i(3165),s=i(7205),u="Meta",l="UserData",h=function(){function t(t,e){this._json=s.CubismJson.create(t,e)}return t.prototype.release=function(){s.CubismJson.delete(this._json)},t.prototype.getUserDataCount=function(){return this._json.getRoot().getValueByString(u).getValueByString("UserDataCount").toInt()},t.prototype.getTotalUserDataSize=function(){return this._json.getRoot().getValueByString(u).getValueByString("TotalUserDataSize").toInt()},t.prototype.getUserDataTargetType=function(t){return this._json.getRoot().getValueByString(l).getValueByIndex(t).getValueByString("Target").getRawString()},t.prototype.getUserDataId=function(t){return a.CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(l).getValueByIndex(t).getValueByString("Id").getRawString())},t.prototype.getUserDataValue=function(t){return this._json.getRoot().getValueByString(l).getValueByIndex(t).getValueByString("Value").getRawString()},t}();e.CubismModelUserDataJson=h;var c=o(i(8931));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismModelUserDataJson=c.CubismModelUserDataJson},2741:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismUserModel=void 0;var a=i(7377),s=i(2809),u=i(5185),l=i(3165),h=i(9006),c=i(7676),p=i(9009),d=i(3423),g=i(4197),m=i(8782),_=i(9562),f=i(9372),y=i(79),v=i(7704),b=function(){function t(){this.loadMotion=function(t,e,i,r){return d.CubismMotion.create(t,e,r)},this._moc=null,this._model=null,this._motionManager=null,this._expressionManager=null,this._eyeBlink=null,this._breath=null,this._modelMatrix=null,this._pose=null,this._dragManager=null,this._physics=null,this._modelUserData=null,this._initialized=!1,this._updating=!1,this._opacity=1,this._lipsync=!0,this._lastLipSyncValue=0,this._dragX=0,this._dragY=0,this._accelerationX=0,this._accelerationY=0,this._accelerationZ=0,this._debugMode=!1,this._renderer=null,this._motionManager=new g.CubismMotionManager,this._motionManager.setEventCallback(t.cubismDefaultMotionEventCallback,this),this._expressionManager=new g.CubismMotionManager,this._dragManager=new c.CubismTargetPoint}return t.prototype.isInitialized=function(){return this._initialized},t.prototype.setInitialized=function(t){this._initialized=t},t.prototype.isUpdating=function(){return this._updating},t.prototype.setUpdating=function(t){this._updating=t},t.prototype.setDragging=function(t,e){this._dragManager.set(t,e)},t.prototype.setAcceleration=function(t,e,i){this._accelerationX=t,this._accelerationY=e,this._accelerationZ=i},t.prototype.getModelMatrix=function(){return this._modelMatrix},t.prototype.setOpacity=function(t){this._opacity=t},t.prototype.getOpacity=function(){return this._opacity},t.prototype.loadModel=function(t){this._moc=y.CubismMoc.create(t),this._model=this._moc.createModel(),this._model.saveParameters(),null!=this._moc&&null!=this._model?this._modelMatrix=new h.CubismModelMatrix(this._model.getCanvasWidth(),this._model.getCanvasHeight()):(0,f.CubismLogError)("Failed to CreateModel().")},t.prototype.loadExpression=function(t,e,i){return p.CubismExpressionMotion.create(t,e)},t.prototype.loadPose=function(t,e){this._pose=u.CubismPose.create(t,e)},t.prototype.loadUserData=function(t,e){this._modelUserData=v.CubismModelUserData.create(t,e)},t.prototype.loadPhysics=function(t,e){this._physics=m.CubismPhysics.create(t,e)},t.prototype.isHit=function(t,e,i){var r=this._model.getDrawableIndex(t);if(r<0)return!1;for(var n=this._model.getDrawableVertexCount(r),o=this._model.getDrawableVertices(r),a=o[0],s=o[0],u=o[1],h=o[1],c=1;c<n;++c){var p=o[l.Constant.vertexOffset+c*l.Constant.vertexStep],d=o[l.Constant.vertexOffset+c*l.Constant.vertexStep+1];p<a&&(a=p),p>s&&(s=p),d<u&&(u=d),d>h&&(h=d)}var g=this._modelMatrix.invertTransformX(e),m=this._modelMatrix.invertTransformY(i);return a<=g&&g<=s&&u<=m&&m<=h},t.prototype.getModel=function(){return this._model},t.prototype.getRenderer=function(){return this._renderer},t.prototype.createRenderer=function(){this._renderer&&this.deleteRenderer(),this._renderer=new _.CubismRenderer_WebGL,this._renderer.initialize(this._model)},t.prototype.deleteRenderer=function(){null!=this._renderer&&(this._renderer.release(),this._renderer=null)},t.prototype.motionEventFired=function(t){(0,f.CubismLogInfo)("{0}",t.s)},t.cubismDefaultMotionEventCallback=function(t,e,i){null!=i&&i.motionEventFired(e)},t.prototype.release=function(){null!=this._motionManager&&(this._motionManager.release(),this._motionManager=null),null!=this._expressionManager&&(this._expressionManager.release(),this._expressionManager=null),null!=this._moc&&(this._moc.deleteModel(this._model),this._moc.release(),this._moc=null),this._modelMatrix=null,u.CubismPose.delete(this._pose),s.CubismEyeBlink.delete(this._eyeBlink),a.CubismBreath.delete(this._breath),this._dragManager=null,m.CubismPhysics.delete(this._physics),v.CubismModelUserData.delete(this._modelUserData),this.deleteRenderer()},t}();e.CubismUserModel=b;var C=o(i(2741));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismUserModel=C.CubismUserModel},1355:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.ACubismMotion=void 0;var a=i(5437),s=i(8282),u=i(9372),l=function(){function t(){var t=this;this.setFinishedMotionHandler=function(e){return t._onFinishedMotion=e},this.getFinishedMotionHandler=function(){return t._onFinishedMotion},this._fadeInSeconds=-1,this._fadeOutSeconds=-1,this._weight=1,this._offsetSeconds=0,this._firedEventValues=new s.csmVector}return t.delete=function(t){t.release(),t=null},t.prototype.release=function(){this._weight=0},t.prototype.updateParameters=function(t,e,i){if(e.isAvailable()&&!e.isFinished()){if(!e.isStarted()){e.setIsStarted(!0),e.setStartTime(i-this._offsetSeconds),e.setFadeInStartTime(i);var r=this.getDuration();e.getEndTime()<0&&e.setEndTime(r<=0?-1:e.getStartTime()+r)}var n=this._weight;n=n*(0==this._fadeInSeconds?1:a.CubismMath.getEasingSine((i-e.getFadeInStartTime())/this._fadeInSeconds))*(0==this._fadeOutSeconds||e.getEndTime()<0?1:a.CubismMath.getEasingSine((e.getEndTime()-i)/this._fadeOutSeconds)),e.setState(i,n),(0,u.CSM_ASSERT)(0<=n&&n<=1),this.doUpdateParameters(t,i,n,e),e.getEndTime()>0&&e.getEndTime()<i&&e.setIsFinished(!0)}},t.prototype.setFadeInTime=function(t){this._fadeInSeconds=t},t.prototype.setFadeOutTime=function(t){this._fadeOutSeconds=t},t.prototype.getFadeOutTime=function(){return this._fadeOutSeconds},t.prototype.getFadeInTime=function(){return this._fadeInSeconds},t.prototype.setWeight=function(t){this._weight=t},t.prototype.getWeight=function(){return this._weight},t.prototype.getDuration=function(){return-1},t.prototype.getLoopDuration=function(){return-1},t.prototype.setOffsetTime=function(t){this._offsetSeconds=t},t.prototype.getFiredEvent=function(t,e){return this._firedEventValues},t}();e.ACubismMotion=l;var h=o(i(1355));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).ACubismMotion=h.ACubismMotion},9009:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&o(e,t,i);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.ExpressionParameter=e.ExpressionBlendType=e.CubismExpressionMotion=void 0;var u,l=i(3165),h=i(8282),c=i(7205),p=i(1355),d="Parameters",g="Blend",m=function(t){function e(){var e=t.call(this)||this;return e._parameters=new h.csmVector,e}return n(e,t),e.create=function(t,i){var r=new e,n=c.CubismJson.create(t,i),o=n.getRoot();r.setFadeInTime(o.getValueByString("FadeInTime").toFloat(1)),r.setFadeOutTime(o.getValueByString("FadeOutTime").toFloat(1));var a=o.getValueByString(d).getSize();r._parameters.prepareCapacity(a);for(var s=0;s<a;++s){var h,p=o.getValueByString(d).getValueByIndex(s),m=l.CubismFramework.getIdManager().getId(p.getValueByString("Id").getRawString()),f=p.getValueByString("Value").toFloat();h=p.getValueByString(g).isNull()||"Add"==p.getValueByString(g).getString()?u.ExpressionBlendType_Add:"Multiply"==p.getValueByString(g).getString()?u.ExpressionBlendType_Multiply:"Overwrite"==p.getValueByString(g).getString()?u.ExpressionBlendType_Overwrite:u.ExpressionBlendType_Add;var y=new _;y.parameterId=m,y.blendType=h,y.value=f,r._parameters.pushBack(y)}return c.CubismJson.delete(n),r},e.prototype.doUpdateParameters=function(t,e,i,r){for(var n=0;n<this._parameters.getSize();++n){var o=this._parameters.at(n);switch(o.blendType){case u.ExpressionBlendType_Add:t.addParameterValueById(o.parameterId,o.value,i);break;case u.ExpressionBlendType_Multiply:t.multiplyParameterValueById(o.parameterId,o.value,i);break;case u.ExpressionBlendType_Overwrite:t.setParameterValueById(o.parameterId,o.value,i)}}},e}(p.ACubismMotion);e.CubismExpressionMotion=m,function(t){t[t.ExpressionBlendType_Add=0]="ExpressionBlendType_Add",t[t.ExpressionBlendType_Multiply=1]="ExpressionBlendType_Multiply",t[t.ExpressionBlendType_Overwrite=2]="ExpressionBlendType_Overwrite"}(u=e.ExpressionBlendType||(e.ExpressionBlendType={}));var _=function(){};e.ExpressionParameter=_;var f,y=s(i(9009));(f=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismExpressionMotion=y.CubismExpressionMotion,f.ExpressionBlendType=y.ExpressionBlendType,f.ExpressionParameter=y.ExpressionParameter},3423:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&o(e,t,i);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismMotion=void 0;var u=i(3165),l=i(5437),h=i(53),c=i(9372),p=i(1355),d=i(69),g=i(343);function m(t,e,i){var r=new d.CubismMotionPoint;return r.time=t.time+(e.time-t.time)*i,r.value=t.value+(e.value-t.value)*i,r}function _(t,e){var i=(e-t[0].time)/(t[1].time-t[0].time);return i<0&&(i=0),t[0].value+(t[1].value-t[0].value)*i}function f(t,e){var i=(e-t[0].time)/(t[3].time-t[0].time);i<0&&(i=0);var r=m(t[0],t[1],i),n=m(t[1],t[2],i),o=m(t[2],t[3],i),a=m(r,n,i),s=m(n,o,i);return m(a,s,i).value}function y(t,e){var i=e,r=t[0].time,n=t[3].time,o=t[1].time,a=t[2].time,s=n-3*a+3*o-r,u=3*a-6*o+3*r,h=3*o-3*r,c=r-i,p=l.CubismMath.cardanoAlgorithmForBezier(s,u,h,c),d=m(t[0],t[1],p),g=m(t[1],t[2],p),_=m(t[2],t[3],p),f=m(d,g,p),y=m(g,_,p);return m(f,y,p).value}function v(t,e){return t[0].value}function b(t,e){return t[1].value}function C(t,e,i){for(var r=t.curves.at(e),n=-1,o=r.baseSegmentIndex+r.segmentCount,a=0,s=r.baseSegmentIndex;s<o;++s)if(a=t.segments.at(s).basePointIndex+(t.segments.at(s).segmentType==d.CubismMotionSegmentType.CubismMotionSegmentType_Bezier?3:1),t.points.at(a).time>i){n=s;break}if(-1==n)return t.points.at(a).value;var u=t.segments.at(n);return u.evaluate(t.points.get(u.basePointIndex),i)}var S=function(t){function e(){var e=t.call(this)||this;return e._sourceFrameRate=30,e._loopDurationSeconds=-1,e._isLoop=!1,e._isLoopFadeIn=!0,e._lastWeight=0,e._motionData=null,e._modelCurveIdEyeBlink=null,e._modelCurveIdLipSync=null,e._eyeBlinkParameterIds=null,e._lipSyncParameterIds=null,e}return n(e,t),e.create=function(t,i,r){var n=new e;return n.parse(t,i),n._sourceFrameRate=n._motionData.fps,n._loopDurationSeconds=n._motionData.duration,n._onFinishedMotion=r,n},e.prototype.doUpdateParameters=function(t,e,i,r){null==this._modelCurveIdEyeBlink&&(this._modelCurveIdEyeBlink=u.CubismFramework.getIdManager().getId("EyeBlink")),null==this._modelCurveIdLipSync&&(this._modelCurveIdLipSync=u.CubismFramework.getIdManager().getId("LipSync"));var n=e-r.getStartTime();n<0&&(n=0);var o=Number.MAX_VALUE,a=Number.MAX_VALUE,s=64,h=0,p=0;this._eyeBlinkParameterIds.getSize()>s&&(0,c.CubismLogDebug)("too many eye blink targets : {0}",this._eyeBlinkParameterIds.getSize()),this._lipSyncParameterIds.getSize()>s&&(0,c.CubismLogDebug)("too many lip sync targets : {0}",this._lipSyncParameterIds.getSize());var g,m,_,f=this._fadeInSeconds<=0?1:l.CubismMath.getEasingSine((e-r.getFadeInStartTime())/this._fadeInSeconds),y=this._fadeOutSeconds<=0||r.getEndTime()<0?1:l.CubismMath.getEasingSine((r.getEndTime()-e)/this._fadeOutSeconds),v=n;if(this._isLoop)for(;v>this._motionData.duration;)v-=this._motionData.duration;var b=this._motionData.curves;for(m=0;m<this._motionData.curveCount&&b.at(m).type==d.CubismMotionCurveTarget.CubismMotionCurveTarget_Model;++m)g=C(this._motionData,m,v),b.at(m).id==this._modelCurveIdEyeBlink?a=g:b.at(m).id==this._modelCurveIdLipSync&&(o=g);for(;m<this._motionData.curveCount&&b.at(m).type==d.CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter;++m)if(-1!=(_=t.getParameterIndex(b.at(m).id))){var S=t.getParameterValueByIndex(_);if(g=C(this._motionData,m,v),a!=Number.MAX_VALUE)for(var P=0;P<this._eyeBlinkParameterIds.getSize()&&P<s;++P)if(this._eyeBlinkParameterIds.at(P)==b.at(m).id){g*=a,p|=1<<P;break}if(o!=Number.MAX_VALUE)for(P=0;P<this._lipSyncParameterIds.getSize()&&P<s;++P)if(this._lipSyncParameterIds.at(P)==b.at(m).id){g+=o,h|=1<<P;break}var M=void 0;if(b.at(m).fadeInTime<0&&b.at(m).fadeOutTime<0)M=S+(g-S)*i;else{var x,w;x=b.at(m).fadeInTime<0?f:0==b.at(m).fadeInTime?1:l.CubismMath.getEasingSine((e-r.getFadeInStartTime())/b.at(m).fadeInTime),w=b.at(m).fadeOutTime<0?y:0==b.at(m).fadeOutTime||r.getEndTime()<0?1:l.CubismMath.getEasingSine((r.getEndTime()-e)/b.at(m).fadeOutTime),M=S+(g-S)*(this._weight*x*w)}t.setParameterValueByIndex(_,M,1)}if(a!=Number.MAX_VALUE)for(P=0;P<this._eyeBlinkParameterIds.getSize()&&P<s;++P)S=t.getParameterValueById(this._eyeBlinkParameterIds.at(P)),p>>P&1||(M=S+(a-S)*i,t.setParameterValueById(this._eyeBlinkParameterIds.at(P),M));if(o!=Number.MAX_VALUE)for(P=0;P<this._lipSyncParameterIds.getSize()&&P<s;++P)S=t.getParameterValueById(this._lipSyncParameterIds.at(P)),h>>P&1||(M=S+(o-S)*i,t.setParameterValueById(this._lipSyncParameterIds.at(P),M));for(;m<this._motionData.curveCount&&b.at(m).type==d.CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity;++m)-1!=(_=t.getParameterIndex(b.at(m).id))&&(g=C(this._motionData,m,v),t.setParameterValueByIndex(_,g));n>=this._motionData.duration&&(this._isLoop?(r.setStartTime(e),this._isLoopFadeIn&&r.setFadeInStartTime(e)):(this._onFinishedMotion&&this._onFinishedMotion(this),r.setIsFinished(!0))),this._lastWeight=i},e.prototype.setIsLoop=function(t){this._isLoop=t},e.prototype.isLoop=function(){return this._isLoop},e.prototype.setIsLoopFadeIn=function(t){this._isLoopFadeIn=t},e.prototype.isLoopFadeIn=function(){return this._isLoopFadeIn},e.prototype.getDuration=function(){return this._isLoop?-1:this._loopDurationSeconds},e.prototype.getLoopDuration=function(){return this._loopDurationSeconds},e.prototype.setParameterFadeInTime=function(t,e){for(var i=this._motionData.curves,r=0;r<this._motionData.curveCount;++r)if(t==i.at(r).id)return void(i.at(r).fadeInTime=e)},e.prototype.setParameterFadeOutTime=function(t,e){for(var i=this._motionData.curves,r=0;r<this._motionData.curveCount;++r)if(t==i.at(r).id)return void(i.at(r).fadeOutTime=e)},e.prototype.getParameterFadeInTime=function(t){for(var e=this._motionData.curves,i=0;i<this._motionData.curveCount;++i)if(t==e.at(i).id)return e.at(i).fadeInTime;return-1},e.prototype.getParameterFadeOutTime=function(t){for(var e=this._motionData.curves,i=0;i<this._motionData.curveCount;++i)if(t==e.at(i).id)return e.at(i).fadeOutTime;return-1},e.prototype.setEffectIds=function(t,e){this._eyeBlinkParameterIds=t,this._lipSyncParameterIds=e},e.prototype.release=function(){this._motionData=void 0,this._motionData=null},e.prototype.parse=function(t,e){this._motionData=new d.CubismMotionData;var i=new g.CubismMotionJson(t,e);this._motionData.duration=i.getMotionDuration(),this._motionData.loop=i.isMotionLoop(),this._motionData.curveCount=i.getMotionCurveCount(),this._motionData.fps=i.getMotionFps(),this._motionData.eventCount=i.getEventCount();var r=i.getEvaluationOptionFlag(g.EvaluationOptionFlag.EvaluationOptionFlag_AreBeziersRistricted);i.isExistMotionFadeInTime()?this._fadeInSeconds=i.getMotionFadeInTime()<0?1:i.getMotionFadeInTime():this._fadeInSeconds=1,i.isExistMotionFadeOutTime()?this._fadeOutSeconds=i.getMotionFadeOutTime()<0?1:i.getMotionFadeOutTime():this._fadeOutSeconds=1,this._motionData.curves.updateSize(this._motionData.curveCount,d.CubismMotionCurve,!0),this._motionData.segments.updateSize(i.getMotionTotalSegmentCount(),d.CubismMotionSegment,!0),this._motionData.points.updateSize(i.getMotionTotalPointCount(),d.CubismMotionPoint,!0),this._motionData.events.updateSize(this._motionData.eventCount,d.CubismMotionEvent,!0);for(var n=0,o=0,a=0;a<this._motionData.curveCount;++a){"Model"==i.getMotionCurveTarget(a)?this._motionData.curves.at(a).type=d.CubismMotionCurveTarget.CubismMotionCurveTarget_Model:"Parameter"==i.getMotionCurveTarget(a)?this._motionData.curves.at(a).type=d.CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter:"PartOpacity"==i.getMotionCurveTarget(a)?this._motionData.curves.at(a).type=d.CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity:(0,c.CubismLogWarning)('Warning : Unable to get segment type from Curve! The number of "CurveCount" may be incorrect!'),this._motionData.curves.at(a).id=i.getMotionCurveId(a),this._motionData.curves.at(a).baseSegmentIndex=o,this._motionData.curves.at(a).fadeInTime=i.isExistMotionCurveFadeInTime(a)?i.getMotionCurveFadeInTime(a):-1,this._motionData.curves.at(a).fadeOutTime=i.isExistMotionCurveFadeOutTime(a)?i.getMotionCurveFadeOutTime(a):-1;for(var s=0;s<i.getMotionCurveSegmentCount(a);){if(0==s){this._motionData.segments.at(o).basePointIndex=n;try{n>=this._motionData.points.getSize()&&this._motionData.points.pushBack(new d.CubismMotionPoint),this._motionData.points.at(n).time=i.getMotionCurveSegment(a,s),this._motionData.points.at(n).value=i.getMotionCurveSegment(a,s+1)}catch(t){console.log(t)}n+=1,s+=2}else this._motionData.segments.at(o).basePointIndex=n-1;switch(i.getMotionCurveSegment(a,s)){case d.CubismMotionSegmentType.CubismMotionSegmentType_Linear:this._motionData.segments.at(o).segmentType=d.CubismMotionSegmentType.CubismMotionSegmentType_Linear,this._motionData.segments.at(o).evaluate=_,n>=this._motionData.points.getSize()&&this._motionData.points.pushBack(new d.CubismMotionPoint),this._motionData.points.at(n).time=i.getMotionCurveSegment(a,s+1),this._motionData.points.at(n).value=i.getMotionCurveSegment(a,s+2),n+=1,s+=3;break;case d.CubismMotionSegmentType.CubismMotionSegmentType_Bezier:this._motionData.segments.at(o).segmentType=d.CubismMotionSegmentType.CubismMotionSegmentType_Bezier,this._motionData.segments.at(o).evaluate=r?f:y,n>=this._motionData.points.getSize()&&this._motionData.points.pushBack(new d.CubismMotionPoint),this._motionData.points.at(n).time=i.getMotionCurveSegment(a,s+1),this._motionData.points.at(n).value=i.getMotionCurveSegment(a,s+2),n+1>=this._motionData.points.getSize()&&this._motionData.points.pushBack(new d.CubismMotionPoint),this._motionData.points.at(n+1).time=i.getMotionCurveSegment(a,s+3),this._motionData.points.at(n+1).value=i.getMotionCurveSegment(a,s+4),n+2>=this._motionData.points.getSize()&&this._motionData.points.pushBack(new d.CubismMotionPoint),this._motionData.points.at(n+2).time=i.getMotionCurveSegment(a,s+5),this._motionData.points.at(n+2).value=i.getMotionCurveSegment(a,s+6),n+=3,s+=7;break;case d.CubismMotionSegmentType.CubismMotionSegmentType_Stepped:this._motionData.segments.at(o).segmentType=d.CubismMotionSegmentType.CubismMotionSegmentType_Stepped,this._motionData.segments.at(o).evaluate=v,n>=this._motionData.points.getSize()&&this._motionData.points.pushBack(new d.CubismMotionPoint),this._motionData.points.at(n).time=i.getMotionCurveSegment(a,s+1),this._motionData.points.at(n).value=i.getMotionCurveSegment(a,s+2),n+=1,s+=3;break;case d.CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped:this._motionData.segments.at(o).segmentType=d.CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped,this._motionData.segments.at(o).evaluate=b,n>=this._motionData.points.getSize()&&this._motionData.points.pushBack(new d.CubismMotionPoint),this._motionData.points.at(n).time=i.getMotionCurveSegment(a,s+1),this._motionData.points.at(n).value=i.getMotionCurveSegment(a,s+2),n+=1,s+=3;break;default:(0,c.CSM_ASSERT)(0)}++this._motionData.curves.at(a).segmentCount,++o}}for(var u=0;u<i.getEventCount();++u)this._motionData.events.at(u).fireTime=i.getEventTime(u),this._motionData.events.at(u).value=i.getEventValue(u);i.release(),i=void 0,i=null},e.prototype.getFiredEvent=function(t,e){this._firedEventValues.updateSize(0);for(var i=0;i<this._motionData.eventCount;++i)this._motionData.events.at(i).fireTime>t&&this._motionData.events.at(i).fireTime<=e&&this._firedEventValues.pushBack(new h.csmString(this._motionData.events.at(i).value.s));return this._firedEventValues},e}(p.ACubismMotion);e.CubismMotion=S;var P=s(i(3423));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismMotion=P.CubismMotion},69:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismMotionData=e.CubismMotionEvent=e.CubismMotionCurve=e.CubismMotionSegment=e.CubismMotionPoint=e.CubismMotionSegmentType=e.CubismMotionCurveTarget=void 0;var a,s,u=i(8282);!function(t){t[t.CubismMotionCurveTarget_Model=0]="CubismMotionCurveTarget_Model",t[t.CubismMotionCurveTarget_Parameter=1]="CubismMotionCurveTarget_Parameter",t[t.CubismMotionCurveTarget_PartOpacity=2]="CubismMotionCurveTarget_PartOpacity"}(a=e.CubismMotionCurveTarget||(e.CubismMotionCurveTarget={})),(s=e.CubismMotionSegmentType||(e.CubismMotionSegmentType={}))[s.CubismMotionSegmentType_Linear=0]="CubismMotionSegmentType_Linear",s[s.CubismMotionSegmentType_Bezier=1]="CubismMotionSegmentType_Bezier",s[s.CubismMotionSegmentType_Stepped=2]="CubismMotionSegmentType_Stepped",s[s.CubismMotionSegmentType_InverseStepped=3]="CubismMotionSegmentType_InverseStepped";e.CubismMotionPoint=function(){this.time=0,this.value=0};e.CubismMotionSegment=function(){this.evaluate=null,this.basePointIndex=0,this.segmentType=0};e.CubismMotionCurve=function(){this.type=a.CubismMotionCurveTarget_Model,this.segmentCount=0,this.baseSegmentIndex=0,this.fadeInTime=0,this.fadeOutTime=0};e.CubismMotionEvent=function(){this.fireTime=0};e.CubismMotionData=function(){this.duration=0,this.loop=!1,this.curveCount=0,this.eventCount=0,this.fps=0,this.curves=new u.csmVector,this.segments=new u.csmVector,this.points=new u.csmVector,this.events=new u.csmVector};var l,h=o(i(69));(l=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismMotionCurve=h.CubismMotionCurve,l.CubismMotionCurveTarget=h.CubismMotionCurveTarget,l.CubismMotionData=h.CubismMotionData,l.CubismMotionEvent=h.CubismMotionEvent,l.CubismMotionPoint=h.CubismMotionPoint,l.CubismMotionSegment=h.CubismMotionSegment,l.CubismMotionSegmentType=h.CubismMotionSegmentType},343:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.EvaluationOptionFlag=e.CubismMotionJson=void 0;var a,s=i(3165),u=i(53),l=i(7205),h="Meta",c="Curves",p="FadeInTime",d="FadeOutTime",g="Segments",m="UserData",_=function(){function t(t,e){this._json=l.CubismJson.create(t,e)}return t.prototype.release=function(){l.CubismJson.delete(this._json)},t.prototype.getMotionDuration=function(){return this._json.getRoot().getValueByString(h).getValueByString("Duration").toFloat()},t.prototype.isMotionLoop=function(){return this._json.getRoot().getValueByString(h).getValueByString("Loop").toBoolean()},t.prototype.getEvaluationOptionFlag=function(t){return a.EvaluationOptionFlag_AreBeziersRistricted==t&&this._json.getRoot().getValueByString(h).getValueByString("AreBeziersRestricted").toBoolean()},t.prototype.getMotionCurveCount=function(){return this._json.getRoot().getValueByString(h).getValueByString("CurveCount").toInt()},t.prototype.getMotionFps=function(){return this._json.getRoot().getValueByString(h).getValueByString("Fps").toFloat()},t.prototype.getMotionTotalSegmentCount=function(){return this._json.getRoot().getValueByString(h).getValueByString("TotalSegmentCount").toInt()},t.prototype.getMotionTotalPointCount=function(){return this._json.getRoot().getValueByString(h).getValueByString("TotalPointCount").toInt()},t.prototype.isExistMotionFadeInTime=function(){return!this._json.getRoot().getValueByString(h).getValueByString(p).isNull()},t.prototype.isExistMotionFadeOutTime=function(){return!this._json.getRoot().getValueByString(h).getValueByString(d).isNull()},t.prototype.getMotionFadeInTime=function(){return this._json.getRoot().getValueByString(h).getValueByString(p).toFloat()},t.prototype.getMotionFadeOutTime=function(){return this._json.getRoot().getValueByString(h).getValueByString(d).toFloat()},t.prototype.getMotionCurveTarget=function(t){return this._json.getRoot().getValueByString(c).getValueByIndex(t).getValueByString("Target").getRawString()},t.prototype.getMotionCurveId=function(t){return s.CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(c).getValueByIndex(t).getValueByString("Id").getRawString())},t.prototype.isExistMotionCurveFadeInTime=function(t){return!this._json.getRoot().getValueByString(c).getValueByIndex(t).getValueByString(p).isNull()},t.prototype.isExistMotionCurveFadeOutTime=function(t){return!this._json.getRoot().getValueByString(c).getValueByIndex(t).getValueByString(d).isNull()},t.prototype.getMotionCurveFadeInTime=function(t){return this._json.getRoot().getValueByString(c).getValueByIndex(t).getValueByString(p).toFloat()},t.prototype.getMotionCurveFadeOutTime=function(t){return this._json.getRoot().getValueByString(c).getValueByIndex(t).getValueByString(d).toFloat()},t.prototype.getMotionCurveSegmentCount=function(t){return this._json.getRoot().getValueByString(c).getValueByIndex(t).getValueByString(g).getVector().getSize()},t.prototype.getMotionCurveSegment=function(t,e){return this._json.getRoot().getValueByString(c).getValueByIndex(t).getValueByString(g).getValueByIndex(e).toFloat()},t.prototype.getEventCount=function(){return this._json.getRoot().getValueByString(h).getValueByString("UserDataCount").toInt()},t.prototype.getTotalEventValueSize=function(){return this._json.getRoot().getValueByString(h).getValueByString("TotalUserDataSize").toInt()},t.prototype.getEventTime=function(t){return this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString("Time").toFloat()},t.prototype.getEventValue=function(t){return new u.csmString(this._json.getRoot().getValueByString(m).getValueByIndex(t).getValueByString("Value").getRawString())},t}();e.CubismMotionJson=_,function(t){t[t.EvaluationOptionFlag_AreBeziersRistricted=0]="EvaluationOptionFlag_AreBeziersRistricted"}(a=e.EvaluationOptionFlag||(e.EvaluationOptionFlag={}));var f=o(i(343));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismMotionJson=f.CubismMotionJson},4197:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&o(e,t,i);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismMotionManager=void 0;var u=function(t){function e(){var e=t.call(this)||this;return e._currentPriority=0,e._reservePriority=0,e}return n(e,t),e.prototype.getCurrentPriority=function(){return this._currentPriority},e.prototype.getReservePriority=function(){return this._reservePriority},e.prototype.setReservePriority=function(t){this._reservePriority=t},e.prototype.startMotionPriority=function(e,i,r){return r==this._reservePriority&&(this._reservePriority=0),this._currentPriority=r,t.prototype.startMotion.call(this,e,i,this._userTimeSeconds)},e.prototype.updateMotion=function(e,i){this._userTimeSeconds+=i;var r=t.prototype.doUpdateMotion.call(this,e,this._userTimeSeconds);return this.isFinished()&&(this._currentPriority=0),r},e.prototype.reserveMotion=function(t){return!(t<=this._reservePriority||t<=this._currentPriority||(this._reservePriority=t,0))},e}(i(3603).CubismMotionQueueManager);e.CubismMotionManager=u;var l=s(i(4197));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismMotionManager=l.CubismMotionManager},3803:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismMotionQueueEntry=void 0;var a=i(1355),s=function(){function t(){this._autoDelete=!1,this._motion=null,this._available=!0,this._finished=!1,this._started=!1,this._startTimeSeconds=-1,this._fadeInStartTimeSeconds=0,this._endTimeSeconds=-1,this._stateTimeSeconds=0,this._stateWeight=0,this._lastEventCheckSeconds=0,this._motionQueueEntryHandle=this,this._fadeOutSeconds=0,this._isTriggeredFadeOut=!1}return t.prototype.release=function(){this._autoDelete&&this._motion&&a.ACubismMotion.delete(this._motion)},t.prototype.setFadeOut=function(t){this._fadeOutSeconds=t,this._isTriggeredFadeOut=!0},t.prototype.startFadeOut=function(t,e){var i=e+t;this._isTriggeredFadeOut=!0,(this._endTimeSeconds<0||i<this._endTimeSeconds)&&(this._endTimeSeconds=i)},t.prototype.isFinished=function(){return this._finished},t.prototype.isStarted=function(){return this._started},t.prototype.getStartTime=function(){return this._startTimeSeconds},t.prototype.getFadeInStartTime=function(){return this._fadeInStartTimeSeconds},t.prototype.getEndTime=function(){return this._endTimeSeconds},t.prototype.setStartTime=function(t){this._startTimeSeconds=t},t.prototype.setFadeInStartTime=function(t){this._fadeInStartTimeSeconds=t},t.prototype.setEndTime=function(t){this._endTimeSeconds=t},t.prototype.setIsFinished=function(t){this._finished=t},t.prototype.setIsStarted=function(t){this._started=t},t.prototype.isAvailable=function(){return this._available},t.prototype.setIsAvailable=function(t){this._available=t},t.prototype.setState=function(t,e){this._stateTimeSeconds=t,this._stateWeight=e},t.prototype.getStateTime=function(){return this._stateTimeSeconds},t.prototype.getStateWeight=function(){return this._stateWeight},t.prototype.getLastCheckEventSeconds=function(){return this._lastEventCheckSeconds},t.prototype.setLastCheckEventSeconds=function(t){this._lastEventCheckSeconds=t},t.prototype.isTriggeredFadeOut=function(){return this._isTriggeredFadeOut},t.prototype.getFadeOutSeconds=function(){return this._fadeOutSeconds},t}();e.CubismMotionQueueEntry=s;var u=o(i(3803));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismMotionQueueEntry=u.CubismMotionQueueEntry},3603:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.InvalidMotionQueueEntryHandleValue=e.CubismMotionQueueManager=void 0;var a=i(3803),s=i(8282),u=function(){function t(){this._userTimeSeconds=0,this._eventCallBack=null,this._eventCustomData=null,this._motions=new s.csmVector}return t.prototype.release=function(){for(var t=0;t<this._motions.getSize();++t)this._motions.at(t)&&(this._motions.at(t).release(),this._motions.set(t,null));this._motions=null},t.prototype.startMotion=function(t,i,r){if(null==t)return e.InvalidMotionQueueEntryHandleValue;for(var n=null,o=0;o<this._motions.getSize();++o)null!=(n=this._motions.at(o))&&n.setFadeOut(n._motion.getFadeOutTime());return(n=new a.CubismMotionQueueEntry)._autoDelete=i,n._motion=t,this._motions.pushBack(n),n._motionQueueEntryHandle},t.prototype.isFinished=function(){for(var t=this._motions.begin();t.notEqual(this._motions.end());){var e=t.ptr();if(null!=e)if(null!=e._motion){if(!e.isFinished())return!1;t.preIncrement()}else e.release(),e=null,t=this._motions.erase(t);else t=this._motions.erase(t)}return!0},t.prototype.isFinishedByHandle=function(t){for(var e=this._motions.begin();e.notEqual(this._motions.end());e.increment()){var i=e.ptr();if(null!=i&&i._motionQueueEntryHandle==t&&!i.isFinished())return!1}return!0},t.prototype.stopAllMotions=function(){for(var t=this._motions.begin();t.notEqual(this._motions.end());){var e=t.ptr();null!=e?(e.release(),e=null,t=this._motions.erase(t)):t=this._motions.erase(t)}},t.prototype.getCubismMotionQueueEntry=function(t){for(var e=this._motions.begin();e.notEqual(this._motions.end());e.preIncrement()){var i=e.ptr();if(null!=i&&i._motionQueueEntryHandle==t)return i}return null},t.prototype.setEventCallback=function(t,e){void 0===e&&(e=null),this._eventCallBack=t,this._eventCustomData=e},t.prototype.doUpdateMotion=function(t,e){for(var i=!1,r=this._motions.begin();r.notEqual(this._motions.end());){var n=r.ptr();if(null!=n){var o=n._motion;if(null!=o){o.updateParameters(t,n,e),i=!0;for(var a=o.getFiredEvent(n.getLastCheckEventSeconds()-n.getStartTime(),e-n.getStartTime()),s=0;s<a.getSize();++s)this._eventCallBack(this,a.at(s),this._eventCustomData);n.setLastCheckEventSeconds(e),n.isFinished()?(n.release(),n=null,r=this._motions.erase(r)):(n.isTriggeredFadeOut()&&n.startFadeOut(n.getFadeOutSeconds(),e),r.preIncrement())}else n.release(),n=null,r=this._motions.erase(r)}else r=this._motions.erase(r)}return i},t}();e.CubismMotionQueueManager=u,e.InvalidMotionQueueEntryHandleValue=-1;var l,h=o(i(3603));(l=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismMotionQueueManager=h.CubismMotionQueueManager,l.InvalidMotionQueueEntryHandleValue=h.InvalidMotionQueueEntryHandleValue},8782:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.Options=e.CubismPhysics=void 0;var a=i(5437),s=i(8241),u=i(5392),l=i(7934),h="Angle",c=function(){function t(){this._physicsRig=null,this._options=new p,this._options.gravity.y=-1,this._options.gravity.x=0,this._options.wind.x=0,this._options.wind.y=0}return t.create=function(e,i){var r=new t;return r.parse(e,i),r._physicsRig.gravity.y=0,r},t.delete=function(t){null!=t&&(t.release(),t=null)},t.prototype.evaluate=function(t,e){var i,r,n,o,u,l,h,c,p,d,g,m,_=new s.CubismVector2;p=t.getModel().parameters.values,d=t.getModel().parameters.maximumValues,g=t.getModel().parameters.minimumValues,m=t.getModel().parameters.defaultValues;for(var f=0;f<this._physicsRig.subRigCount;++f){i={angle:0},_.x=0,_.y=0,u=this._physicsRig.settings.at(f),l=this._physicsRig.inputs.get(u.baseInputIndex),h=this._physicsRig.outputs.get(u.baseOutputIndex),c=this._physicsRig.particles.get(u.baseParticleIndex);for(var y=0;y<u.inputCount;++y)r=l[y].weight/100,-1==l[y].sourceParameterIndex&&(l[y].sourceParameterIndex=t.getParameterIndex(l[y].source.id)),l[y].getNormalizedParameterValue(_,i,p[l[y].sourceParameterIndex],g[l[y].sourceParameterIndex],d[l[y].sourceParameterIndex],m[l[y].sourceParameterIndex],u.normalizationPosition,u.normalizationAngle,l[y].reflect,r);for(n=a.CubismMath.degreesToRadian(-i.angle),_.x=_.x*a.CubismMath.cos(n)-_.y*a.CubismMath.sin(n),_.y=_.x*a.CubismMath.sin(n)+_.y*a.CubismMath.cos(n),S(c,u.particleCount,_,i.angle,this._options.wind,.001*u.normalizationPosition.maximum,e,5),y=0;y<u.outputCount;++y){var v=h[y].vertexIndex;if(v<1||v>=u.particleCount)break;-1==h[y].destinationParameterIndex&&(h[y].destinationParameterIndex=t.getParameterIndex(h[y].destination.id));var b=new s.CubismVector2;b.x=c[v].position.x-c[v-1].position.x,b.y=c[v].position.y-c[v-1].position.y,o=h[y].getValue(b,c,v,h[y].reflect,this._options.gravity);var C=h[y].destinationParameterIndex,M=!Float32Array.prototype.slice&&"subarray"in Float32Array.prototype?JSON.parse(JSON.stringify(p.subarray(C))):p.slice(C);P(M,g[C],d[C],o,h[y]);for(var x=C,w=0;x<p.length;x++,w++)p[x]=M[w]}}},t.prototype.setOptions=function(t){this._options=t},t.prototype.getOption=function(){return this._options},t.prototype.release=function(){this._physicsRig=void 0,this._physicsRig=null},t.prototype.parse=function(t,e){this._physicsRig=new u.CubismPhysicsRig;var i=new l.CubismPhysicsJson(t,e);this._physicsRig.gravity=i.getGravity(),this._physicsRig.wind=i.getWind(),this._physicsRig.subRigCount=i.getSubRigCount(),this._physicsRig.settings.updateSize(this._physicsRig.subRigCount,u.CubismPhysicsSubRig,!0),this._physicsRig.inputs.updateSize(i.getTotalInputCount(),u.CubismPhysicsInput,!0),this._physicsRig.outputs.updateSize(i.getTotalOutputCount(),u.CubismPhysicsOutput,!0),this._physicsRig.particles.updateSize(i.getVertexCount(),u.CubismPhysicsParticle,!0);for(var r=0,n=0,o=0,a=0;a<this._physicsRig.settings.getSize();++a){this._physicsRig.settings.at(a).normalizationPosition.minimum=i.getNormalizationPositionMinimumValue(a),this._physicsRig.settings.at(a).normalizationPosition.maximum=i.getNormalizationPositionMaximumValue(a),this._physicsRig.settings.at(a).normalizationPosition.defalut=i.getNormalizationPositionDefaultValue(a),this._physicsRig.settings.at(a).normalizationAngle.minimum=i.getNormalizationAngleMinimumValue(a),this._physicsRig.settings.at(a).normalizationAngle.maximum=i.getNormalizationAngleMaximumValue(a),this._physicsRig.settings.at(a).normalizationAngle.defalut=i.getNormalizationAngleDefaultValue(a),this._physicsRig.settings.at(a).inputCount=i.getInputCount(a),this._physicsRig.settings.at(a).baseInputIndex=r;for(var s=0;s<this._physicsRig.settings.at(a).inputCount;++s)this._physicsRig.inputs.at(r+s).sourceParameterIndex=-1,this._physicsRig.inputs.at(r+s).weight=i.getInputWeight(a,s),this._physicsRig.inputs.at(r+s).reflect=i.getInputReflect(a,s),"X"==i.getInputType(a,s)?(this._physicsRig.inputs.at(r+s).type=u.CubismPhysicsSource.CubismPhysicsSource_X,this._physicsRig.inputs.at(r+s).getNormalizedParameterValue=d):"Y"==i.getInputType(a,s)?(this._physicsRig.inputs.at(r+s).type=u.CubismPhysicsSource.CubismPhysicsSource_Y,this._physicsRig.inputs.at(r+s).getNormalizedParameterValue=g):i.getInputType(a,s)==h&&(this._physicsRig.inputs.at(r+s).type=u.CubismPhysicsSource.CubismPhysicsSource_Angle,this._physicsRig.inputs.at(r+s).getNormalizedParameterValue=m),this._physicsRig.inputs.at(r+s).source.targetType=u.CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter,this._physicsRig.inputs.at(r+s).source.id=i.getInputSourceId(a,s);for(r+=this._physicsRig.settings.at(a).inputCount,this._physicsRig.settings.at(a).outputCount=i.getOutputCount(a),this._physicsRig.settings.at(a).baseOutputIndex=n,s=0;s<this._physicsRig.settings.at(a).outputCount;++s)this._physicsRig.outputs.at(n+s).destinationParameterIndex=-1,this._physicsRig.outputs.at(n+s).vertexIndex=i.getOutputVertexIndex(a,s),this._physicsRig.outputs.at(n+s).angleScale=i.getOutputAngleScale(a,s),this._physicsRig.outputs.at(n+s).weight=i.getOutputWeight(a,s),this._physicsRig.outputs.at(n+s).destination.targetType=u.CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter,this._physicsRig.outputs.at(n+s).destination.id=i.getOutputDestinationId(a,s),"X"==i.getOutputType(a,s)?(this._physicsRig.outputs.at(n+s).type=u.CubismPhysicsSource.CubismPhysicsSource_X,this._physicsRig.outputs.at(n+s).getValue=_,this._physicsRig.outputs.at(n+s).getScale=v):"Y"==i.getOutputType(a,s)?(this._physicsRig.outputs.at(n+s).type=u.CubismPhysicsSource.CubismPhysicsSource_Y,this._physicsRig.outputs.at(n+s).getValue=f,this._physicsRig.outputs.at(n+s).getScale=b):i.getOutputType(a,s)==h&&(this._physicsRig.outputs.at(n+s).type=u.CubismPhysicsSource.CubismPhysicsSource_Angle,this._physicsRig.outputs.at(n+s).getValue=y,this._physicsRig.outputs.at(n+s).getScale=C),this._physicsRig.outputs.at(n+s).reflect=i.getOutputReflect(a,s);for(n+=this._physicsRig.settings.at(a).outputCount,this._physicsRig.settings.at(a).particleCount=i.getParticleCount(a),this._physicsRig.settings.at(a).baseParticleIndex=o,s=0;s<this._physicsRig.settings.at(a).particleCount;++s)this._physicsRig.particles.at(o+s).mobility=i.getParticleMobility(a,s),this._physicsRig.particles.at(o+s).delay=i.getParticleDelay(a,s),this._physicsRig.particles.at(o+s).acceleration=i.getParticleAcceleration(a,s),this._physicsRig.particles.at(o+s).radius=i.getParticleRadius(a,s),this._physicsRig.particles.at(o+s).position=i.getParticlePosition(a,s);o+=this._physicsRig.settings.at(a).particleCount}this.initialize(),i.release(),i=void 0,i=null},t.prototype.initialize=function(){for(var t,e,i,r=0;r<this._physicsRig.subRigCount;++r){e=this._physicsRig.settings.at(r),(t=this._physicsRig.particles.get(e.baseParticleIndex))[0].initialPosition=new s.CubismVector2(0,0),t[0].lastPosition=new s.CubismVector2(t[0].initialPosition.x,t[0].initialPosition.y),t[0].lastGravity=new s.CubismVector2(0,-1),t[0].lastGravity.y*=-1,t[0].velocity=new s.CubismVector2(0,0),t[0].force=new s.CubismVector2(0,0);for(var n=1;n<e.particleCount;++n)(i=new s.CubismVector2(0,0)).y=t[n].radius,t[n].initialPosition=new s.CubismVector2(t[n-1].initialPosition.x+i.x,t[n-1].initialPosition.y+i.y),t[n].position=new s.CubismVector2(t[n].initialPosition.x,t[n].initialPosition.y),t[n].lastPosition=new s.CubismVector2(t[n].initialPosition.x,t[n].initialPosition.y),t[n].lastGravity=new s.CubismVector2(0,-1),t[n].lastGravity.y*=-1,t[n].velocity=new s.CubismVector2(0,0),t[n].force=new s.CubismVector2(0,0)}},t}();e.CubismPhysics=c;var p=function(){this.gravity=new s.CubismVector2(0,0),this.wind=new s.CubismVector2(0,0)};function d(t,e,i,r,n,o,a,s,u,l){t.x+=M(i,r,n,0,a.minimum,a.maximum,a.defalut,u)*l}function g(t,e,i,r,n,o,a,s,u,l){t.y+=M(i,r,n,0,a.minimum,a.maximum,a.defalut,u)*l}function m(t,e,i,r,n,o,a,s,u,l){e.angle+=M(i,r,n,0,s.minimum,s.maximum,s.defalut,u)*l}function _(t,e,i,r,n){var o=t.x;return r&&(o*=-1),o}function f(t,e,i,r,n){var o=t.y;return r&&(o*=-1),o}function y(t,e,i,r,n){var o;return n=i>=2?e[i-1].position.substract(e[i-2].position):n.multiplyByScaler(-1),o=a.CubismMath.directionToRadian(n,t),r&&(o*=-1),o}function v(t,e){return JSON.parse(JSON.stringify(t.x))}function b(t,e){return JSON.parse(JSON.stringify(t.y))}function C(t,e){return JSON.parse(JSON.stringify(e))}function S(t,e,i,r,n,o,u,l){var h,c,p,d,g=new s.CubismVector2(0,0),m=new s.CubismVector2(0,0),_=new s.CubismVector2(0,0),f=new s.CubismVector2(0,0);t[0].position=new s.CubismVector2(i.x,i.y),h=a.CubismMath.degreesToRadian(r),(d=a.CubismMath.radianToDirection(h)).normalize();for(var y=1;y<e;++y)t[y].force=d.multiplyByScaler(t[y].acceleration).add(n),t[y].lastPosition=new s.CubismVector2(t[y].position.x,t[y].position.y),c=t[y].delay*u*30,g=t[y].position.substract(t[y-1].position),p=a.CubismMath.directionToRadian(t[y].lastGravity,d)/l,g.x=a.CubismMath.cos(p)*g.x-g.y*a.CubismMath.sin(p),g.y=a.CubismMath.sin(p)*g.x+g.y*a.CubismMath.cos(p),t[y].position=t[y-1].position.add(g),m=t[y].velocity.multiplyByScaler(c),_=t[y].force.multiplyByScaler(c).multiplyByScaler(c),t[y].position=t[y].position.add(m).add(_),(f=t[y].position.substract(t[y-1].position)).normalize(),t[y].position=t[y-1].position.add(f.multiplyByScaler(t[y].radius)),a.CubismMath.abs(t[y].position.x)<o&&(t[y].position.x=0),0!=c&&(t[y].velocity=t[y].position.substract(t[y].lastPosition),t[y].velocity=t[y].velocity.divisionByScalar(c),t[y].velocity=t[y].velocity.multiplyByScaler(t[y].mobility)),t[y].force=new s.CubismVector2(0,0),t[y].lastGravity=new s.CubismVector2(d.x,d.y)}function P(t,e,i,r,n){var o,a;(o=r*n.getScale(n.translationScale,n.angleScale))<e?(o<n.valueBelowMinimum&&(n.valueBelowMinimum=o),o=e):o>i&&(o>n.valueExceededMaximum&&(n.valueExceededMaximum=o),o=i),(a=n.weight/100)>=1||(o=t[0]*(1-a)+o*a),t[0]=o}function M(t,e,i,r,n,o,s,u){var l=0,h=a.CubismMath.max(i,e);h<t&&(t=h);var c=a.CubismMath.min(i,e);c>t&&(t=c);var p,d,g=a.CubismMath.min(n,o),m=a.CubismMath.max(n,o),_=s,f=(p=c,d=h,a.CubismMath.min(p,d)+function(t,e){var i=a.CubismMath.max(t,e),r=a.CubismMath.min(t,e);return a.CubismMath.abs(i-r)}(p,d)/2),y=t-f;switch(function(t){var e=0;return t>0?e=1:t<0&&(e=-1),e}(y)){case 1:var v=m-_;0!=(b=h-f)&&(l=y*(v/b),l+=_);break;case-1:var b;v=g-_,0!=(b=c-f)&&(l=y*(v/b),l+=_);break;case 0:l=_}return u?l:-1*l}e.Options=p;var x,w=o(i(8782));(x=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismPhysics=w.CubismPhysics,x.Options=w.Options},5392:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismPhysicsRig=e.CubismPhysicsOutput=e.CubismPhysicsInput=e.CubismPhysicsSubRig=e.CubismPhysicsParticle=e.CubismPhysicsNormalization=e.CubismPhysicsParameter=e.PhysicsJsonEffectiveForces=e.CubismPhysicsSource=e.CubismPhysicsTargetType=void 0;var a,s,u=i(8241),l=i(8282);(s=e.CubismPhysicsTargetType||(e.CubismPhysicsTargetType={}))[s.CubismPhysicsTargetType_Parameter=0]="CubismPhysicsTargetType_Parameter",(a=e.CubismPhysicsSource||(e.CubismPhysicsSource={}))[a.CubismPhysicsSource_X=0]="CubismPhysicsSource_X",a[a.CubismPhysicsSource_Y=1]="CubismPhysicsSource_Y",a[a.CubismPhysicsSource_Angle=2]="CubismPhysicsSource_Angle";e.PhysicsJsonEffectiveForces=function(){this.gravity=new u.CubismVector2(0,0),this.wind=new u.CubismVector2(0,0)};var h=function(){};e.CubismPhysicsParameter=h;var c=function(){};e.CubismPhysicsNormalization=c;e.CubismPhysicsParticle=function(){this.initialPosition=new u.CubismVector2(0,0),this.position=new u.CubismVector2(0,0),this.lastPosition=new u.CubismVector2(0,0),this.lastGravity=new u.CubismVector2(0,0),this.force=new u.CubismVector2(0,0),this.velocity=new u.CubismVector2(0,0)};e.CubismPhysicsSubRig=function(){this.normalizationPosition=new c,this.normalizationAngle=new c};e.CubismPhysicsInput=function(){this.source=new h};e.CubismPhysicsOutput=function(){this.destination=new h,this.translationScale=new u.CubismVector2(0,0)};e.CubismPhysicsRig=function(){this.settings=new l.csmVector,this.inputs=new l.csmVector,this.outputs=new l.csmVector,this.particles=new l.csmVector,this.gravity=new u.CubismVector2(0,0),this.wind=new u.CubismVector2(0,0)};var p,d=o(i(5392));(p=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismPhysicsInput=d.CubismPhysicsInput,p.CubismPhysicsNormalization=d.CubismPhysicsNormalization,p.CubismPhysicsOutput=d.CubismPhysicsOutput,p.CubismPhysicsParameter=d.CubismPhysicsParameter,p.CubismPhysicsParticle=d.CubismPhysicsParticle,p.CubismPhysicsRig=d.CubismPhysicsRig,p.CubismPhysicsSource=d.CubismPhysicsSource,p.CubismPhysicsSubRig=d.CubismPhysicsSubRig,p.CubismPhysicsTargetType=d.CubismPhysicsTargetType,p.PhysicsJsonEffectiveForces=d.PhysicsJsonEffectiveForces},7934:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismPhysicsJson=void 0;var a=i(3165),s=i(8241),u=i(7205),l="Position",h="Angle",c="Type",p="Meta",d="EffectiveForces",g="Gravity",m="Wind",_="PhysicsSettings",f="Normalization",y="Minimum",v="Maximum",b="Default",C="Reflect",S="Weight",P="Input",M="Output",x="Vertices",w=function(){function t(t,e){this._json=u.CubismJson.create(t,e)}return t.prototype.release=function(){u.CubismJson.delete(this._json)},t.prototype.getGravity=function(){var t=new s.CubismVector2(0,0);return t.x=this._json.getRoot().getValueByString(p).getValueByString(d).getValueByString(g).getValueByString("X").toFloat(),t.y=this._json.getRoot().getValueByString(p).getValueByString(d).getValueByString(g).getValueByString("Y").toFloat(),t},t.prototype.getWind=function(){var t=new s.CubismVector2(0,0);return t.x=this._json.getRoot().getValueByString(p).getValueByString(d).getValueByString(m).getValueByString("X").toFloat(),t.y=this._json.getRoot().getValueByString(p).getValueByString(d).getValueByString(m).getValueByString("Y").toFloat(),t},t.prototype.getSubRigCount=function(){return this._json.getRoot().getValueByString(p).getValueByString("PhysicsSettingCount").toInt()},t.prototype.getTotalInputCount=function(){return this._json.getRoot().getValueByString(p).getValueByString("TotalInputCount").toInt()},t.prototype.getTotalOutputCount=function(){return this._json.getRoot().getValueByString(p).getValueByString("TotalOutputCount").toInt()},t.prototype.getVertexCount=function(){return this._json.getRoot().getValueByString(p).getValueByString("VertexCount").toInt()},t.prototype.getNormalizationPositionMinimumValue=function(t){return this._json.getRoot().getValueByString(_).getValueByIndex(t).getValueByString(f).getValueByString(l).getValueByString(y).toFloat()},t.prototype.getNormalizationPositionMaximumValue=function(t){return this._json.getRoot().getValueByString(_).getValueByIndex(t).getValueByString(f).getValueByString(l).getValueByString(v).toFloat()},t.prototype.getNormalizationPositionDefaultValue=function(t){return this._json.getRoot().getValueByString(_).getValueByIndex(t).getValueByString(f).getValueByString(l).getValueByString(b).toFloat()},t.prototype.getNormalizationAngleMinimumValue=function(t){return this._json.getRoot().getValueByString(_).getValueByIndex(t).getValueByString(f).getValueByString(h).getValueByString(y).toFloat()},t.prototype.getNormalizationAngleMaximumValue=function(t){return this._json.getRoot().getValueByString(_).getValueByIndex(t).getValueByString(f).getValueByString(h).getValueByString(v).toFloat()},t.prototype.getNormalizationAngleDefaultValue=function(t){return this._json.getRoot().getValueByString(_).getValueByIndex(t).getValueByString(f).getValueByString(h).getValueByString(b).toFloat()},t.prototype.getInputCount=function(t){return this._json.getRoot().getValueByString(_).getValueByIndex(t).getValueByString(P).getVector().getSize()},t.prototype.getInputWeight=function(t,e){return this._json.getRoot().getValueByString(_).getValueByIndex(t).getValueByString(P).getValueByIndex(e).getValueByString(S).toFloat()},t.prototype.getInputReflect=function(t,e){return this._json.getRoot().getValueByString(_).getValueByIndex(t).getValueByString(P).getValueByIndex(e).getValueByString(C).toBoolean()},t.prototype.getInputType=function(t,e){return this._json.getRoot().getValueByString(_).getValueByIndex(t).getValueByString(P).getValueByIndex(e).getValueByString(c).getRawString()},t.prototype.getInputSourceId=function(t,e){return a.CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(_).getValueByIndex(t).getValueByString(P).getValueByIndex(e).getValueByString("Source").getValueByString("Id").getRawString())},t.prototype.getOutputCount=function(t){return this._json.getRoot().getValueByString(_).getValueByIndex(t).getValueByString(M).getVector().getSize()},t.prototype.getOutputVertexIndex=function(t,e){return this._json.getRoot().getValueByString(_).getValueByIndex(t).getValueByString(M).getValueByIndex(e).getValueByString("VertexIndex").toInt()},t.prototype.getOutputAngleScale=function(t,e){return this._json.getRoot().getValueByString(_).getValueByIndex(t).getValueByString(M).getValueByIndex(e).getValueByString("Scale").toFloat()},t.prototype.getOutputWeight=function(t,e){return this._json.getRoot().getValueByString(_).getValueByIndex(t).getValueByString(M).getValueByIndex(e).getValueByString(S).toFloat()},t.prototype.getOutputDestinationId=function(t,e){return a.CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(_).getValueByIndex(t).getValueByString(M).getValueByIndex(e).getValueByString("Destination").getValueByString("Id").getRawString())},t.prototype.getOutputType=function(t,e){return this._json.getRoot().getValueByString(_).getValueByIndex(t).getValueByString(M).getValueByIndex(e).getValueByString(c).getRawString()},t.prototype.getOutputReflect=function(t,e){return this._json.getRoot().getValueByString(_).getValueByIndex(t).getValueByString(M).getValueByIndex(e).getValueByString(C).toBoolean()},t.prototype.getParticleCount=function(t){return this._json.getRoot().getValueByString(_).getValueByIndex(t).getValueByString(x).getVector().getSize()},t.prototype.getParticleMobility=function(t,e){return this._json.getRoot().getValueByString(_).getValueByIndex(t).getValueByString(x).getValueByIndex(e).getValueByString("Mobility").toFloat()},t.prototype.getParticleDelay=function(t,e){return this._json.getRoot().getValueByString(_).getValueByIndex(t).getValueByString(x).getValueByIndex(e).getValueByString("Delay").toFloat()},t.prototype.getParticleAcceleration=function(t,e){return this._json.getRoot().getValueByString(_).getValueByIndex(t).getValueByString(x).getValueByIndex(e).getValueByString("Acceleration").toFloat()},t.prototype.getParticleRadius=function(t,e){return this._json.getRoot().getValueByString(_).getValueByIndex(t).getValueByString(x).getValueByIndex(e).getValueByString("Radius").toFloat()},t.prototype.getParticlePosition=function(t,e){var i=new s.CubismVector2(0,0);return i.x=this._json.getRoot().getValueByString(_).getValueByIndex(t).getValueByString(x).getValueByIndex(e).getValueByString(l).getValueByString("X").toFloat(),i.y=this._json.getRoot().getValueByString(_).getValueByIndex(t).getValueByString(x).getValueByIndex(e).getValueByString(l).getValueByString("Y").toFloat(),i},t}();e.CubismPhysicsJson=w;var B=o(i(7934));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismPhysicsJson=B.CubismPhysicsJson},2700:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismTextureColor=e.CubismBlendMode=e.CubismRenderer=void 0;var a,s=i(6683),u=function(){function t(){this._isCulling=!1,this._isPremultipliedAlpha=!1,this._anisortopy=0,this._model=null,this._modelColor=new l,this._mvpMatrix4x4=new s.CubismMatrix44,this._mvpMatrix4x4.loadIdentity()}return t.create=function(){return null},t.delete=function(t){},t.prototype.initialize=function(t){this._model=t},t.prototype.drawModel=function(){null!=this.getModel()&&this.doDrawModel()},t.prototype.setMvpMatrix=function(t){this._mvpMatrix4x4.setMatrix(t.getArray())},t.prototype.getMvpMatrix=function(){return this._mvpMatrix4x4},t.prototype.setModelColor=function(t,e,i,r){t<0?t=0:t>1&&(t=1),e<0?e=0:e>1&&(e=1),i<0?i=0:i>1&&(i=1),r<0?r=0:r>1&&(r=1),this._modelColor.R=t,this._modelColor.G=e,this._modelColor.B=i,this._modelColor.A=r},t.prototype.getModelColor=function(){return JSON.parse(JSON.stringify(this._modelColor))},t.prototype.setIsPremultipliedAlpha=function(t){this._isPremultipliedAlpha=t},t.prototype.isPremultipliedAlpha=function(){return this._isPremultipliedAlpha},t.prototype.setIsCulling=function(t){this._isCulling=t},t.prototype.isCulling=function(){return this._isCulling},t.prototype.setAnisotropy=function(t){this._anisortopy=t},t.prototype.getAnisotropy=function(){return this._anisortopy},t.prototype.getModel=function(){return this._model},t}();e.CubismRenderer=u,(a=e.CubismBlendMode||(e.CubismBlendMode={}))[a.CubismBlendMode_Normal=0]="CubismBlendMode_Normal",a[a.CubismBlendMode_Additive=1]="CubismBlendMode_Additive",a[a.CubismBlendMode_Multiplicative=2]="CubismBlendMode_Multiplicative";var l=function(){this.R=1,this.G=1,this.B=1,this.A=1};e.CubismTextureColor=l;var h,c=o(i(2700));(h=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismBlendMode=c.CubismBlendMode,h.CubismRenderer=c.CubismRenderer,h.CubismTextureColor=c.CubismTextureColor},9562:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&o(e,t,i);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismRenderer_WebGL=e.fragmentShaderSrcMaskInvertedPremultipliedAlpha=e.fragmentShaderSrcMaskPremultipliedAlpha=e.fragmentShaderSrcPremultipliedAlpha=e.vertexShaderSrcMasked=e.vertexShaderSrc=e.fragmentShaderSrcsetupMask=e.vertexShaderSrcSetupMask=e.ShaderNames=e.CubismShaderSet=e.CubismShader_WebGL=e.CubismClippingContext=e.CubismRenderTextureResource=e.CubismClippingManager_WebGL=void 0;var u,l,h,c=i(3165),p=i(6683),d=i(9474),g=i(8391),m=i(8282),_=i(9372),f=i(2700),y=function(){function t(){this._maskRenderTexture=null,this._colorBuffer=null,this._currentFrameNo=0,this._clippingMaskBufferSize=256,this._clippingContextListForMask=new m.csmVector,this._clippingContextListForDraw=new m.csmVector,this._channelColors=new m.csmVector,this._tmpBoundsOnModel=new g.csmRect,this._tmpMatrix=new p.CubismMatrix44,this._tmpMatrixForMask=new p.CubismMatrix44,this._tmpMatrixForDraw=new p.CubismMatrix44,this._maskTexture=null;var t=new f.CubismTextureColor;t.R=1,t.G=0,t.B=0,t.A=0,this._channelColors.pushBack(t),(t=new f.CubismTextureColor).R=0,t.G=1,t.B=0,t.A=0,this._channelColors.pushBack(t),(t=new f.CubismTextureColor).R=0,t.G=0,t.B=1,t.A=0,this._channelColors.pushBack(t),(t=new f.CubismTextureColor).R=0,t.G=0,t.B=0,t.A=1,this._channelColors.pushBack(t)}return t.prototype.getChannelFlagAsColor=function(t){return this._channelColors.at(t)},t.prototype.getMaskRenderTexture=function(){var t=0;if(this._maskTexture&&0!=this._maskTexture.texture&&(this._maskTexture.frameNo=this._currentFrameNo,t=this._maskTexture.texture),0==t){var e=this._clippingMaskBufferSize;this._colorBuffer=this.gl.createTexture(),this.gl.bindTexture(this.gl.TEXTURE_2D,this._colorBuffer),this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,e,e,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,null),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR),this.gl.bindTexture(this.gl.TEXTURE_2D,null),t=this.gl.createFramebuffer(),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,t),this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER,this.gl.COLOR_ATTACHMENT0,this.gl.TEXTURE_2D,this._colorBuffer,0),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,h),this._maskTexture=new v(this._currentFrameNo,t)}return t},t.prototype.setGL=function(t){this.gl=t},t.prototype.calcClippedDrawTotalBounds=function(t,e){for(var i=Number.MAX_VALUE,r=Number.MAX_VALUE,n=Number.MIN_VALUE,o=Number.MIN_VALUE,a=e._clippedDrawableIndexList.length,s=0;s<a;s++){for(var u=e._clippedDrawableIndexList[s],l=t.getDrawableVertexCount(u),h=t.getDrawableVertices(u),p=Number.MAX_VALUE,d=Number.MAX_VALUE,g=Number.MIN_VALUE,m=Number.MIN_VALUE,_=l*c.Constant.vertexStep,f=c.Constant.vertexOffset;f<_;f+=c.Constant.vertexStep){var y=h[f],v=h[f+1];y<p&&(p=y),y>g&&(g=y),v<d&&(d=v),v>m&&(m=v)}if(p!=Number.MAX_VALUE)if(p<i&&(i=p),d<r&&(r=d),g>n&&(n=g),m>o&&(o=m),i==Number.MAX_VALUE)e._allClippedDrawRect.x=0,e._allClippedDrawRect.y=0,e._allClippedDrawRect.width=0,e._allClippedDrawRect.height=0,e._isUsing=!1;else{e._isUsing=!0;var b=n-i,C=o-r;e._allClippedDrawRect.x=i,e._allClippedDrawRect.y=r,e._allClippedDrawRect.width=b,e._allClippedDrawRect.height=C}}},t.prototype.release=function(){for(var t=0;t<this._clippingContextListForMask.getSize();t++)this._clippingContextListForMask.at(t)&&(this._clippingContextListForMask.at(t).release(),this._clippingContextListForMask.set(t,void 0)),this._clippingContextListForMask.set(t,null);for(this._clippingContextListForMask=null,t=0;t<this._clippingContextListForDraw.getSize();t++)this._clippingContextListForDraw.set(t,null);for(this._clippingContextListForDraw=null,this._maskTexture&&(this.gl.deleteFramebuffer(this._maskTexture.texture),this._maskTexture=null),t=0;t<this._channelColors.getSize();t++)this._channelColors.set(t,null);this._channelColors=null,this.gl.deleteTexture(this._colorBuffer),this._colorBuffer=null},t.prototype.initialize=function(t,e,i,r){for(var n=0;n<e;n++)if(r[n]<=0)this._clippingContextListForDraw.pushBack(null);else{var o=this.findSameClip(i[n],r[n]);null==o&&(o=new b(this,i[n],r[n]),this._clippingContextListForMask.pushBack(o)),o.addClippedDrawable(n),this._clippingContextListForDraw.pushBack(o)}},t.prototype.setupClippingContext=function(t,e){this._currentFrameNo++;for(var i=0,r=0;r<this._clippingContextListForMask.getSize();r++){var n=this._clippingContextListForMask.at(r);this.calcClippedDrawTotalBounds(t,n),n._isUsing&&i++}if(i>0){for(this.gl.viewport(0,0,this._clippingMaskBufferSize,this._clippingMaskBufferSize),this._maskRenderTexture=this.getMaskRenderTexture(),e.getMvpMatrix(),e.preDraw(),this.setupLayoutBounds(i),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this._maskRenderTexture),this.gl.clearColor(1,1,1,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT),r=0;r<this._clippingContextListForMask.getSize();r++){var o=this._clippingContextListForMask.at(r),a=o._allClippedDrawRect,s=o._layoutBounds;this._tmpBoundsOnModel.setRect(a),this._tmpBoundsOnModel.expand(.05*a.width,.05*a.height);var u=s.width/this._tmpBoundsOnModel.width,c=s.height/this._tmpBoundsOnModel.height;this._tmpMatrix.loadIdentity(),this._tmpMatrix.translateRelative(-1,-1),this._tmpMatrix.scaleRelative(2,2),this._tmpMatrix.translateRelative(s.x,s.y),this._tmpMatrix.scaleRelative(u,c),this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x,-this._tmpBoundsOnModel.y),this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray()),this._tmpMatrix.loadIdentity(),this._tmpMatrix.translateRelative(s.x,s.y),this._tmpMatrix.scaleRelative(u,c),this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x,-this._tmpBoundsOnModel.y),this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray()),o._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray()),o._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray());for(var p=o._clippingIdCount,d=0;d<p;d++){var g=o._clippingIdList[d];t.getDrawableDynamicFlagVertexPositionsDidChange(g)&&(e.setIsCulling(0!=t.getDrawableCulling(g)),e.setClippingContextBufferForMask(o),e.drawMesh(t.getDrawableTextureIndices(g),t.getDrawableVertexIndexCount(g),t.getDrawableVertexCount(g),t.getDrawableVertexIndices(g),t.getDrawableVertices(g),t.getDrawableVertexUvs(g),t.getDrawableOpacity(g),f.CubismBlendMode.CubismBlendMode_Normal,!1))}}this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,h),e.setClippingContextBufferForMask(null),this.gl.viewport(l[0],l[1],l[2],l[3])}},t.prototype.findSameClip=function(t,e){for(var i=0;i<this._clippingContextListForMask.getSize();i++){var r=this._clippingContextListForMask.at(i),n=r._clippingIdCount;if(n==e){for(var o=0,a=0;a<n;a++)for(var s=r._clippingIdList[a],u=0;u<n;u++)if(t[u]==s){o++;break}if(o==n)return r}}return null},t.prototype.setupLayoutBounds=function(t){var e=t/4,i=t%4;e=~~e,i=~~i;for(var r=0,n=0;n<4;n++){var o=e+(n<i?1:0);if(0==o);else if(1==o){var a=this._clippingContextListForMask.at(r++);a._layoutChannelNo=n,a._layoutBounds.x=0,a._layoutBounds.y=0,a._layoutBounds.width=1,a._layoutBounds.height=1}else if(2==o)for(var s=0;s<o;s++)u=~~(u=s%2),(h=this._clippingContextListForMask.at(r++))._layoutChannelNo=n,h._layoutBounds.x=.5*u,h._layoutBounds.y=0,h._layoutBounds.width=.5,h._layoutBounds.height=1;else if(o<=4)for(s=0;s<o;s++)u=~~(u=s%2),l=~~(l=s/2),(h=this._clippingContextListForMask.at(r++))._layoutChannelNo=n,h._layoutBounds.x=.5*u,h._layoutBounds.y=.5*l,h._layoutBounds.width=.5,h._layoutBounds.height=.5;else if(o<=9)for(s=0;s<o;s++){var u,l,h;u=~~(u=s%3),l=~~(l=s/3),(h=this._clippingContextListForMask.at(r++))._layoutChannelNo=n,h._layoutBounds.x=u/3,h._layoutBounds.y=l/3,h._layoutBounds.width=1/3,h._layoutBounds.height=1/3}else(0,_.CubismLogError)("not supported mask count : {0}",o)}},t.prototype.getColorBuffer=function(){return this._colorBuffer},t.prototype.getClippingContextListForDraw=function(){return this._clippingContextListForDraw},t.prototype.setClippingMaskBufferSize=function(t){this._clippingMaskBufferSize=t},t.prototype.getClippingMaskBufferSize=function(){return this._clippingMaskBufferSize},t}();e.CubismClippingManager_WebGL=y;var v=function(t,e){this.frameNo=t,this.texture=e};e.CubismRenderTextureResource=v;var b=function(){function t(t,e,i){this._owner=t,this._clippingIdList=e,this._clippingIdCount=i,this._allClippedDrawRect=new g.csmRect,this._layoutBounds=new g.csmRect,this._clippedDrawableIndexList=[],this._matrixForMask=new p.CubismMatrix44,this._matrixForDraw=new p.CubismMatrix44}return t.prototype.release=function(){null!=this._layoutBounds&&(this._layoutBounds=null),null!=this._allClippedDrawRect&&(this._allClippedDrawRect=null),null!=this._clippedDrawableIndexList&&(this._clippedDrawableIndexList=null)},t.prototype.addClippedDrawable=function(t){this._clippedDrawableIndexList.push(t)},t.prototype.getClippingManager=function(){return this._owner},t.prototype.setGl=function(t){this._owner.setGL(t)},t}();e.CubismClippingContext=b;var C=function(){function t(){this._shaderSets=new m.csmVector}return t.getInstance=function(){return null==u?u=new t:u},t.deleteInstance=function(){u&&(u.release(),u=null)},t.prototype.release=function(){this.releaseShaderProgram()},t.prototype.setupShaderProgram=function(t,e,i,r,n,o,a,s,u,l,h,c,p){var d,g,m,y;if(h||(0,_.CubismLogError)("NoPremultipliedAlpha is not allowed"),0==this._shaderSets.getSize()&&this.generateShaders(),null!=t.getClippingContextBufferForMask()){var v=this._shaderSets.at(S.ShaderNames_SetupMask);this.gl.useProgram(v.shaderProgram),this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,e),this.gl.uniform1i(v.samplerTexture0Location,0),null==a.vertex&&(a.vertex=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,a.vertex),this.gl.bufferData(this.gl.ARRAY_BUFFER,r,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(v.attributePositionLocation),this.gl.vertexAttribPointer(v.attributePositionLocation,2,this.gl.FLOAT,!1,0,0),null==a.uv&&(a.uv=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,a.uv),this.gl.bufferData(this.gl.ARRAY_BUFFER,o,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(v.attributeTexCoordLocation),this.gl.vertexAttribPointer(v.attributeTexCoordLocation,2,this.gl.FLOAT,!1,0,0);var b=t.getClippingContextBufferForMask()._layoutChannelNo,C=t.getClippingContextBufferForMask().getClippingManager().getChannelFlagAsColor(b);this.gl.uniform4f(v.uniformChannelFlagLocation,C.R,C.G,C.B,C.A),this.gl.uniformMatrix4fv(v.uniformClipMatrixLocation,!1,t.getClippingContextBufferForMask()._matrixForMask.getArray());var M=t.getClippingContextBufferForMask()._layoutBounds;this.gl.uniform4f(v.uniformBaseColorLocation,2*M.x-1,2*M.y-1,2*M.getRight()-1,2*M.getBottom()-1),d=this.gl.ZERO,g=this.gl.ONE_MINUS_SRC_COLOR,m=this.gl.ZERO,y=this.gl.ONE_MINUS_SRC_ALPHA}else{var x=null!=t.getClippingContextBufferForDraw(),w=x?p?2:1:0;switch(v=new P,u){case f.CubismBlendMode.CubismBlendMode_Normal:default:v=this._shaderSets.at(S.ShaderNames_NormalPremultipliedAlpha+w),d=this.gl.ONE,g=this.gl.ONE_MINUS_SRC_ALPHA,m=this.gl.ONE,y=this.gl.ONE_MINUS_SRC_ALPHA;break;case f.CubismBlendMode.CubismBlendMode_Additive:v=this._shaderSets.at(S.ShaderNames_AddPremultipliedAlpha+w),d=this.gl.ONE,g=this.gl.ONE,m=this.gl.ZERO,y=this.gl.ONE;break;case f.CubismBlendMode.CubismBlendMode_Multiplicative:v=this._shaderSets.at(S.ShaderNames_MultPremultipliedAlpha+w),d=this.gl.DST_COLOR,g=this.gl.ONE_MINUS_SRC_ALPHA,m=this.gl.ZERO,y=this.gl.ONE}if(this.gl.useProgram(v.shaderProgram),null==a.vertex&&(a.vertex=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,a.vertex),this.gl.bufferData(this.gl.ARRAY_BUFFER,r,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(v.attributePositionLocation),this.gl.vertexAttribPointer(v.attributePositionLocation,2,this.gl.FLOAT,!1,0,0),null==a.uv&&(a.uv=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,a.uv),this.gl.bufferData(this.gl.ARRAY_BUFFER,o,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(v.attributeTexCoordLocation),this.gl.vertexAttribPointer(v.attributeTexCoordLocation,2,this.gl.FLOAT,!1,0,0),x){this.gl.activeTexture(this.gl.TEXTURE1);var B=t.getClippingContextBufferForDraw().getClippingManager().getColorBuffer();this.gl.bindTexture(this.gl.TEXTURE_2D,B),this.gl.uniform1i(v.samplerTexture1Location,1),this.gl.uniformMatrix4fv(v.uniformClipMatrixLocation,!1,t.getClippingContextBufferForDraw()._matrixForDraw.getArray()),b=t.getClippingContextBufferForDraw()._layoutChannelNo,C=t.getClippingContextBufferForDraw().getClippingManager().getChannelFlagAsColor(b),this.gl.uniform4f(v.uniformChannelFlagLocation,C.R,C.G,C.B,C.A)}this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,e),this.gl.uniform1i(v.samplerTexture0Location,0),this.gl.uniformMatrix4fv(v.uniformMatrixLocation,!1,c.getArray()),this.gl.uniform4f(v.uniformBaseColorLocation,l.R,l.G,l.B,l.A)}null==a.index&&(a.index=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,a.index),this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,n,this.gl.DYNAMIC_DRAW),this.gl.blendFuncSeparate(d,g,m,y)},t.prototype.releaseShaderProgram=function(){for(var t=0;t<this._shaderSets.getSize();t++)this.gl.deleteProgram(this._shaderSets.at(t).shaderProgram),this._shaderSets.at(t).shaderProgram=0,this._shaderSets.set(t,void 0),this._shaderSets.set(t,null)},t.prototype.generateShaders=function(){for(var t=0;t<10;t++)this._shaderSets.pushBack(new P);this._shaderSets.at(0).shaderProgram=this.loadShaderProgram(e.vertexShaderSrcSetupMask,e.fragmentShaderSrcsetupMask),this._shaderSets.at(1).shaderProgram=this.loadShaderProgram(e.vertexShaderSrc,e.fragmentShaderSrcPremultipliedAlpha),this._shaderSets.at(2).shaderProgram=this.loadShaderProgram(e.vertexShaderSrcMasked,e.fragmentShaderSrcMaskPremultipliedAlpha),this._shaderSets.at(3).shaderProgram=this.loadShaderProgram(e.vertexShaderSrcMasked,e.fragmentShaderSrcMaskInvertedPremultipliedAlpha),this._shaderSets.at(4).shaderProgram=this._shaderSets.at(1).shaderProgram,this._shaderSets.at(5).shaderProgram=this._shaderSets.at(2).shaderProgram,this._shaderSets.at(6).shaderProgram=this._shaderSets.at(3).shaderProgram,this._shaderSets.at(7).shaderProgram=this._shaderSets.at(1).shaderProgram,this._shaderSets.at(8).shaderProgram=this._shaderSets.at(2).shaderProgram,this._shaderSets.at(9).shaderProgram=this._shaderSets.at(3).shaderProgram,this._shaderSets.at(0).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram,"a_position"),this._shaderSets.at(0).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram,"a_texCoord"),this._shaderSets.at(0).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"s_texture0"),this._shaderSets.at(0).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_clipMatrix"),this._shaderSets.at(0).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_channelFlag"),this._shaderSets.at(0).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_baseColor"),this._shaderSets.at(1).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram,"a_position"),this._shaderSets.at(1).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram,"a_texCoord"),this._shaderSets.at(1).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"s_texture0"),this._shaderSets.at(1).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"u_matrix"),this._shaderSets.at(1).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"u_baseColor"),this._shaderSets.at(2).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram,"a_position"),this._shaderSets.at(2).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram,"a_texCoord"),this._shaderSets.at(2).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"s_texture0"),this._shaderSets.at(2).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"s_texture1"),this._shaderSets.at(2).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_matrix"),this._shaderSets.at(2).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_clipMatrix"),this._shaderSets.at(2).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_channelFlag"),this._shaderSets.at(2).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_baseColor"),this._shaderSets.at(3).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram,"a_position"),this._shaderSets.at(3).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram,"a_texCoord"),this._shaderSets.at(3).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"s_texture0"),this._shaderSets.at(3).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"s_texture1"),this._shaderSets.at(3).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_matrix"),this._shaderSets.at(3).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_clipMatrix"),this._shaderSets.at(3).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_channelFlag"),this._shaderSets.at(3).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_baseColor"),this._shaderSets.at(4).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram,"a_position"),this._shaderSets.at(4).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram,"a_texCoord"),this._shaderSets.at(4).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"s_texture0"),this._shaderSets.at(4).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"u_matrix"),this._shaderSets.at(4).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"u_baseColor"),this._shaderSets.at(5).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram,"a_position"),this._shaderSets.at(5).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram,"a_texCoord"),this._shaderSets.at(5).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"s_texture0"),this._shaderSets.at(5).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"s_texture1"),this._shaderSets.at(5).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_matrix"),this._shaderSets.at(5).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_clipMatrix"),this._shaderSets.at(5).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_channelFlag"),this._shaderSets.at(5).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_baseColor"),this._shaderSets.at(6).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram,"a_position"),this._shaderSets.at(6).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram,"a_texCoord"),this._shaderSets.at(6).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"s_texture0"),this._shaderSets.at(6).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"s_texture1"),this._shaderSets.at(6).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_matrix"),this._shaderSets.at(6).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_clipMatrix"),this._shaderSets.at(6).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_channelFlag"),this._shaderSets.at(6).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_baseColor"),this._shaderSets.at(7).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram,"a_position"),this._shaderSets.at(7).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram,"a_texCoord"),this._shaderSets.at(7).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"s_texture0"),this._shaderSets.at(7).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"u_matrix"),this._shaderSets.at(7).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"u_baseColor"),this._shaderSets.at(8).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram,"a_position"),this._shaderSets.at(8).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram,"a_texCoord"),this._shaderSets.at(8).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"s_texture0"),this._shaderSets.at(8).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"s_texture1"),this._shaderSets.at(8).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_matrix"),this._shaderSets.at(8).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_clipMatrix"),this._shaderSets.at(8).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_channelFlag"),this._shaderSets.at(8).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_baseColor"),this._shaderSets.at(9).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram,"a_position"),this._shaderSets.at(9).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram,"a_texCoord"),this._shaderSets.at(9).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"s_texture0"),this._shaderSets.at(9).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"s_texture1"),this._shaderSets.at(9).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_matrix"),this._shaderSets.at(9).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_clipMatrix"),this._shaderSets.at(9).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_channelFlag"),this._shaderSets.at(9).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_baseColor")},t.prototype.loadShaderProgram=function(t,e){var i=this.gl.createProgram(),r=this.compileShaderSource(this.gl.VERTEX_SHADER,t);if(!r)return(0,_.CubismLogError)("Vertex shader compile error!"),0;var n=this.compileShaderSource(this.gl.FRAGMENT_SHADER,e);return n?(this.gl.attachShader(i,r),this.gl.attachShader(i,n),this.gl.linkProgram(i),this.gl.getProgramParameter(i,this.gl.LINK_STATUS)?(this.gl.deleteShader(r),this.gl.deleteShader(n),i):((0,_.CubismLogError)("Failed to link program: {0}",i),this.gl.deleteShader(r),r=0,this.gl.deleteShader(n),n=0,i&&(this.gl.deleteProgram(i),i=0),0)):((0,_.CubismLogError)("Vertex shader compile error!"),0)},t.prototype.compileShaderSource=function(t,e){var i=e,r=this.gl.createShader(t);if(this.gl.shaderSource(r,i),this.gl.compileShader(r),!r){var n=this.gl.getShaderInfoLog(r);(0,_.CubismLogError)("Shader compile log: {0} ",n)}return this.gl.getShaderParameter(r,this.gl.COMPILE_STATUS)?r:(this.gl.deleteShader(r),null)},t.prototype.setGl=function(t){this.gl=t},t}();e.CubismShader_WebGL=C;var S,P=function(){};e.CubismShaderSet=P,function(t){t[t.ShaderNames_SetupMask=0]="ShaderNames_SetupMask",t[t.ShaderNames_NormalPremultipliedAlpha=1]="ShaderNames_NormalPremultipliedAlpha",t[t.ShaderNames_NormalMaskedPremultipliedAlpha=2]="ShaderNames_NormalMaskedPremultipliedAlpha",t[t.ShaderNames_NomralMaskedInvertedPremultipliedAlpha=3]="ShaderNames_NomralMaskedInvertedPremultipliedAlpha",t[t.ShaderNames_AddPremultipliedAlpha=4]="ShaderNames_AddPremultipliedAlpha",t[t.ShaderNames_AddMaskedPremultipliedAlpha=5]="ShaderNames_AddMaskedPremultipliedAlpha",t[t.ShaderNames_AddMaskedPremultipliedAlphaInverted=6]="ShaderNames_AddMaskedPremultipliedAlphaInverted",t[t.ShaderNames_MultPremultipliedAlpha=7]="ShaderNames_MultPremultipliedAlpha",t[t.ShaderNames_MultMaskedPremultipliedAlpha=8]="ShaderNames_MultMaskedPremultipliedAlpha",t[t.ShaderNames_MultMaskedPremultipliedAlphaInverted=9]="ShaderNames_MultMaskedPremultipliedAlphaInverted"}(S=e.ShaderNames||(e.ShaderNames={})),e.vertexShaderSrcSetupMask="attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_myPos;uniform mat4       u_clipMatrix;void main(){   gl_Position = u_clipMatrix * a_position;   v_myPos = u_clipMatrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}",e.fragmentShaderSrcsetupMask="precision mediump float;varying vec2       v_texCoord;varying vec4       v_myPos;uniform vec4       u_baseColor;uniform vec4       u_channelFlag;uniform sampler2D  s_texture0;void main(){   float isInside =        step(u_baseColor.x, v_myPos.x/v_myPos.w)       * step(u_baseColor.y, v_myPos.y/v_myPos.w)       * step(v_myPos.x/v_myPos.w, u_baseColor.z)       * step(v_myPos.y/v_myPos.w, u_baseColor.w);   gl_FragColor = u_channelFlag * texture2D(s_texture0, v_texCoord).a * isInside;}",e.vertexShaderSrc="attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;uniform mat4       u_matrix;void main(){   gl_Position = u_matrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}",e.vertexShaderSrcMasked="attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_clipPos;uniform mat4       u_matrix;uniform mat4       u_clipMatrix;void main(){   gl_Position = u_matrix * a_position;   v_clipPos = u_clipMatrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}",e.fragmentShaderSrcPremultipliedAlpha="precision mediump float;varying vec2       v_texCoord;uniform vec4       u_baseColor;uniform sampler2D  s_texture0;void main(){   gl_FragColor = texture2D(s_texture0 , v_texCoord) * u_baseColor;}",e.fragmentShaderSrcMaskPremultipliedAlpha="precision mediump float;varying vec2       v_texCoord;varying vec4       v_clipPos;uniform vec4       u_baseColor;uniform vec4       u_channelFlag;uniform sampler2D  s_texture0;uniform sampler2D  s_texture1;void main(){   vec4 col_formask = texture2D(s_texture0 , v_texCoord) * u_baseColor;   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;   col_formask = col_formask * maskVal;   gl_FragColor = col_formask;}",e.fragmentShaderSrcMaskInvertedPremultipliedAlpha="precision mediump float;varying vec2 v_texCoord;varying vec4 v_clipPos;uniform sampler2D s_texture0;uniform sampler2D s_texture1;uniform vec4 u_channelFlag;uniform vec4 u_baseColor;void main(){vec4 col_formask = texture2D(s_texture0, v_texCoord) * u_baseColor;vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;col_formask = col_formask * (1.0 - maskVal);gl_FragColor = col_formask;}";var M=function(t){function e(){var e=t.call(this)||this;return e._clippingContextBufferForMask=null,e._clippingContextBufferForDraw=null,e._clippingManager=new y,e.firstDraw=!0,e._textures=new d.csmMap,e._sortedDrawableIndexList=new m.csmVector,e._bufferData={vertex:WebGLBuffer=null,uv:WebGLBuffer=null,index:WebGLBuffer=null},e._textures.prepareCapacity(32,!0),e}return n(e,t),e.prototype.initialize=function(e){e.isUsingMasking()&&(this._clippingManager=new y,this._clippingManager.initialize(e,e.getDrawableCount(),e.getDrawableMasks(),e.getDrawableMaskCounts())),this._sortedDrawableIndexList.resize(e.getDrawableCount(),0),t.prototype.initialize.call(this,e)},e.prototype.bindTexture=function(t,e){this._textures.setValue(t,e)},e.prototype.getBindedTextures=function(){return this._textures},e.prototype.setClippingMaskBufferSize=function(t){this._clippingManager.release(),this._clippingManager=void 0,this._clippingManager=null,this._clippingManager=new y,this._clippingManager.setClippingMaskBufferSize(t),this._clippingManager.initialize(this.getModel(),this.getModel().getDrawableCount(),this.getModel().getDrawableMasks(),this.getModel().getDrawableMaskCounts())},e.prototype.getClippingMaskBufferSize=function(){return this._clippingManager.getClippingMaskBufferSize()},e.prototype.release=function(){this._clippingManager.release(),this._clippingManager=void 0,this._clippingManager=null,this.gl.deleteBuffer(this._bufferData.vertex),this._bufferData.vertex=null,this.gl.deleteBuffer(this._bufferData.uv),this._bufferData.uv=null,this.gl.deleteBuffer(this._bufferData.index),this._bufferData.index=null,this._bufferData=null,this._textures=null},e.prototype.doDrawModel=function(){null!=this._clippingManager&&(this.preDraw(),this._clippingManager.setupClippingContext(this.getModel(),this)),this.preDraw();for(var t=this.getModel().getDrawableCount(),e=this.getModel().getDrawableRenderOrders(),i=0;i<t;++i){var r=e[i];this._sortedDrawableIndexList.set(r,i)}for(i=0;i<t;++i){var n=this._sortedDrawableIndexList.at(i);this.getModel().getDrawableDynamicFlagIsVisible(n)&&(this.setClippingContextBufferForDraw(null!=this._clippingManager?this._clippingManager.getClippingContextListForDraw().at(n):null),this.setIsCulling(this.getModel().getDrawableCulling(n)),this.drawMesh(this.getModel().getDrawableTextureIndices(n),this.getModel().getDrawableVertexIndexCount(n),this.getModel().getDrawableVertexCount(n),this.getModel().getDrawableVertexIndices(n),this.getModel().getDrawableVertices(n),this.getModel().getDrawableVertexUvs(n),this.getModel().getDrawableOpacity(n),this.getModel().getDrawableBlendMode(n),this.getModel().getDrawableInvertedMaskBit(n)))}},e.prototype.drawMesh=function(t,e,i,r,n,o,a,s,u){this.isCulling()?this.gl.enable(this.gl.CULL_FACE):this.gl.disable(this.gl.CULL_FACE),this.gl.frontFace(this.gl.CCW);var l,h=this.getModelColor();null==this.getClippingContextBufferForMask()&&(h.A*=a,this.isPremultipliedAlpha()&&(h.R*=h.A,h.G*=h.A,h.B*=h.A)),l=null!=this._textures.getValue(t)?this._textures.getValue(t):null,C.getInstance().setupShaderProgram(this,l,i,n,r,o,this._bufferData,a,s,h,this.isPremultipliedAlpha(),this.getMvpMatrix(),u),this.gl.drawElements(this.gl.TRIANGLES,e,this.gl.UNSIGNED_SHORT,0),this.gl.useProgram(null),this.setClippingContextBufferForDraw(null),this.setClippingContextBufferForMask(null)},e.doStaticRelease=function(){C.deleteInstance()},e.prototype.setRenderState=function(t,e){h=t,l=e},e.prototype.preDraw=function(){this.firstDraw&&(this.firstDraw=!1,this._anisortopy=this.gl.getExtension("EXT_texture_filter_anisotropic")||this.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic")||this.gl.getExtension("MOZ_EXT_texture_filter_anisotropic")),this.gl.disable(this.gl.SCISSOR_TEST),this.gl.disable(this.gl.STENCIL_TEST),this.gl.disable(this.gl.DEPTH_TEST),this.gl.frontFace(this.gl.CW),this.gl.enable(this.gl.BLEND),this.gl.colorMask(!0,!0,!0,!0),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,null)},e.prototype.setClippingContextBufferForMask=function(t){this._clippingContextBufferForMask=t},e.prototype.getClippingContextBufferForMask=function(){return this._clippingContextBufferForMask},e.prototype.setClippingContextBufferForDraw=function(t){this._clippingContextBufferForDraw=t},e.prototype.getClippingContextBufferForDraw=function(){return this._clippingContextBufferForDraw},e.prototype.startUp=function(t){this.gl=t,this._clippingManager.setGL(t),C.getInstance().setGl(t)},e}(f.CubismRenderer);e.CubismRenderer_WebGL=M,f.CubismRenderer.staticRelease=function(){M.doStaticRelease()};var x,w=s(i(9562));(x=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismClippingContext=w.CubismClippingContext,x.CubismClippingManager_WebGL=w.CubismClippingManager_WebGL,x.CubismRenderTextureResource=w.CubismRenderTextureResource,x.CubismRenderer_WebGL=w.CubismRenderer_WebGL,x.CubismShaderSet=w.CubismShaderSet,x.CubismShader_WebGL=w.CubismShader_WebGL,x.ShaderNames=w.ShaderNames},9474:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.iterator=e.csmMap=e.csmPair=void 0;var a=i(9372),s=function(t,e){this.first=null==t?null:t,this.second=null==e?null:e};e.csmPair=s;var u=function(){function t(t){null!=t?t<1?(this._keyValues=[],this._dummyValue=null,this._size=0):(this._keyValues=new Array(t),this._size=t):(this._keyValues=[],this._dummyValue=null,this._size=0)}return t.prototype.release=function(){this.clear()},t.prototype.appendKey=function(t){this.prepareCapacity(this._size+1,!1),this._keyValues[this._size]=new s(t),this._size+=1},t.prototype.getValue=function(t){for(var e=-1,i=0;i<this._size;i++)if(this._keyValues[i].first==t){e=i;break}return e>=0?this._keyValues[e].second:(this.appendKey(t),this._keyValues[this._size-1].second)},t.prototype.setValue=function(t,e){for(var i=-1,r=0;r<this._size;r++)if(this._keyValues[r].first==t){i=r;break}i>=0?this._keyValues[i].second=e:(this.appendKey(t),this._keyValues[this._size-1].second=e)},t.prototype.isExist=function(t){for(var e=0;e<this._size;e++)if(this._keyValues[e].first==t)return!0;return!1},t.prototype.clear=function(){this._keyValues=void 0,this._keyValues=null,this._keyValues=[],this._size=0},t.prototype.getSize=function(){return this._size},t.prototype.prepareCapacity=function(e,i){e>this._keyValues.length&&(0==this._keyValues.length?(!i&&e<t.DefaultSize&&(e=t.DefaultSize),this._keyValues.length=e):(!i&&e<2*this._keyValues.length&&(e=2*this._keyValues.length),this._keyValues.length=e))},t.prototype.begin=function(){return new l(this,0)},t.prototype.end=function(){return new l(this,this._size)},t.prototype.erase=function(t){var e=t._index;return e<0||this._size<=e?t:(this._keyValues.splice(e,1),--this._size,new l(this,e))},t.prototype.dumpAsInt=function(){for(var t=0;t<this._size;t++)(0,a.CubismLogDebug)("{0} ,",this._keyValues[t]),(0,a.CubismLogDebug)("\n")},t.DefaultSize=10,t}();e.csmMap=u;var l=function(){function t(t,e){this._map=null!=t?t:new u,this._index=null!=e?e:0}return t.prototype.set=function(t){return this._index=t._index,this._map=t._map,this},t.prototype.preIncrement=function(){return++this._index,this},t.prototype.preDecrement=function(){return--this._index,this},t.prototype.increment=function(){return new t(this._map,this._index++)},t.prototype.decrement=function(){var e=new t(this._map,this._index);return this._map=e._map,this._index=e._index,this},t.prototype.ptr=function(){return this._map._keyValues[this._index]},t.prototype.notEqual=function(t){return this._index!=t._index||this._map!=t._map},t}();e.iterator=l;var h,c=o(i(9474));(h=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).csmMap=c.csmMap,h.csmPair=c.csmPair,h.iterator=c.iterator},8391:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.csmRect=void 0;var a=function(){function t(t,e,i,r){this.x=t,this.y=e,this.width=i,this.height=r}return t.prototype.getCenterX=function(){return this.x+.5*this.width},t.prototype.getCenterY=function(){return this.y+.5*this.height},t.prototype.getRight=function(){return this.x+this.width},t.prototype.getBottom=function(){return this.y+this.height},t.prototype.setRect=function(t){this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height},t.prototype.expand=function(t,e){this.x-=t,this.y-=e,this.width+=2*t,this.height+=2*e},t}();e.csmRect=a;var s=o(i(8391));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).csmRect=s.csmRect},53:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.csmString=void 0;var a=function(){function t(t){this.s=t}return t.prototype.append=function(t,e){return this.s+=void 0!==e?t.substr(0,e):t,this},t.prototype.expansion=function(t,e){for(var i=0;i<t;i++)this.append(e);return this},t.prototype.getBytes=function(){return encodeURIComponent(this.s).replace(/%../g,"x").length},t.prototype.getLength=function(){return this.s.length},t.prototype.isLess=function(t){return this.s<t.s},t.prototype.isGreat=function(t){return this.s>t.s},t.prototype.isEqual=function(t){return this.s==t},t.prototype.isEmpty=function(){return 0==this.s.length},t}();e.csmString=a;var s=o(i(53));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).csmString=s.csmString},8282:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.iterator=e.csmVector=void 0;var a=function(){function t(t){void 0===t&&(t=0),t<1?(this._ptr=[],this._capacity=0,this._size=0):(this._ptr=new Array(t),this._capacity=t,this._size=0)}return t.prototype.at=function(t){return this._ptr[t]},t.prototype.set=function(t,e){this._ptr[t]=e},t.prototype.get=function(t){void 0===t&&(t=0);for(var e=new Array,i=t;i<this._size;i++)e.push(this._ptr[i]);return e},t.prototype.pushBack=function(e){this._size>=this._capacity&&this.prepareCapacity(0==this._capacity?t.s_defaultSize:2*this._capacity),this._ptr[this._size++]=e},t.prototype.clear=function(){this._ptr.length=0,this._size=0},t.prototype.getSize=function(){return this._size},t.prototype.assign=function(t,e){this._size<t&&this.prepareCapacity(t);for(var i=0;i<t;i++)this._ptr[i]=e;this._size=t},t.prototype.resize=function(t,e){void 0===e&&(e=null),this.updateSize(t,e,!0)},t.prototype.updateSize=function(t,e,i){if(void 0===e&&(e=null),void 0===i&&(i=!0),this._size<t)if(this.prepareCapacity(t),i)for(var r=this._size;r<t;r++)this._ptr[r]="function"==typeof e?JSON.parse(JSON.stringify(new e)):e;else for(r=this._size;r<t;r++)this._ptr[r]=e;else{var n=this._size-t;this._ptr.splice(this._size-n,n)}this._size=t},t.prototype.insert=function(t,e,i){var r=t._index,n=e._index,o=i._index,a=o-n;this.prepareCapacity(this._size+a);var s=this._size-r;if(s>0)for(var u=0;u<s;u++)this._ptr.splice(r+u,0,null);for(u=n;u<o;u++,r++)this._ptr[r]=e._vector._ptr[u];this._size=this._size+a},t.prototype.remove=function(t){return!(t<0||this._size<=t||(this._ptr.splice(t,1),--this._size,0))},t.prototype.erase=function(t){var e=t._index;return e<0||this._size<=e?t:(this._ptr.splice(e,1),--this._size,new s(this,e))},t.prototype.prepareCapacity=function(t){t>this._capacity&&(0==this._capacity?(this._ptr=new Array(t),this._capacity=t):(this._ptr.length=t,this._capacity=t))},t.prototype.begin=function(){return 0==this._size?this.end():new s(this,0)},t.prototype.end=function(){return new s(this,this._size)},t.prototype.getOffset=function(e){var i=new t;return i._ptr=this.get(e),i._size=this.get(e).length,i._capacity=this.get(e).length,i},t.s_defaultSize=10,t}();e.csmVector=a;var s=function(){function t(t,e){this._vector=null!=t?t:null,this._index=null!=e?e:0}return t.prototype.set=function(t){return this._index=t._index,this._vector=t._vector,this},t.prototype.preIncrement=function(){return++this._index,this},t.prototype.preDecrement=function(){return--this._index,this},t.prototype.increment=function(){return new t(this._vector,this._index++)},t.prototype.decrement=function(){return new t(this._vector,this._index--)},t.prototype.ptr=function(){return this._vector._ptr[this._index]},t.prototype.substitution=function(t){return this._index=t._index,this._vector=t._vector,this},t.prototype.notEqual=function(t){return this._index!=t._index||this._vector!=t._vector},t}();e.iterator=s;var u,l=o(i(8282));(u=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).csmVector=l.csmVector,u.iterator=l.iterator},9372:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.CubismDebug=e.CubismLogError=e.CubismLogWarning=e.CubismLogInfo=e.CubismLogDebug=e.CubismLogVerbose=e.CSM_ASSERT=e.CubismLogPrintIn=e.CubismLogPrint=void 0;var a=i(4468),s=i(3165);e.CubismLogPrint=function(t,e,i){u.print(t,"[CSM]"+e,i)},e.CubismLogPrintIn=function(t,i,r){(0,e.CubismLogPrint)(t,i+"\n",r)},e.CSM_ASSERT=function(t){console.assert(t)},a.CSM_LOG_LEVEL<=a.CSM_LOG_LEVEL_VERBOSE?(e.CubismLogVerbose=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Verbose,"[V]"+t,i)},e.CubismLogDebug=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Debug,"[D]"+t,i)},e.CubismLogInfo=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Info,"[I]"+t,i)},e.CubismLogWarning=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Warning,"[W]"+t,i)},e.CubismLogError=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Error,"[E]"+t,i)}):a.CSM_LOG_LEVEL==a.CSM_LOG_LEVEL_DEBUG?(e.CubismLogDebug=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Debug,"[D]"+t,i)},e.CubismLogInfo=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Info,"[I]"+t,i)},e.CubismLogWarning=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Warning,"[W]"+t,i)},e.CubismLogError=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Error,"[E]"+t,i)}):a.CSM_LOG_LEVEL==a.CSM_LOG_LEVEL_INFO?(e.CubismLogInfo=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Info,"[I]"+t,i)},e.CubismLogWarning=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Warning,"[W]"+t,i)},e.CubismLogError=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Error,"[E]"+t,i)}):a.CSM_LOG_LEVEL==a.CSM_LOG_LEVEL_WARNING?(e.CubismLogWarning=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Warning,"[W]"+t,i)},e.CubismLogError=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Error,"[E]"+t,i)}):a.CSM_LOG_LEVEL==a.CSM_LOG_LEVEL_ERROR&&(e.CubismLogError=function(t){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,e.CubismLogPrintIn)(s.LogLevel.LogLevel_Error,"[E]"+t,i)});var u=function(){function t(){}return t.print=function(t,e,i){if(!(t<s.CubismFramework.getLoggingLevel())){var r=s.CubismFramework.coreLogFunction;r&&r(e.replace(/\{(\d+)\}/g,(function(t,e){return i[e]})))}},t.dumpBytes=function(t,e,i){for(var r=0;r<i;r++)r%16==0&&r>0?this.print(t,"\n"):r%8==0&&r>0&&this.print(t,"  "),this.print(t,"{0} ",[255&e[r]]);this.print(t,"\n")},t}();e.CubismDebug=u;var l=o(i(9372));(e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismDebug=l.CubismDebug},7205:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&o(e,t,i);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Live2DCubismFramework=e.JsonMap=e.JsonArray=e.JsonNullvalue=e.JsonError=e.JsonString=e.JsonBoolean=e.JsonFloat=e.CubismJson=e.Value=void 0;var u=i(3165),l=i(9474),h=i(53),c=i(8282),p=i(9372),d="Error: type mismatch",g=function(){function t(){}return t.prototype.getRawString=function(t,e){return this.getString(t,e)},t.prototype.toInt=function(t){return void 0===t&&(t=0),t},t.prototype.toFloat=function(t){return void 0===t&&(t=0),t},t.prototype.toBoolean=function(t){return void 0===t&&(t=!1),t},t.prototype.getSize=function(){return 0},t.prototype.getArray=function(t){return void 0===t&&(t=null),t},t.prototype.getVector=function(t){return void 0===t&&(t=new c.csmVector),t},t.prototype.getMap=function(t){return t},t.prototype.getValueByIndex=function(e){return t.errorValue.setErrorNotForClientCall(d)},t.prototype.getValueByString=function(e){return t.nullValue.setErrorNotForClientCall(d)},t.prototype.getKeys=function(){return t.s_dummyKeys},t.prototype.isError=function(){return!1},t.prototype.isNull=function(){return!1},t.prototype.isBool=function(){return!1},t.prototype.isFloat=function(){return!1},t.prototype.isString=function(){return!1},t.prototype.isArray=function(){return!1},t.prototype.isMap=function(){return!1},t.prototype.equals=function(t){return!1},t.prototype.isStatic=function(){return!1},t.prototype.setErrorNotForClientCall=function(t){return v.errorValue},t.staticInitializeNotForClientCall=function(){f.trueValue=new f(!0),f.falseValue=new f(!1),t.errorValue=new v("ERROR",!0),t.nullValue=new b,t.s_dummyKeys=new c.csmVector},t.staticReleaseNotForClientCall=function(){f.trueValue=null,f.falseValue=null,t.errorValue=null,t.nullValue=null,t.s_dummyKeys=null},t}();e.Value=g;var m=function(){function t(t,e){this._error=null,this._lineCount=0,this._root=null,null!=t&&this.parseBytes(t,e)}return t.create=function(e,i){var r=new t;return r.parseBytes(e,i)?r:(t.delete(r),null)},t.delete=function(t){},t.prototype.getRoot=function(){return this._root},t.prototype.arrayBufferToString=function(t){for(var e=new Uint8Array(t),i="",r=0,n=e.length;r<n;++r)i+="%"+this.pad(e[r].toString(16));return decodeURIComponent(i)},t.prototype.pad=function(t){return t.length<2?"0"+t:t},t.prototype.parseBytes=function(t,e){var i,r=new Array(1),n=this.arrayBufferToString(t);return this._root=this.parseValue(n,e,0,r),this._error?(i="Json parse error : @line "+(this._lineCount+1)+"\n",this._root=new y(i),(0,p.CubismLogInfo)("{0}",this._root.getRawString()),!1):null!=this._root||(this._root=new v(new h.csmString(this._error),!1),!1)},t.prototype.getParseError=function(){return this._error},t.prototype.checkEndOfFile=function(){return this._root.getArray()[1].equals("EOF")},t.prototype.parseValue=function(t,e,i,r){if(this._error)return null;for(var n,o=null,a=i;a<e;a++)switch(t[a]){case"-":case".":case"0":case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":var s=new Array(1);return n=(0,u.strtod)(t.slice(a),s),r[0]=t.indexOf(s[0]),new _(n);case'"':return new y(this.parseString(t,e,a+1,r));case"[":return this.parseArray(t,e,a+1,r);case"{":return this.parseObject(t,e,a+1,r);case"n":return a+3<e?(o=new b,r[0]=a+4):this._error="parse null",o;case"t":return a+3<e?(o=f.trueValue,r[0]=a+4):this._error="parse true",o;case"f":return a+4<e?(o=f.falseValue,r[0]=a+5):this._error="illegal ',' position",o;case",":return this._error="illegal ',' position",null;case"]":return r[0]=a,null;case"\n":this._lineCount++}return this._error="illegal end of value",null},t.prototype.parseString=function(t,e,i,r){if(this._error)return null;for(var n=i,o=new h.csmString(""),a=i;n<e;n++)switch(t[n]){case'"':return r[0]=n+1,o.append(t.slice(a),n-a),o.s;case"//":if(++n-1>a&&o.append(t.slice(a),n-a),a=n+1,n<e)switch(t[n]){case"\\":o.expansion(1,"\\");break;case'"':o.expansion(1,'"');break;case"/":o.expansion(1,"/");break;case"b":o.expansion(1,"\b");break;case"f":o.expansion(1,"\f");break;case"n":o.expansion(1,"\n");break;case"r":o.expansion(1,"\r");break;case"t":o.expansion(1,"\t");break;case"u":this._error="parse string/unicord escape not supported"}else this._error="parse string/escape error"}return this._error="parse string/illegal end",null},t.prototype.parseObject=function(t,e,i,r){if(this._error)return null;for(var n=new S,o="",a=i,s=Array(1),u=!1;a<e;a++){t:for(;a<e;a++)switch(t[a]){case'"':if(o=this.parseString(t,e,a+1,s),this._error)return null;a=s[0],u=!0;break t;case"}":return r[0]=a+1,n;case":":this._error="illegal ':' position";break;case"\n":this._lineCount++}if(!u)return this._error="key not found",null;u=!1;t:for(;a<e;a++)switch(t[a]){case":":u=!0,a++;break t;case"}":this._error="illegal '}' position";break;case"\n":this._lineCount++}if(!u)return this._error="':' not found",null;var l=this.parseValue(t,e,a,s);if(this._error)return null;a=s[0],n.put(o,l);t:for(;a<e;a++)switch(t[a]){case",":break t;case"}":return r[0]=a+1,n;case"\n":this._lineCount++}}return this._error="illegal end of perseObject",null},t.prototype.parseArray=function(t,e,i,r){if(this._error)return null;for(var n=new C,o=i,a=new Array(1);o<e;o++){var s=this.parseValue(t,e,o,a);if(this._error)return null;o=a[0],s&&n.add(s);t:for(;o<e;o++)switch(t[o]){case",":break t;case"]":return r[0]=o+1,n;case"\n":++this._lineCount}}return n=void 0,this._error="illegal end of parseObject",null},t}();e.CubismJson=m;var _=function(t){function e(e){var i=t.call(this)||this;return i._value=e,i}return n(e,t),e.prototype.isFloat=function(){return!0},e.prototype.getString=function(t,e){return this._value=parseFloat("\0"),this._stringBuffer="\0",this._stringBuffer},e.prototype.toInt=function(t){return void 0===t&&(t=0),parseInt(this._value.toString())},e.prototype.toFloat=function(t){return void 0===t&&(t=0),this._value},e.prototype.equals=function(t){return"number"==typeof t&&!Math.round(t)&&t==this._value},e}(g);e.JsonFloat=_;var f=function(t){function e(e){var i=t.call(this)||this;return i._boolValue=e,i}return n(e,t),e.prototype.isBool=function(){return!0},e.prototype.toBoolean=function(t){return void 0===t&&(t=!1),this._boolValue},e.prototype.getString=function(t,e){return this._stringBuffer=this._boolValue?"true":"false",this._stringBuffer},e.prototype.equals=function(t){return"boolean"==typeof t&&t==this._boolValue},e.prototype.isStatic=function(){return!0},e}(g);e.JsonBoolean=f;var y=function(t){function e(e){var i=t.call(this)||this;return"string"==typeof e&&(i._stringBuffer=e),e instanceof h.csmString&&(i._stringBuffer=e.s),i}return n(e,t),e.prototype.isString=function(){return!0},e.prototype.getString=function(t,e){return this._stringBuffer},e.prototype.equals=function(t){return"string"==typeof t?this._stringBuffer==t:t instanceof h.csmString&&this._stringBuffer==t.s},e}(g);e.JsonString=y;var v=function(t){function e(e,i){var r=this;return(r=t.call(this,e)||this)._isStatic=i,r}return n(e,t),e.prototype.isStatic=function(){return this._isStatic},e.prototype.setErrorNotForClientCall=function(t){return this._stringBuffer=t,this},e.prototype.isError=function(){return!0},e}(y);e.JsonError=v;var b=function(t){function e(){var e=t.call(this)||this;return e._stringBuffer="NullValue",e}return n(e,t),e.prototype.isNull=function(){return!0},e.prototype.getString=function(t,e){return this._stringBuffer},e.prototype.isStatic=function(){return!0},e.prototype.setErrorNotForClientCall=function(t){return this._stringBuffer=t,v.nullValue},e}(g);e.JsonNullvalue=b;var C=function(t){function e(){var e=t.call(this)||this;return e._array=new c.csmVector,e}return n(e,t),e.prototype.release=function(){for(var t=this._array.begin();t.notEqual(this._array.end());t.preIncrement()){var e=t.ptr();e&&!e.isStatic()&&(e=void 0,e=null)}},e.prototype.isArray=function(){return!0},e.prototype.getValueByIndex=function(t){if(t<0||this._array.getSize()<=t)return g.errorValue.setErrorNotForClientCall("Error: index out of bounds");var e=this._array.at(t);return null==e?g.nullValue:e},e.prototype.getValueByString=function(t){return g.errorValue.setErrorNotForClientCall(d)},e.prototype.getString=function(t,e){for(var i=e+"[\n",r=this._array.begin();r.notEqual(this._array.end());r.increment()){var n=r.ptr();this._stringBuffer+=e+""+n.getString(e+" ")+"\n"}return this._stringBuffer=i+e+"]\n",this._stringBuffer},e.prototype.add=function(t){this._array.pushBack(t)},e.prototype.getVector=function(t){return void 0===t&&(t=null),this._array},e.prototype.getSize=function(){return this._array.getSize()},e}(g);e.JsonArray=C;var S=function(t){function e(){var e=t.call(this)||this;return e._map=new l.csmMap,e}return n(e,t),e.prototype.release=function(){for(var t=this._map.begin();t.notEqual(this._map.end());){var e=t.ptr().second;e&&!e.isStatic()&&(e=void 0,e=null),t.preIncrement()}},e.prototype.isMap=function(){return!0},e.prototype.getValueByString=function(t){if(t instanceof h.csmString){var e=this._map.getValue(t.s);return null==e?g.nullValue:e}for(var i=this._map.begin();i.notEqual(this._map.end());i.preIncrement())if(i.ptr().first==t)return null==i.ptr().second?g.nullValue:i.ptr().second;return g.nullValue},e.prototype.getValueByIndex=function(t){return g.errorValue.setErrorNotForClientCall(d)},e.prototype.getString=function(t,e){this._stringBuffer=e+"{\n";for(var i=this._map.begin();i.notEqual(this._map.end());){var r=i.ptr().first,n=i.ptr().second;this._stringBuffer+=e+" "+r+" : "+n.getString(e+"   ")+" \n",i.preIncrement()}return this._stringBuffer+=e+"}\n",this._stringBuffer},e.prototype.getMap=function(t){return this._map},e.prototype.put=function(t,e){this._map.setValue(t,e)},e.prototype.getKeys=function(){if(!this._keys){this._keys=new c.csmVector;for(var t=this._map.begin();t.notEqual(this._map.end());){var e=t.ptr().first;this._keys.pushBack(e),t.preIncrement()}}return this._keys},e.prototype.getSize=function(){return this._keys.getSize()},e}(g);e.JsonMap=S;var P,M=s(i(7205));(P=e.Live2DCubismFramework||(e.Live2DCubismFramework={})).CubismJson=M.CubismJson,P.JsonArray=M.JsonArray,P.JsonBoolean=M.JsonBoolean,P.JsonError=M.JsonError,P.JsonFloat=M.JsonFloat,P.JsonMap=M.JsonMap,P.JsonNullvalue=M.JsonNullvalue,P.JsonString=M.JsonString,P.Value=M.Value},9556:function(t,e,i){Object.defineProperty(e,"__esModule",{value:!0}),e.CubismLoggingLevel=e.DebugTouchLogEnable=e.DebugLogEnable=e.PriorityForce=e.PriorityNormal=e.PriorityIdle=e.PriorityNone=e.HitAreaNameBody=e.HitAreaNameHead=e.MotionGroupTapBody=e.MotionGroupIdle=e.ViewLogicalMaxTop=e.ViewLogicalMaxBottom=e.ViewLogicalMaxRight=e.ViewLogicalMaxLeft=e.ViewLogicalTop=e.ViewLogicalBottom=e.ViewLogicalRight=e.ViewLogicalLeft=e.ViewMinScale=e.ViewMaxScale=e.ViewScale=void 0;var r=i(3165);e.ViewScale=1,e.ViewMaxScale=2,e.ViewMinScale=.8,e.ViewLogicalLeft=-1,e.ViewLogicalRight=1,e.ViewLogicalBottom=-1,e.ViewLogicalTop=1,e.ViewLogicalMaxLeft=-2,e.ViewLogicalMaxRight=2,e.ViewLogicalMaxBottom=-2,e.ViewLogicalMaxTop=2,e.MotionGroupIdle="Idle",e.MotionGroupTapBody="TapBody",e.HitAreaNameHead="Head",e.HitAreaNameBody="Body",e.PriorityNone=0,e.PriorityIdle=1,e.PriorityNormal=2,e.PriorityForce=3,e.DebugLogEnable=!0,e.DebugTouchLogEnable=!1,e.CubismLoggingLevel=r.LogLevel.LogLevel_Verbose},7551:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.LAppDelegate=e.frameBuffer=e.gl=e.live2d_view=void 0;var a=i(3165),s=o(i(9556)),u=i(6424),l=i(1986),h=i(3938),c=i(4585);e.live2d_view=null,e.gl=null,e.frameBuffer=null;var p=function(){function t(t){this._api=t,this._captured=!1,this._mouseX=0,this._mouseY=0,this._isEnd=!1,this._cubismOption=new a.Option,this._manager=new u.LAppLive2DManager(this,this._api),this._view=new c.LAppView(this,this._manager),this._textureManager=new h.LAppTextureManager}return t.prototype.initialize=function(t,i){return e.live2d_view=document.createElement("canvas"),e.live2d_view.width=this._width=t,e.live2d_view.height=this._height=i,e.gl=e.live2d_view.getContext("webgl")||e.live2d_view.getContext("experimental-webgl"),e.gl?(document.body.appendChild(e.live2d_view),e.frameBuffer||(e.frameBuffer=e.gl.getParameter(e.gl.FRAMEBUFFER_BINDING)),e.gl.enable(e.gl.BLEND),e.gl.blendFunc(e.gl.SRC_ALPHA,e.gl.ONE_MINUS_SRC_ALPHA),this._view.initialize(),this.initializeCubism(),!0):(alert("Cannot initialize WebGL. This browser does not support."),void(e.gl=null))},t.prototype.onResize=function(t,e){return 0==t||0==e?(console.log("[APP]size can't not be zero."),!1):(this._width=t,this._height=e,this._resizeCanvas(),this._view.initialize(),this._view.initializeSprite(),!0)},t.prototype.release=function(){this._textureManager.release(),this._textureManager=null,this._view.release(),this._view=null,this._manager=null,a.CubismFramework.dispose()},t.prototype.run=function(){var t=this,i=function(){l.LAppPal.updateTime(),e.gl.clearColor(0,0,0,0),e.gl.enable(e.gl.DEPTH_TEST),e.gl.depthFunc(e.gl.LEQUAL),e.gl.clear(e.gl.COLOR_BUFFER_BIT|e.gl.DEPTH_BUFFER_BIT),e.gl.clearDepth(1),e.gl.enable(e.gl.BLEND),e.gl.blendFunc(e.gl.SRC_ALPHA,e.gl.ONE_MINUS_SRC_ALPHA),t._view.render(),requestAnimationFrame(i)};i()},t.prototype.createShader=function(){var t=e.gl.createShader(e.gl.VERTEX_SHADER);if(null==t)return l.LAppPal.printMessage("failed to create vertexShader"),null;e.gl.shaderSource(t,"precision mediump float;attribute vec3 position;attribute vec2 uv;varying vec2 vuv;void main(void){   gl_Position = vec4(position, 1.0);   vuv = uv;}"),e.gl.compileShader(t);var i=e.gl.createShader(e.gl.FRAGMENT_SHADER);if(null==i)return l.LAppPal.printMessage("failed to create fragmentShader"),null;e.gl.shaderSource(i,"precision mediump float;varying vec2 vuv;uniform sampler2D texture;void main(void){   gl_FragColor = texture2D(texture, vuv);}"),e.gl.compileShader(i);var r=e.gl.createProgram();return e.gl.attachShader(r,t),e.gl.attachShader(r,i),e.gl.deleteShader(t),e.gl.deleteShader(i),e.gl.linkProgram(r),e.gl.useProgram(r),r},t.prototype.getView=function(){return this._view},t.prototype.getTextureManager=function(){return this._textureManager},t.prototype.initializeCubism=function(){this._cubismOption.logFunction=l.LAppPal.printMessage,this._cubismOption.loggingLevel=s.CubismLoggingLevel,a.CubismFramework.startUp(this._cubismOption),a.CubismFramework.initialize(),l.LAppPal.updateTime(),this._view.initializeSprite()},t.prototype._resizeCanvas=function(){e.live2d_view.width=this._width,e.live2d_view.height=this._height},t.prototype.onTouchBegan=function(t){if(this._view){this._captured=!0;var e=t.changedTouches[0].pageX,i=t.changedTouches[0].pageY;this._view.onTouchesBegan(e,i)}else l.LAppPal.printMessage("view notfound")},t.prototype.onTouchMoved=function(t){if(this._captured)if(this._view){var e=t.target.getBoundingClientRect(),i=t.changedTouches[0].clientX-e.left,r=t.changedTouches[0].clientY-e.top;this._view.onTouchesMoved(i,r)}else l.LAppPal.printMessage("view notfound")},t.prototype.onTouchEnded=function(t){if(this._captured=!1,this._view){var e=t.target.getBoundingClientRect(),i=t.changedTouches[0].clientX-e.left,r=t.changedTouches[0].clientY-e.top;this._view.onTouchesEnded(i,r)}else l.LAppPal.printMessage("view notfound")},t.prototype.getManager=function(){return this._manager},t}();e.LAppDelegate=p},6424:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.LAppLive2DManager=void 0;var a=i(6683),s=o(i(9556)),u=i(7551),l=i(398),h=i(1986),c=function(){function t(t,e){this._finishedMotion=function(t){h.LAppPal.printMessage("Motion Finished:"),console.log(t)},this._delegate=t,this._api=e,this._viewMatrix=new a.CubismMatrix44,this.changeScene(),this._scale=1,this._x=0,this._y=0}return t.prototype.getModel=function(){return this._model},t.prototype.releaseAllModel=function(){var t;null===(t=this._model)||void 0===t||t.release()},t.prototype.onDrag=function(t,e){this._model&&this._model.setDragging(t,e)},t.prototype.onTap=function(t,e){null==this._onTap?(s.DebugLogEnable&&h.LAppPal.printMessage("[APP]tap point: {x: ".concat(t.toFixed(2)," y: ").concat(e.toFixed(2),"}")),this._model.hitTest(s.HitAreaNameHead,t,e)?(s.DebugLogEnable&&h.LAppPal.printMessage("[APP]hit area: [".concat(s.HitAreaNameHead,"]")),this._model.setRandomExpression()):this._model.hitTest(s.HitAreaNameBody,t,e)&&(s.DebugLogEnable&&h.LAppPal.printMessage("[APP]hit area: [".concat(s.HitAreaNameBody,"]")),this._model.startRandomMotion(s.MotionGroupTapBody,s.PriorityNormal,this._finishedMotion))):this._onTap(t,e)},t.prototype.onUpdate=function(){if(this._model){var t=u.live2d_view.width,e=u.live2d_view.height,i=new a.CubismMatrix44;this._model.getModel()&&(i.translateX(this._x),i.translateY(this._y),this._model.getModel().getCanvasWidth()>1&&t<e&&this._model.getModelMatrix().setWidth(2),i.scale(this._scale,this._scale),null!=this._viewMatrix&&i.multiplyByMatrix(this._viewMatrix)),this._model.update(),this._model.draw(i)}},t.prototype.changeScene=function(){this.releaseAllModel()},t.prototype.loadModel=function(t,e){s.DebugLogEnable&&h.LAppPal.printMessage("[APP]model load: ".concat(e,"/").concat(t));var i=e+"/",r=t+".model3.json";this._model=new l.LAppModel(this._delegate,this._api),this._model.loadAssets(i,r)},t.prototype.setViewMatrix=function(t){for(var e=0;e<16;e++)this._viewMatrix.getArray()[e]=t.getArray()[e]},t.prototype.setX=function(t){this._x=t},t.prototype.setY=function(t){this._y=t},t.prototype.setOnTap=function(t){this._onTap=t},t}();e.LAppLive2DManager=c},398:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&o(e,t,i);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.LAppModel=void 0,i(7147);var u,l=i(6190),h=i(1687),c=i(7377),p=i(2809),d=i(3165),g=i(2741),m=i(1355),_=i(3603),f=i(9474),y=i(8282),v=i(9372),b=s(i(9556)),C=i(7551),S=i(1986),P=i(5364);!function(t){t[t.LoadAssets=0]="LoadAssets",t[t.LoadModel=1]="LoadModel",t[t.WaitLoadModel=2]="WaitLoadModel",t[t.LoadExpression=3]="LoadExpression",t[t.WaitLoadExpression=4]="WaitLoadExpression",t[t.LoadPhysics=5]="LoadPhysics",t[t.WaitLoadPhysics=6]="WaitLoadPhysics",t[t.LoadPose=7]="LoadPose",t[t.WaitLoadPose=8]="WaitLoadPose",t[t.SetupEyeBlink=9]="SetupEyeBlink",t[t.SetupBreath=10]="SetupBreath",t[t.LoadUserData=11]="LoadUserData",t[t.WaitLoadUserData=12]="WaitLoadUserData",t[t.SetupEyeBlinkIds=13]="SetupEyeBlinkIds",t[t.SetupLipSyncIds=14]="SetupLipSyncIds",t[t.SetupLayout=15]="SetupLayout",t[t.LoadMotion=16]="LoadMotion",t[t.WaitLoadMotion=17]="WaitLoadMotion",t[t.CompleteInitialize=18]="CompleteInitialize",t[t.CompleteSetupModel=19]="CompleteSetupModel",t[t.LoadTexture=20]="LoadTexture",t[t.WaitLoadTexture=21]="WaitLoadTexture",t[t.CompleteSetup=22]="CompleteSetup"}(u||(u={}));var M=function(t){function e(e,i){var r=t.call(this)||this;return r._api=i,r._delegate=e,r._modelSetting=null,r._modelHomeDir=null,r._userTimeSeconds=0,r._eyeBlinkIds=new y.csmVector,r._lipSyncIds=new y.csmVector,r._motions=new f.csmMap,r._expressions=new f.csmMap,r._hitArea=new y.csmVector,r._userArea=new y.csmVector,r._idParamAngleX=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamAngleX),r._idParamAngleY=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamAngleY),r._idParamAngleZ=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamAngleZ),r._idParamEyeBallX=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamEyeBallX),r._idParamEyeBallY=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamEyeBallY),r._idParamBodyAngleX=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamBodyAngleX),r._state=u.LoadAssets,r._expressionCount=0,r._textureCount=0,r._motionCount=0,r._allMotionCount=0,r._wavFileHandler=new P.LAppWavFileHandler,r}return n(e,t),e.prototype.loadAssets=function(t,e){var i=this;this._modelHomeDir=t,fetch("".concat(this._modelHomeDir).concat(e)).then((function(t){return t.arrayBuffer()})).then((function(t){var e=new h.CubismModelSettingJson(t,t.byteLength);i._state=u.LoadModel,i.setupModel(e)}))},e.prototype.getModelSetting=function(){return this._modelSetting},e.prototype.setupModel=function(t){var e=this;if(this._updating=!0,this._initialized=!1,this._modelSetting=t,""!=this._modelSetting.getModelFileName()){var i=this._modelSetting.getModelFileName();fetch("".concat(this._modelHomeDir).concat(i)).then((function(t){return t.arrayBuffer()})).then((function(t){e.loadModel(t),e._state=u.LoadExpression,r()})),this._state=u.WaitLoadModel}else S.LAppPal.printMessage("Model data does not exist.");var r=function(){if(e._modelSetting.getExpressionCount()>0){for(var t=e._modelSetting.getExpressionCount(),i=function(i){var r=e._modelSetting.getExpressionName(i),o=e._modelSetting.getExpressionFileName(i);fetch("".concat(e._modelHomeDir).concat(o)).then((function(t){return t.arrayBuffer()})).then((function(i){var o=e.loadExpression(i,i.byteLength,r);null!=e._expressions.getValue(r)&&(m.ACubismMotion.delete(e._expressions.getValue(r)),e._expressions.setValue(r,null)),e._expressions.setValue(r,o),e._expressionCount++,e._expressionCount>=t&&(e._state=u.LoadPhysics,n())}))},r=0;r<t;r++)i(r);e._state=u.WaitLoadExpression}else e._state=u.LoadPhysics,n()},n=function(){if(""!=e._modelSetting.getPhysicsFileName()){var t=e._modelSetting.getPhysicsFileName();fetch("".concat(e._modelHomeDir).concat(t)).then((function(t){return t.arrayBuffer()})).then((function(t){e.loadPhysics(t,t.byteLength),e._state=u.LoadPose,o()})),e._state=u.WaitLoadPhysics}else e._state=u.LoadPose,o()},o=function(){if(""!=e._modelSetting.getPoseFileName()){var t=e._modelSetting.getPoseFileName();fetch("".concat(e._modelHomeDir).concat(t)).then((function(t){return t.arrayBuffer()})).then((function(t){e.loadPose(t,t.byteLength),e._state=u.SetupEyeBlink,a()})),e._state=u.WaitLoadPose}else e._state=u.SetupEyeBlink,a()},a=function(){e._modelSetting.getEyeBlinkParameterCount()>0&&(e._eyeBlink=p.CubismEyeBlink.create(e._modelSetting),e._state=u.SetupBreath),s()},s=function(){e._breath=c.CubismBreath.create();var t=new y.csmVector;t.pushBack(new c.BreathParameterData(e._idParamAngleX,0,15,6.5345,.5)),t.pushBack(new c.BreathParameterData(e._idParamAngleY,0,8,3.5345,.5)),t.pushBack(new c.BreathParameterData(e._idParamAngleZ,0,10,5.5345,.5)),t.pushBack(new c.BreathParameterData(e._idParamBodyAngleX,0,4,15.5345,.5)),t.pushBack(new c.BreathParameterData(d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamBreath),.5,.5,3.2345,1)),e._breath.setParameters(t),e._state=u.LoadUserData,h()},h=function(){if(""!=e._modelSetting.getUserDataFile()){var t=e._modelSetting.getUserDataFile();fetch("".concat(e._modelHomeDir).concat(t)).then((function(t){return t.arrayBuffer()})).then((function(t){e.loadUserData(t,t.byteLength),e._state=u.SetupEyeBlinkIds,g()})),e._state=u.WaitLoadUserData}else e._state=u.SetupEyeBlinkIds,g()},g=function(){for(var t=e._modelSetting.getEyeBlinkParameterCount(),i=0;i<t;++i)e._eyeBlinkIds.pushBack(e._modelSetting.getEyeBlinkParameterId(i));e._state=u.SetupLipSyncIds,_()},_=function(){for(var t=e._modelSetting.getLipSyncParameterCount(),i=0;i<t;++i)e._lipSyncIds.pushBack(e._modelSetting.getLipSyncParameterId(i));e._state=u.SetupLayout,v()},v=function(){var t=new f.csmMap;e._modelSetting.getLayoutMap(t),e._modelMatrix.setupFromLayout(t),e._state=u.LoadMotion,b()},b=function(){e._state=u.WaitLoadMotion,e._model.saveParameters(),e._allMotionCount=0,e._motionCount=0;for(var t=[],i=e._modelSetting.getMotionGroupCount(),r=0,n=0;n<i;n++){var o=e._modelSetting.getMotionGroupName(n);e._modelSetting.getMotionFileName(o,0).endsWith(".motion3.json")&&(e.preLoadMotionGroup(o),e._allMotionCount+=e._modelSetting.getMotionCount(o),t[r]=o,r++)}0==(i=r)&&(e._state=u.LoadTexture,e._motionManager.stopAllMotions(),e._updating=!1,e._initialized=!0,e.createRenderer(),e.setupTextures(),e.getRenderer().startUp(C.gl))}},e.prototype.setupTextures=function(){var t=this;if(this._state==u.LoadTexture){for(var e=this._modelSetting.getTextureCount(),i=function(i){if(""==r._modelSetting.getTextureFileName(i))return console.log("getTextureFileName null"),"continue";var n=r._modelSetting.getTextureFileName(i);n=r._modelHomeDir+n,r._delegate.getTextureManager().createTextureFromPngFile(n,!0,(function(r){t.getRenderer().bindTexture(i,r.id),t._textureCount++,t._textureCount>=e&&(t._state=u.CompleteSetup)})),r.getRenderer().setIsPremultipliedAlpha(!0)},r=this,n=0;n<e;n++)i(n);this._state=u.WaitLoadTexture}},e.prototype.reloadRenderer=function(){this.deleteRenderer(),this.createRenderer(),this.setupTextures()},e.prototype.update=function(){if(this._state==u.CompleteSetup){var t=S.LAppPal.getDeltaTime();this._userTimeSeconds+=t,this._dragManager.update(t),this._dragX=this._dragManager.getX(),this._dragY=this._dragManager.getY();var e=!1;if(this._model.loadParameters(),this._motionManager.isFinished()?this.startRandomMotion(b.MotionGroupIdle,b.PriorityIdle):e=this._motionManager.updateMotion(this._model,t),this._model.saveParameters(),e||null!=this._eyeBlink&&this._eyeBlink.updateParameters(this._model,t),null!=this._expressionManager&&this._expressionManager.updateMotion(this._model,t),this._model.addParameterValueById(this._idParamAngleX,30*this._dragX),this._model.addParameterValueById(this._idParamAngleY,30*this._dragY),this._model.addParameterValueById(this._idParamAngleZ,this._dragX*this._dragY*-30),this._model.addParameterValueById(this._idParamBodyAngleX,10*this._dragX),this._model.addParameterValueById(this._idParamEyeBallX,this._dragX),this._model.addParameterValueById(this._idParamEyeBallY,this._dragY),null!=this._breath&&this._breath.updateParameters(this._model,t),null!=this._physics&&this._physics.evaluate(this._model,t),this._lipsync){var i;this._wavFileHandler.update(t),i=this._wavFileHandler.getRms();for(var r=0;r<this._lipSyncIds.getSize();++r)this._model.addParameterValueById(this._lipSyncIds.at(r),i,.8)}null!=this._pose&&this._pose.updateParameters(this._model,t),this._model.update()}},e.prototype.startMotion=function(t,e,i,r){var n=this;if(i==b.PriorityForce)this._motionManager.setReservePriority(i);else if(!this._motionManager.reserveMotion(i))return this._debugMode&&S.LAppPal.printMessage("[APP]can't start motion."),_.InvalidMotionQueueEntryHandleValue;var o=this._modelSetting.getMotionFileName(t,e),a="".concat(t,"_").concat(e),s=this._motions.getValue(a),u=!1;null==s?fetch("".concat(this._modelHomeDir).concat(o)).then((function(t){return t.arrayBuffer()})).then((function(i){s=n.loadMotion(i,i.byteLength,null,r);var o=n._modelSetting.getMotionFadeInTimeValue(t,e);o>=0&&s.setFadeInTime(o),(o=n._modelSetting.getMotionFadeOutTimeValue(t,e))>=0&&s.setFadeOutTime(o),s.setEffectIds(n._eyeBlinkIds,n._lipSyncIds),u=!0})):s.setFinishedMotionHandler(r);var l=this._modelSetting.getMotionSoundFileName(t,e);if(0!=l.localeCompare("")){var h=l;h=this._modelHomeDir+h,this._wavFileHandler.start(h)}return this._debugMode&&S.LAppPal.printMessage("[APP]start motion: [".concat(t,"_").concat(e)),this._motionManager.startMotionPriority(s,u,i)},e.prototype.startRandomMotion=function(t,e,i){if(0==this._modelSetting.getMotionCount(t))return _.InvalidMotionQueueEntryHandleValue;var r=Math.floor(Math.random()*this._modelSetting.getMotionCount(t));return this.startMotion(t,r,e,i)},e.prototype.setExpression=function(t){var e=this._expressions.getValue(t);this._debugMode&&S.LAppPal.printMessage("[APP]expression: [".concat(t,"]")),null!=e?(this._expressionManager.startMotionPriority(e,!1,b.PriorityForce),this._api.tickResetExpression()):this._debugMode&&S.LAppPal.printMessage("[APP]expression[".concat(t,"] is null"))},e.prototype.setRandomExpression=function(){if(0!=this._expressions.getSize())for(var t=Math.floor(Math.random()*this._expressions.getSize()),e=0;e<this._expressions.getSize();e++)if(e==t){var i=this._expressions._keyValues[e].first;return void this.setExpression(i)}},e.prototype.motionEventFired=function(t){(0,v.CubismLogInfo)("{0} is fired on LAppModel!!",t.s)},e.prototype.hitTest=function(t,e,i){if(this._opacity<1)return!1;for(var r=this._modelSetting.getHitAreasCount(),n=0;n<r;n++)if(this._modelSetting.getHitAreaName(n)==t){var o=this._modelSetting.getHitAreaId(n);return this.isHit(o,e,i)}return!1},e.prototype.preLoadMotionGroup=function(t){for(var e=this,i=function(i){var n=r._modelSetting.getMotionFileName(t,i);if(null==n||"NullValue"==n)return"continue";var o="".concat(t,"_").concat(i);r._debugMode&&S.LAppPal.printMessage("[APP]load motion: ".concat(n," => [").concat(o,"]")),fetch("".concat(r._modelHomeDir).concat(n)).then((function(t){return t.arrayBuffer()})).then((function(r){var n=e.loadMotion(r,r.byteLength,o),a=e._modelSetting.getMotionFadeInTimeValue(t,i);a>=0&&n.setFadeInTime(a),(a=e._modelSetting.getMotionFadeOutTimeValue(t,i))>=0&&n.setFadeOutTime(a),n.setEffectIds(e._eyeBlinkIds,e._lipSyncIds),null!=e._motions.getValue(o)&&m.ACubismMotion.delete(e._motions.getValue(o)),e._motions.setValue(o,n),e._motionCount++,e._motionCount>=e._allMotionCount&&(e._state=u.LoadTexture,e._motionManager.stopAllMotions(),e._updating=!1,e._initialized=!0,e.createRenderer(),e.setupTextures(),e.getRenderer().startUp(C.gl))}))},r=this,n=0;n<this._modelSetting.getMotionCount(t);n++)i(n)},e.prototype.releaseMotions=function(){this._motions.clear()},e.prototype.releaseExpressions=function(){this._expressions.clear()},e.prototype.doDraw=function(){if(null!=this._model){var t=[0,0,C.live2d_view.width,C.live2d_view.height];this.getRenderer().setRenderState(C.frameBuffer,t),this.getRenderer().drawModel()}},e.prototype.draw=function(t){null!=this._model&&this._state==u.CompleteSetup&&(t.multiplyByMatrix(this._modelMatrix),this.getRenderer().setMvpMatrix(t),this.doDraw())},e}(g.CubismUserModel);e.LAppModel=M},1986:function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.LAppPal=void 0;var i=function(){function t(){}return t.loadFileAsBytes=function(t,e){fetch(t).then((function(t){return t.arrayBuffer()})).then((function(t){return e(t,t.byteLength)}))},t.getDeltaTime=function(){return this.s_deltaTime},t.updateTime=function(){this.s_currentFrame=Date.now(),this.s_deltaTime=(this.s_currentFrame-this.s_lastFrame)/1e3,this.s_lastFrame=this.s_currentFrame},t.printMessage=function(t){console.log(t)},t.lastUpdate=Date.now(),t.s_currentFrame=0,t.s_lastFrame=0,t.s_deltaTime=0,t}();e.LAppPal=i},3938:function(t,e,i){Object.defineProperty(e,"__esModule",{value:!0}),e.TextureInfo=e.LAppTextureManager=void 0;var r=i(8282),n=i(7551),o=function(){function t(){this._textures=new r.csmVector}return t.prototype.release=function(){for(var t=this._textures.begin();t.notEqual(this._textures.end());t.preIncrement())n.gl.deleteTexture(t.ptr().id);this._textures=null},t.prototype.createTextureFromPngFile=function(t,e,i){for(var r=this,o=function(r){if(r.ptr().fileName==t&&r.ptr().usePremultply==e)return r.ptr().img=new Image,r.ptr().img.onload=function(){return i(r.ptr())},r.ptr().img.src=t,{value:void 0}},s=this._textures.begin();s.notEqual(this._textures.end());s.preIncrement()){var u=o(s);if("object"==typeof u)return u.value}var l=new Image;l.onload=function(){var o=n.gl.createTexture();n.gl.bindTexture(n.gl.TEXTURE_2D,o),n.gl.texParameteri(n.gl.TEXTURE_2D,n.gl.TEXTURE_MIN_FILTER,n.gl.LINEAR_MIPMAP_LINEAR),n.gl.texParameteri(n.gl.TEXTURE_2D,n.gl.TEXTURE_MAG_FILTER,n.gl.LINEAR),e&&n.gl.pixelStorei(n.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1),n.gl.texImage2D(n.gl.TEXTURE_2D,0,n.gl.RGBA,n.gl.RGBA,n.gl.UNSIGNED_BYTE,l),n.gl.generateMipmap(n.gl.TEXTURE_2D),n.gl.bindTexture(n.gl.TEXTURE_2D,null);var s=new a;null!=s&&(s.fileName=t,s.width=l.width,s.height=l.height,s.id=o,s.img=l,s.usePremultply=e,r._textures.pushBack(s)),i(s)},l.src=t},t.prototype.releaseTextures=function(){for(var t=0;t<this._textures.getSize();t++)this._textures.set(t,null);this._textures.clear()},t.prototype.releaseTextureByTexture=function(t){for(var e=0;e<this._textures.getSize();e++)if(this._textures.at(e).id==t){this._textures.set(e,null),this._textures.remove(e);break}},t.prototype.releaseTextureByFilePath=function(t){for(var e=0;e<this._textures.getSize();e++)if(this._textures.at(e).fileName==t){this._textures.set(e,null),this._textures.remove(e);break}},t}();e.LAppTextureManager=o;var a=function(){this.id=null,this.width=0,this.height=0};e.TextureInfo=a},4585:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.LAppView=void 0;var a=i(6683),s=i(6502),u=o(i(9556)),l=i(7551),h=i(1986),c=i(9307),p=function(){function t(t,e){this._delegate=t,this._manager=e,this._programId=null,this._touchManager=new c.TouchManager,this._deviceToScreen=new a.CubismMatrix44,this._viewMatrix=new s.CubismViewMatrix}return t.prototype.initialize=function(){var t=l.live2d_view.width,e=l.live2d_view.height,i=t/e,r=-i,n=i,o=u.ViewLogicalLeft,a=u.ViewLogicalRight;if(this._viewMatrix.setScreenRect(r,n,o,a),this._viewMatrix.scale(u.ViewScale,u.ViewScale),this._deviceToScreen.loadIdentity(),t>e){var s=Math.abs(n-r);this._deviceToScreen.scaleRelative(s/t,-s/t)}else{var h=Math.abs(a-o);this._deviceToScreen.scaleRelative(h/e,-h/e)}this._deviceToScreen.translateRelative(.5*-t,.5*-e),this._viewMatrix.setMaxScale(u.ViewMaxScale),this._viewMatrix.setMinScale(u.ViewMinScale),this._viewMatrix.setMaxScreenRect(u.ViewLogicalMaxLeft,u.ViewLogicalMaxRight,u.ViewLogicalMaxBottom,u.ViewLogicalMaxTop)},t.prototype.release=function(){this._viewMatrix=null,this._touchManager=null,this._deviceToScreen=null,l.gl.deleteProgram(this._programId),this._programId=null},t.prototype.render=function(){l.gl.useProgram(this._programId),l.gl.flush(),this._manager.setViewMatrix(this._viewMatrix),this._manager.onUpdate()},t.prototype.initializeSprite=function(){null==this._programId&&(this._programId=this._delegate.createShader())},t.prototype.onTouchesBegan=function(t,e){this._touchManager.touchesBegan(t,e)},t.prototype.onTouchesMoved=function(t,e){var i=this.transformViewX(this._touchManager.getX()),r=this.transformViewY(this._touchManager.getY());this._touchManager.touchesMoved(t,e),this._manager.onDrag(i,r)},t.prototype.onTouchesEnded=function(t,e){this._manager.onDrag(0,0);var i=this._deviceToScreen.transformX(this._touchManager.getX()),r=this._deviceToScreen.transformY(this._touchManager.getY());u.DebugTouchLogEnable&&h.LAppPal.printMessage("[APP]touchesEnded x: ".concat(i," y: ").concat(r)),this._manager.onTap(i,r)},t.prototype.transformViewX=function(t){var e=this._deviceToScreen.transformX(t);return this._viewMatrix.invertTransformX(e)},t.prototype.transformViewY=function(t){var e=this._deviceToScreen.transformY(t);return this._viewMatrix.invertTransformY(e)},t.prototype.transformScreenX=function(t){return this._deviceToScreen.transformX(t)},t.prototype.transformScreenY=function(t){return this._deviceToScreen.transformY(t)},t}();e.LAppView=p},5364:function(t,e){var i=this&&this.__awaiter||function(t,e,i,r){return new(i||(i=Promise))((function(n,o){function a(t){try{u(r.next(t))}catch(t){o(t)}}function s(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(a,s)}u((r=r.apply(t,e||[])).next())}))},r=this&&this.__generator||function(t,e){var i,r,n,o,a={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(i)throw new TypeError("Generator is already executing.");for(;a;)try{if(i=1,r&&(n=2&o[0]?r.return:o[0]?r.throw||((n=r.return)&&n.call(r),0):r.next)&&!(n=n.call(r,o[1])).done)return n;switch(r=0,n&&(o=[2&o[0],n.value]),o[0]){case 0:case 1:n=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((n=(n=a.trys).length>0&&n[n.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!n||o[1]>n[0]&&o[1]<n[3])){a.label=o[1];break}if(6===o[0]&&a.label<n[1]){a.label=n[1],n=o;break}if(n&&a.label<n[2]){a.label=n[2],a.ops.push(o);break}n[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],r=0}finally{i=n=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.ByteReader=e.WavFileInfo=e.LAppWavFileHandler=void 0;var n=function(){function t(){var t=this;this._loadFiletoBytes=function(e,i){t._byteReader._fileByte=e,t._byteReader._fileDataView=new DataView(t._byteReader._fileByte),t._byteReader._fileSize=i},this._pcmData=null,this._userTimeSeconds=0,this._lastRms=0,this._sampleOffset=0,this._wavFileInfo=new o,this._byteReader=new a}return t.prototype.update=function(t){var e,i;if(null==this._pcmData||this._sampleOffset>=this._wavFileInfo._samplesPerChannel)return this._lastRms=0,!1;this._userTimeSeconds+=t,(e=Math.floor(this._userTimeSeconds*this._wavFileInfo._samplingRate))>this._wavFileInfo._samplesPerChannel&&(e=this._wavFileInfo._samplesPerChannel),i=0;for(var r=0;r<this._wavFileInfo._numberOfChannels;r++)for(var n=this._sampleOffset;n<e;n++){var o=this._pcmData[r][n];i+=o*o}return i=Math.sqrt(i/(this._wavFileInfo._numberOfChannels*(e-this._sampleOffset))),this._lastRms=i,this._sampleOffset=e,!0},t.prototype.start=function(t){this._sampleOffset=0,this._userTimeSeconds=0,this._lastRms=0,this.loadWavFile(t)},t.prototype.getRms=function(){return this._lastRms},t.prototype.loadWavFile=function(t){var e=this,n=!1;return null!=this._pcmData&&this.releasePcmData(),i(e,void 0,void 0,(function(){var o,a,s,u,l;return r(this,(function(h){switch(h.label){case 0:return o=this._byteReader,[4,i(e,void 0,void 0,(function(){return r(this,(function(e){return[2,fetch(t).then((function(t){return t.arrayBuffer()}))]}))}))];case 1:if(o._fileByte=h.sent(),this._byteReader._fileDataView=new DataView(this._byteReader._fileByte),this._byteReader._fileSize=this._byteReader._fileByte.byteLength,this._byteReader._readOffset=0,null==this._byteReader._fileByte||this._byteReader._fileSize<4)return[2,!1];this._wavFileInfo._fileName=t;try{if(!this._byteReader.getCheckSignature("RIFF"))throw n=!1,new Error('Cannot find Signeture "RIFF".');if(this._byteReader.get32LittleEndian(),!this._byteReader.getCheckSignature("WAVE"))throw n=!1,new Error('Cannot find Signeture "WAVE".');if(!this._byteReader.getCheckSignature("fmt "))throw n=!1,new Error('Cannot find Signeture "fmt".');if(a=this._byteReader.get32LittleEndian(),1!=this._byteReader.get16LittleEndian())throw n=!1,new Error("File is not linear PCM.");for(this._wavFileInfo._numberOfChannels=this._byteReader.get16LittleEndian(),this._wavFileInfo._samplingRate=this._byteReader.get32LittleEndian(),this._byteReader.get32LittleEndian(),this._byteReader.get16LittleEndian(),this._wavFileInfo._bitsPerSample=this._byteReader.get16LittleEndian(),a>16&&(this._byteReader._readOffset+=a-16);!this._byteReader.getCheckSignature("data")&&this._byteReader._readOffset<this._byteReader._fileSize;)this._byteReader._readOffset+=this._byteReader.get32LittleEndian()+4;if(this._byteReader._readOffset>=this._byteReader._fileSize)throw n=!1,new Error('Cannot find "data" Chunk.');for(s=this._byteReader.get32LittleEndian(),this._wavFileInfo._samplesPerChannel=8*s/(this._wavFileInfo._bitsPerSample*this._wavFileInfo._numberOfChannels),this._pcmData=new Array(this._wavFileInfo._numberOfChannels),l=0;l<this._wavFileInfo._numberOfChannels;l++)this._pcmData[l]=new Float32Array(this._wavFileInfo._samplesPerChannel);for(u=0;u<this._wavFileInfo._samplesPerChannel;u++)for(l=0;l<this._wavFileInfo._numberOfChannels;l++)this._pcmData[l][u]=this.getPcmSample();n=!0}catch(t){console.log(t)}return[2]}}))})),n},t.prototype.getPcmSample=function(){var t;switch(this._wavFileInfo._bitsPerSample){case 8:t=this._byteReader.get8()-128,t<<=24;break;case 16:t=this._byteReader.get16LittleEndian()<<16;break;case 24:t=this._byteReader.get24LittleEndian()<<8;break;default:t=0}return t/2147483647},t.prototype.releasePcmData=function(){for(var t=0;t<this._wavFileInfo._numberOfChannels;t++)delete this._pcmData[t];delete this._pcmData,this._pcmData=null},t}();e.LAppWavFileHandler=n;var o=function(){this._fileName="",this._numberOfChannels=0,this._bitsPerSample=0,this._samplingRate=0,this._samplesPerChannel=0};e.WavFileInfo=o;var a=function(){function t(){this._fileByte=null,this._fileDataView=null,this._fileSize=0,this._readOffset=0}return t.prototype.get8=function(){var t=this._fileDataView.getUint8(this._readOffset);return this._readOffset++,t},t.prototype.get16LittleEndian=function(){var t=this._fileDataView.getUint8(this._readOffset+1)<<8|this._fileDataView.getUint8(this._readOffset);return this._readOffset+=2,t},t.prototype.get24LittleEndian=function(){var t=this._fileDataView.getUint8(this._readOffset+2)<<16|this._fileDataView.getUint8(this._readOffset+1)<<8|this._fileDataView.getUint8(this._readOffset);return this._readOffset+=3,t},t.prototype.get32LittleEndian=function(){var t=this._fileDataView.getUint8(this._readOffset+3)<<24|this._fileDataView.getUint8(this._readOffset+2)<<16|this._fileDataView.getUint8(this._readOffset+1)<<8|this._fileDataView.getUint8(this._readOffset);return this._readOffset+=4,t},t.prototype.getCheckSignature=function(t){var e=new Uint8Array(4),i=(new TextEncoder).encode(t);if(4!=t.length)return!1;for(var r=0;r<4;r++)e[r]=this.get8();return e[0]==i[0]&&e[1]==i[1]&&e[2]==i[2]&&e[3]==i[3]},t}();e.ByteReader=a},9307:function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.TouchManager=void 0;var i=function(){function t(){this._startX=0,this._startY=0,this._lastX=0,this._lastY=0,this._lastX1=0,this._lastY1=0,this._lastX2=0,this._lastY2=0,this._lastTouchDistance=0,this._deltaX=0,this._deltaY=0,this._scale=1,this._touchSingle=!1,this._flipAvailable=!1}return t.prototype.getCenterX=function(){return this._lastX},t.prototype.getCenterY=function(){return this._lastY},t.prototype.getDeltaX=function(){return this._deltaX},t.prototype.getDeltaY=function(){return this._deltaY},t.prototype.getStartX=function(){return this._startX},t.prototype.getStartY=function(){return this._startY},t.prototype.getScale=function(){return this._scale},t.prototype.getX=function(){return this._lastX},t.prototype.getY=function(){return this._lastY},t.prototype.getX1=function(){return this._lastX1},t.prototype.getY1=function(){return this._lastY1},t.prototype.getX2=function(){return this._lastX2},t.prototype.getY2=function(){return this._lastY2},t.prototype.isSingleTouch=function(){return this._touchSingle},t.prototype.isFlickAvailable=function(){return this._flipAvailable},t.prototype.disableFlick=function(){this._flipAvailable=!1},t.prototype.touchesBegan=function(t,e){this._lastX=t,this._lastY=e,this._startX=t,this._startY=e,this._lastTouchDistance=-1,this._flipAvailable=!0,this._touchSingle=!0},t.prototype.touchesMoved=function(t,e){this._lastX=t,this._lastY=e,this._lastTouchDistance=-1,this._touchSingle=!0},t.prototype.getFlickDistance=function(){return this.calculateDistance(this._startX,this._startY,this._lastX,this._lastY)},t.prototype.calculateDistance=function(t,e,i,r){return Math.sqrt((t-i)*(t-i)+(e-r)*(e-r))},t.prototype.calculateMovingAmount=function(t,e){if(t>0!=e>0)return 0;var i=t>0?1:-1,r=Math.abs(t),n=Math.abs(e);return i*(r<n?r:n)},t}();e.TouchManager=i},7147:function(t,e,i){i.r(e),i.d(e,{Headers:function(){return g},Request:function(){return C},Response:function(){return P},DOMException:function(){return x},fetch:function(){return w}});var r="undefined"!=typeof globalThis&&globalThis||"undefined"!=typeof self&&self||void 0!==r&&r,n="URLSearchParams"in r,o="Symbol"in r&&"iterator"in Symbol,a="FileReader"in r&&"Blob"in r&&function(){try{return new Blob,!0}catch(t){return!1}}(),s="FormData"in r,u="ArrayBuffer"in r;if(u)var l=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],h=ArrayBuffer.isView||function(t){return t&&l.indexOf(Object.prototype.toString.call(t))>-1};function c(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(t)||""===t)throw new TypeError('Invalid character in header field name: "'+t+'"');return t.toLowerCase()}function p(t){return"string"!=typeof t&&(t=String(t)),t}function d(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return o&&(e[Symbol.iterator]=function(){return e}),e}function g(t){this.map={},t instanceof g?t.forEach((function(t,e){this.append(e,t)}),this):Array.isArray(t)?t.forEach((function(t){this.append(t[0],t[1])}),this):t&&Object.getOwnPropertyNames(t).forEach((function(e){this.append(e,t[e])}),this)}function m(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function _(t){return new Promise((function(e,i){t.onload=function(){e(t.result)},t.onerror=function(){i(t.error)}}))}function f(t){var e=new FileReader,i=_(e);return e.readAsArrayBuffer(t),i}function y(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function v(){return this.bodyUsed=!1,this._initBody=function(t){var e;this.bodyUsed=this.bodyUsed,this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:a&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:s&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:n&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():u&&a&&(e=t)&&DataView.prototype.isPrototypeOf(e)?(this._bodyArrayBuffer=y(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):u&&(ArrayBuffer.prototype.isPrototypeOf(t)||h(t))?this._bodyArrayBuffer=y(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):n&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},a&&(this.blob=function(){var t=m(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?m(this)||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer)):this.blob().then(f)}),this.text=function(){var t,e,i,r=m(this);if(r)return r;if(this._bodyBlob)return t=this._bodyBlob,i=_(e=new FileReader),e.readAsText(t),i;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),i=new Array(e.length),r=0;r<e.length;r++)i[r]=String.fromCharCode(e[r]);return i.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},s&&(this.formData=function(){return this.text().then(S)}),this.json=function(){return this.text().then(JSON.parse)},this}g.prototype.append=function(t,e){t=c(t),e=p(e);var i=this.map[t];this.map[t]=i?i+", "+e:e},g.prototype.delete=function(t){delete this.map[c(t)]},g.prototype.get=function(t){return t=c(t),this.has(t)?this.map[t]:null},g.prototype.has=function(t){return this.map.hasOwnProperty(c(t))},g.prototype.set=function(t,e){this.map[c(t)]=p(e)},g.prototype.forEach=function(t,e){for(var i in this.map)this.map.hasOwnProperty(i)&&t.call(e,this.map[i],i,this)},g.prototype.keys=function(){var t=[];return this.forEach((function(e,i){t.push(i)})),d(t)},g.prototype.values=function(){var t=[];return this.forEach((function(e){t.push(e)})),d(t)},g.prototype.entries=function(){var t=[];return this.forEach((function(e,i){t.push([i,e])})),d(t)},o&&(g.prototype[Symbol.iterator]=g.prototype.entries);var b=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function C(t,e){if(!(this instanceof C))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');var i,r,n=(e=e||{}).body;if(t instanceof C){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new g(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,n||null==t._bodyInit||(n=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new g(e.headers)),this.method=(r=(i=e.method||this.method||"GET").toUpperCase(),b.indexOf(r)>-1?r:i),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&n)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(n),!("GET"!==this.method&&"HEAD"!==this.method||"no-store"!==e.cache&&"no-cache"!==e.cache)){var o=/([?&])_=[^&]*/;o.test(this.url)?this.url=this.url.replace(o,"$1_="+(new Date).getTime()):this.url+=(/\?/.test(this.url)?"&":"?")+"_="+(new Date).getTime()}}function S(t){var e=new FormData;return t.trim().split("&").forEach((function(t){if(t){var i=t.split("="),r=i.shift().replace(/\+/g," "),n=i.join("=").replace(/\+/g," ");e.append(decodeURIComponent(r),decodeURIComponent(n))}})),e}function P(t,e){if(!(this instanceof P))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText=void 0===e.statusText?"":""+e.statusText,this.headers=new g(e.headers),this.url=e.url||"",this._initBody(t)}C.prototype.clone=function(){return new C(this,{body:this._bodyInit})},v.call(C.prototype),v.call(P.prototype),P.prototype.clone=function(){return new P(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new g(this.headers),url:this.url})},P.error=function(){var t=new P(null,{status:0,statusText:""});return t.type="error",t};var M=[301,302,303,307,308];P.redirect=function(t,e){if(-1===M.indexOf(e))throw new RangeError("Invalid status code");return new P(null,{status:e,headers:{location:t}})};var x=r.DOMException;try{new x}catch(t){(x=function(t,e){this.message=t,this.name=e;var i=Error(t);this.stack=i.stack}).prototype=Object.create(Error.prototype),x.prototype.constructor=x}function w(t,e){return new Promise((function(i,n){var o=new C(t,e);if(o.signal&&o.signal.aborted)return n(new x("Aborted","AbortError"));var s=new XMLHttpRequest;function l(){s.abort()}s.onload=function(){var t,e,r={status:s.status,statusText:s.statusText,headers:(t=s.getAllResponseHeaders()||"",e=new g,t.replace(/\r?\n[\t ]+/g," ").split("\r").map((function(t){return 0===t.indexOf("\n")?t.substr(1,t.length):t})).forEach((function(t){var i=t.split(":"),r=i.shift().trim();if(r){var n=i.join(":").trim();e.append(r,n)}})),e)};r.url="responseURL"in s?s.responseURL:r.headers.get("X-Request-URL");var n="response"in s?s.response:s.responseText;setTimeout((function(){i(new P(n,r))}),0)},s.onerror=function(){setTimeout((function(){n(new TypeError("Network request failed"))}),0)},s.ontimeout=function(){setTimeout((function(){n(new TypeError("Network request failed"))}),0)},s.onabort=function(){setTimeout((function(){n(new x("Aborted","AbortError"))}),0)},s.open(o.method,function(t){try{return""===t&&r.location.href?r.location.href:t}catch(e){return t}}(o.url),!0),"include"===o.credentials?s.withCredentials=!0:"omit"===o.credentials&&(s.withCredentials=!1),"responseType"in s&&(a?s.responseType="blob":u&&o.headers.get("Content-Type")&&-1!==o.headers.get("Content-Type").indexOf("application/octet-stream")&&(s.responseType="arraybuffer")),!e||"object"!=typeof e.headers||e.headers instanceof g?o.headers.forEach((function(t,e){s.setRequestHeader(e,t)})):Object.getOwnPropertyNames(e.headers).forEach((function(t){s.setRequestHeader(t,p(e.headers[t]))})),o.signal&&(o.signal.addEventListener("abort",l),s.onreadystatechange=function(){4===s.readyState&&o.signal.removeEventListener("abort",l)}),s.send(void 0===o._bodyInit?null:o._bodyInit)}))}w.polyfill=!0,r.fetch||(r.fetch=w,r.Headers=g,r.Request=C,r.Response=P)}},o={};function a(t){var e=o[t];if(void 0!==e)return e.exports;var i=o[t]={exports:{}};return n[t].call(i.exports,i,i.exports,a),i.exports}a.d=function(t,e){for(var i in e)a.o(e,i)&&!a.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},t=a(7551),e=a(1986),i=function(){this.enable=!0,this.time=5e3,this.run=!1,this.name=null},r=function(){function r(){var e=this;this.delegate=new t.LAppDelegate(this),this.resetExpression=new i,this.move=function(t){e.touchMoved(t.x,t.y)},this.down=function(t){e.touchEnded(t.x,t.y)}}return r.prototype.init=function(e,i){if(0==this.delegate.initialize(e,i))return!1;this.view=t.live2d_view;var r=this;return this.view.onresize=function(){r.delegate.onResize(r.view.width,r.view.height)},t.live2d_view.style.position="fixed",t.live2d_view.style.right="0px",t.live2d_view.style.bottom="0px",!0},r.prototype.run=function(){this.delegate.run()},r.prototype.close=function(){this.delegate.release()},r.prototype.scale=function(t){this.delegate._manager._scale=t},r.prototype.setX=function(t){this.delegate._manager._x=t},r.prototype.setY=function(t){this.delegate._manager._y=t},r.prototype.setXY=function(t,e){this.delegate._manager._x=t,this.delegate._manager._y=e},r.prototype.resize=function(t,e){this.delegate.onResize(t,e)},r.prototype.changeModel=function(t,i){if(null==i){if(null==this.path)return!1;this.delegate.getManager().loadModel(t,this.path)}else this.path=i,this.delegate.getManager().loadModel(t,i);var r=this,n=setTimeout((function(){var t=r.getExpressions();null!=t?(t.forEach((function(t){"normal"==t.name.toLowerCase()&&(r.resetExpression.name=t[0].name)})),r.resetExpression.name||(e.LAppPal.printMessage("[APP]no found default expression, set 0"),r.resetExpression.name=t[0].name),clearInterval(n)):e.LAppPal.printMessage("[APP]no expression")}),200);return!0},r.prototype.fixPos=function(e,i){var r=t.live2d_view.width,n=t.live2d_view.height,o=function(t){for(var e=t.offsetLeft,i=t.offsetParent;null!==i;)e+=i.offsetLeft,i=i.offsetParent;return e}(t.live2d_view),a=function(t){for(var e=t.offsetTop,i=t.offsetParent;null!==i;)e+=i.offsetTop,i=i.offsetParent;return e}(t.live2d_view),s=o+r,u=a+n,l=window.innerWidth,h=window.innerHeight;return e<o?e=-(o-e)/o*50:e>=o&&e<=s?e-=o:e=r+(e-s)/(l-s)*50,i<a?i=-(a-i)/a*50:i>=a&&e<=u?i-=a:i=n+(i-u)/(h-u)*50,[e,i]},r.prototype.touchesBegan=function(t,e){var i,r=this.delegate.getView();return null!=r&&(t=(i=this.fixPos(t,e))[0],e=i[1],r.onTouchesBegan(t,e),!0)},r.prototype.touchMoved=function(t,e){var i,r=this.delegate.getView();return null!=r&&(t=(i=this.fixPos(t,e))[0],e=i[1],r.onTouchesMoved(t,e),!0)},r.prototype.touchEnded=function(t,e){var i,r=this.delegate.getView();return null!=r&&(t=(i=this.fixPos(t,e))[0],e=i[1],r.onTouchesEnded(t,e),!0)},r.prototype.setOnTap=function(t){this.delegate._manager.setOnTap(t)},r.prototype.addListener=function(){addEventListener("mousemove",this.move),addEventListener("mousedown",this.down)},r.prototype.removeListener=function(){removeEventListener("mousemove",this.move),removeEventListener("mousedown",this.down)},r.prototype.getMotions=function(){var t=this.delegate.getManager().getModel();if(null==t)return null;var e=t.getModelSetting();if(null==e)return null;var i=e.getMotionGroupCount();if(0==i)return null;for(var r=new Array,n=0;n<i;n++){for(var o=new Array,a=e.getMotionGroupName(n),s=e.getMotionCount(a),u=0;u<s;u++){var l=e.getMotionFileName(a,u);o[u]=l}r[a]=o}return r},r.prototype.getExpressions=function(){var t=this.delegate.getManager().getModel();if(null==t)return null;var e=t.getModelSetting();if(null==e)return null;var i=e.getExpressionCount();if(0==i)return null;for(var r=new Array,n=0;n<i;n++){var o=e.getExpressionName(n),a=e.getExpressionFileName(n);r[n]={name:o,file:a}}return r},r.prototype.startMotion=function(t,e,i){var r=this.delegate.getManager().getModel();return null!=r&&(r.startMotion(t,e,i),!0)},r.prototype.startExpression=function(t){var e=this.delegate.getManager().getModel();return null!=e&&(e.setExpression(t),!0)},r.prototype.tickResetExpression=function(){if(1!=this.resetExpression.run){var t=this.delegate.getManager().getModel();if(null!=t&&1==this.resetExpression.enable&&null!=this.resetExpression.name){this.resetExpression.run=!0;var i=this,r=setTimeout((function(){e.LAppPal.printMessage("[APP]expression reset ".concat(i.resetExpression.name)),t.setExpression(i.resetExpression.name),this.resetExpression.run=!1,clearInterval(r)}),this.resetExpression.time)}}},r}(),console.log("live2dAPI init"),window.live2d={new:function(){return new r}}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ZSxFQUFNa2pELGNBQWMsRUFBUXdRLGdCQUFnQm4xQyxNQUM1Q2prQixLQUFLbzVELGdCQUFnQjdaLEtBQU0sRUFDM0I0YSxjQUFjLEtBQ2JuNkQsS0FBS281RCxnQkFBZ0IvdEMsU0FJaEMsRUF2UUEsR0F5UUFrSCxRQUFRamhCLElBQUksa0JBQ1oycEQsT0FBZSxPQUFJLENBQ2pCYyxJQUFLLFdBQ0gsT0FBTyxJQUFJQyxJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL21haW4udHMiLCJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL3NyYy9jdWJpc21kZWZhdWx0cGFyYW1ldGVyaWQudHMiLCJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL3NyYy9jdWJpc21mcmFtZXdvcmtjb25maWcudHMiLCJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL3NyYy9jdWJpc21tb2RlbHNldHRpbmdqc29uLnRzIiwid2VicGFjazovLy8uL0ZyYW1ld29yay9zcmMvZWZmZWN0L2N1YmlzbWJyZWF0aC50cyIsIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvc3JjL2VmZmVjdC9jdWJpc21leWVibGluay50cyIsIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvc3JjL2VmZmVjdC9jdWJpc21wb3NlLnRzIiwid2VicGFjazovLy8uL0ZyYW1ld29yay9zcmMvaWN1YmlzbW1vZGVsc2V0dGluZy50cyIsIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvc3JjL2lkL2N1YmlzbWlkLnRzIiwid2VicGFjazovLy8uL0ZyYW1ld29yay9zcmMvaWQvY3ViaXNtaWRtYW5hZ2VyLnRzIiwid2VicGFjazovLy8uL0ZyYW1ld29yay9zcmMvbGl2ZTJkY3ViaXNtZnJhbWV3b3JrLnRzIiwid2VicGFjazovLy8uL0ZyYW1ld29yay9zcmMvbWF0aC9jdWJpc21tYXRoLnRzIiwid2VicGFjazovLy8uL0ZyYW1ld29yay9zcmMvbWF0aC9jdWJpc21tYXRyaXg0NC50cyIsIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvc3JjL21hdGgvY3ViaXNtbW9kZWxtYXRyaXgudHMiLCJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL3NyYy9tYXRoL2N1YmlzbXRhcmdldHBvaW50LnRzIiwid2VicGFjazovLy8uL0ZyYW1ld29yay9zcmMvbWF0aC9jdWJpc212ZWN0b3IyLnRzIiwid2VicGFjazovLy8uL0ZyYW1ld29yay9zcmMvbWF0aC9jdWJpc212aWV3bWF0cml4LnRzIiwid2VicGFjazovLy8uL0ZyYW1ld29yay9zcmMvbW9kZWwvY3ViaXNtbW9jLnRzIiwid2VicGFjazovLy8uL0ZyYW1ld29yay9zcmMvbW9kZWwvY3ViaXNtbW9kZWwudHMiLCJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL3NyYy9tb2RlbC9jdWJpc21tb2RlbHVzZXJkYXRhLnRzIiwid2VicGFjazovLy8uL0ZyYW1ld29yay9zcmMvbW9kZWwvY3ViaXNtbW9kZWx1c2VyZGF0YWpzb24udHMiLCJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL3NyYy9tb2RlbC9jdWJpc211c2VybW9kZWwudHMiLCJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL3NyYy9tb3Rpb24vYWN1YmlzbW1vdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21leHByZXNzaW9ubW90aW9uLnRzIiwid2VicGFjazovLy8uL0ZyYW1ld29yay9zcmMvbW90aW9uL2N1YmlzbW1vdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb25pbnRlcm5hbC50cyIsIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb25qc29uLnRzIiwid2VicGFjazovLy8uL0ZyYW1ld29yay9zcmMvbW90aW9uL2N1YmlzbW1vdGlvbm1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL3NyYy9tb3Rpb24vY3ViaXNtbW90aW9ucXVldWVlbnRyeS50cyIsIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL3NyYy9waHlzaWNzL2N1YmlzbXBoeXNpY3MudHMiLCJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL3NyYy9waHlzaWNzL2N1YmlzbXBoeXNpY3NpbnRlcm5hbC50cyIsIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvc3JjL3BoeXNpY3MvY3ViaXNtcGh5c2ljc2pzb24udHMiLCJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL3NyYy9yZW5kZXJpbmcvY3ViaXNtcmVuZGVyZXIudHMiLCJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL3NyYy9yZW5kZXJpbmcvY3ViaXNtcmVuZGVyZXJfd2ViZ2wudHMiLCJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL3NyYy90eXBlL2NzbW1hcC50cyIsIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvc3JjL3R5cGUvY3NtcmVjdGYudHMiLCJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL3NyYy90eXBlL2NzbXN0cmluZy50cyIsIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvc3JjL3R5cGUvY3NtdmVjdG9yLnRzIiwid2VicGFjazovLy8uL0ZyYW1ld29yay9zcmMvdXRpbHMvY3ViaXNtZGVidWcudHMiLCJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL3NyYy91dGlscy9jdWJpc21qc29uLnRzIiwid2VicGFjazovLy8uL3NyYy9sYXBwZGVmaW5lLnRzIiwid2VicGFjazovLy8uL3NyYy9sYXBwZGVsZWdhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhcHBsaXZlMmRtYW5hZ2VyLnRzIiwid2VicGFjazovLy8uL3NyYy9sYXBwbW9kZWwudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhcHBwYWwudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhcHB0ZXh0dXJlbWFuYWdlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFwcHZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhcHB3YXZmaWxlaGFuZGxlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdG91Y2htYW5hZ2VyLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93aGF0d2ctZmV0Y2gvZmV0Y2guanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQgeyBsaXZlMmRfdmlldywgTEFwcERlbGVnYXRlIH0gZnJvbSAnLi9sYXBwZGVsZWdhdGUnO1xyXG5pbXBvcnQgeyBMQXBwUGFsIH0gZnJvbSAnLi9sYXBwcGFsJztcclxuXHJcbmZ1bmN0aW9uIGdldEVsZW1lbnRUb3AoZWxlbWVudCkge1xyXG4gIHZhciBhY3R1YWxUb3AgPSBlbGVtZW50Lm9mZnNldFRvcDtcclxuICB2YXIgY3VycmVudCA9IGVsZW1lbnQub2Zmc2V0UGFyZW50O1xyXG4gIHdoaWxlIChjdXJyZW50ICE9PSBudWxsKSB7XHJcbiAgICBhY3R1YWxUb3AgKz0gY3VycmVudC5vZmZzZXRUb3A7XHJcbiAgICBjdXJyZW50ID0gY3VycmVudC5vZmZzZXRQYXJlbnQ7XHJcbiAgfVxyXG4gIHJldHVybiBhY3R1YWxUb3A7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEVsZW1lbnRMZWZ0KGVsZW1lbnQpIHtcclxuICB2YXIgYWN0dWFsTGVmdCA9IGVsZW1lbnQub2Zmc2V0TGVmdDtcclxuICB2YXIgY3VycmVudCA9IGVsZW1lbnQub2Zmc2V0UGFyZW50O1xyXG4gIHdoaWxlIChjdXJyZW50ICE9PSBudWxsKSB7XHJcbiAgICBhY3R1YWxMZWZ0ICs9IGN1cnJlbnQub2Zmc2V0TGVmdDtcclxuICAgIGN1cnJlbnQgPSBjdXJyZW50Lm9mZnNldFBhcmVudDtcclxuICB9XHJcbiAgcmV0dXJuIGFjdHVhbExlZnQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBSZXNldEV4cHJlc3Npb24ge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5lbmFibGUgPSB0cnVlO1xyXG4gICAgdGhpcy50aW1lID0gNTAwMDtcclxuICAgIHRoaXMucnVuID0gZmFsc2U7XHJcbiAgICB0aGlzLm5hbWUgPSBudWxsO1xyXG4gIH1cclxuICBwdWJsaWMgZW5hYmxlOiBib29sZWFuO1xyXG4gIHB1YmxpYyBydW46IGJvb2xlYW47XHJcbiAgcHVibGljIHRpbWU6IG51bWJlcjtcclxuICBwdWJsaWMgbmFtZTogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTGl2ZTJkQVBJIHtcclxuICBwdWJsaWMgZGVsZWdhdGU6IExBcHBEZWxlZ2F0ZTtcclxuICBwdWJsaWMgcGF0aDogc3RyaW5nO1xyXG4gIHB1YmxpYyByZXNldEV4cHJlc3Npb246IFJlc2V0RXhwcmVzc2lvbjtcclxuICBwdWJsaWMgdmlldzogSFRNTENhbnZhc0VsZW1lbnQ7XHJcblxyXG4gIG1vdmU7XHJcbiAgZG93bjtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBsZXQgYXBpID0gdGhpcztcclxuICAgIHRoaXMuZGVsZWdhdGUgPSBuZXcgTEFwcERlbGVnYXRlKHRoaXMpO1xyXG4gICAgdGhpcy5yZXNldEV4cHJlc3Npb24gPSBuZXcgUmVzZXRFeHByZXNzaW9uKCk7XHJcbiAgICB0aGlzLm1vdmUgPSBmdW5jdGlvbiAoYTogTW91c2VFdmVudCkge1xyXG4gICAgICBhcGkudG91Y2hNb3ZlZChhLngsIGEueSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmRvd24gPSBmdW5jdGlvbiAoYTogTW91c2VFdmVudCkge1xyXG4gICAgICBhcGkudG91Y2hFbmRlZChhLngsIGEueSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgaW5pdCh3aWR0aDpudW1iZXIsIGhlaWdodDpudW1iZXIpIHtcclxuICAgIGlmICh0aGlzLmRlbGVnYXRlLmluaXRpYWxpemUod2lkdGgsIGhlaWdodCkgPT0gZmFsc2UpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgdGhpcy52aWV3ID0gbGl2ZTJkX3ZpZXc7XHJcbiAgICBsZXQgbGl2ZWFwaSA9IHRoaXM7XHJcbiAgICB0aGlzLnZpZXcub25yZXNpemUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgbGl2ZWFwaS5kZWxlZ2F0ZS5vblJlc2l6ZShsaXZlYXBpLnZpZXcud2lkdGgsIGxpdmVhcGkudmlldy5oZWlnaHQpO1xyXG4gICAgfVxyXG4gICAgbGl2ZTJkX3ZpZXcuc3R5bGUucG9zaXRpb24gPSBcImZpeGVkXCI7XHJcbiAgICBsaXZlMmRfdmlldy5zdHlsZS5yaWdodCA9IFwiMHB4XCI7XHJcbiAgICBsaXZlMmRfdmlldy5zdHlsZS5ib3R0b20gPSBcIjBweFwiXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBydW4oKSB7XHJcbiAgICB0aGlzLmRlbGVnYXRlLnJ1bigpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGNsb3NlKCkge1xyXG4gICAgdGhpcy5kZWxlZ2F0ZS5yZWxlYXNlKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2NhbGUoc2l6ZTogbnVtYmVyKSB7XHJcbiAgICB0aGlzLmRlbGVnYXRlLl9tYW5hZ2VyLl9zY2FsZSA9IHNpemU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0WCh4OiBudW1iZXIpIHtcclxuICAgIHRoaXMuZGVsZWdhdGUuX21hbmFnZXIuX3ggPSB4O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNldFkoeTogbnVtYmVyKSB7XHJcbiAgICB0aGlzLmRlbGVnYXRlLl9tYW5hZ2VyLl95ID0geTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXRYWSh4OiBudW1iZXIsIHk6IG51bWJlcikge1xyXG4gICAgdGhpcy5kZWxlZ2F0ZS5fbWFuYWdlci5feCA9IHg7XHJcbiAgICB0aGlzLmRlbGVnYXRlLl9tYW5hZ2VyLl95ID0geTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZXNpemUod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcclxuICAgIHRoaXMuZGVsZWdhdGUub25SZXNpemUod2lkdGgsIGhlaWdodCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY2hhbmdlTW9kZWwobmFtZTogc3RyaW5nLCBwYXRoOiBzdHJpbmcpIHtcclxuICAgIGlmIChwYXRoID09IG51bGwpIHtcclxuICAgICAgaWYgKHRoaXMucGF0aCA9PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuZGVsZWdhdGUuZ2V0TWFuYWdlcigpLmxvYWRNb2RlbChuYW1lLCB0aGlzLnBhdGgpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMucGF0aCA9IHBhdGg7XHJcbiAgICAgIHRoaXMuZGVsZWdhdGUuZ2V0TWFuYWdlcigpLmxvYWRNb2RlbChuYW1lLCBwYXRoKTtcclxuICAgIH1cclxuICAgIGxldCBsaXZlYXBpID0gdGhpcztcclxuICAgIGxldCB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICBsZXQgbGlzdCA9IGxpdmVhcGkuZ2V0RXhwcmVzc2lvbnMoKTtcclxuICAgICAgaWYgKGxpc3QgPT0gbnVsbCkge1xyXG4gICAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKGBbQVBQXW5vIGV4cHJlc3Npb25gKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgbGlzdC5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgIGlmIChpdGVtLm5hbWUudG9Mb3dlckNhc2UoKSA9PSBcIm5vcm1hbFwiKVxyXG4gICAgICAgICAgbGl2ZWFwaS5yZXNldEV4cHJlc3Npb24ubmFtZSA9IGl0ZW1bMF0ubmFtZTtcclxuICAgICAgfSk7XHJcbiAgICAgIGlmICghbGl2ZWFwaS5yZXNldEV4cHJlc3Npb24ubmFtZSkge1xyXG4gICAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKGBbQVBQXW5vIGZvdW5kIGRlZmF1bHQgZXhwcmVzc2lvbiwgc2V0IDBgKTtcclxuICAgICAgICBsaXZlYXBpLnJlc2V0RXhwcmVzc2lvbi5uYW1lID0gbGlzdFswXS5uYW1lO1xyXG4gICAgICB9XHJcbiAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIpO1xyXG4gICAgfSwgMjAwKTtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGZpeFBvcyh4OiBudW1iZXIsIHk6IG51bWJlcikge1xyXG4gICAgbGV0IHdpZHRoID0gbGl2ZTJkX3ZpZXcud2lkdGg7XHJcbiAgICBsZXQgaGVpZ2h0ID0gbGl2ZTJkX3ZpZXcuaGVpZ2h0O1xyXG4gICAgbGV0IHBvc1ggPSBnZXRFbGVtZW50TGVmdChsaXZlMmRfdmlldyk7XHJcbiAgICBsZXQgcG9zWSA9IGdldEVsZW1lbnRUb3AobGl2ZTJkX3ZpZXcpO1xyXG4gICAgbGV0IGZpeFggPSBwb3NYICsgd2lkdGg7XHJcbiAgICBsZXQgZml4WSA9IHBvc1kgKyBoZWlnaHQ7XHJcbiAgICBsZXQgd2lkdGgxID0gd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICBsZXQgaGVpZ2h0MSA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuXHJcbiAgICBjb25zdCByYW5nZSA9IDUwO1xyXG5cclxuICAgIGlmICh4IDwgcG9zWCkge1xyXG4gICAgICB4ID0gLSgocG9zWCAtIHgpIC8gcG9zWCAqIHJhbmdlKTtcclxuICAgIH0gZWxzZSBpZiAoeCA+PSBwb3NYICYmIHggPD0gZml4WCkge1xyXG4gICAgICB4ID0geCAtIHBvc1g7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgeCA9IHdpZHRoICsgKCh4IC0gZml4WCkgLyAod2lkdGgxIC0gZml4WCkgKiByYW5nZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHkgPCBwb3NZKSB7XHJcbiAgICAgIHkgPSAtKChwb3NZIC0geSkgLyBwb3NZICogcmFuZ2UpO1xyXG4gICAgfSBlbHNlIGlmICh5ID49IHBvc1kgJiYgeCA8PSBmaXhZKSB7XHJcbiAgICAgIHkgPSB5IC0gcG9zWTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB5ID0gaGVpZ2h0ICsgKCh5IC0gZml4WSkgLyAoaGVpZ2h0MSAtIGZpeFkpICogcmFuZ2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBbeCwgeV07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdG91Y2hlc0JlZ2FuKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XHJcbiAgICBsZXQgdmlldyA9IHRoaXMuZGVsZWdhdGUuZ2V0VmlldygpO1xyXG4gICAgaWYgKHZpZXcgPT0gbnVsbCkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBbeCwgeV0gPSB0aGlzLmZpeFBvcyh4LCB5KTtcclxuXHJcbiAgICB2aWV3Lm9uVG91Y2hlc0JlZ2FuKHgsIHkpO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdG91Y2hNb3ZlZCh4OiBudW1iZXIsIHk6IG51bWJlcikge1xyXG4gICAgbGV0IHZpZXcgPSB0aGlzLmRlbGVnYXRlLmdldFZpZXcoKTtcclxuICAgIGlmICh2aWV3ID09IG51bGwpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgW3gsIHldID0gdGhpcy5maXhQb3MoeCwgeSk7XHJcblxyXG4gICAgdmlldy5vblRvdWNoZXNNb3ZlZCh4LCB5KTtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHRvdWNoRW5kZWQoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgIGxldCB2aWV3ID0gdGhpcy5kZWxlZ2F0ZS5nZXRWaWV3KCk7XHJcbiAgICBpZiAodmlldyA9PSBudWxsKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIFt4LCB5XSA9IHRoaXMuZml4UG9zKHgsIHkpO1xyXG5cclxuICAgIHZpZXcub25Ub3VjaGVzRW5kZWQoeCwgeSk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXRPblRhcChmdW4pIHtcclxuICAgIHRoaXMuZGVsZWdhdGUuX21hbmFnZXIuc2V0T25UYXAoZnVuKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhZGRMaXN0ZW5lcigpIHtcclxuICAgIGFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5tb3ZlKTtcclxuICAgIGFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5kb3duKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZW1vdmVMaXN0ZW5lcigpIHtcclxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5tb3ZlKTtcclxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5kb3duKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRNb3Rpb25zKCkge1xyXG4gICAgbGV0IG1vZGVsID0gdGhpcy5kZWxlZ2F0ZS5nZXRNYW5hZ2VyKCkuZ2V0TW9kZWwoKTtcclxuICAgIGlmIChtb2RlbCA9PSBudWxsKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBzZXQgPSBtb2RlbC5nZXRNb2RlbFNldHRpbmcoKTtcclxuICAgIGlmIChzZXQgPT0gbnVsbClcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICBsZXQgY291bnQxID0gc2V0LmdldE1vdGlvbkdyb3VwQ291bnQoKTtcclxuICAgIGlmIChjb3VudDEgPT0gMClcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICBsZXQgbGlzdCA9IG5ldyBBcnJheSgpO1xyXG4gICAgZm9yIChsZXQgYSA9IDA7IGEgPCBjb3VudDE7IGErKykge1xyXG4gICAgICBsZXQgbGlzdDEgPSBuZXcgQXJyYXkoKTtcclxuICAgICAgbGV0IGl0ZW0gPSBzZXQuZ2V0TW90aW9uR3JvdXBOYW1lKGEpO1xyXG4gICAgICBsZXQgY291bnQyID0gc2V0LmdldE1vdGlvbkNvdW50KGl0ZW0pO1xyXG4gICAgICBmb3IgKGxldCBiID0gMDsgYiA8IGNvdW50MjsgYisrKSB7XHJcbiAgICAgICAgbGV0IGl0ZW0xID0gc2V0LmdldE1vdGlvbkZpbGVOYW1lKGl0ZW0sIGIpO1xyXG4gICAgICAgIGxpc3QxW2JdID0gaXRlbTE7XHJcbiAgICAgIH1cclxuICAgICAgbGlzdFtpdGVtXSA9IGxpc3QxO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBsaXN0O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEV4cHJlc3Npb25zKCkge1xyXG4gICAgbGV0IG1vZGVsID0gdGhpcy5kZWxlZ2F0ZS5nZXRNYW5hZ2VyKCkuZ2V0TW9kZWwoKTtcclxuICAgIGlmIChtb2RlbCA9PSBudWxsKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBzZXQgPSBtb2RlbC5nZXRNb2RlbFNldHRpbmcoKTtcclxuICAgIGlmIChzZXQgPT0gbnVsbClcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICBsZXQgY291bnQxID0gc2V0LmdldEV4cHJlc3Npb25Db3VudCgpO1xyXG4gICAgaWYgKGNvdW50MSA9PSAwKVxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIGxldCBsaXN0ID0gbmV3IEFycmF5KCk7XHJcbiAgICBmb3IgKGxldCBhID0gMDsgYSA8IGNvdW50MTsgYSsrKSB7XHJcbiAgICAgIGxldCBpdGVtID0gc2V0LmdldEV4cHJlc3Npb25OYW1lKGEpO1xyXG4gICAgICBsZXQgaXRlbTEgPSBzZXQuZ2V0RXhwcmVzc2lvbkZpbGVOYW1lKGEpO1xyXG4gICAgICBsaXN0W2FdID0ge1xyXG4gICAgICAgIG5hbWU6IGl0ZW0sXHJcbiAgICAgICAgZmlsZTogaXRlbTFcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiBsaXN0O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXJ0TW90aW9uKGdyb3VwOiBzdHJpbmcsIG5vOiBudW1iZXIsIHByaW9yaXR5OiBudW1iZXIpIHtcclxuICAgIGxldCBtb2RlbCA9IHRoaXMuZGVsZWdhdGUuZ2V0TWFuYWdlcigpLmdldE1vZGVsKCk7XHJcbiAgICBpZiAobW9kZWwgPT0gbnVsbCkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgbW9kZWwuc3RhcnRNb3Rpb24oZ3JvdXAsIG5vLCBwcmlvcml0eSk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGFydEV4cHJlc3Npb24obmFtZTogc3RyaW5nKSB7XHJcbiAgICBsZXQgbW9kZWwgPSB0aGlzLmRlbGVnYXRlLmdldE1hbmFnZXIoKS5nZXRNb2RlbCgpO1xyXG4gICAgaWYgKG1vZGVsID09IG51bGwpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgbW9kZWwuc2V0RXhwcmVzc2lvbihuYW1lKTtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHRpY2tSZXNldEV4cHJlc3Npb24oKSB7XHJcbiAgICBpZiAodGhpcy5yZXNldEV4cHJlc3Npb24ucnVuID09IHRydWUpXHJcbiAgICAgIHJldHVybjtcclxuICAgIGxldCBtb2RlbCA9IHRoaXMuZGVsZWdhdGUuZ2V0TWFuYWdlcigpLmdldE1vZGVsKCk7XHJcbiAgICBpZiAobW9kZWwgIT0gbnVsbCkge1xyXG4gICAgICBpZiAodGhpcy5yZXNldEV4cHJlc3Npb24uZW5hYmxlID09IHRydWUgJiYgdGhpcy5yZXNldEV4cHJlc3Npb24ubmFtZSAhPSBudWxsKSB7XHJcbiAgICAgICAgdGhpcy5yZXNldEV4cHJlc3Npb24ucnVuID0gdHJ1ZTtcclxuICAgICAgICBsZXQgbGl2ZWFwaSA9IHRoaXM7XHJcbiAgICAgICAgbGV0IHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBMQXBwUGFsLnByaW50TWVzc2FnZShgW0FQUF1leHByZXNzaW9uIHJlc2V0ICR7bGl2ZWFwaS5yZXNldEV4cHJlc3Npb24ubmFtZX1gKTtcclxuICAgICAgICAgIG1vZGVsLnNldEV4cHJlc3Npb24obGl2ZWFwaS5yZXNldEV4cHJlc3Npb24ubmFtZSk7XHJcbiAgICAgICAgICB0aGlzLnJlc2V0RXhwcmVzc2lvbi5ydW4gPSBmYWxzZTtcclxuICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIpO1xyXG4gICAgICAgIH0sIHRoaXMucmVzZXRFeHByZXNzaW9uLnRpbWUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5jb25zb2xlLmxvZyhcImxpdmUyZEFQSSBpbml0XCIpO1xyXG53aW5kb3dbXCJsaXZlMmRcIl0gPSB7XHJcbiAgbmV3OiBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gbmV3IExpdmUyZEFQSSgpO1xyXG4gIH1cclxufSIsIi8qKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEBicmllZiDjg5Hjg6njg6Hjg7zjgr9JROOBruODh+ODleOCqeODq+ODiOWApOOCkuS/neaMgeOBmeOCi+WumuaVsDxicj5cclxuICogICAgICAgICDjg4fjg5Xjgqnjg6vjg4jlgKTjga7ku5Xmp5jjga/ku6XkuIvjga7jg57jg4vjg6XjgqLjg6vjgavln7rjgaXjgY88YnI+XHJcbiAqICAgICAgICAgaHR0cHM6Ly9kb2NzLmxpdmUyZC5jb20vY3ViaXNtLWVkaXRvci1tYW51YWwvc3RhbmRhcmQtcGFyYW1ldG9yLWxpc3QvXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkID0gT2JqZWN0LmZyZWV6ZTxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+Pih7XHJcbiAgLy8g44OR44O844OESURcclxuICBIaXRBcmVhUHJlZml4OiAnSGl0QXJlYScsXHJcbiAgSGl0QXJlYUhlYWQ6ICdIZWFkJyxcclxuICBIaXRBcmVhQm9keTogJ0JvZHknLFxyXG4gIFBhcnRzSWRDb3JlOiAnUGFydHMwMUNvcmUnLFxyXG4gIFBhcnRzQXJtUHJlZml4OiAnUGFydHMwMUFybV8nLFxyXG4gIFBhcnRzQXJtTFByZWZpeDogJ1BhcnRzMDFBcm1MXycsXHJcbiAgUGFydHNBcm1SUHJlZml4OiAnUGFydHMwMUFybVJfJyxcclxuICAvLyDjg5Hjg6njg6Hjg7zjgr9JRFxyXG4gIFBhcmFtQW5nbGVYOiAnUGFyYW1BbmdsZVgnLFxyXG4gIFBhcmFtQW5nbGVZOiAnUGFyYW1BbmdsZVknLFxyXG4gIFBhcmFtQW5nbGVaOiAnUGFyYW1BbmdsZVonLFxyXG4gIFBhcmFtRXllTE9wZW46ICdQYXJhbUV5ZUxPcGVuJyxcclxuICBQYXJhbUV5ZUxTbWlsZTogJ1BhcmFtRXllTFNtaWxlJyxcclxuICBQYXJhbUV5ZVJPcGVuOiAnUGFyYW1FeWVST3BlbicsXHJcbiAgUGFyYW1FeWVSU21pbGU6ICdQYXJhbUV5ZVJTbWlsZScsXHJcbiAgUGFyYW1FeWVCYWxsWDogJ1BhcmFtRXllQmFsbFgnLFxyXG4gIFBhcmFtRXllQmFsbFk6ICdQYXJhbUV5ZUJhbGxZJyxcclxuICBQYXJhbUV5ZUJhbGxGb3JtOiAnUGFyYW1FeWVCYWxsRm9ybScsXHJcbiAgUGFyYW1Ccm93TFk6ICdQYXJhbUJyb3dMWScsXHJcbiAgUGFyYW1Ccm93Ulk6ICdQYXJhbUJyb3dSWScsXHJcbiAgUGFyYW1Ccm93TFg6ICdQYXJhbUJyb3dMWCcsXHJcbiAgUGFyYW1Ccm93Ulg6ICdQYXJhbUJyb3dSWCcsXHJcbiAgUGFyYW1Ccm93TEFuZ2xlOiAnUGFyYW1Ccm93TEFuZ2xlJyxcclxuICBQYXJhbUJyb3dSQW5nbGU6ICdQYXJhbUJyb3dSQW5nbGUnLFxyXG4gIFBhcmFtQnJvd0xGb3JtOiAnUGFyYW1Ccm93TEZvcm0nLFxyXG4gIFBhcmFtQnJvd1JGb3JtOiAnUGFyYW1Ccm93UkZvcm0nLFxyXG4gIFBhcmFtTW91dGhGb3JtOiAnUGFyYW1Nb3V0aEZvcm0nLFxyXG4gIFBhcmFtTW91dGhPcGVuWTogJ1BhcmFtTW91dGhPcGVuWScsXHJcbiAgUGFyYW1DaGVlazogJ1BhcmFtQ2hlZWsnLFxyXG4gIFBhcmFtQm9keUFuZ2xlWDogJ1BhcmFtQm9keUFuZ2xlWCcsXHJcbiAgUGFyYW1Cb2R5QW5nbGVZOiAnUGFyYW1Cb2R5QW5nbGVZJyxcclxuICBQYXJhbUJvZHlBbmdsZVo6ICdQYXJhbUJvZHlBbmdsZVonLFxyXG4gIFBhcmFtQnJlYXRoOiAnUGFyYW1CcmVhdGgnLFxyXG4gIFBhcmFtQXJtTEE6ICdQYXJhbUFybUxBJyxcclxuICBQYXJhbUFybVJBOiAnUGFyYW1Bcm1SQScsXHJcbiAgUGFyYW1Bcm1MQjogJ1BhcmFtQXJtTEInLFxyXG4gIFBhcmFtQXJtUkI6ICdQYXJhbUFybVJCJyxcclxuICBQYXJhbUhhbmRMOiAnUGFyYW1IYW5kTCcsXHJcbiAgUGFyYW1IYW5kUjogJ1BhcmFtSGFuZFInLFxyXG4gIFBhcmFtSGFpckZyb250OiAnUGFyYW1IYWlyRnJvbnQnLFxyXG4gIFBhcmFtSGFpclNpZGU6ICdQYXJhbUhhaXJTaWRlJyxcclxuICBQYXJhbUhhaXJCYWNrOiAnUGFyYW1IYWlyQmFjaycsXHJcbiAgUGFyYW1IYWlyRmx1ZmZ5OiAnUGFyYW1IYWlyRmx1ZmZ5JyxcclxuICBQYXJhbVNob3VsZGVyWTogJ1BhcmFtU2hvdWxkZXJZJyxcclxuICBQYXJhbUJ1c3RYOiAnUGFyYW1CdXN0WCcsXHJcbiAgUGFyYW1CdXN0WTogJ1BhcmFtQnVzdFknLFxyXG4gIFBhcmFtQmFzZVg6ICdQYXJhbUJhc2VYJyxcclxuICBQYXJhbUJhc2VZOiAnUGFyYW1CYXNlWScsXHJcbiAgUGFyYW1OT05FOiAnTk9ORTonXHJcbn0pO1xyXG5cclxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXHJcbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21kZWZhdWx0cGFyYW1ldGVyaWQnO1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgZXhwb3J0IGNvbnN0IEhpdEFyZWFCb2R5ID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuSGl0QXJlYUJvZHk7XHJcbiAgZXhwb3J0IGNvbnN0IEhpdEFyZWFIZWFkID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuSGl0QXJlYUhlYWQ7XHJcbiAgZXhwb3J0IGNvbnN0IEhpdEFyZWFQcmVmaXggPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5IaXRBcmVhUHJlZml4O1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUFuZ2xlWCA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQW5nbGVYO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUFuZ2xlWSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQW5nbGVZO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUFuZ2xlWiA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQW5nbGVaO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUFybUxBID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Bcm1MQTtcclxuICBleHBvcnQgY29uc3QgUGFyYW1Bcm1MQiA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQXJtTEI7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQXJtUkEgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUFybVJBO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUFybVJCID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Bcm1SQjtcclxuICBleHBvcnQgY29uc3QgUGFyYW1CYXNlWCA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQmFzZVg7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQmFzZVkgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJhc2VZO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUJvZHlBbmdsZVggPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJvZHlBbmdsZVg7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQm9keUFuZ2xlWSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQm9keUFuZ2xlWTtcclxuICBleHBvcnQgY29uc3QgUGFyYW1Cb2R5QW5nbGVaID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Cb2R5QW5nbGVaO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUJyZWF0aCA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQnJlYXRoO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUJyb3dMQW5nbGUgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJyb3dMQW5nbGU7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJvd0xGb3JtID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Ccm93TEZvcm07XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJvd0xYID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Ccm93TFg7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJvd0xZID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Ccm93TFk7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJvd1JBbmdsZSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQnJvd1JBbmdsZTtcclxuICBleHBvcnQgY29uc3QgUGFyYW1Ccm93UkZvcm0gPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJyb3dSRm9ybTtcclxuICBleHBvcnQgY29uc3QgUGFyYW1Ccm93UlggPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJyb3dSWDtcclxuICBleHBvcnQgY29uc3QgUGFyYW1Ccm93UlkgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJyb3dSWTtcclxuICBleHBvcnQgY29uc3QgUGFyYW1CdXN0WCA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQnVzdFg7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnVzdFkgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJ1c3RZO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUNoZWVrID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1DaGVlaztcclxuICBleHBvcnQgY29uc3QgUGFyYW1FeWVCYWxsRm9ybSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtRXllQmFsbEZvcm07XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtRXllQmFsbFggPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUV5ZUJhbGxYO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUV5ZUJhbGxZID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1FeWVCYWxsWTtcclxuICBleHBvcnQgY29uc3QgUGFyYW1FeWVMT3BlbiA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtRXllTE9wZW47XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtRXllTFNtaWxlID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1FeWVMU21pbGU7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtRXllUk9wZW4gPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUV5ZVJPcGVuO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUV5ZVJTbWlsZSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtRXllUlNtaWxlO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUhhaXJCYWNrID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1IYWlyQmFjaztcclxuICBleHBvcnQgY29uc3QgUGFyYW1IYWlyRmx1ZmZ5ID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1IYWlyRmx1ZmZ5O1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUhhaXJGcm9udCA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtSGFpckZyb250O1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUhhaXJTaWRlID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1IYWlyU2lkZTtcclxuICBleHBvcnQgY29uc3QgUGFyYW1IYW5kTCA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtSGFuZEw7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtSGFuZFIgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUhhbmRSO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbU1vdXRoRm9ybSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtTW91dGhGb3JtO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbU1vdXRoT3BlblkgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbU1vdXRoT3Blblk7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtTk9ORSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtTk9ORTtcclxuICBleHBvcnQgY29uc3QgUGFyYW1TaG91bGRlclkgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbVNob3VsZGVyWTtcclxuICBleHBvcnQgY29uc3QgUGFydHNBcm1MUHJlZml4ID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFydHNBcm1MUHJlZml4O1xyXG4gIGV4cG9ydCBjb25zdCBQYXJ0c0FybVByZWZpeCA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcnRzQXJtUHJlZml4O1xyXG4gIGV4cG9ydCBjb25zdCBQYXJ0c0FybVJQcmVmaXggPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJ0c0FybVJQcmVmaXg7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcnRzSWRDb3JlID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFydHNJZENvcmU7XHJcbn1cclxuIiwiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vICDjg63jgrDlh7rlipvplqLmlbDjga7oqK3lrppcclxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuLy8tLS0tLS0tLS0tIOODreOCsOWHuuWKm+ODrOODmeODqyDpgbjmip7poIXnm64g5a6a576pIC0tLS0tLS0tLS1cclxuLy8g6Kmz57Sw44Ot44Kw5Ye65Yqb6Kit5a6aXHJcbmV4cG9ydCBjb25zdCBDU01fTE9HX0xFVkVMX1ZFUkJPU0UgPSAwO1xyXG4vLyDjg4fjg5Djg4PjgrDjg63jgrDlh7rlipvoqK3lrppcclxuZXhwb3J0IGNvbnN0IENTTV9MT0dfTEVWRUxfREVCVUcgPSAxO1xyXG4vLyBJbmZv44Ot44Kw5Ye65Yqb6Kit5a6aXHJcbmV4cG9ydCBjb25zdCBDU01fTE9HX0xFVkVMX0lORk8gPSAyO1xyXG4vLyDorablkYrjg63jgrDlh7rlipvoqK3lrppcclxuZXhwb3J0IGNvbnN0IENTTV9MT0dfTEVWRUxfV0FSTklORyA9IDM7XHJcbi8vIOOCqOODqeODvOODreOCsOWHuuWKm+ioreWumlxyXG5leHBvcnQgY29uc3QgQ1NNX0xPR19MRVZFTF9FUlJPUiA9IDQ7XHJcbi8vIOODreOCsOWHuuWKm+OCquODleioreWumlxyXG5leHBvcnQgY29uc3QgQ1NNX0xPR19MRVZFTF9PRkYgPSA1O1xyXG5cclxuLyoqXHJcbiAqIOODreOCsOWHuuWKm+ODrOODmeODq+ioreWumuOAglxyXG4gKlxyXG4gKiDlvLfliLbnmoTjgavjg63jgrDlh7rlipvjg6zjg5njg6vjgpLlpInjgYjjgovmmYLjgavlrprnvqnjgpLmnInlirnjgavjgZnjgovjgIJcclxuICogQ1NNX0xPR19MRVZFTF9WRVJCT1NFIO+9niBDU01fTE9HX0xFVkVMX09GRiDjgpLpgbjmip7jgZnjgovjgIJcclxuICovXHJcbmV4cG9ydCBjb25zdCBDU01fTE9HX0xFVkVMOiBudW1iZXIgPSBDU01fTE9HX0xFVkVMX1ZFUkJPU0U7XHJcbiIsIi8qKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgSUN1YmlzbU1vZGVsU2V0dGluZyB9IGZyb20gJy4vaWN1YmlzbW1vZGVsc2V0dGluZyc7XHJcbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi9pZC9jdWJpc21pZCc7XHJcbmltcG9ydCB7IEN1YmlzbUZyYW1ld29yayB9IGZyb20gJy4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcclxuaW1wb3J0IHsgY3NtTWFwLCBpdGVyYXRvciB9IGZyb20gJy4vdHlwZS9jc21tYXAnO1xyXG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICcuL3R5cGUvY3NtdmVjdG9yJztcclxuaW1wb3J0IHsgQ3ViaXNtSnNvbiwgVmFsdWUgfSBmcm9tICcuL3V0aWxzL2N1YmlzbWpzb24nO1xyXG5cclxuLyoqXHJcbiAqIE1vZGVsM0pzb27jga7jgq3jg7zmloflrZfliJdcclxuICovXHJcblxyXG4vLyBKU09OIEtleXNcclxuY29uc3QgVmVyc2lvbiA9ICdWZXJzaW9uJztcclxuY29uc3QgRmlsZVJlZmVyZW5jZXMgPSAnRmlsZVJlZmVyZW5jZXMnO1xyXG5jb25zdCBHcm91cHMgPSAnR3JvdXBzJztcclxuY29uc3QgTGF5b3V0ID0gJ0xheW91dCc7XHJcbmNvbnN0IEhpdEFyZWFzID0gJ0hpdEFyZWFzJztcclxuXHJcbmNvbnN0IE1vYyA9ICdNb2MnO1xyXG5jb25zdCBUZXh0dXJlcyA9ICdUZXh0dXJlcyc7XHJcbmNvbnN0IFBoeXNpY3MgPSAnUGh5c2ljcyc7XHJcbmNvbnN0IFBvc2UgPSAnUG9zZSc7XHJcbmNvbnN0IEV4cHJlc3Npb25zID0gJ0V4cHJlc3Npb25zJztcclxuY29uc3QgTW90aW9ucyA9ICdNb3Rpb25zJztcclxuXHJcbmNvbnN0IFVzZXJEYXRhID0gJ1VzZXJEYXRhJztcclxuY29uc3QgTmFtZSA9ICdOYW1lJztcclxuY29uc3QgRmlsZVBhdGggPSAnRmlsZSc7XHJcbmNvbnN0IElkID0gJ0lkJztcclxuY29uc3QgSWRzID0gJ0lkcyc7XHJcbmNvbnN0IFRhcmdldCA9ICdUYXJnZXQnO1xyXG5cclxuLy8gTW90aW9uc1xyXG5jb25zdCBJZGxlID0gJ0lkbGUnO1xyXG5jb25zdCBUYXBCb2R5ID0gJ1RhcEJvZHknO1xyXG5jb25zdCBQaW5jaEluID0gJ1BpbmNoSW4nO1xyXG5jb25zdCBQaW5jaE91dCA9ICdQaW5jaE91dCc7XHJcbmNvbnN0IFNoYWtlID0gJ1NoYWtlJztcclxuY29uc3QgRmxpY2tIZWFkID0gJ0ZsaWNrSGVhZCc7XHJcbmNvbnN0IFBhcmFtZXRlciA9ICdQYXJhbWV0ZXInO1xyXG5cclxuY29uc3QgU291bmRQYXRoID0gJ1NvdW5kJztcclxuY29uc3QgRmFkZUluVGltZSA9ICdGYWRlSW5UaW1lJztcclxuY29uc3QgRmFkZU91dFRpbWUgPSAnRmFkZU91dFRpbWUnO1xyXG5cclxuLy8gTGF5b3V0XHJcbmNvbnN0IENlbnRlclggPSAnQ2VudGVyWCc7XHJcbmNvbnN0IENlbnRlclkgPSAnQ2VudGVyWSc7XHJcbmNvbnN0IFggPSAnWCc7XHJcbmNvbnN0IFkgPSAnWSc7XHJcbmNvbnN0IFdpZHRoID0gJ1dpZHRoJztcclxuY29uc3QgSGVpZ2h0ID0gJ0hlaWdodCc7XHJcblxyXG5jb25zdCBMaXBTeW5jID0gJ0xpcFN5bmMnO1xyXG5jb25zdCBFeWVCbGluayA9ICdFeWVCbGluayc7XHJcblxyXG5jb25zdCBJbml0UGFyYW1ldGVyID0gJ2luaXRfcGFyYW0nO1xyXG5jb25zdCBJbml0UGFydHNWaXNpYmxlID0gJ2luaXRfcGFydHNfdmlzaWJsZSc7XHJcbmNvbnN0IFZhbCA9ICd2YWwnO1xyXG5cclxuZW51bSBGcmVxdWVzdE5vZGUge1xyXG4gIEZyZXF1ZXN0Tm9kZV9Hcm91cHMsIC8vIGdldFJvb3QoKS5nZXRWYWx1ZUJ5U3RyaW5nKEdyb3VwcylcclxuICBGcmVxdWVzdE5vZGVfTW9jLCAvLyBnZXRSb290KCkuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcykuZ2V0VmFsdWVCeVN0cmluZyhNb2MpXHJcbiAgRnJlcXVlc3ROb2RlX01vdGlvbnMsIC8vIGdldFJvb3QoKS5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKS5nZXRWYWx1ZUJ5U3RyaW5nKE1vdGlvbnMpXHJcbiAgRnJlcXVlc3ROb2RlX0V4cHJlc3Npb25zLCAvLyBnZXRSb290KCkuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcykuZ2V0VmFsdWVCeVN0cmluZyhFeHByZXNzaW9ucylcclxuICBGcmVxdWVzdE5vZGVfVGV4dHVyZXMsIC8vIGdldFJvb3QoKS5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKS5nZXRWYWx1ZUJ5U3RyaW5nKFRleHR1cmVzKVxyXG4gIEZyZXF1ZXN0Tm9kZV9QaHlzaWNzLCAvLyBnZXRSb290KCkuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcykuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzKVxyXG4gIEZyZXF1ZXN0Tm9kZV9Qb3NlLCAvLyBnZXRSb290KCkuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcykuZ2V0VmFsdWVCeVN0cmluZyhQb3NlKVxyXG4gIEZyZXF1ZXN0Tm9kZV9IaXRBcmVhcyAvLyBnZXRSb290KCkuZ2V0VmFsdWVCeVN0cmluZyhIaXRBcmVhcylcclxufVxyXG5cclxuLyoqXHJcbiAqIE1vZGVsM0pzb27jg5Hjg7zjgrXjg7xcclxuICpcclxuICogbW9kZWwzLmpzb27jg5XjgqHjgqTjg6vjgpLjg5Hjg7zjgrnjgZfjgablgKTjgpLlj5blvpfjgZnjgotcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDdWJpc21Nb2RlbFNldHRpbmdKc29uIGV4dGVuZHMgSUN1YmlzbU1vZGVsU2V0dGluZyB7XHJcbiAgLyoqXHJcbiAgICog5byV5pWw5LuY44GN44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICpcclxuICAgKiBAcGFyYW0gYnVmZmVyICAgIE1vZGVsM0pzb27jgpLjg5DjgqTjg4jphY3liJfjgajjgZfjgaboqq3jgb/ovrzjgpPjgaDjg4fjg7zjgr/jg5Djg4Pjg5XjgqFcclxuICAgKiBAcGFyYW0gc2l6ZSAgICAgIE1vZGVsM0pzb27jga7jg4fjg7zjgr/jgrXjgqTjgrpcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5fanNvbiA9IEN1YmlzbUpzb24uY3JlYXRlKGJ1ZmZlciwgc2l6ZSk7XHJcblxyXG4gICAgaWYgKHRoaXMuX2pzb24pIHtcclxuICAgICAgdGhpcy5fanNvblZhbHVlID0gbmV3IGNzbVZlY3RvcjxWYWx1ZT4oKTtcclxuXHJcbiAgICAgIC8vIOmghueVquOBr2VudW0gRnJlcXVlc3ROb2Rl44Go5LiA6Ie044GV44Gb44KLXHJcbiAgICAgIHRoaXMuX2pzb25WYWx1ZS5wdXNoQmFjayh0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRWYWx1ZUJ5U3RyaW5nKEdyb3VwcykpO1xyXG4gICAgICB0aGlzLl9qc29uVmFsdWUucHVzaEJhY2soXHJcbiAgICAgICAgdGhpcy5fanNvblxyXG4gICAgICAgICAgLmdldFJvb3QoKVxyXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpXHJcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNb2MpXHJcbiAgICAgICk7XHJcbiAgICAgIHRoaXMuX2pzb25WYWx1ZS5wdXNoQmFjayhcclxuICAgICAgICB0aGlzLl9qc29uXHJcbiAgICAgICAgICAuZ2V0Um9vdCgpXHJcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcylcclxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1vdGlvbnMpXHJcbiAgICAgICk7XHJcbiAgICAgIHRoaXMuX2pzb25WYWx1ZS5wdXNoQmFjayhcclxuICAgICAgICB0aGlzLl9qc29uXHJcbiAgICAgICAgICAuZ2V0Um9vdCgpXHJcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcylcclxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEV4cHJlc3Npb25zKVxyXG4gICAgICApO1xyXG4gICAgICB0aGlzLl9qc29uVmFsdWUucHVzaEJhY2soXHJcbiAgICAgICAgdGhpcy5fanNvblxyXG4gICAgICAgICAgLmdldFJvb3QoKVxyXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpXHJcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhUZXh0dXJlcylcclxuICAgICAgKTtcclxuICAgICAgdGhpcy5fanNvblZhbHVlLnB1c2hCYWNrKFxyXG4gICAgICAgIHRoaXMuX2pzb25cclxuICAgICAgICAgIC5nZXRSb290KClcclxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKVxyXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljcylcclxuICAgICAgKTtcclxuICAgICAgdGhpcy5fanNvblZhbHVlLnB1c2hCYWNrKFxyXG4gICAgICAgIHRoaXMuX2pzb25cclxuICAgICAgICAgIC5nZXRSb290KClcclxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKVxyXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUG9zZSlcclxuICAgICAgKTtcclxuICAgICAgdGhpcy5fanNvblZhbHVlLnB1c2hCYWNrKHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldFZhbHVlQnlTdHJpbmcoSGl0QXJlYXMpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xyXG4gICAgQ3ViaXNtSnNvbi5kZWxldGUodGhpcy5fanNvbik7XHJcblxyXG4gICAgdGhpcy5fanNvblZhbHVlID0gbnVsbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEN1YmlzbUpzb27jgqrjg5bjgrjjgqfjgq/jg4jjgpLlj5blvpfjgZnjgotcclxuICAgKlxyXG4gICAqIEByZXR1cm4gQ3ViaXNtSnNvblxyXG4gICAqL1xyXG4gIHB1YmxpYyBHZXRKc29uKCk6IEN1YmlzbUpzb24ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2pzb247XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNb2Pjg5XjgqHjgqTjg6vjga7lkI3liY3jgpLlj5blvpfjgZnjgotcclxuICAgKiBAcmV0dXJuIE1vY+ODleOCoeOCpOODq+OBruWQjeWJjVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRNb2RlbEZpbGVOYW1lKCk6IHN0cmluZyB7XHJcbiAgICBpZiAoIXRoaXMuaXNFeGlzdE1vZGVsRmlsZSgpKSB7XHJcbiAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb2MpLmdldFJhd1N0cmluZygpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44OH44Or44GM5L2/55So44GZ44KL44OG44Kv44K544OB44Oj44Gu5pWw44KS5Y+W5b6X44GZ44KLXHJcbiAgICog44OG44Kv44K544OB44Oj44Gu5pWwXHJcbiAgICovXHJcbiAgcHVibGljIGdldFRleHR1cmVDb3VudCgpOiBudW1iZXIge1xyXG4gICAgaWYgKCF0aGlzLmlzRXhpc3RUZXh0dXJlRmlsZXMoKSkge1xyXG4gICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfVGV4dHVyZXMpLmdldFNpemUoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODhuOCr+OCueODgeODo+OBjOmFjee9ruOBleOCjOOBn+ODh+OCo+ODrOOCr+ODiOODquOBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xyXG4gICAqIEByZXR1cm4g44OG44Kv44K544OB44Oj44GM6YWN572u44GV44KM44Gf44OH44Kj44Os44Kv44OI44Oq44Gu5ZCN5YmNXHJcbiAgICovXHJcbiAgcHVibGljIGdldFRleHR1cmVEaXJlY3RvcnkoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcclxuICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfVGV4dHVyZXMpXHJcbiAgICAgIC5nZXRSYXdTdHJpbmcoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODh+ODq+OBjOS9v+eUqOOBmeOCi+ODhuOCr+OCueODgeODo+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xyXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcclxuICAgKiBAcmV0dXJuIOODhuOCr+OCueODgeODo+OBruWQjeWJjVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRUZXh0dXJlRmlsZU5hbWUoaW5kZXg6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlXHJcbiAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX1RleHR1cmVzKVxyXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxyXG4gICAgICAuZ2V0UmF3U3RyaW5nKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6Ljg4fjg6vjgavoqK3lrprjgZXjgozjgZ/lvZPjgZ/jgorliKTlrprjga7mlbDjgpLlj5blvpfjgZnjgotcclxuICAgKiBAcmV0dXJuIOODouODh+ODq+OBq+ioreWumuOBleOCjOOBn+W9k+OBn+OCiuWIpOWumuOBruaVsFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRIaXRBcmVhc0NvdW50KCk6IG51bWJlciB7XHJcbiAgICBpZiAoIXRoaXMuaXNFeGlzdEhpdEFyZWFzKCkpIHtcclxuICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0hpdEFyZWFzKS5nZXRTaXplKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlvZPjgZ/jgorliKTlrprjgavoqK3lrprjgZXjgozjgZ9JROOCkuWPluW+l+OBmeOCi1xyXG4gICAqXHJcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBrmluZGV4XHJcbiAgICogQHJldHVybiDlvZPjgZ/jgorliKTlrprjgavoqK3lrprjgZXjgozjgZ9JRFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRIaXRBcmVhSWQoaW5kZXg6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlIHtcclxuICAgIHJldHVybiBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXHJcbiAgICAgIHRoaXMuX2pzb25WYWx1ZVxyXG4gICAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0hpdEFyZWFzKVxyXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXHJcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoSWQpXHJcbiAgICAgICAgLmdldFJhd1N0cmluZygpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5b2T44Gf44KK5Yik5a6a44Gr6Kit5a6a44GV44KM44Gf5ZCN5YmN44KS5Y+W5b6X44GZ44KLXHJcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxyXG4gICAqIEByZXR1cm4g5b2T44Gf44KK5Yik5a6a44Gr6Kit5a6a44GV44KM44Gf5ZCN5YmNXHJcbiAgICovXHJcbiAgcHVibGljIGdldEhpdEFyZWFOYW1lKGluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxyXG4gICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9IaXRBcmVhcylcclxuICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTmFtZSlcclxuICAgICAgLmdldFJhd1N0cmluZygpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog54mp55CG5ryU566X6Kit5a6a44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXHJcbiAgICogQHJldHVybiDniannkIbmvJTnrpfoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY1cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0UGh5c2ljc0ZpbGVOYW1lKCk6IHN0cmluZyB7XHJcbiAgICBpZiAoIXRoaXMuaXNFeGlzdFBoeXNpY3NGaWxlKCkpIHtcclxuICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9QaHlzaWNzKS5nZXRSYXdTdHJpbmcoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODkeODvOODhOWIh+OCiuabv+OBiOioreWumuODleOCoeOCpOODq+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xyXG4gICAqIEByZXR1cm4g44OR44O844OE5YiH44KK5pu/44GI6Kit5a6a44OV44Kh44Kk44Or44Gu5ZCN5YmNXHJcbiAgICovXHJcbiAgcHVibGljIGdldFBvc2VGaWxlTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgaWYgKCF0aGlzLmlzRXhpc3RQb3NlRmlsZSgpKSB7XHJcbiAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfUG9zZSkuZ2V0UmF3U3RyaW5nKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjga7mlbDjgpLlj5blvpfjgZnjgotcclxuICAgKiBAcmV0dXJuIOihqOaDheioreWumuODleOCoeOCpOODq+OBruaVsFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRFeHByZXNzaW9uQ291bnQoKTogbnVtYmVyIHtcclxuICAgIGlmICghdGhpcy5pc0V4aXN0RXhwcmVzc2lvbkZpbGUoKSkge1xyXG4gICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfRXhwcmVzc2lvbnMpLmdldFNpemUoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOihqOaDheioreWumuODleOCoeOCpOODq+OCkuitmOWIpeOBmeOCi+WQjeWJje+8iOWIpeWQje+8ieOCkuWPluW+l+OBmeOCi1xyXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcclxuICAgKiBAcmV0dXJuIOihqOaDheOBruWQjeWJjVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRFeHByZXNzaW9uTmFtZShpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcclxuICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfRXhwcmVzc2lvbnMpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE5hbWUpXHJcbiAgICAgIC5nZXRSYXdTdHJpbmcoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOihqOaDheioreWumuODleOCoeOCpOODq+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xyXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcclxuICAgKiBAcmV0dXJuIOihqOaDheioreWumuODleOCoeOCpOODq+OBruWQjeWJjVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRFeHByZXNzaW9uRmlsZU5hbWUoaW5kZXg6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlXHJcbiAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0V4cHJlc3Npb25zKVxyXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUGF0aClcclxuICAgICAgLmdldFJhd1N0cmluZygpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5pWw44KS5Y+W5b6X44GZ44KLXHJcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7mlbBcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0TW90aW9uR3JvdXBDb3VudCgpOiBudW1iZXIge1xyXG4gICAgaWYgKCF0aGlzLmlzRXhpc3RNb3Rpb25Hcm91cHMoKSkge1xyXG4gICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlXHJcbiAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vdGlvbnMpXHJcbiAgICAgIC5nZXRLZXlzKClcclxuICAgICAgLmdldFNpemUoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xyXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcclxuICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRNb3Rpb25Hcm91cE5hbWUoaW5kZXg6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICBpZiAoIXRoaXMuaXNFeGlzdE1vdGlvbkdyb3VwcygpKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcclxuICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW90aW9ucylcclxuICAgICAgLmdldEtleXMoKVxyXG4gICAgICAuYXQoaW5kZXgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44O844K344On44Oz44Kw44Or44O844OX44Gr5ZCr44G+44KM44KL44Oi44O844K344On44Oz44Gu5pWw44KS5Y+W5b6X44GZ44KLXHJcbiAgICogQHBhcmFtIGdyb3VwTmFtZSDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cclxuICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruaVsFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRNb3Rpb25Db3VudChncm91cE5hbWU6IHN0cmluZyk6IG51bWJlciB7XHJcbiAgICBpZiAoIXRoaXMuaXNFeGlzdE1vdGlvbkdyb3VwTmFtZShncm91cE5hbWUpKSB7XHJcbiAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcclxuICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW90aW9ucylcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoZ3JvdXBOYW1lKVxyXG4gICAgICAuZ2V0U2l6ZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Kw44Or44O844OX5ZCN44Go44Kk44Oz44OH44OD44Kv44K55YCk44GL44KJ44Oi44O844K344On44Oz44OV44Kh44Kk44Or5ZCN44KS5Y+W5b6X44GZ44KLXHJcbiAgICogQHBhcmFtIGdyb3VwTmFtZSDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cclxuICAgKiBAcGFyYW0gaW5kZXggICAgIOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxyXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44OV44Kh44Kk44Or44Gu5ZCN5YmNXHJcbiAgICovXHJcbiAgcHVibGljIGdldE1vdGlvbkZpbGVOYW1lKGdyb3VwTmFtZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgIGlmICghdGhpcy5pc0V4aXN0TW90aW9uR3JvdXBOYW1lKGdyb3VwTmFtZSkpIHtcclxuICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcclxuICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW90aW9ucylcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoZ3JvdXBOYW1lKVxyXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUGF0aClcclxuICAgICAgLmdldFJhd1N0cmluZygpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44O844K344On44Oz44Gr5a++5b+c44GZ44KL44K144Km44Oz44OJ44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXHJcbiAgICogQHBhcmFtIGdyb3VwTmFtZSDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cclxuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXHJcbiAgICogQHJldHVybiDjgrXjgqbjg7Pjg4njg5XjgqHjgqTjg6vjga7lkI3liY1cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0TW90aW9uU291bmRGaWxlTmFtZShncm91cE5hbWU6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICBpZiAoIXRoaXMuaXNFeGlzdE1vdGlvblNvdW5kRmlsZShncm91cE5hbWUsIGluZGV4KSkge1xyXG4gICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxyXG4gICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhncm91cE5hbWUpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFNvdW5kUGF0aClcclxuICAgICAgLmdldFJhd1N0cmluZygpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44O844K344On44Oz6ZaL5aeL5pmC44Gu44OV44Kn44O844OJ44Kk44Oz5Yem55CG5pmC6ZaT44KS5Y+W5b6X44GZ44KLXHJcbiAgICogQHBhcmFtIGdyb3VwTmFtZSDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cclxuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXHJcbiAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqTjg7Plh6bnkIbmmYLplpNb56eSXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRNb3Rpb25GYWRlSW5UaW1lVmFsdWUoZ3JvdXBOYW1lOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgaWYgKCF0aGlzLmlzRXhpc3RNb3Rpb25GYWRlSW4oZ3JvdXBOYW1lLCBpbmRleCkpIHtcclxuICAgICAgcmV0dXJuIC0xLjA7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxyXG4gICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhncm91cE5hbWUpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVJblRpbWUpXHJcbiAgICAgIC50b0Zsb2F0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6Ljg7zjgrfjg6fjg7PntYLkuobmmYLjga7jg5Xjgqfjg7zjg4njgqLjgqbjg4jlh6bnkIbmmYLplpPjgpLlj5blvpfjgZnjgotcclxuICAgKiBAcGFyYW0gZ3JvdXBOYW1lIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxyXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcclxuICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCouOCpuODiOWHpueQhuaZgumWk1vnp5JdXHJcbiAgICovXHJcbiAgcHVibGljIGdldE1vdGlvbkZhZGVPdXRUaW1lVmFsdWUoZ3JvdXBOYW1lOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgaWYgKCF0aGlzLmlzRXhpc3RNb3Rpb25GYWRlT3V0KGdyb3VwTmFtZSwgaW5kZXgpKSB7XHJcbiAgICAgIHJldHVybiAtMS4wO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcclxuICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW90aW9ucylcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoZ3JvdXBOYW1lKVxyXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGYWRlT3V0VGltZSlcclxuICAgICAgLnRvRmxvYXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODpuODvOOCtuODvOODh+ODvOOCv+OBruODleOCoeOCpOODq+WQjeOCkuWPluW+l+OBmeOCi1xyXG4gICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/44Gu44OV44Kh44Kk44Or5ZCNXHJcbiAgICovXHJcbiAgcHVibGljIGdldFVzZXJEYXRhRmlsZSgpOiBzdHJpbmcge1xyXG4gICAgaWYgKCF0aGlzLmlzRXhpc3RVc2VyRGF0YUZpbGUoKSkge1xyXG4gICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2pzb25cclxuICAgICAgLmdldFJvb3QoKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcylcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVXNlckRhdGEpXHJcbiAgICAgIC5nZXRSYXdTdHJpbmcoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODrOOCpOOCouOCpuODiOaDheWgseOCkuWPluW+l+OBmeOCi1xyXG4gICAqIEBwYXJhbSBvdXRMYXlvdXRNYXAgY3NtTWFw44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K5XHJcbiAgICogQHJldHVybiB0cnVlIOODrOOCpOOCouOCpuODiOaDheWgseOBjOWtmOWcqOOBmeOCi1xyXG4gICAqIEByZXR1cm4gZmFsc2Ug44Os44Kk44Ki44Km44OI5oOF5aCx44GM5a2Y5Zyo44GX44Gq44GEXHJcbiAgICovXHJcbiAgcHVibGljIGdldExheW91dE1hcChvdXRMYXlvdXRNYXA6IGNzbU1hcDxzdHJpbmcsIG51bWJlcj4pOiBib29sZWFuIHtcclxuICAgIC8vIOWtmOWcqOOBl+OBquOBhOimgee0oOOBq+OCouOCr+OCu+OCueOBmeOCi+OBqOOCqOODqeODvOOBq+OBquOCi+OBn+OCgVZhbHVl44GMbnVsbOOBruWgtOWQiOOBr251bGzjgpLku6PlhaXjgZnjgotcclxuICAgIGNvbnN0IG1hcDogY3NtTWFwPHN0cmluZywgVmFsdWU+ID0gdGhpcy5fanNvblxyXG4gICAgICAuZ2V0Um9vdCgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKExheW91dClcclxuICAgICAgLmdldE1hcCgpO1xyXG5cclxuICAgIGlmIChtYXAgPT0gbnVsbCkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHJldCA9IGZhbHNlO1xyXG5cclxuICAgIGZvciAoXHJcbiAgICAgIGNvbnN0IGl0ZTogaXRlcmF0b3I8c3RyaW5nLCBWYWx1ZT4gPSBtYXAuYmVnaW4oKTtcclxuICAgICAgaXRlLm5vdEVxdWFsKG1hcC5lbmQoKSk7XHJcbiAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKVxyXG4gICAgKSB7XHJcbiAgICAgIG91dExheW91dE1hcC5zZXRWYWx1ZShpdGUucHRyKCkuZmlyc3QsIGl0ZS5wdHIoKS5zZWNvbmQudG9GbG9hdCgpKTtcclxuICAgICAgcmV0ID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmV0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog55uu44OR44OB44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWw44KS5Y+W5b6X44GZ44KLXHJcbiAgICogQHJldHVybiDnm67jg5Hjg4HjgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbBcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RXllQmxpbmtQYXJhbWV0ZXJDb3VudCgpOiBudW1iZXIge1xyXG4gICAgaWYgKCF0aGlzLmlzRXhpc3RFeWVCbGlua1BhcmFtZXRlcnMoKSkge1xyXG4gICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgbnVtID0gMDtcclxuICAgIGZvciAoXHJcbiAgICAgIGxldCBpID0gMDtcclxuICAgICAgaSA8IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcykuZ2V0U2l6ZSgpO1xyXG4gICAgICBpKytcclxuICAgICkge1xyXG4gICAgICBjb25zdCByZWZJOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZVxyXG4gICAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcylcclxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGkpO1xyXG4gICAgICBpZiAocmVmSS5pc051bGwoKSB8fCByZWZJLmlzRXJyb3IoKSkge1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAocmVmSS5nZXRWYWx1ZUJ5U3RyaW5nKE5hbWUpLmdldFJhd1N0cmluZygpID09IEV5ZUJsaW5rKSB7XHJcbiAgICAgICAgbnVtID0gcmVmSVxyXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoSWRzKVxyXG4gICAgICAgICAgLmdldFZlY3RvcigpXHJcbiAgICAgICAgICAuZ2V0U2l6ZSgpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG51bTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOebruODkeODgeOBq+mWoumAo+S7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBrklE44KS5Y+W5b6X44GZ44KLXHJcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxyXG4gICAqIEByZXR1cm4g44OR44Op44Oh44O844K/SURcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RXllQmxpbmtQYXJhbWV0ZXJJZChpbmRleDogbnVtYmVyKTogQ3ViaXNtSWRIYW5kbGUge1xyXG4gICAgaWYgKCF0aGlzLmlzRXhpc3RFeWVCbGlua1BhcmFtZXRlcnMoKSkge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKFxyXG4gICAgICBsZXQgaSA9IDA7XHJcbiAgICAgIGkgPCB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpLmdldFNpemUoKTtcclxuICAgICAgaSsrXHJcbiAgICApIHtcclxuICAgICAgY29uc3QgcmVmSTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWVcclxuICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpXHJcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChpKTtcclxuICAgICAgaWYgKHJlZkkuaXNOdWxsKCkgfHwgcmVmSS5pc0Vycm9yKCkpIHtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHJlZkkuZ2V0VmFsdWVCeVN0cmluZyhOYW1lKS5nZXRSYXdTdHJpbmcoKSA9PSBFeWVCbGluaykge1xyXG4gICAgICAgIHJldHVybiBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXHJcbiAgICAgICAgICByZWZJXHJcbiAgICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElkcylcclxuICAgICAgICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcclxuICAgICAgICAgICAgLmdldFJhd1N0cmluZygpXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6rjg4Pjg5fjgrfjg7Pjgq/jgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbDjgpLlj5blvpfjgZnjgotcclxuICAgKiBAcmV0dXJuIOODquODg+ODl+OCt+ODs+OCr+OBq+mWoumAo+S7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBruaVsFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRMaXBTeW5jUGFyYW1ldGVyQ291bnQoKTogbnVtYmVyIHtcclxuICAgIGlmICghdGhpcy5pc0V4aXN0TGlwU3luY1BhcmFtZXRlcnMoKSkge1xyXG4gICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgbnVtID0gMDtcclxuICAgIGZvciAoXHJcbiAgICAgIGxldCBpID0gMDtcclxuICAgICAgaSA8IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcykuZ2V0U2l6ZSgpO1xyXG4gICAgICBpKytcclxuICAgICkge1xyXG4gICAgICBjb25zdCByZWZJOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZVxyXG4gICAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcylcclxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGkpO1xyXG4gICAgICBpZiAocmVmSS5pc051bGwoKSB8fCByZWZJLmlzRXJyb3IoKSkge1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAocmVmSS5nZXRWYWx1ZUJ5U3RyaW5nKE5hbWUpLmdldFJhd1N0cmluZygpID09IExpcFN5bmMpIHtcclxuICAgICAgICBudW0gPSByZWZJXHJcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJZHMpXHJcbiAgICAgICAgICAuZ2V0VmVjdG9yKClcclxuICAgICAgICAgIC5nZXRTaXplKCk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbnVtO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oq44OD44OX44K344Oz44Kv44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWw44KS5Y+W5b6X44GZ44KLXHJcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxyXG4gICAqIEByZXR1cm4g44OR44Op44Oh44O844K/SURcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0TGlwU3luY1BhcmFtZXRlcklkKGluZGV4OiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZSB7XHJcbiAgICBpZiAoIXRoaXMuaXNFeGlzdExpcFN5bmNQYXJhbWV0ZXJzKCkpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChcclxuICAgICAgbGV0IGkgPSAwO1xyXG4gICAgICBpIDwgdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKS5nZXRTaXplKCk7XHJcbiAgICAgIGkrK1xyXG4gICAgKSB7XHJcbiAgICAgIGNvbnN0IHJlZkk6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlXHJcbiAgICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKVxyXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaSk7XHJcbiAgICAgIGlmIChyZWZJLmlzTnVsbCgpIHx8IHJlZkkuaXNFcnJvcigpKSB7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChyZWZJLmdldFZhbHVlQnlTdHJpbmcoTmFtZSkuZ2V0UmF3U3RyaW5nKCkgPT0gTGlwU3luYykge1xyXG4gICAgICAgIHJldHVybiBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXHJcbiAgICAgICAgICByZWZJXHJcbiAgICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElkcylcclxuICAgICAgICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcclxuICAgICAgICAgICAgLmdldFJhd1N0cmluZygpXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6Ljg4fjg6vjg5XjgqHjgqTjg6vjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcclxuICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXHJcbiAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcclxuICAgKi9cclxuICBwcml2YXRlIGlzRXhpc3RNb2RlbEZpbGUoKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBub2RlOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vYyk7XHJcbiAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OG44Kv44K544OB44Oj44OV44Kh44Kk44Or44Gu44Kt44O844GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXHJcbiAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xyXG4gICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBpc0V4aXN0VGV4dHVyZUZpbGVzKCk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3Qgbm9kZTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9UZXh0dXJlcyk7XHJcbiAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5b2T44Gf44KK5Yik5a6a44Gu44Kt44O844GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXHJcbiAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xyXG4gICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBpc0V4aXN0SGl0QXJlYXMoKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBub2RlOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0hpdEFyZWFzKTtcclxuICAgIHJldHVybiAhbm9kZS5pc051bGwoKSAmJiAhbm9kZS5pc0Vycm9yKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDniannkIbmvJTnrpfjg5XjgqHjgqTjg6vjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcclxuICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXHJcbiAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcclxuICAgKi9cclxuICBwcml2YXRlIGlzRXhpc3RQaHlzaWNzRmlsZSgpOiBib29sZWFuIHtcclxuICAgIGNvbnN0IG5vZGU6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfUGh5c2ljcyk7XHJcbiAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Od44O844K66Kit5a6a44OV44Kh44Kk44Or44Gu44Kt44O844GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXHJcbiAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xyXG4gICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBpc0V4aXN0UG9zZUZpbGUoKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBub2RlOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX1Bvc2UpO1xyXG4gICAgcmV0dXJuICFub2RlLmlzTnVsbCgpICYmICFub2RlLmlzRXJyb3IoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOihqOaDheioreWumuODleOCoeOCpOODq+OBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xyXG4gICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcclxuICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxyXG4gICAqL1xyXG4gIHByaXZhdGUgaXNFeGlzdEV4cHJlc3Npb25GaWxlKCk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3Qgbm9kZTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWUuYXQoXHJcbiAgICAgIEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfRXhwcmVzc2lvbnNcclxuICAgICk7XHJcbiAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu44Kt44O844GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXHJcbiAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xyXG4gICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBpc0V4aXN0TW90aW9uR3JvdXBzKCk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3Qgbm9kZTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKTtcclxuICAgIHJldHVybiAhbm9kZS5pc051bGwoKSAmJiAhbm9kZS5pc0Vycm9yKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlvJXmlbDjgafmjIflrprjgZfjgZ/jg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcclxuICAgKiBAcGFyYW0gZ3JvdXBOYW1lICDjgrDjg6vjg7zjg5flkI1cclxuICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXHJcbiAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcclxuICAgKi9cclxuICBwcml2YXRlIGlzRXhpc3RNb3Rpb25Hcm91cE5hbWUoZ3JvdXBOYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIGNvbnN0IG5vZGU6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlXHJcbiAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vdGlvbnMpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKGdyb3VwTmFtZSk7XHJcbiAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5byV5pWw44Gn5oyH5a6a44GX44Gf44Oi44O844K344On44Oz44Gr5a++5b+c44GZ44KL44K144Km44Oz44OJ44OV44Kh44Kk44Or44Gu44Kt44O844GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXHJcbiAgICogQHBhcmFtIGdyb3VwTmFtZSAg44Kw44Or44O844OX5ZCNXHJcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxyXG4gICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcclxuICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxyXG4gICAqL1xyXG4gIHByaXZhdGUgaXNFeGlzdE1vdGlvblNvdW5kRmlsZShncm91cE5hbWU6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgY29uc3Qgbm9kZTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWVcclxuICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW90aW9ucylcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoZ3JvdXBOYW1lKVxyXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhTb3VuZFBhdGgpO1xyXG4gICAgcmV0dXJuICFub2RlLmlzTnVsbCgpICYmICFub2RlLmlzRXJyb3IoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOW8leaVsOOBp+aMh+WumuOBl+OBn+ODouODvOOCt+ODp+ODs+OBq+WvvuW/nOOBmeOCi+ODleOCp+ODvOODieOCpOODs+aZgumWk+OBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xyXG4gICAqIEBwYXJhbSBncm91cE5hbWUgIOOCsOODq+ODvOODl+WQjVxyXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcclxuICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXHJcbiAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcclxuICAgKi9cclxuICBwcml2YXRlIGlzRXhpc3RNb3Rpb25GYWRlSW4oZ3JvdXBOYW1lOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgIGNvbnN0IG5vZGU6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlXHJcbiAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vdGlvbnMpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKGdyb3VwTmFtZSlcclxuICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZUluVGltZSk7XHJcbiAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5byV5pWw44Gn5oyH5a6a44GX44Gf44Oi44O844K344On44Oz44Gr5a++5b+c44GZ44KL44OV44Kn44O844OJ44Ki44Km44OI5pmC6ZaT44Gu44Kt44O844GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXHJcbiAgICogQHBhcmFtIGdyb3VwTmFtZSAg44Kw44Or44O844OX5ZCNXHJcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxyXG4gICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcclxuICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxyXG4gICAqL1xyXG4gIHByaXZhdGUgaXNFeGlzdE1vdGlvbkZhZGVPdXQoZ3JvdXBOYW1lOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgIGNvbnN0IG5vZGU6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlXHJcbiAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vdGlvbnMpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKGdyb3VwTmFtZSlcclxuICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZU91dFRpbWUpO1xyXG4gICAgcmV0dXJuICFub2RlLmlzTnVsbCgpICYmICFub2RlLmlzRXJyb3IoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVzZXJEYXRh44Gu44OV44Kh44Kk44Or5ZCN44GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXHJcbiAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xyXG4gICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBpc0V4aXN0VXNlckRhdGFGaWxlKCk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3Qgbm9kZTogVmFsdWUgPSB0aGlzLl9qc29uXHJcbiAgICAgIC5nZXRSb290KClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhKTtcclxuICAgIHJldHVybiAhbm9kZS5pc051bGwoKSAmJiAhbm9kZS5pc0Vycm9yKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDnm67jgbHjgaHjgavlr77lv5zku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcclxuICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXHJcbiAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcclxuICAgKi9cclxuICBwcml2YXRlIGlzRXhpc3RFeWVCbGlua1BhcmFtZXRlcnMoKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoXHJcbiAgICAgIHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcykuaXNOdWxsKCkgfHxcclxuICAgICAgdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKS5pc0Vycm9yKClcclxuICAgICkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChcclxuICAgICAgbGV0IGkgPSAwO1xyXG4gICAgICBpIDwgdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKS5nZXRTaXplKCk7XHJcbiAgICAgICsraVxyXG4gICAgKSB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICB0aGlzLl9qc29uVmFsdWVcclxuICAgICAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcylcclxuICAgICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaSlcclxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE5hbWUpXHJcbiAgICAgICAgICAuZ2V0UmF3U3RyaW5nKCkgPT0gRXllQmxpbmtcclxuICAgICAgKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6rjg4Pjg5fjgrfjg7Pjgq/jgavlr77lv5zku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcclxuICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXHJcbiAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcclxuICAgKi9cclxuICBwcml2YXRlIGlzRXhpc3RMaXBTeW5jUGFyYW1ldGVycygpOiBib29sZWFuIHtcclxuICAgIGlmIChcclxuICAgICAgdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKS5pc051bGwoKSB8fFxyXG4gICAgICB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpLmlzRXJyb3IoKVxyXG4gICAgKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGZvciAoXHJcbiAgICAgIGxldCBpID0gMDtcclxuICAgICAgaSA8IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcykuZ2V0U2l6ZSgpO1xyXG4gICAgICArK2lcclxuICAgICkge1xyXG4gICAgICBpZiAoXHJcbiAgICAgICAgdGhpcy5fanNvblZhbHVlXHJcbiAgICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpXHJcbiAgICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGkpXHJcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhOYW1lKVxyXG4gICAgICAgICAgLmdldFJhd1N0cmluZygpID09IExpcFN5bmNcclxuICAgICAgKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX2pzb246IEN1YmlzbUpzb247XHJcbiAgcHJpdmF0ZSBfanNvblZhbHVlOiBjc21WZWN0b3I8VmFsdWU+O1xyXG59XHJcblxyXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cclxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbW1vZGVsc2V0dGluZ2pzb24nO1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vZGVsU2V0dGluZ0pzb24gPSAkLkN1YmlzbU1vZGVsU2V0dGluZ0pzb247XHJcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW9kZWxTZXR0aW5nSnNvbiA9ICQuQ3ViaXNtTW9kZWxTZXR0aW5nSnNvbjtcclxufVxyXG4iLCIvKipcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xyXG5pbXBvcnQgeyBDdWJpc21Nb2RlbCB9IGZyb20gJy4uL21vZGVsL2N1YmlzbW1vZGVsJztcclxuaW1wb3J0IHsgY3NtVmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xyXG5cclxuLyoqXHJcbiAqIOWRvOWQuOapn+iDvVxyXG4gKlxyXG4gKiDlkbzlkLjmqZ/og73jgpLmj5DkvpvjgZnjgovjgIJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDdWJpc21CcmVhdGgge1xyXG4gIC8qKlxyXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOBruS9nOaIkFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCk6IEN1YmlzbUJyZWF0aCB7XHJcbiAgICByZXR1cm4gbmV3IEN1YmlzbUJyZWF0aCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Kk44Oz44K544K/44Oz44K544Gu56C05qOEXHJcbiAgICogQHBhcmFtIGluc3RhbmNlIOWvvuixoeOBrkN1YmlzbUJyZWF0aFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZGVsZXRlKGluc3RhbmNlOiBDdWJpc21CcmVhdGgpOiB2b2lkIHtcclxuICAgIGlmIChpbnN0YW5jZSAhPSBudWxsKSB7XHJcbiAgICAgIGluc3RhbmNlID0gbnVsbDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWRvOWQuOOBruODkeODqeODoeODvOOCv+OBrue0kOOBpeOBkVxyXG4gICAqIEBwYXJhbSBicmVhdGhQYXJhbWV0ZXJzIOWRvOWQuOOCkue0kOOBpeOBkeOBn+OBhOODkeODqeODoeODvOOCv+OBruODquOCueODiFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRQYXJhbWV0ZXJzKGJyZWF0aFBhcmFtZXRlcnM6IGNzbVZlY3RvcjxCcmVhdGhQYXJhbWV0ZXJEYXRhPik6IHZvaWQge1xyXG4gICAgdGhpcy5fYnJlYXRoUGFyYW1ldGVycyA9IGJyZWF0aFBhcmFtZXRlcnM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlkbzlkLjjgavntJDjgaXjgYTjgabjgYTjgovjg5Hjg6njg6Hjg7zjgr/jga7lj5blvpdcclxuICAgKiBAcmV0dXJuIOWRvOWQuOOBq+e0kOOBpeOBhOOBpuOBhOOCi+ODkeODqeODoeODvOOCv+OBruODquOCueODiFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRQYXJhbWV0ZXJzKCk6IGNzbVZlY3RvcjxCcmVhdGhQYXJhbWV0ZXJEYXRhPiB7XHJcbiAgICByZXR1cm4gdGhpcy5fYnJlYXRoUGFyYW1ldGVycztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODh+ODq+OBruODkeODqeODoeODvOOCv+OBruabtOaWsFxyXG4gICAqIEBwYXJhbSBtb2RlbCDlr77osaHjga7jg6Ljg4fjg6tcclxuICAgKiBAcGFyYW0gZGVsdGFUaW1lU2Vjb25kcyDjg4fjg6vjgr/mmYLplpNb56eSXVxyXG4gICAqL1xyXG4gIHB1YmxpYyB1cGRhdGVQYXJhbWV0ZXJzKG1vZGVsOiBDdWJpc21Nb2RlbCwgZGVsdGFUaW1lU2Vjb25kczogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLl9jdXJyZW50VGltZSArPSBkZWx0YVRpbWVTZWNvbmRzO1xyXG5cclxuICAgIGNvbnN0IHQ6IG51bWJlciA9IHRoaXMuX2N1cnJlbnRUaW1lICogMi4wICogMy4xNDE1OTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2JyZWF0aFBhcmFtZXRlcnMuZ2V0U2l6ZSgpOyArK2kpIHtcclxuICAgICAgY29uc3QgZGF0YTogQnJlYXRoUGFyYW1ldGVyRGF0YSA9IHRoaXMuX2JyZWF0aFBhcmFtZXRlcnMuYXQoaSk7XHJcblxyXG4gICAgICBtb2RlbC5hZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQoXHJcbiAgICAgICAgZGF0YS5wYXJhbWV0ZXJJZCxcclxuICAgICAgICBkYXRhLm9mZnNldCArIGRhdGEucGVhayAqIE1hdGguc2luKHQgLyBkYXRhLmN5Y2xlKSxcclxuICAgICAgICBkYXRhLndlaWdodFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5fY3VycmVudFRpbWUgPSAwLjA7XHJcbiAgfVxyXG5cclxuICBfYnJlYXRoUGFyYW1ldGVyczogY3NtVmVjdG9yPEJyZWF0aFBhcmFtZXRlckRhdGE+OyAvLyDlkbzlkLjjgavjgbLjgoLjgaXjgYTjgabjgYTjgovjg5Hjg6njg6Hjg7zjgr/jga7jg6rjgrnjg4hcclxuICBfY3VycmVudFRpbWU6IG51bWJlcjsgLy8g56mN566X5pmC6ZaTW+enkl1cclxufVxyXG5cclxuLyoqXHJcbiAqIOWRvOWQuOOBruODkeODqeODoeODvOOCv+aDheWgsVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEJyZWF0aFBhcmFtZXRlckRhdGEge1xyXG4gIC8qKlxyXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJJZCAgIOWRvOWQuOOCkuOBsuOCguOBpeOBkeOCi+ODkeODqeODoeODvOOCv0lEXHJcbiAgICogQHBhcmFtIG9mZnNldCAgICAgICAg5ZG85ZC444KS5q2j5bym5rOi44Go44GX44Gf44Go44GN44Gu44CB5rOi44Gu44Kq44OV44K744OD44OIXHJcbiAgICogQHBhcmFtIHBlYWsgICAgICAgICAg5ZG85ZC444KS5q2j5bym5rOi44Go44GX44Gf44Go44GN44Gu44CB5rOi44Gu6auY44GVXHJcbiAgICogQHBhcmFtIGN5Y2xlICAgICAgICAg5ZG85ZC444KS5q2j5bym5rOi44Go44GX44Gf44Go44GN44Gu44CB5rOi44Gu5ZGo5pyfXHJcbiAgICogQHBhcmFtIHdlaWdodCAgICAgICAg44OR44Op44Oh44O844K/44G444Gu6YeN44G/XHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwYXJhbWV0ZXJJZD86IEN1YmlzbUlkSGFuZGxlLFxyXG4gICAgb2Zmc2V0PzogbnVtYmVyLFxyXG4gICAgcGVhaz86IG51bWJlcixcclxuICAgIGN5Y2xlPzogbnVtYmVyLFxyXG4gICAgd2VpZ2h0PzogbnVtYmVyXHJcbiAgKSB7XHJcbiAgICB0aGlzLnBhcmFtZXRlcklkID0gcGFyYW1ldGVySWQgPT0gdW5kZWZpbmVkID8gbnVsbCA6IHBhcmFtZXRlcklkO1xyXG4gICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQgPT0gdW5kZWZpbmVkID8gMC4wIDogb2Zmc2V0O1xyXG4gICAgdGhpcy5wZWFrID0gcGVhayA9PSB1bmRlZmluZWQgPyAwLjAgOiBwZWFrO1xyXG4gICAgdGhpcy5jeWNsZSA9IGN5Y2xlID09IHVuZGVmaW5lZCA/IDAuMCA6IGN5Y2xlO1xyXG4gICAgdGhpcy53ZWlnaHQgPSB3ZWlnaHQgPT0gdW5kZWZpbmVkID8gMC4wIDogd2VpZ2h0O1xyXG4gIH1cclxuXHJcbiAgcGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlOyAvLyDlkbzlkLjjgpLjgbLjgoLjgaXjgZHjgovjg5Hjg6njg6Hjg7zjgr9JRFxcXHJcbiAgb2Zmc2V0OiBudW1iZXI7IC8vIOWRvOWQuOOCkuato+W8puazouOBqOOBl+OBn+OBqOOBjeOBruOAgeazouOBruOCquODleOCu+ODg+ODiFxyXG4gIHBlYWs6IG51bWJlcjsgLy8g5ZG85ZC444KS5q2j5bym5rOi44Go44GX44Gf44Go44GN44Gu44CB5rOi44Gu6auY44GVXHJcbiAgY3ljbGU6IG51bWJlcjsgLy8g5ZG85ZC444KS5q2j5bym5rOi44Go44GX44Gf44Go44GN44Gu44CB5rOi44Gu5ZGo5pyfXHJcbiAgd2VpZ2h0OiBudW1iZXI7IC8vIOODkeODqeODoeODvOOCv+OBuOOBrumHjeOBv1xyXG59XHJcblxyXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cclxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbWJyZWF0aCc7XHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcclxuICBleHBvcnQgY29uc3QgQnJlYXRoUGFyYW1ldGVyRGF0YSA9ICQuQnJlYXRoUGFyYW1ldGVyRGF0YTtcclxuICBleHBvcnQgdHlwZSBCcmVhdGhQYXJhbWV0ZXJEYXRhID0gJC5CcmVhdGhQYXJhbWV0ZXJEYXRhO1xyXG4gIGV4cG9ydCBjb25zdCBDdWJpc21CcmVhdGggPSAkLkN1YmlzbUJyZWF0aDtcclxuICBleHBvcnQgdHlwZSBDdWJpc21CcmVhdGggPSAkLkN1YmlzbUJyZWF0aDtcclxufVxyXG4iLCIvKipcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IElDdWJpc21Nb2RlbFNldHRpbmcgfSBmcm9tICcuLi9pY3ViaXNtbW9kZWxzZXR0aW5nJztcclxuaW1wb3J0IHsgQ3ViaXNtSWRIYW5kbGUgfSBmcm9tICcuLi9pZC9jdWJpc21pZCc7XHJcbmltcG9ydCB7IEN1YmlzbU1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvY3ViaXNtbW9kZWwnO1xyXG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XHJcblxyXG4vKipcclxuICog6Ieq5YuV44G+44Gw44Gf44GN5qmf6IO9XHJcbiAqXHJcbiAqIOiHquWLleOBvuOBsOOBn+OBjeapn+iDveOCkuaPkOS+m+OBmeOCi+OAglxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEN1YmlzbUV5ZUJsaW5rIHtcclxuICAvKipcclxuICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnjgpLkvZzmiJDjgZnjgotcclxuICAgKiBAcGFyYW0gbW9kZWxTZXR0aW5nIOODouODh+ODq+OBruioreWumuaDheWgsVxyXG4gICAqIEByZXR1cm4g5L2c5oiQ44GV44KM44Gf44Kk44Oz44K544K/44Oz44K5XHJcbiAgICogQG5vdGUg5byV5pWw44GMTlVMTOOBruWgtOWQiOOAgeODkeODqeODoeODvOOCv0lE44GM6Kit5a6a44GV44KM44Gm44GE44Gq44GE56m644Gu44Kk44Oz44K544K/44Oz44K544KS5L2c5oiQ44GZ44KL44CCXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGUoXHJcbiAgICBtb2RlbFNldHRpbmc6IElDdWJpc21Nb2RlbFNldHRpbmcgPSBudWxsXHJcbiAgKTogQ3ViaXNtRXllQmxpbmsge1xyXG4gICAgcmV0dXJuIG5ldyBDdWJpc21FeWVCbGluayhtb2RlbFNldHRpbmcpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Kk44Oz44K544K/44Oz44K544Gu56C05qOEXHJcbiAgICogQHBhcmFtIGV5ZUJsaW5rIOWvvuixoeOBrkN1YmlzbUV5ZUJsaW5rXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBkZWxldGUoZXllQmxpbms6IEN1YmlzbUV5ZUJsaW5rKTogdm9pZCB7XHJcbiAgICBpZiAoZXllQmxpbmsgIT0gbnVsbCkge1xyXG4gICAgICBleWVCbGluayA9IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjgb7jgbDjgZ/jgY3jga7plpPpmpTjga7oqK3lrppcclxuICAgKiBAcGFyYW0gYmxpbmtpbmdJbnRlcnZhbCDjgb7jgbDjgZ/jgY3jga7plpPpmpTjga7mmYLplpNb56eSXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRCbGlua2luZ0ludGVydmFsKGJsaW5raW5nSW50ZXJ2YWw6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5fYmxpbmtpbmdJbnRlcnZhbFNlY29uZHMgPSBibGlua2luZ0ludGVydmFsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44G+44Gw44Gf44GN44Gu44Oi44O844K344On44Oz44Gu6Kmz57Sw6Kit5a6aXHJcbiAgICogQHBhcmFtIGNsb3NpbmcgICDjgb7jgbbjgZ/jgpLplonjgZjjgovli5XkvZzjga7miYDopoHmmYLplpNb56eSXVxyXG4gICAqIEBwYXJhbSBjbG9zZWQgICAg44G+44G244Gf44KS6ZaJ44GY44Gm44GE44KL5YuV5L2c44Gu5omA6KaB5pmC6ZaTW+enkl1cclxuICAgKiBAcGFyYW0gb3BlbmluZyAgIOOBvuOBtuOBn+OCkumWi+OBj+WLleS9nOOBruaJgOimgeaZgumWk1vnp5JdXHJcbiAgICovXHJcbiAgcHVibGljIHNldEJsaW5raW5nU2V0dGluZyhcclxuICAgIGNsb3Npbmc6IG51bWJlcixcclxuICAgIGNsb3NlZDogbnVtYmVyLFxyXG4gICAgb3BlbmluZzogbnVtYmVyXHJcbiAgKTogdm9pZCB7XHJcbiAgICB0aGlzLl9jbG9zaW5nU2Vjb25kcyA9IGNsb3Npbmc7XHJcbiAgICB0aGlzLl9jbG9zZWRTZWNvbmRzID0gY2xvc2VkO1xyXG4gICAgdGhpcy5fb3BlbmluZ1NlY29uZHMgPSBvcGVuaW5nO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44G+44Gw44Gf44GN44GV44Gb44KL44OR44Op44Oh44O844K/SUTjga7jg6rjgrnjg4jjga7oqK3lrppcclxuICAgKiBAcGFyYW0gcGFyYW1ldGVySWRzIOODkeODqeODoeODvOOCv+OBrklE44Gu44Oq44K544OIXHJcbiAgICovXHJcbiAgcHVibGljIHNldFBhcmFtZXRlcklkcyhwYXJhbWV0ZXJJZHM6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT4pOiB2b2lkIHtcclxuICAgIHRoaXMuX3BhcmFtZXRlcklkcyA9IHBhcmFtZXRlcklkcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOBvuOBsOOBn+OBjeOBleOBm+OCi+ODkeODqeODoeODvOOCv0lE44Gu44Oq44K544OI44Gu5Y+W5b6XXHJcbiAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr9JROOBruODquOCueODiFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRQYXJhbWV0ZXJJZHMoKTogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPiB7XHJcbiAgICByZXR1cm4gdGhpcy5fcGFyYW1ldGVySWRzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/44Gu5pu05pawXHJcbiAgICogQHBhcmFtIG1vZGVsIOWvvuixoeOBruODouODh+ODq1xyXG4gICAqIEBwYXJhbSBkZWx0YVRpbWVTZWNvbmRzIOODh+ODq+OCv+aZgumWk1vnp5JdXHJcbiAgICovXHJcbiAgcHVibGljIHVwZGF0ZVBhcmFtZXRlcnMobW9kZWw6IEN1YmlzbU1vZGVsLCBkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyArPSBkZWx0YVRpbWVTZWNvbmRzO1xyXG4gICAgbGV0IHBhcmFtZXRlclZhbHVlOiBudW1iZXI7XHJcbiAgICBsZXQgdCA9IDAuMDtcclxuXHJcbiAgICBzd2l0Y2ggKHRoaXMuX2JsaW5raW5nU3RhdGUpIHtcclxuICAgICAgY2FzZSBFeWVTdGF0ZS5FeWVTdGF0ZV9DbG9zaW5nOlxyXG4gICAgICAgIHQgPVxyXG4gICAgICAgICAgKHRoaXMuX3VzZXJUaW1lU2Vjb25kcyAtIHRoaXMuX3N0YXRlU3RhcnRUaW1lU2Vjb25kcykgL1xyXG4gICAgICAgICAgdGhpcy5fY2xvc2luZ1NlY29uZHM7XHJcblxyXG4gICAgICAgIGlmICh0ID49IDEuMCkge1xyXG4gICAgICAgICAgdCA9IDEuMDtcclxuICAgICAgICAgIHRoaXMuX2JsaW5raW5nU3RhdGUgPSBFeWVTdGF0ZS5FeWVTdGF0ZV9DbG9zZWQ7XHJcbiAgICAgICAgICB0aGlzLl9zdGF0ZVN0YXJ0VGltZVNlY29uZHMgPSB0aGlzLl91c2VyVGltZVNlY29uZHM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwYXJhbWV0ZXJWYWx1ZSA9IDEuMCAtIHQ7XHJcblxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIEV5ZVN0YXRlLkV5ZVN0YXRlX0Nsb3NlZDpcclxuICAgICAgICB0ID1cclxuICAgICAgICAgICh0aGlzLl91c2VyVGltZVNlY29uZHMgLSB0aGlzLl9zdGF0ZVN0YXJ0VGltZVNlY29uZHMpIC9cclxuICAgICAgICAgIHRoaXMuX2Nsb3NlZFNlY29uZHM7XHJcblxyXG4gICAgICAgIGlmICh0ID49IDEuMCkge1xyXG4gICAgICAgICAgdGhpcy5fYmxpbmtpbmdTdGF0ZSA9IEV5ZVN0YXRlLkV5ZVN0YXRlX09wZW5pbmc7XHJcbiAgICAgICAgICB0aGlzLl9zdGF0ZVN0YXJ0VGltZVNlY29uZHMgPSB0aGlzLl91c2VyVGltZVNlY29uZHM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwYXJhbWV0ZXJWYWx1ZSA9IDAuMDtcclxuXHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgRXllU3RhdGUuRXllU3RhdGVfT3BlbmluZzpcclxuICAgICAgICB0ID1cclxuICAgICAgICAgICh0aGlzLl91c2VyVGltZVNlY29uZHMgLSB0aGlzLl9zdGF0ZVN0YXJ0VGltZVNlY29uZHMpIC9cclxuICAgICAgICAgIHRoaXMuX29wZW5pbmdTZWNvbmRzO1xyXG5cclxuICAgICAgICBpZiAodCA+PSAxLjApIHtcclxuICAgICAgICAgIHQgPSAxLjA7XHJcbiAgICAgICAgICB0aGlzLl9ibGlua2luZ1N0YXRlID0gRXllU3RhdGUuRXllU3RhdGVfSW50ZXJ2YWw7XHJcbiAgICAgICAgICB0aGlzLl9uZXh0QmxpbmtpbmdUaW1lID0gdGhpcy5kZXRlcm1pbk5leHRCbGlua2luZ1RpbWluZygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcGFyYW1ldGVyVmFsdWUgPSB0O1xyXG5cclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBFeWVTdGF0ZS5FeWVTdGF0ZV9JbnRlcnZhbDpcclxuICAgICAgICBpZiAodGhpcy5fbmV4dEJsaW5raW5nVGltZSA8IHRoaXMuX3VzZXJUaW1lU2Vjb25kcykge1xyXG4gICAgICAgICAgdGhpcy5fYmxpbmtpbmdTdGF0ZSA9IEV5ZVN0YXRlLkV5ZVN0YXRlX0Nsb3Npbmc7XHJcbiAgICAgICAgICB0aGlzLl9zdGF0ZVN0YXJ0VGltZVNlY29uZHMgPSB0aGlzLl91c2VyVGltZVNlY29uZHM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwYXJhbWV0ZXJWYWx1ZSA9IDEuMDtcclxuXHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgRXllU3RhdGUuRXllU3RhdGVfRmlyc3Q6XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgdGhpcy5fYmxpbmtpbmdTdGF0ZSA9IEV5ZVN0YXRlLkV5ZVN0YXRlX0ludGVydmFsO1xyXG4gICAgICAgIHRoaXMuX25leHRCbGlua2luZ1RpbWUgPSB0aGlzLmRldGVybWluTmV4dEJsaW5raW5nVGltaW5nKCk7XHJcblxyXG4gICAgICAgIHBhcmFtZXRlclZhbHVlID0gMS4wO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghQ3ViaXNtRXllQmxpbmsuQ2xvc2VJZlplcm8pIHtcclxuICAgICAgcGFyYW1ldGVyVmFsdWUgPSAtcGFyYW1ldGVyVmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9wYXJhbWV0ZXJJZHMuZ2V0U2l6ZSgpOyArK2kpIHtcclxuICAgICAgbW9kZWwuc2V0UGFyYW1ldGVyVmFsdWVCeUlkKHRoaXMuX3BhcmFtZXRlcklkcy5hdChpKSwgcGFyYW1ldGVyVmFsdWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICogQHBhcmFtIG1vZGVsU2V0dGluZyDjg6Ljg4fjg6vjga7oqK3lrprmg4XloLFcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IobW9kZWxTZXR0aW5nOiBJQ3ViaXNtTW9kZWxTZXR0aW5nKSB7XHJcbiAgICB0aGlzLl9ibGlua2luZ1N0YXRlID0gRXllU3RhdGUuRXllU3RhdGVfRmlyc3Q7XHJcbiAgICB0aGlzLl9uZXh0QmxpbmtpbmdUaW1lID0gMC4wO1xyXG4gICAgdGhpcy5fc3RhdGVTdGFydFRpbWVTZWNvbmRzID0gMC4wO1xyXG4gICAgdGhpcy5fYmxpbmtpbmdJbnRlcnZhbFNlY29uZHMgPSA0LjA7XHJcbiAgICB0aGlzLl9jbG9zaW5nU2Vjb25kcyA9IDAuMTtcclxuICAgIHRoaXMuX2Nsb3NlZFNlY29uZHMgPSAwLjA1O1xyXG4gICAgdGhpcy5fb3BlbmluZ1NlY29uZHMgPSAwLjE1O1xyXG4gICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzID0gMC4wO1xyXG4gICAgdGhpcy5fcGFyYW1ldGVySWRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT4oKTtcclxuXHJcbiAgICBpZiAobW9kZWxTZXR0aW5nID09IG51bGwpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW9kZWxTZXR0aW5nLmdldEV5ZUJsaW5rUGFyYW1ldGVyQ291bnQoKTsgKytpKSB7XHJcbiAgICAgIHRoaXMuX3BhcmFtZXRlcklkcy5wdXNoQmFjayhtb2RlbFNldHRpbmcuZ2V0RXllQmxpbmtQYXJhbWV0ZXJJZChpKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmrKHjga7nnqzjgY3jga7jgr/jgqTjg5/jg7PjgrDjga7msbrlrppcclxuICAgKlxyXG4gICAqIEByZXR1cm4g5qyh44Gu44G+44Gw44Gf44GN44KS6KGM44GG5pmC5Yi7W+enkl1cclxuICAgKi9cclxuICBwdWJsaWMgZGV0ZXJtaW5OZXh0QmxpbmtpbmdUaW1pbmcoKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IHI6IG51bWJlciA9IE1hdGgucmFuZG9tKCk7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICB0aGlzLl91c2VyVGltZVNlY29uZHMgKyByICogKDIuMCAqIHRoaXMuX2JsaW5raW5nSW50ZXJ2YWxTZWNvbmRzIC0gMS4wKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIF9ibGlua2luZ1N0YXRlOiBudW1iZXI7IC8vIOePvuWcqOOBrueKtuaFi1xyXG4gIF9wYXJhbWV0ZXJJZHM6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT47IC8vIOaTjeS9nOWvvuixoeOBruODkeODqeODoeODvOOCv+OBrklE44Gu44Oq44K544OIXHJcbiAgX25leHRCbGlua2luZ1RpbWU6IG51bWJlcjsgLy8g5qyh44Gu44G+44Gw44Gf44GN44Gu5pmC5Yi7W+enkl1cclxuICBfc3RhdGVTdGFydFRpbWVTZWNvbmRzOiBudW1iZXI7IC8vIOePvuWcqOOBrueKtuaFi+OBjOmWi+Wni+OBl+OBn+aZguWIu1vnp5JdXHJcbiAgX2JsaW5raW5nSW50ZXJ2YWxTZWNvbmRzOiBudW1iZXI7IC8vIOOBvuOBsOOBn+OBjeOBrumWk+malFvnp5JdXHJcbiAgX2Nsb3NpbmdTZWNvbmRzOiBudW1iZXI7IC8vIOOBvuOBtuOBn+OCkumWieOBmOOCi+WLleS9nOOBruaJgOimgeaZgumWk1vnp5JdXHJcbiAgX2Nsb3NlZFNlY29uZHM6IG51bWJlcjsgLy8g44G+44G244Gf44KS6ZaJ44GY44Gm44GE44KL5YuV5L2c44Gu5omA6KaB5pmC6ZaTW+enkl1cclxuICBfb3BlbmluZ1NlY29uZHM6IG51bWJlcjsgLy8g44G+44G244Gf44KS6ZaL44GP5YuV5L2c44Gu5omA6KaB5pmC6ZaTW+enkl1cclxuICBfdXNlclRpbWVTZWNvbmRzOiBudW1iZXI7IC8vIOODh+ODq+OCv+aZgumWk+OBruepjeeul+WApFvnp5JdXHJcblxyXG4gIC8qKlxyXG4gICAqIElE44Gn5oyH5a6a44GV44KM44Gf55uu44Gu44OR44Op44Oh44O844K/44GM44CBMOOBruOBqOOBjeOBq+mWieOBmOOCi+OBquOCiSB0cnVlIOOAgTHjga7mmYLjgavplonjgZjjgovjgarjgokgZmFsc2Ug44CCXHJcbiAgICovXHJcbiAgc3RhdGljIHJlYWRvbmx5IENsb3NlSWZaZXJvOiBib29sZWFuID0gdHJ1ZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIOOBvuOBsOOBn+OBjeOBrueKtuaFi1xyXG4gKlxyXG4gKiDjgb7jgbDjgZ/jgY3jga7nirbmhYvjgpLooajjgZnliJfmjJnlnotcclxuICovXHJcbmV4cG9ydCBlbnVtIEV5ZVN0YXRlIHtcclxuICBFeWVTdGF0ZV9GaXJzdCA9IDAsIC8vIOWIneacn+eKtuaFi1xyXG4gIEV5ZVN0YXRlX0ludGVydmFsLCAvLyDjgb7jgbDjgZ/jgY3jgZfjgabjgYTjgarjgYTnirbmhYtcclxuICBFeWVTdGF0ZV9DbG9zaW5nLCAvLyDjgb7jgbbjgZ/jgYzplonjgZjjgabjgYTjgY/pgJTkuK3jga7nirbmhYtcclxuICBFeWVTdGF0ZV9DbG9zZWQsIC8vIOOBvuOBtuOBn+OBjOmWieOBmOOBpuOBhOOCi+eKtuaFi1xyXG4gIEV5ZVN0YXRlX09wZW5pbmcgLy8g44G+44G244Gf44GM6ZaL44GE44Gm44GE44GP6YCU5Lit44Gu54q25oWLXHJcbn1cclxuXHJcbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxyXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtZXllYmxpbmsnO1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbUV5ZUJsaW5rID0gJC5DdWJpc21FeWVCbGluaztcclxuICBleHBvcnQgdHlwZSBDdWJpc21FeWVCbGluayA9ICQuQ3ViaXNtRXllQmxpbms7XHJcbiAgZXhwb3J0IGNvbnN0IEV5ZVN0YXRlID0gJC5FeWVTdGF0ZTtcclxuICBleHBvcnQgdHlwZSBFeWVTdGF0ZSA9ICQuRXllU3RhdGU7XHJcbn1cclxuIiwiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcclxuaW1wb3J0IHsgQ3ViaXNtRnJhbWV3b3JrIH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcclxuaW1wb3J0IHsgQ3ViaXNtTW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XHJcbmltcG9ydCB7IGNzbVZlY3RvciwgaXRlcmF0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XHJcbmltcG9ydCB7IEN1YmlzbUpzb24sIFZhbHVlIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtanNvbic7XHJcblxyXG5jb25zdCBFcHNpbG9uID0gMC4wMDE7XHJcbmNvbnN0IERlZmF1bHRGYWRlSW5TZWNvbmRzID0gMC41O1xyXG5cclxuLy8gUG9zZS5qc29u44Gu44K/44KwXHJcbmNvbnN0IEZhZGVJbiA9ICdGYWRlSW5UaW1lJztcclxuY29uc3QgTGluayA9ICdMaW5rJztcclxuY29uc3QgR3JvdXBzID0gJ0dyb3Vwcyc7XHJcbmNvbnN0IElkID0gJ0lkJztcclxuXHJcbi8qKlxyXG4gKiDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjga7oqK3lrppcclxuICpcclxuICog44OR44O844OE44Gu5LiN6YCP5piO5bqm44Gu566h55CG44Go6Kit5a6a44KS6KGM44GG44CCXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ3ViaXNtUG9zZSB7XHJcbiAgLyoqXHJcbiAgICog44Kk44Oz44K544K/44Oz44K544Gu5L2c5oiQXHJcbiAgICogQHBhcmFtIHBvc2UzanNvbiBwb3NlMy5qc29u44Gu44OH44O844K/XHJcbiAgICogQHBhcmFtIHNpemUgcG9zZTMuanNvbuOBruODh+ODvOOCv+OBruOCteOCpOOCultieXRlXVxyXG4gICAqIEByZXR1cm4g5L2c5oiQ44GV44KM44Gf44Kk44Oz44K544K/44Oz44K5XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGUocG9zZTNqc29uOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogQ3ViaXNtUG9zZSB7XHJcbiAgICBjb25zdCByZXQ6IEN1YmlzbVBvc2UgPSBuZXcgQ3ViaXNtUG9zZSgpO1xyXG4gICAgY29uc3QganNvbjogQ3ViaXNtSnNvbiA9IEN1YmlzbUpzb24uY3JlYXRlKHBvc2UzanNvbiwgc2l6ZSk7XHJcbiAgICBjb25zdCByb290OiBWYWx1ZSA9IGpzb24uZ2V0Um9vdCgpO1xyXG5cclxuICAgIC8vIOODleOCp+ODvOODieaZgumWk+OBruaMh+WumlxyXG4gICAgaWYgKCFyb290LmdldFZhbHVlQnlTdHJpbmcoRmFkZUluKS5pc051bGwoKSkge1xyXG4gICAgICByZXQuX2ZhZGVUaW1lU2Vjb25kcyA9IHJvb3RcclxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGYWRlSW4pXHJcbiAgICAgICAgLnRvRmxvYXQoRGVmYXVsdEZhZGVJblNlY29uZHMpO1xyXG5cclxuICAgICAgaWYgKHJldC5fZmFkZVRpbWVTZWNvbmRzIDw9IDAuMCkge1xyXG4gICAgICAgIHJldC5fZmFkZVRpbWVTZWNvbmRzID0gRGVmYXVsdEZhZGVJblNlY29uZHM7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyDjg5Hjg7zjg4TjgrDjg6vjg7zjg5dcclxuICAgIGNvbnN0IHBvc2VMaXN0SW5mbzogVmFsdWUgPSByb290LmdldFZhbHVlQnlTdHJpbmcoR3JvdXBzKTtcclxuICAgIGNvbnN0IHBvc2VDb3VudDogbnVtYmVyID0gcG9zZUxpc3RJbmZvLmdldFNpemUoKTtcclxuXHJcbiAgICBmb3IgKGxldCBwb3NlSW5kZXggPSAwOyBwb3NlSW5kZXggPCBwb3NlQ291bnQ7ICsrcG9zZUluZGV4KSB7XHJcbiAgICAgIGNvbnN0IGlkTGlzdEluZm86IFZhbHVlID0gcG9zZUxpc3RJbmZvLmdldFZhbHVlQnlJbmRleChwb3NlSW5kZXgpO1xyXG4gICAgICBjb25zdCBpZENvdW50OiBudW1iZXIgPSBpZExpc3RJbmZvLmdldFNpemUoKTtcclxuICAgICAgbGV0IGdyb3VwQ291bnQgPSAwO1xyXG5cclxuICAgICAgZm9yIChsZXQgZ3JvdXBJbmRleCA9IDA7IGdyb3VwSW5kZXggPCBpZENvdW50OyArK2dyb3VwSW5kZXgpIHtcclxuICAgICAgICBjb25zdCBwYXJ0SW5mbzogVmFsdWUgPSBpZExpc3RJbmZvLmdldFZhbHVlQnlJbmRleChncm91cEluZGV4KTtcclxuICAgICAgICBjb25zdCBwYXJ0RGF0YTogUGFydERhdGEgPSBuZXcgUGFydERhdGEoKTtcclxuICAgICAgICBjb25zdCBwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGUgPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXHJcbiAgICAgICAgICBwYXJ0SW5mby5nZXRWYWx1ZUJ5U3RyaW5nKElkKS5nZXRSYXdTdHJpbmcoKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHBhcnREYXRhLnBhcnRJZCA9IHBhcmFtZXRlcklkO1xyXG5cclxuICAgICAgICAvLyDjg6rjg7Pjgq/jgZnjgovjg5Hjg7zjg4Tjga7oqK3lrppcclxuICAgICAgICBpZiAoIXBhcnRJbmZvLmdldFZhbHVlQnlTdHJpbmcoTGluaykuaXNOdWxsKCkpIHtcclxuICAgICAgICAgIGNvbnN0IGxpbmtMaXN0SW5mbzogVmFsdWUgPSBwYXJ0SW5mby5nZXRWYWx1ZUJ5U3RyaW5nKExpbmspO1xyXG4gICAgICAgICAgY29uc3QgbGlua0NvdW50OiBudW1iZXIgPSBsaW5rTGlzdEluZm8uZ2V0U2l6ZSgpO1xyXG5cclxuICAgICAgICAgIGZvciAobGV0IGxpbmtJbmRleCA9IDA7IGxpbmtJbmRleCA8IGxpbmtDb3VudDsgKytsaW5rSW5kZXgpIHtcclxuICAgICAgICAgICAgY29uc3QgbGlua1BhcnQ6IFBhcnREYXRhID0gbmV3IFBhcnREYXRhKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGxpbmtJZDogQ3ViaXNtSWRIYW5kbGUgPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXHJcbiAgICAgICAgICAgICAgbGlua0xpc3RJbmZvLmdldFZhbHVlQnlJbmRleChsaW5rSW5kZXgpLmdldFN0cmluZygpXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBsaW5rUGFydC5wYXJ0SWQgPSBsaW5rSWQ7XHJcblxyXG4gICAgICAgICAgICBwYXJ0RGF0YS5saW5rLnB1c2hCYWNrKGxpbmtQYXJ0KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldC5fcGFydEdyb3Vwcy5wdXNoQmFjayhwYXJ0RGF0YS5jbG9uZSgpKTtcclxuXHJcbiAgICAgICAgKytncm91cENvdW50O1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXQuX3BhcnRHcm91cENvdW50cy5wdXNoQmFjayhncm91cENvdW50KTtcclxuICAgIH1cclxuXHJcbiAgICBDdWJpc21Kc29uLmRlbGV0ZShqc29uKTtcclxuXHJcbiAgICByZXR1cm4gcmV0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Kk44Oz44K544K/44Oz44K544KS56C05qOE44GZ44KLXHJcbiAgICogQHBhcmFtIHBvc2Ug5a++6LGh44GuQ3ViaXNtUG9zZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZGVsZXRlKHBvc2U6IEN1YmlzbVBvc2UpOiB2b2lkIHtcclxuICAgIGlmIChwb3NlICE9IG51bGwpIHtcclxuICAgICAgcG9zZSA9IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6Ljg4fjg6vjga7jg5Hjg6njg6Hjg7zjgr/jga7mm7TmlrBcclxuICAgKiBAcGFyYW0gbW9kZWwg5a++6LGh44Gu44Oi44OH44OrXHJcbiAgICogQHBhcmFtIGRlbHRhVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaTW+enkl1cclxuICAgKi9cclxuICBwdWJsaWMgdXBkYXRlUGFyYW1ldGVycyhtb2RlbDogQ3ViaXNtTW9kZWwsIGRlbHRhVGltZVNlY29uZHM6IG51bWJlcik6IHZvaWQge1xyXG4gICAgLy8g5YmN5Zue44Gu44Oi44OH44Or44Go5ZCM44GY44Gn44Gq44GE5aC05ZCI44Gv5Yid5pyf5YyW44GM5b+F6KaBXHJcbiAgICBpZiAobW9kZWwgIT0gdGhpcy5fbGFzdE1vZGVsKSB7XHJcbiAgICAgIC8vIOODkeODqeODoeODvOOCv+OCpOODs+ODh+ODg+OCr+OCueOBruWIneacn+WMllxyXG4gICAgICB0aGlzLnJlc2V0KG1vZGVsKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9sYXN0TW9kZWwgPSBtb2RlbDtcclxuXHJcbiAgICAvLyDoqK3lrprjgYvjgonmmYLplpPjgpLlpInmm7TjgZnjgovjgajjgIHntYzpgY7mmYLplpPjgYzjg57jgqTjg4rjgrnjgavjgarjgovkuovjgYzjgYLjgovjga7jgafjgIHntYzpgY7mmYLplpMw44Go44GX44Gm5a++5b+cXHJcbiAgICBpZiAoZGVsdGFUaW1lU2Vjb25kcyA8IDAuMCkge1xyXG4gICAgICBkZWx0YVRpbWVTZWNvbmRzID0gMC4wO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBiZWdpbkluZGV4ID0gMDtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3BhcnRHcm91cENvdW50cy5nZXRTaXplKCk7IGkrKykge1xyXG4gICAgICBjb25zdCBwYXJ0R3JvdXBDb3VudDogbnVtYmVyID0gdGhpcy5fcGFydEdyb3VwQ291bnRzLmF0KGkpO1xyXG5cclxuICAgICAgdGhpcy5kb0ZhZGUobW9kZWwsIGRlbHRhVGltZVNlY29uZHMsIGJlZ2luSW5kZXgsIHBhcnRHcm91cENvdW50KTtcclxuXHJcbiAgICAgIGJlZ2luSW5kZXggKz0gcGFydEdyb3VwQ291bnQ7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jb3B5UGFydE9wYWNpdGllcyhtb2RlbCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDooajnpLrjgpLliJ3mnJ/ljJZcclxuICAgKiBAcGFyYW0gbW9kZWwg5a++6LGh44Gu44Oi44OH44OrXHJcbiAgICogQG5vdGUg5LiN6YCP5piO5bqm44Gu5Yid5pyf5YCk44GMMOOBp+OBquOBhOODkeODqeODoeODvOOCv+OBr+OAgeS4jemAj+aYjuW6puOCku+8keOBq+ioreWumuOBmeOCi1xyXG4gICAqL1xyXG4gIHB1YmxpYyByZXNldChtb2RlbDogQ3ViaXNtTW9kZWwpOiB2b2lkIHtcclxuICAgIGxldCBiZWdpbkluZGV4ID0gMDtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3BhcnRHcm91cENvdW50cy5nZXRTaXplKCk7ICsraSkge1xyXG4gICAgICBjb25zdCBncm91cENvdW50OiBudW1iZXIgPSB0aGlzLl9wYXJ0R3JvdXBDb3VudHMuYXQoaSk7XHJcblxyXG4gICAgICBmb3IgKGxldCBqOiBudW1iZXIgPSBiZWdpbkluZGV4OyBqIDwgYmVnaW5JbmRleCArIGdyb3VwQ291bnQ7ICsraikge1xyXG4gICAgICAgIHRoaXMuX3BhcnRHcm91cHMuYXQoaikuaW5pdGlhbGl6ZShtb2RlbCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHBhcnRzSW5kZXg6IG51bWJlciA9IHRoaXMuX3BhcnRHcm91cHMuYXQoaikucGFydEluZGV4O1xyXG4gICAgICAgIGNvbnN0IHBhcmFtSW5kZXg6IG51bWJlciA9IHRoaXMuX3BhcnRHcm91cHMuYXQoaikucGFyYW1ldGVySW5kZXg7XHJcblxyXG4gICAgICAgIGlmIChwYXJ0c0luZGV4IDwgMCkge1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBtb2RlbC5zZXRQYXJ0T3BhY2l0eUJ5SW5kZXgocGFydHNJbmRleCwgaiA9PSBiZWdpbkluZGV4ID8gMS4wIDogMC4wKTtcclxuICAgICAgICBtb2RlbC5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgocGFyYW1JbmRleCwgaiA9PSBiZWdpbkluZGV4ID8gMS4wIDogMC4wKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCB0aGlzLl9wYXJ0R3JvdXBzLmF0KGopLmxpbmsuZ2V0U2l6ZSgpOyArK2spIHtcclxuICAgICAgICAgIHRoaXMuX3BhcnRHcm91cHNcclxuICAgICAgICAgICAgLmF0KGopXHJcbiAgICAgICAgICAgIC5saW5rLmF0KGspXHJcbiAgICAgICAgICAgIC5pbml0aWFsaXplKG1vZGVsKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGJlZ2luSW5kZXggKz0gZ3JvdXBDb3VudDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODkeODvOODhOOBruS4jemAj+aYjuW6puOCkuOCs+ODlOODvFxyXG4gICAqXHJcbiAgICogQHBhcmFtIG1vZGVsIOWvvuixoeOBruODouODh+ODq1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjb3B5UGFydE9wYWNpdGllcyhtb2RlbDogQ3ViaXNtTW9kZWwpOiB2b2lkIHtcclxuICAgIGZvciAoXHJcbiAgICAgIGxldCBncm91cEluZGV4ID0gMDtcclxuICAgICAgZ3JvdXBJbmRleCA8IHRoaXMuX3BhcnRHcm91cHMuZ2V0U2l6ZSgpO1xyXG4gICAgICArK2dyb3VwSW5kZXhcclxuICAgICkge1xyXG4gICAgICBjb25zdCBwYXJ0RGF0YTogUGFydERhdGEgPSB0aGlzLl9wYXJ0R3JvdXBzLmF0KGdyb3VwSW5kZXgpO1xyXG5cclxuICAgICAgaWYgKHBhcnREYXRhLmxpbmsuZ2V0U2l6ZSgpID09IDApIHtcclxuICAgICAgICBjb250aW51ZTsgLy8g6YCj5YuV44GZ44KL44OR44Op44Oh44O844K/44Gv44Gq44GEXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHBhcnRJbmRleDogbnVtYmVyID0gdGhpcy5fcGFydEdyb3Vwcy5hdChncm91cEluZGV4KS5wYXJ0SW5kZXg7XHJcbiAgICAgIGNvbnN0IG9wYWNpdHk6IG51bWJlciA9IG1vZGVsLmdldFBhcnRPcGFjaXR5QnlJbmRleChwYXJ0SW5kZXgpO1xyXG5cclxuICAgICAgZm9yIChcclxuICAgICAgICBsZXQgbGlua0luZGV4ID0gMDtcclxuICAgICAgICBsaW5rSW5kZXggPCBwYXJ0RGF0YS5saW5rLmdldFNpemUoKTtcclxuICAgICAgICArK2xpbmtJbmRleFxyXG4gICAgICApIHtcclxuICAgICAgICBjb25zdCBsaW5rUGFydDogUGFydERhdGEgPSBwYXJ0RGF0YS5saW5rLmF0KGxpbmtJbmRleCk7XHJcbiAgICAgICAgY29uc3QgbGlua1BhcnRJbmRleDogbnVtYmVyID0gbGlua1BhcnQucGFydEluZGV4O1xyXG5cclxuICAgICAgICBpZiAobGlua1BhcnRJbmRleCA8IDApIHtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbW9kZWwuc2V0UGFydE9wYWNpdHlCeUluZGV4KGxpbmtQYXJ0SW5kZXgsIG9wYWNpdHkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg5Hjg7zjg4Tjga7jg5Xjgqfjg7zjg4nmk43kvZzjgpLooYzjgYbjgIJcclxuICAgKiBAcGFyYW0gbW9kZWwg5a++6LGh44Gu44Oi44OH44OrXHJcbiAgICogQHBhcmFtIGRlbHRhVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaTW+enkl1cclxuICAgKiBAcGFyYW0gYmVnaW5JbmRleCDjg5Xjgqfjg7zjg4nmk43kvZzjgpLooYzjgYbjg5Hjg7zjg4TjgrDjg6vjg7zjg5fjga7lhYjpoK3jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgKiBAcGFyYW0gcGFydEdyb3VwQ291bnQg44OV44Kn44O844OJ5pON5L2c44KS6KGM44GG44OR44O844OE44Kw44Or44O844OX44Gu5YCL5pWwXHJcbiAgICovXHJcbiAgcHVibGljIGRvRmFkZShcclxuICAgIG1vZGVsOiBDdWJpc21Nb2RlbCxcclxuICAgIGRlbHRhVGltZVNlY29uZHM6IG51bWJlcixcclxuICAgIGJlZ2luSW5kZXg6IG51bWJlcixcclxuICAgIHBhcnRHcm91cENvdW50OiBudW1iZXJcclxuICApOiB2b2lkIHtcclxuICAgIGxldCB2aXNpYmxlUGFydEluZGV4ID0gLTE7XHJcbiAgICBsZXQgbmV3T3BhY2l0eSA9IDEuMDtcclxuXHJcbiAgICBjb25zdCBwaGkgPSAwLjU7XHJcbiAgICBjb25zdCBiYWNrT3BhY2l0eVRocmVzaG9sZCA9IDAuMTU7XHJcblxyXG4gICAgLy8g54++5Zyo44CB6KGo56S654q25oWL44Gr44Gq44Gj44Gm44GE44KL44OR44O844OE44KS5Y+W5b6XXHJcbiAgICBmb3IgKGxldCBpOiBudW1iZXIgPSBiZWdpbkluZGV4OyBpIDwgYmVnaW5JbmRleCArIHBhcnRHcm91cENvdW50OyArK2kpIHtcclxuICAgICAgY29uc3QgcGFydEluZGV4OiBudW1iZXIgPSB0aGlzLl9wYXJ0R3JvdXBzLmF0KGkpLnBhcnRJbmRleDtcclxuICAgICAgY29uc3QgcGFyYW1JbmRleDogbnVtYmVyID0gdGhpcy5fcGFydEdyb3Vwcy5hdChpKS5wYXJhbWV0ZXJJbmRleDtcclxuXHJcbiAgICAgIGlmIChtb2RlbC5nZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgocGFyYW1JbmRleCkgPiBFcHNpbG9uKSB7XHJcbiAgICAgICAgaWYgKHZpc2libGVQYXJ0SW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2aXNpYmxlUGFydEluZGV4ID0gaTtcclxuICAgICAgICBuZXdPcGFjaXR5ID0gbW9kZWwuZ2V0UGFydE9wYWNpdHlCeUluZGV4KHBhcnRJbmRleCk7XHJcblxyXG4gICAgICAgIC8vIOaWsOOBl+OBhOS4jemAj+aYjuW6puOCkuioiOeul1xyXG4gICAgICAgIG5ld09wYWNpdHkgKz0gZGVsdGFUaW1lU2Vjb25kcyAvIHRoaXMuX2ZhZGVUaW1lU2Vjb25kcztcclxuXHJcbiAgICAgICAgaWYgKG5ld09wYWNpdHkgPiAxLjApIHtcclxuICAgICAgICAgIG5ld09wYWNpdHkgPSAxLjA7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHZpc2libGVQYXJ0SW5kZXggPCAwKSB7XHJcbiAgICAgIHZpc2libGVQYXJ0SW5kZXggPSAwO1xyXG4gICAgICBuZXdPcGFjaXR5ID0gMS4wO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOihqOekuuODkeODvOODhOOAgemdnuihqOekuuODkeODvOODhOOBruS4jemAj+aYjuW6puOCkuioreWumuOBmeOCi1xyXG4gICAgZm9yIChsZXQgaTogbnVtYmVyID0gYmVnaW5JbmRleDsgaSA8IGJlZ2luSW5kZXggKyBwYXJ0R3JvdXBDb3VudDsgKytpKSB7XHJcbiAgICAgIGNvbnN0IHBhcnRzSW5kZXg6IG51bWJlciA9IHRoaXMuX3BhcnRHcm91cHMuYXQoaSkucGFydEluZGV4O1xyXG5cclxuICAgICAgLy8g6KGo56S644OR44O844OE44Gu6Kit5a6aXHJcbiAgICAgIGlmICh2aXNpYmxlUGFydEluZGV4ID09IGkpIHtcclxuICAgICAgICBtb2RlbC5zZXRQYXJ0T3BhY2l0eUJ5SW5kZXgocGFydHNJbmRleCwgbmV3T3BhY2l0eSk7IC8vIOWFiOOBq+ioreWumlxyXG4gICAgICB9XHJcbiAgICAgIC8vIOmdnuihqOekuuODkeODvOODhOOBruioreWumlxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBsZXQgb3BhY2l0eTogbnVtYmVyID0gbW9kZWwuZ2V0UGFydE9wYWNpdHlCeUluZGV4KHBhcnRzSW5kZXgpO1xyXG4gICAgICAgIGxldCBhMTogbnVtYmVyOyAvLyDoqIjnrpfjgavjgojjgaPjgabmsYLjgoHjgonjgozjgovkuI3pgI/mmI7luqZcclxuXHJcbiAgICAgICAgaWYgKG5ld09wYWNpdHkgPCBwaGkpIHtcclxuICAgICAgICAgIGExID0gKG5ld09wYWNpdHkgKiAocGhpIC0gMSkpIC8gcGhpICsgMS4wOyAvLyAoMCwxKSwocGhpLHBoaSnjgpLpgJrjgovnm7Tnt5rlvI9cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgYTEgPSAoKDEgLSBuZXdPcGFjaXR5KSAqIHBoaSkgLyAoMS4wIC0gcGhpKTsgLy8gKDEsMCksKHBoaSxwaGkp44KS6YCa44KL55u057ea5byPXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDog4zmma/jga7opovjgYjjgovlibLlkIjjgpLliLbpmZDjgZnjgovloLTlkIhcclxuICAgICAgICBjb25zdCBiYWNrT3BhY2l0eTogbnVtYmVyID0gKDEuMCAtIGExKSAqICgxLjAgLSBuZXdPcGFjaXR5KTtcclxuXHJcbiAgICAgICAgaWYgKGJhY2tPcGFjaXR5ID4gYmFja09wYWNpdHlUaHJlc2hvbGQpIHtcclxuICAgICAgICAgIGExID0gMS4wIC0gYmFja09wYWNpdHlUaHJlc2hvbGQgLyAoMS4wIC0gbmV3T3BhY2l0eSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3BhY2l0eSA+IGExKSB7XHJcbiAgICAgICAgICBvcGFjaXR5ID0gYTE7IC8vIOioiOeul+OBruS4jemAj+aYjuW6puOCiOOCiuOCguWkp+OBjeOBkeOCjOOBsO+8iOa/g+OBkeOCjOOBsO+8ieS4jemAj+aYjuW6puOCkuS4iuOBkuOCi1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbW9kZWwuc2V0UGFydE9wYWNpdHlCeUluZGV4KHBhcnRzSW5kZXgsIG9wYWNpdHkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLl9mYWRlVGltZVNlY29uZHMgPSBEZWZhdWx0RmFkZUluU2Vjb25kcztcclxuICAgIHRoaXMuX2xhc3RNb2RlbCA9IG51bGw7XHJcbiAgICB0aGlzLl9wYXJ0R3JvdXBzID0gbmV3IGNzbVZlY3RvcjxQYXJ0RGF0YT4oKTtcclxuICAgIHRoaXMuX3BhcnRHcm91cENvdW50cyA9IG5ldyBjc21WZWN0b3I8bnVtYmVyPigpO1xyXG4gIH1cclxuXHJcbiAgX3BhcnRHcm91cHM6IGNzbVZlY3RvcjxQYXJ0RGF0YT47IC8vIOODkeODvOODhOOCsOODq+ODvOODl1xyXG4gIF9wYXJ0R3JvdXBDb3VudHM6IGNzbVZlY3RvcjxudW1iZXI+OyAvLyDjgZ3jgozjgZ7jgozjga7jg5Hjg7zjg4TjgrDjg6vjg7zjg5fjga7lgIvmlbBcclxuICBfZmFkZVRpbWVTZWNvbmRzOiBudW1iZXI7IC8vIOODleOCp+ODvOODieaZgumWk1vnp5JdXHJcbiAgX2xhc3RNb2RlbDogQ3ViaXNtTW9kZWw7IC8vIOWJjeWbnuaTjeS9nOOBl+OBn+ODouODh+ODq1xyXG59XHJcblxyXG4vKipcclxuICog44OR44O844OE44Gr44G+44Gk44KP44KL44OH44O844K/44KS566h55CGXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUGFydERhdGEge1xyXG4gIC8qKlxyXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHY/OiBQYXJ0RGF0YSkge1xyXG4gICAgdGhpcy5wYXJhbWV0ZXJJbmRleCA9IDA7XHJcbiAgICB0aGlzLnBhcnRJbmRleCA9IDA7XHJcbiAgICB0aGlzLmxpbmsgPSBuZXcgY3NtVmVjdG9yPFBhcnREYXRhPigpO1xyXG5cclxuICAgIGlmICh2ICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICB0aGlzLnBhcnRJZCA9IHYucGFydElkO1xyXG5cclxuICAgICAgZm9yIChcclxuICAgICAgICBjb25zdCBpdGU6IGl0ZXJhdG9yPFBhcnREYXRhPiA9IHYubGluay5iZWdpbigpO1xyXG4gICAgICAgIGl0ZS5ub3RFcXVhbCh2LmxpbmsuZW5kKCkpO1xyXG4gICAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKVxyXG4gICAgICApIHtcclxuICAgICAgICB0aGlzLmxpbmsucHVzaEJhY2soaXRlLnB0cigpLmNsb25lKCkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiA95ryU566X5a2Q44Gu44Kq44O844OQ44O844Ot44O844OJXHJcbiAgICovXHJcbiAgcHVibGljIGFzc2lnbm1lbnQodjogUGFydERhdGEpOiBQYXJ0RGF0YSB7XHJcbiAgICB0aGlzLnBhcnRJZCA9IHYucGFydElkO1xyXG5cclxuICAgIGZvciAoXHJcbiAgICAgIGNvbnN0IGl0ZTogaXRlcmF0b3I8UGFydERhdGE+ID0gdi5saW5rLmJlZ2luKCk7XHJcbiAgICAgIGl0ZS5ub3RFcXVhbCh2LmxpbmsuZW5kKCkpO1xyXG4gICAgICBpdGUucHJlSW5jcmVtZW50KClcclxuICAgICkge1xyXG4gICAgICB0aGlzLmxpbmsucHVzaEJhY2soaXRlLnB0cigpLmNsb25lKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yid5pyf5YyWXHJcbiAgICogQHBhcmFtIG1vZGVsIOWIneacn+WMluOBq+S9v+eUqOOBmeOCi+ODouODh+ODq1xyXG4gICAqL1xyXG4gIHB1YmxpYyBpbml0aWFsaXplKG1vZGVsOiBDdWJpc21Nb2RlbCk6IHZvaWQge1xyXG4gICAgdGhpcy5wYXJhbWV0ZXJJbmRleCA9IG1vZGVsLmdldFBhcmFtZXRlckluZGV4KHRoaXMucGFydElkKTtcclxuICAgIHRoaXMucGFydEluZGV4ID0gbW9kZWwuZ2V0UGFydEluZGV4KHRoaXMucGFydElkKTtcclxuXHJcbiAgICBtb2RlbC5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgodGhpcy5wYXJhbWV0ZXJJbmRleCwgMSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjgqrjg5bjgrjjgqfjgq/jg4jjga7jgrPjg5Tjg7zjgpLnlJ/miJDjgZnjgotcclxuICAgKi9cclxuICBwdWJsaWMgY2xvbmUoKTogUGFydERhdGEge1xyXG4gICAgY29uc3QgY2xvbmVQYXJ0RGF0YTogUGFydERhdGEgPSBuZXcgUGFydERhdGEoKTtcclxuXHJcbiAgICBjbG9uZVBhcnREYXRhLnBhcnRJZCA9IHRoaXMucGFydElkO1xyXG4gICAgY2xvbmVQYXJ0RGF0YS5wYXJhbWV0ZXJJbmRleCA9IHRoaXMucGFyYW1ldGVySW5kZXg7XHJcbiAgICBjbG9uZVBhcnREYXRhLnBhcnRJbmRleCA9IHRoaXMucGFydEluZGV4O1xyXG4gICAgY2xvbmVQYXJ0RGF0YS5saW5rID0gbmV3IGNzbVZlY3RvcjxQYXJ0RGF0YT4oKTtcclxuXHJcbiAgICBmb3IgKFxyXG4gICAgICBsZXQgaXRlOiBpdGVyYXRvcjxQYXJ0RGF0YT4gPSB0aGlzLmxpbmsuYmVnaW4oKTtcclxuICAgICAgaXRlLm5vdEVxdWFsKHRoaXMubGluay5lbmQoKSk7XHJcbiAgICAgIGl0ZS5pbmNyZW1lbnQoKVxyXG4gICAgKSB7XHJcbiAgICAgIGNsb25lUGFydERhdGEubGluay5wdXNoQmFjayhpdGUucHRyKCkuY2xvbmUoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNsb25lUGFydERhdGE7XHJcbiAgfVxyXG5cclxuICBwYXJ0SWQ6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg5Hjg7zjg4RJRFxyXG4gIHBhcmFtZXRlckluZGV4OiBudW1iZXI7IC8vIOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gIHBhcnRJbmRleDogbnVtYmVyOyAvLyDjg5Hjg7zjg4Tjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICBsaW5rOiBjc21WZWN0b3I8UGFydERhdGE+OyAvLyDpgKPli5XjgZnjgovjg5Hjg6njg6Hjg7zjgr9cclxufVxyXG5cclxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXHJcbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21wb3NlJztcclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xyXG4gIGV4cG9ydCBjb25zdCBDdWJpc21Qb3NlID0gJC5DdWJpc21Qb3NlO1xyXG4gIGV4cG9ydCB0eXBlIEN1YmlzbVBvc2UgPSAkLkN1YmlzbVBvc2U7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcnREYXRhID0gJC5QYXJ0RGF0YTtcclxuICBleHBvcnQgdHlwZSBQYXJ0RGF0YSA9ICQuUGFydERhdGE7XHJcbn1cclxuIiwiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJy4vaWQvY3ViaXNtaWQnO1xyXG5pbXBvcnQgeyBjc21NYXAgfSBmcm9tICcuL3R5cGUvY3NtbWFwJztcclxuXHJcbi8qKlxyXG4gKiDjg6Ljg4fjg6voqK3lrprmg4XloLHjgpLlj5bjgormibHjgYbplqLmlbDjgpLlrqPoqIDjgZfjgZ/ntJTnsovku67mg7Pjgq/jg6njgrnjgIJcclxuICpcclxuICog44GT44Gu44Kv44Op44K544KS57aZ5om/44GZ44KL44GT44Go44Gn44CB44Oi44OH44Or6Kit5a6a5oOF5aCx44KS5Y+W44KK5omx44GG44Kv44Op44K544Gr44Gq44KL44CCXHJcbiAqL1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSUN1YmlzbU1vZGVsU2V0dGluZyB7XHJcbiAgLyoqXHJcbiAgICogTW9j44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXHJcbiAgICogQHJldHVybiBNb2Pjg5XjgqHjgqTjg6vjga7lkI3liY1cclxuICAgKi9cclxuICBwdWJsaWMgYWJzdHJhY3QgZ2V0TW9kZWxGaWxlTmFtZSgpOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODh+ODq+OBjOS9v+eUqOOBmeOCi+ODhuOCr+OCueODgeODo+OBruaVsOOCkuWPluW+l+OBmeOCi1xyXG4gICAqIOODhuOCr+OCueODgeODo+OBruaVsFxyXG4gICAqL1xyXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRUZXh0dXJlQ291bnQoKTogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiDjg4bjgq/jgrnjg4Hjg6PjgYzphY3nva7jgZXjgozjgZ/jg4fjgqPjg6zjgq/jg4jjg6rjga7lkI3liY3jgpLlj5blvpfjgZnjgotcclxuICAgKiBAcmV0dXJuIOODhuOCr+OCueODgeODo+OBjOmFjee9ruOBleOCjOOBn+ODh+OCo+ODrOOCr+ODiOODquOBruWQjeWJjVxyXG4gICAqL1xyXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRUZXh0dXJlRGlyZWN0b3J5KCk6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44OH44Or44GM5L2/55So44GZ44KL44OG44Kv44K544OB44Oj44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXHJcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxyXG4gICAqIEByZXR1cm4g44OG44Kv44K544OB44Oj44Gu5ZCN5YmNXHJcbiAgICovXHJcbiAgcHVibGljIGFic3RyYWN0IGdldFRleHR1cmVGaWxlTmFtZShpbmRleDogbnVtYmVyKTogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiDjg6Ljg4fjg6vjgavoqK3lrprjgZXjgozjgZ/lvZPjgZ/jgorliKTlrprjga7mlbDjgpLlj5blvpfjgZnjgotcclxuICAgKiBAcmV0dXJuIOODouODh+ODq+OBq+ioreWumuOBleOCjOOBn+W9k+OBn+OCiuWIpOWumuOBruaVsFxyXG4gICAqL1xyXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRIaXRBcmVhc0NvdW50KCk6IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICog5b2T44Gf44KK5Yik5a6a44Gr6Kit5a6a44GV44KM44GfSUTjgpLlj5blvpfjgZnjgotcclxuICAgKlxyXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga5pbmRleFxyXG4gICAqIEByZXR1cm4g5b2T44Gf44KK5Yik5a6a44Gr6Kit5a6a44GV44KM44GfSURcclxuICAgKi9cclxuICBwdWJsaWMgYWJzdHJhY3QgZ2V0SGl0QXJlYUlkKGluZGV4OiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZTtcclxuXHJcbiAgLyoqXHJcbiAgICog5b2T44Gf44KK5Yik5a6a44Gr6Kit5a6a44GV44KM44Gf5ZCN5YmN44KS5Y+W5b6X44GZ44KLXHJcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxyXG4gICAqIEByZXR1cm4g5b2T44Gf44KK5Yik5a6a44Gr6Kit5a6a44GV44KM44Gf5ZCN5YmNXHJcbiAgICovXHJcbiAgcHVibGljIGFic3RyYWN0IGdldEhpdEFyZWFOYW1lKGluZGV4OiBudW1iZXIpOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIOeJqeeQhua8lOeul+ioreWumuODleOCoeOCpOODq+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xyXG4gICAqIEByZXR1cm4g54mp55CG5ryU566X6Kit5a6a44OV44Kh44Kk44Or44Gu5ZCN5YmNXHJcbiAgICovXHJcbiAgcHVibGljIGFic3RyYWN0IGdldFBoeXNpY3NGaWxlTmFtZSgpOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIOODkeODvOODhOWIh+OCiuabv+OBiOioreWumuODleOCoeOCpOODq+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xyXG4gICAqIEByZXR1cm4g44OR44O844OE5YiH44KK5pu/44GI6Kit5a6a44OV44Kh44Kk44Or44Gu5ZCN5YmNXHJcbiAgICovXHJcbiAgcHVibGljIGFic3RyYWN0IGdldFBvc2VGaWxlTmFtZSgpOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIOihqOaDheioreWumuODleOCoeOCpOODq+OBruaVsOOCkuWPluW+l+OBmeOCi1xyXG4gICAqIEByZXR1cm4g6KGo5oOF6Kit5a6a44OV44Kh44Kk44Or44Gu5pWwXHJcbiAgICovXHJcbiAgcHVibGljIGFic3RyYWN0IGdldEV4cHJlc3Npb25Db3VudCgpOiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIOihqOaDheioreWumuODleOCoeOCpOODq+OCkuitmOWIpeOBmeOCi+WQjeWJje+8iOWIpeWQje+8ieOCkuWPluW+l+OBmeOCi1xyXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcclxuICAgKiBAcmV0dXJuIOihqOaDheOBruWQjeWJjVxyXG4gICAqL1xyXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRFeHByZXNzaW9uTmFtZShpbmRleDogbnVtYmVyKTogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY3jgpLlj5blvpfjgZnjgotcclxuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXHJcbiAgICogQHJldHVybiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY1cclxuICAgKi9cclxuICBwdWJsaWMgYWJzdHJhY3QgZ2V0RXhwcmVzc2lvbkZpbGVOYW1lKGluZGV4OiBudW1iZXIpOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruaVsOOCkuWPluW+l+OBmeOCi1xyXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5pWwXHJcbiAgICovXHJcbiAgcHVibGljIGFic3RyYWN0IGdldE1vdGlvbkdyb3VwQ291bnQoKTogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY3jgpLlj5blvpfjgZnjgotcclxuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXHJcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cclxuICAgKi9cclxuICBwdWJsaWMgYWJzdHJhY3QgZ2V0TW90aW9uR3JvdXBOYW1lKGluZGV4OiBudW1iZXIpOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBq+WQq+OBvuOCjOOCi+ODouODvOOCt+ODp+ODs+OBruaVsOOCkuWPluW+l+OBmeOCi1xyXG4gICAqIEBwYXJhbSBncm91cE5hbWUg44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXHJcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7mlbBcclxuICAgKi9cclxuICBwdWJsaWMgYWJzdHJhY3QgZ2V0TW90aW9uQ291bnQoZ3JvdXBOYW1lOiBzdHJpbmcpOiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCsOODq+ODvOODl+WQjeOBqOOCpOODs+ODh+ODg+OCr+OCueWApOOBi+OCieODouODvOOCt+ODp+ODs+ODleOCoeOCpOODq+WQjeOCkuWPluW+l+OBmeOCi1xyXG4gICAqIEBwYXJhbSBncm91cE5hbWUg44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXHJcbiAgICogQHBhcmFtIGluZGV4ICAgICDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcclxuICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+ODleOCoeOCpOODq+OBruWQjeWJjVxyXG4gICAqL1xyXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRNb3Rpb25GaWxlTmFtZShncm91cE5hbWU6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44O844K344On44Oz44Gr5a++5b+c44GZ44KL44K144Km44Oz44OJ44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXHJcbiAgICogQHBhcmFtIGdyb3VwTmFtZSDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cclxuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXHJcbiAgICogQHJldHVybiDjgrXjgqbjg7Pjg4njg5XjgqHjgqTjg6vjga7lkI3liY1cclxuICAgKi9cclxuICBwdWJsaWMgYWJzdHJhY3QgZ2V0TW90aW9uU291bmRGaWxlTmFtZShcclxuICAgIGdyb3VwTmFtZTogc3RyaW5nLFxyXG4gICAgaW5kZXg6IG51bWJlclxyXG4gICk6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44O844K344On44Oz6ZaL5aeL5pmC44Gu44OV44Kn44O844OJ44Kk44Oz5Yem55CG5pmC6ZaT44KS5Y+W5b6X44GZ44KLXHJcbiAgICogQHBhcmFtIGdyb3VwTmFtZSDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cclxuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXHJcbiAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqTjg7Plh6bnkIbmmYLplpNb56eSXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRNb3Rpb25GYWRlSW5UaW1lVmFsdWUoXHJcbiAgICBncm91cE5hbWU6IHN0cmluZyxcclxuICAgIGluZGV4OiBudW1iZXJcclxuICApOiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODvOOCt+ODp+ODs+e1guS6huaZguOBruODleOCp+ODvOODieOCouOCpuODiOWHpueQhuaZgumWk+OCkuWPluW+l+OBmeOCi1xyXG4gICAqIEBwYXJhbSBncm91cE5hbWUg44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXHJcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxyXG4gICAqIEByZXR1cm4g44OV44Kn44O844OJ44Ki44Km44OI5Yem55CG5pmC6ZaTW+enkl1cclxuICAgKi9cclxuICBwdWJsaWMgYWJzdHJhY3QgZ2V0TW90aW9uRmFkZU91dFRpbWVWYWx1ZShcclxuICAgIGdyb3VwTmFtZTogc3RyaW5nLFxyXG4gICAgaW5kZXg6IG51bWJlclxyXG4gICk6IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICog44Om44O844K244O844OH44O844K/44Gu44OV44Kh44Kk44Or5ZCN44KS5Y+W5b6X44GZ44KLXHJcbiAgICogQHJldHVybiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jga7jg5XjgqHjgqTjg6vlkI1cclxuICAgKi9cclxuICBwdWJsaWMgYWJzdHJhY3QgZ2V0VXNlckRhdGFGaWxlKCk6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICog44Os44Kk44Ki44Km44OI5oOF5aCx44KS5Y+W5b6X44GZ44KLXHJcbiAgICogQHBhcmFtIG91dExheW91dE1hcCBjc21NYXDjgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrlcclxuICAgKiBAcmV0dXJuIHRydWUg44Os44Kk44Ki44Km44OI5oOF5aCx44GM5a2Y5Zyo44GZ44KLXHJcbiAgICogQHJldHVybiBmYWxzZSDjg6zjgqTjgqLjgqbjg4jmg4XloLHjgYzlrZjlnKjjgZfjgarjgYRcclxuICAgKi9cclxuICBwdWJsaWMgYWJzdHJhY3QgZ2V0TGF5b3V0TWFwKG91dExheW91dE1hcDogY3NtTWFwPHN0cmluZywgbnVtYmVyPik6IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIOebruODkeODgeOBq+mWoumAo+S7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBruaVsOOCkuWPluW+l+OBmeOCi1xyXG4gICAqIEByZXR1cm4g55uu44OR44OB44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWwXHJcbiAgICovXHJcbiAgcHVibGljIGFic3RyYWN0IGdldEV5ZUJsaW5rUGFyYW1ldGVyQ291bnQoKTogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiDnm67jg5Hjg4HjgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga5JROOCkuWPluW+l+OBmeOCi1xyXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcclxuICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv0lEXHJcbiAgICovXHJcbiAgcHVibGljIGFic3RyYWN0IGdldEV5ZUJsaW5rUGFyYW1ldGVySWQoaW5kZXg6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlO1xyXG5cclxuICAvKipcclxuICAgKiDjg6rjg4Pjg5fjgrfjg7Pjgq/jgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbDjgpLlj5blvpfjgZnjgotcclxuICAgKiBAcmV0dXJuIOODquODg+ODl+OCt+ODs+OCr+OBq+mWoumAo+S7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBruaVsFxyXG4gICAqL1xyXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRMaXBTeW5jUGFyYW1ldGVyQ291bnQoKTogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiDjg6rjg4Pjg5fjgrfjg7Pjgq/jgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbDjgpLlj5blvpfjgZnjgotcclxuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXHJcbiAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr9JRFxyXG4gICAqL1xyXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRMaXBTeW5jUGFyYW1ldGVySWQoaW5kZXg6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlO1xyXG59XHJcblxyXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cclxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2ljdWJpc21tb2RlbHNldHRpbmcnO1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgZXhwb3J0IGNvbnN0IElDdWJpc21Nb2RlbFNldHRpbmcgPSAkLklDdWJpc21Nb2RlbFNldHRpbmc7XHJcbiAgZXhwb3J0IHR5cGUgSUN1YmlzbU1vZGVsU2V0dGluZyA9ICQuSUN1YmlzbU1vZGVsU2V0dGluZztcclxufVxyXG4iLCIvKipcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IGNzbVN0cmluZyB9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcclxuXHJcbi8qKlxyXG4gKiDjg5Hjg6njg6Hjg7zjgr/lkI3jg7vjg5Hjg7zjg4TlkI3jg7tEcmF3YWJsZeWQjeOCkuS/neaMgVxyXG4gKlxyXG4gKiDjg5Hjg6njg6Hjg7zjgr/lkI3jg7vjg5Hjg7zjg4TlkI3jg7tEcmF3YWJsZeWQjeOCkuS/neaMgeOBmeOCi+OCr+ODqeOCueOAglxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEN1YmlzbUlkIHtcclxuICAvKipcclxuICAgKiBJROWQjeOCkuWPluW+l+OBmeOCi1xyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRTdHJpbmcoKTogY3NtU3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl9pZDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihpZDogc3RyaW5nIHwgY3NtU3RyaW5nKSB7XHJcbiAgICBpZiAodHlwZW9mIGlkID09PSAnc3RyaW5nJykge1xyXG4gICAgICB0aGlzLl9pZCA9IG5ldyBjc21TdHJpbmcoaWQpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5faWQgPSBpZDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGlk44KS5q+U6LyDXHJcbiAgICogQHBhcmFtIGMg5q+U6LyD44GZ44KLaWRcclxuICAgKiBAcmV0dXJuIOWQjOOBmOOBquOCieOBsHRydWUs55Ww44Gq44Gj44Gm44GE44KM44GwZmFsc2XjgpLov5TjgZlcclxuICAgKi9cclxuICBwdWJsaWMgaXNFcXVhbChjOiBzdHJpbmcgfCBjc21TdHJpbmcgfCBDdWJpc21JZCk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKHR5cGVvZiBjID09PSAnc3RyaW5nJykge1xyXG4gICAgICByZXR1cm4gdGhpcy5faWQuaXNFcXVhbChjKTtcclxuICAgIH0gZWxzZSBpZiAoYyBpbnN0YW5jZW9mIGNzbVN0cmluZykge1xyXG4gICAgICByZXR1cm4gdGhpcy5faWQuaXNFcXVhbChjLnMpO1xyXG4gICAgfSBlbHNlIGlmIChjIGluc3RhbmNlb2YgQ3ViaXNtSWQpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX2lkLmlzRXF1YWwoYy5faWQucyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBpZOOCkuavlOi8g1xyXG4gICAqIEBwYXJhbSBjIOavlOi8g+OBmeOCi2lkXHJcbiAgICogQHJldHVybiDlkIzjgZjjgarjgonjgbB0cnVlLOeVsOOBquOBo+OBpuOBhOOCjOOBsGZhbHNl44KS6L+U44GZXHJcbiAgICovXHJcbiAgcHVibGljIGlzTm90RXF1YWwoYzogc3RyaW5nIHwgY3NtU3RyaW5nIHwgQ3ViaXNtSWQpOiBib29sZWFuIHtcclxuICAgIGlmICh0eXBlb2YgYyA9PSAnc3RyaW5nJykge1xyXG4gICAgICByZXR1cm4gIXRoaXMuX2lkLmlzRXF1YWwoYyk7XHJcbiAgICB9IGVsc2UgaWYgKGMgaW5zdGFuY2VvZiBjc21TdHJpbmcpIHtcclxuICAgICAgcmV0dXJuICF0aGlzLl9pZC5pc0VxdWFsKGMucyk7XHJcbiAgICB9IGVsc2UgaWYgKGMgaW5zdGFuY2VvZiBDdWJpc21JZCkge1xyXG4gICAgICByZXR1cm4gIXRoaXMuX2lkLmlzRXF1YWwoYy5faWQucyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF9pZDogY3NtU3RyaW5nOyAvLyBJROWQjVxyXG59XHJcblxyXG5leHBvcnQgZGVjbGFyZSB0eXBlIEN1YmlzbUlkSGFuZGxlID0gQ3ViaXNtSWQ7XHJcblxyXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cclxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbWlkJztcclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xyXG4gIGV4cG9ydCBjb25zdCBDdWJpc21JZCA9ICQuQ3ViaXNtSWQ7XHJcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtSWQgPSAkLkN1YmlzbUlkO1xyXG4gIGV4cG9ydCB0eXBlIEN1YmlzbUlkSGFuZGxlID0gJC5DdWJpc21JZEhhbmRsZTtcclxufVxyXG4iLCIvKipcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IGNzbVN0cmluZyB9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcclxuaW1wb3J0IHsgY3NtVmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xyXG5pbXBvcnQgeyBDdWJpc21JZCB9IGZyb20gJy4vY3ViaXNtaWQnO1xyXG5cclxuLyoqXHJcbiAqIElE5ZCN44Gu566h55CGXHJcbiAqXHJcbiAqIElE5ZCN44KS566h55CG44GZ44KL44CCXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ3ViaXNtSWRNYW5hZ2VyIHtcclxuICAvKipcclxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLl9pZHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbUlkPigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXHJcbiAgICovXHJcbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2lkcy5nZXRTaXplKCk7ICsraSkge1xyXG4gICAgICB0aGlzLl9pZHMuc2V0KGksIHZvaWQgMCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLl9pZHMgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSUTlkI3jgpLjg6rjgrnjg4jjgYvjgonnmbvpjLJcclxuICAgKlxyXG4gICAqIEBwYXJhbSBpZHMgSUTlkI3jg6rjgrnjg4hcclxuICAgKiBAcGFyYW0gY291bnQgSUTjga7lgIvmlbBcclxuICAgKi9cclxuICBwdWJsaWMgcmVnaXN0ZXJJZHMoaWRzOiBzdHJpbmdbXSB8IGNzbVN0cmluZ1tdKTogdm9pZCB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlkcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB0aGlzLnJlZ2lzdGVySWQoaWRzW2ldKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIElE5ZCN44KS55m76YyyXHJcbiAgICpcclxuICAgKiBAcGFyYW0gaWQgSUTlkI1cclxuICAgKi9cclxuICBwdWJsaWMgcmVnaXN0ZXJJZChpZDogc3RyaW5nIHwgY3NtU3RyaW5nKTogQ3ViaXNtSWQge1xyXG4gICAgbGV0IHJlc3VsdDogQ3ViaXNtSWQgPSBudWxsO1xyXG5cclxuICAgIGlmICgnc3RyaW5nJyA9PSB0eXBlb2YgaWQpIHtcclxuICAgICAgaWYgKChyZXN1bHQgPSB0aGlzLmZpbmRJZChpZCkpICE9IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXN1bHQgPSBuZXcgQ3ViaXNtSWQoaWQpO1xyXG4gICAgICB0aGlzLl9pZHMucHVzaEJhY2socmVzdWx0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnJlZ2lzdGVySWQoaWQucyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIElE5ZCN44GL44KJSUTjgpLlj5blvpfjgZnjgotcclxuICAgKlxyXG4gICAqIEBwYXJhbSBpZCBJROWQjVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRJZChpZDogY3NtU3RyaW5nIHwgc3RyaW5nKTogQ3ViaXNtSWQge1xyXG4gICAgcmV0dXJuIHRoaXMucmVnaXN0ZXJJZChpZCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJROWQjeOBi+OCiUlE44Gu56K66KqNXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIHRydWUg5a2Y5Zyo44GZ44KLXHJcbiAgICogQHJldHVybiBmYWxzZSDlrZjlnKjjgZfjgarjgYRcclxuICAgKi9cclxuICBwdWJsaWMgaXNFeGlzdChpZDogY3NtU3RyaW5nIHwgc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoJ3N0cmluZycgPT0gdHlwZW9mIGlkKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmZpbmRJZChpZCkgIT0gbnVsbDtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLmlzRXhpc3QoaWQucyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJROWQjeOBi+OCiUlE44KS5qSc57Si44GZ44KL44CCXHJcbiAgICpcclxuICAgKiBAcGFyYW0gaWQgSUTlkI1cclxuICAgKiBAcmV0dXJuIOeZu+mMsuOBleOCjOOBpuOBhOOCi0lE44CC44Gq44GR44KM44GwTlVMTOOAglxyXG4gICAqL1xyXG4gIHByaXZhdGUgZmluZElkKGlkOiBzdHJpbmcpOiBDdWJpc21JZCB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2lkcy5nZXRTaXplKCk7ICsraSkge1xyXG4gICAgICBpZiAoXHJcbiAgICAgICAgdGhpcy5faWRzXHJcbiAgICAgICAgICAuYXQoaSlcclxuICAgICAgICAgIC5nZXRTdHJpbmcoKVxyXG4gICAgICAgICAgLmlzRXF1YWwoaWQpXHJcbiAgICAgICkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZHMuYXQoaSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX2lkczogY3NtVmVjdG9yPEN1YmlzbUlkPjsgLy8g55m76Yyy44GV44KM44Gm44GE44KLSUTjga7jg6rjgrnjg4hcclxufVxyXG5cclxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXHJcbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21pZG1hbmFnZXInO1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbUlkTWFuYWdlciA9ICQuQ3ViaXNtSWRNYW5hZ2VyO1xyXG4gIGV4cG9ydCB0eXBlIEN1YmlzbUlkTWFuYWdlciA9ICQuQ3ViaXNtSWRNYW5hZ2VyO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQ3ViaXNtSWRNYW5hZ2VyIH0gZnJvbSAnLi9pZC9jdWJpc21pZG1hbmFnZXInO1xyXG5pbXBvcnQgeyBDdWJpc21SZW5kZXJlciB9IGZyb20gJy4vcmVuZGVyaW5nL2N1YmlzbXJlbmRlcmVyJztcclxuaW1wb3J0IHtcclxuICBDU01fQVNTRVJULFxyXG4gIEN1YmlzbUxvZ0luZm8sXHJcbiAgQ3ViaXNtTG9nV2FybmluZ1xyXG59IGZyb20gJy4vdXRpbHMvY3ViaXNtZGVidWcnO1xyXG5pbXBvcnQgeyBWYWx1ZSB9IGZyb20gJy4vdXRpbHMvY3ViaXNtanNvbic7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3RydG9kKHM6IHN0cmluZywgZW5kUHRyOiBzdHJpbmdbXSk6IG51bWJlciB7XHJcbiAgbGV0IGluZGV4ID0gMDtcclxuICBmb3IgKGxldCBpID0gMTsgOyBpKyspIHtcclxuICAgIGNvbnN0IHRlc3RDOiBzdHJpbmcgPSBzLnNsaWNlKGkgLSAxLCBpKTtcclxuXHJcbiAgICAvLyDmjIfmlbDjg7vjg57jgqTjg4rjgrnjga7lj6/og73mgKfjgYzjgYLjgovjga7jgafjgrnjgq3jg4Pjg5fjgZnjgotcclxuICAgIGlmICh0ZXN0QyA9PSAnZScgfHwgdGVzdEMgPT0gJy0nIHx8IHRlc3RDID09ICdFJykge1xyXG4gICAgICBjb250aW51ZTtcclxuICAgIH0gLy8g5paH5a2X5YiX44Gu56+E5Zuy44KS5bqD44GS44Gm44GE44GPXHJcblxyXG4gICAgY29uc3QgdGVzdDogc3RyaW5nID0gcy5zdWJzdHJpbmcoMCwgaSk7XHJcbiAgICBjb25zdCBudW1iZXIgPSBOdW1iZXIodGVzdCk7XHJcbiAgICBpZiAoaXNOYU4obnVtYmVyKSkge1xyXG4gICAgICAvLyDmlbDlgKTjgajjgZfjgaboqo3orZjjgafjgY3jgarjgY/jgarjgaPjgZ/jga7jgafntYLkuoZcclxuICAgICAgYnJlYWs7XHJcbiAgICB9IC8vIOacgOW+jOOBq+aVsOWApOOBqOOBl+OBpuOBp+OBjeOBn2luZGV444KS5qC857SN44GX44Gm44GK44GPXHJcblxyXG4gICAgaW5kZXggPSBpO1xyXG4gIH1cclxuICBsZXQgZCA9IHBhcnNlRmxvYXQocyk7IC8vIOODkeODvOOCueOBl+OBn+aVsOWApFxyXG5cclxuICBpZiAoaXNOYU4oZCkpIHtcclxuICAgIC8vIOaVsOWApOOBqOOBl+OBpuiqjeitmOOBp+OBjeOBquOBj+OBquOBo+OBn+OBruOBp+e1guS6hlxyXG4gICAgZCA9IE5hTjtcclxuICB9XHJcblxyXG4gIGVuZFB0clswXSA9IHMuc2xpY2UoaW5kZXgpOyAvLyDlvozntprjga7mloflrZfliJdcclxuICByZXR1cm4gZDtcclxufVxyXG5cclxuLy8g44OV44Kh44Kk44Or44K544Kz44O844OX44Gu5aSJ5pWw44KS5Yid5pyf5YyWXHJcblxyXG5sZXQgc19pc1N0YXJ0ZWQgPSBmYWxzZTtcclxubGV0IHNfaXNJbml0aWFsaXplZCA9IGZhbHNlO1xyXG5sZXQgc19vcHRpb246IE9wdGlvbiA9IG51bGw7XHJcbmxldCBzX2N1YmlzbUlkTWFuYWdlcjogQ3ViaXNtSWRNYW5hZ2VyID0gbnVsbDtcclxuXHJcbi8qKlxyXG4gKiBGcmFtZXdvcmvlhoXjgafkvb/jgYblrprmlbDjga7lrqPoqIBcclxuICovXHJcbmV4cG9ydCBjb25zdCBDb25zdGFudCA9IE9iamVjdC5mcmVlemU8UmVjb3JkPHN0cmluZywgbnVtYmVyPj4oe1xyXG4gIHZlcnRleE9mZnNldDogMCwgLy8g44Oh44OD44K344Ol6aCC54K544Gu44Kq44OV44K744OD44OI5YCkXHJcbiAgdmVydGV4U3RlcDogMiAvLyDjg6Hjg4Pjgrfjg6XpoILngrnjga7jgrnjg4bjg4Pjg5flgKRcclxufSk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3NtRGVsZXRlPFQ+KGFkZHJlc3M6IFQpOiB2b2lkIHtcclxuICBpZiAoIWFkZHJlc3MpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGFkZHJlc3MgPSB2b2lkIDA7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBMaXZlMkQgQ3ViaXNtIFNESyBPcmlnaW5hbCBXb3JrZmxvdyBTREvjga7jgqjjg7Pjg4jjg6rjg53jgqTjg7Pjg4hcclxuICog5Yip55So6ZaL5aeL5pmC44GvQ3ViaXNtRnJhbWV3b3JrLmluaXRpYWxpemUoKeOCkuWRvOOBs+OAgUN1YmlzbUZyYW1ld29yay5kaXNwb3NlKCnjgafntYLkuobjgZnjgovjgIJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDdWJpc21GcmFtZXdvcmsge1xyXG4gIC8qKlxyXG4gICAqIEN1YmlzbSBGcmFtZXdvcmvjga5BUEnjgpLkvb/nlKjlj6/og73jgavjgZnjgovjgIJcclxuICAgKiAgQVBJ44KS5a6f6KGM44GZ44KL5YmN44Gr5b+F44Ga44GT44Gu6Zai5pWw44KS5a6f6KGM44GZ44KL44GT44Go44CCXHJcbiAgICogIOS4gOW6pua6luWCmeOBjOWujOS6huOBl+OBpuS7pemZjeOBr+OAgeWGjeOBs+Wun+ihjOOBl+OBpuOCguWGhemDqOWHpueQhuOBjOOCueOCreODg+ODl+OBleOCjOOBvuOBmeOAglxyXG4gICAqXHJcbiAgICogQHBhcmFtICAgIG9wdGlvbiAgICAgIE9wdGlvbuOCr+ODqeOCueOBruOCpOODs+OCueOCv+ODs+OCuVxyXG4gICAqXHJcbiAgICogQHJldHVybiAgIOa6luWCmeWHpueQhuOBjOWujOS6huOBl+OBn+OCiXRydWXjgYzov5Tjgorjgb7jgZnjgIJcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIHN0YXJ0VXAob3B0aW9uOiBPcHRpb24gPSBudWxsKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoc19pc1N0YXJ0ZWQpIHtcclxuICAgICAgQ3ViaXNtTG9nSW5mbygnQ3ViaXNtRnJhbWV3b3JrLnN0YXJ0VXAoKSBpcyBhbHJlYWR5IGRvbmUuJyk7XHJcbiAgICAgIHJldHVybiBzX2lzU3RhcnRlZDtcclxuICAgIH1cclxuXHJcbiAgICBzX29wdGlvbiA9IG9wdGlvbjtcclxuXHJcbiAgICBpZiAoc19vcHRpb24gIT0gbnVsbCkge1xyXG4gICAgICBMaXZlMkRDdWJpc21Db3JlLkxvZ2dpbmcuY3NtU2V0TG9nRnVuY3Rpb24oc19vcHRpb24ubG9nRnVuY3Rpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIHNfaXNTdGFydGVkID0gdHJ1ZTtcclxuXHJcbiAgICAvLyBMaXZlMkQgQ3ViaXNtIENvcmXjg5Djg7zjgrjjg6fjg7Pmg4XloLHjgpLooajnpLpcclxuICAgIGlmIChzX2lzU3RhcnRlZCkge1xyXG4gICAgICBjb25zdCB2ZXJzaW9uOiBudW1iZXIgPSBMaXZlMkRDdWJpc21Db3JlLlZlcnNpb24uY3NtR2V0VmVyc2lvbigpO1xyXG4gICAgICBjb25zdCBtYWpvcjogbnVtYmVyID0gKHZlcnNpb24gJiAweGZmMDAwMDAwKSA+PiAyNDtcclxuICAgICAgY29uc3QgbWlub3I6IG51bWJlciA9ICh2ZXJzaW9uICYgMHgwMGZmMDAwMCkgPj4gMTY7XHJcbiAgICAgIGNvbnN0IHBhdGNoOiBudW1iZXIgPSB2ZXJzaW9uICYgMHgwMDAwZmZmZjtcclxuICAgICAgY29uc3QgdmVyc2lvbk51bWJlcjogbnVtYmVyID0gdmVyc2lvbjtcclxuXHJcbiAgICAgIEN1YmlzbUxvZ0luZm8oXHJcbiAgICAgICAgYExpdmUyRCBDdWJpc20gQ29yZSB2ZXJzaW9uOiB7MH0uezF9LnsyfSAoezN9KWAsXHJcbiAgICAgICAgKCcwMCcgKyBtYWpvcikuc2xpY2UoLTIpLFxyXG4gICAgICAgICgnMDAnICsgbWlub3IpLnNsaWNlKC0yKSxcclxuICAgICAgICAoJzAwMDAnICsgcGF0Y2gpLnNsaWNlKC00KSxcclxuICAgICAgICB2ZXJzaW9uTnVtYmVyXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgQ3ViaXNtTG9nSW5mbygnQ3ViaXNtRnJhbWV3b3JrLnN0YXJ0VXAoKSBpcyBjb21wbGV0ZS4nKTtcclxuXHJcbiAgICByZXR1cm4gc19pc1N0YXJ0ZWQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdGFydFVwKCnjgafliJ3mnJ/ljJbjgZfjgZ9DdWJpc21GcmFtZXdvcmvjga7lkITjg5Hjg6njg6Hjg7zjgr/jgpLjgq/jg6rjgqLjgZfjgb7jgZnjgIJcclxuICAgKiBEaXNwb3NlKCnjgZfjgZ9DdWJpc21GcmFtZXdvcmvjgpLlho3liKnnlKjjgZnjgovpmpvjgavliKnnlKjjgZfjgabjgY/jgaDjgZXjgYTjgIJcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGNsZWFuVXAoKTogdm9pZCB7XHJcbiAgICBzX2lzU3RhcnRlZCA9IGZhbHNlO1xyXG4gICAgc19pc0luaXRpYWxpemVkID0gZmFsc2U7XHJcbiAgICBzX29wdGlvbiA9IG51bGw7XHJcbiAgICBzX2N1YmlzbUlkTWFuYWdlciA9IG51bGw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDdWJpc20gRnJhbWV3b3Jr5YaF44Gu44Oq44K944O844K544KS5Yid5pyf5YyW44GX44Gm44Oi44OH44Or44KS6KGo56S65Y+v6IO944Gq54q25oWL44Gr44GX44G+44GZ44CCPGJyPlxyXG4gICAqICAgICDlho3luqZJbml0aWFsaXplKCnjgZnjgovjgavjga/lhYjjgatEaXNwb3NlKCnjgpLlrp/ooYzjgZnjgovlv4XopoHjgYzjgYLjgorjgb7jgZnjgIJcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGluaXRpYWxpemUoKTogdm9pZCB7XHJcbiAgICBDU01fQVNTRVJUKHNfaXNTdGFydGVkKTtcclxuICAgIGlmICghc19pc1N0YXJ0ZWQpIHtcclxuICAgICAgQ3ViaXNtTG9nV2FybmluZygnQ3ViaXNtRnJhbWV3b3JrIGlzIG5vdCBzdGFydGVkLicpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gLS0tIHNfaXNJbml0aWFsaXplZOOBq+OCiOOCi+mAo+e2muWIneacn+WMluOCrOODvOODiSAtLS1cclxuICAgIC8vIOmAo+e2muOBl+OBpuODquOCveODvOOCueeiuuS/neOBjOihjOOCj+OCjOOBquOBhOOCiOOBhuOBq+OBmeOCi+OAglxyXG4gICAgLy8g5YaN5bqmSW5pdGlhbGl6ZSgp44GZ44KL44Gr44Gv5YWI44GrRGlzcG9zZSgp44KS5a6f6KGM44GZ44KL5b+F6KaB44GM44GC44KL44CCXHJcbiAgICBpZiAoc19pc0luaXRpYWxpemVkKSB7XHJcbiAgICAgIEN1YmlzbUxvZ1dhcm5pbmcoXHJcbiAgICAgICAgJ0N1YmlzbUZyYW1ld29yay5pbml0aWFsaXplKCkgc2tpcHBlZCwgYWxyZWFkeSBpbml0aWFsaXplZC4nXHJcbiAgICAgICk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLy0tLS0gc3RhdGljIOWIneacn+WMliAtLS0tXHJcbiAgICBWYWx1ZS5zdGF0aWNJbml0aWFsaXplTm90Rm9yQ2xpZW50Q2FsbCgpO1xyXG5cclxuICAgIHNfY3ViaXNtSWRNYW5hZ2VyID0gbmV3IEN1YmlzbUlkTWFuYWdlcigpO1xyXG5cclxuICAgIHNfaXNJbml0aWFsaXplZCA9IHRydWU7XHJcblxyXG4gICAgQ3ViaXNtTG9nSW5mbygnQ3ViaXNtRnJhbWV3b3JrLmluaXRpYWxpemUoKSBpcyBjb21wbGV0ZS4nKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEN1YmlzbSBGcmFtZXdvcmvlhoXjga7lhajjgabjga7jg6rjgr3jg7zjgrnjgpLop6PmlL7jgZfjgb7jgZnjgIJcclxuICAgKiAgICAgIOOBn+OBoOOBl+OAgeWklumDqOOBp+eiuuS/neOBleOCjOOBn+ODquOCveODvOOCueOBq+OBpOOBhOOBpuOBr+ino+aUvuOBl+OBvuOBm+OCk+OAglxyXG4gICAqICAgICAg5aSW6YOo44Gn6YGp5YiH44Gr56C05qOE44GZ44KL5b+F6KaB44GM44GC44KK44G+44GZ44CCXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgQ1NNX0FTU0VSVChzX2lzU3RhcnRlZCk7XHJcbiAgICBpZiAoIXNfaXNTdGFydGVkKSB7XHJcbiAgICAgIEN1YmlzbUxvZ1dhcm5pbmcoJ0N1YmlzbUZyYW1ld29yayBpcyBub3Qgc3RhcnRlZC4nKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIC0tLSBzX2lzSW5pdGlhbGl6ZWTjgavjgojjgovmnKrliJ3mnJ/ljJbop6PmlL7jgqzjg7zjg4kgLS0tXHJcbiAgICAvLyBkaXNwb3NlKCnjgZnjgovjgavjga/lhYjjgatpbml0aWFsaXplKCnjgpLlrp/ooYzjgZnjgovlv4XopoHjgYzjgYLjgovjgIJcclxuICAgIGlmICghc19pc0luaXRpYWxpemVkKSB7XHJcbiAgICAgIC8vIGZhbHNlLi4u44Oq44K944O844K55pyq56K65L+d44Gu5aC05ZCIXHJcbiAgICAgIEN1YmlzbUxvZ1dhcm5pbmcoJ0N1YmlzbUZyYW1ld29yay5kaXNwb3NlKCkgc2tpcHBlZCwgbm90IGluaXRpYWxpemVkLicpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgVmFsdWUuc3RhdGljUmVsZWFzZU5vdEZvckNsaWVudENhbGwoKTtcclxuXHJcbiAgICBzX2N1YmlzbUlkTWFuYWdlci5yZWxlYXNlKCk7XHJcbiAgICBzX2N1YmlzbUlkTWFuYWdlciA9IG51bGw7XHJcblxyXG4gICAgLy8g44Os44Oz44OA44Op44Gu6Z2Z55qE44Oq44K944O844K577yI44K344Kn44O844OA44OX44Ot44Kw44Op44Og5LuW77yJ44KS6Kej5pS+44GZ44KLXHJcbiAgICBDdWJpc21SZW5kZXJlci5zdGF0aWNSZWxlYXNlKCk7XHJcblxyXG4gICAgc19pc0luaXRpYWxpemVkID0gZmFsc2U7XHJcblxyXG4gICAgQ3ViaXNtTG9nSW5mbygnQ3ViaXNtRnJhbWV3b3JrLmRpc3Bvc2UoKSBpcyBjb21wbGV0ZS4nKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEN1YmlzbSBGcmFtZXdvcmvjga5BUEnjgpLkvb/nlKjjgZnjgovmupblgpnjgYzlrozkuobjgZfjgZ/jgYvjganjgYbjgYtcclxuICAgKiBAcmV0dXJuIEFQSeOCkuS9v+eUqOOBmeOCi+a6luWCmeOBjOWujOS6huOBl+OBpuOBhOOCjOOBsHRydWXjgYzov5Tjgorjgb7jgZnjgIJcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGlzU3RhcnRlZCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBzX2lzU3RhcnRlZDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEN1YmlzbSBGcmFtZXdvcmvjga7jg6rjgr3jg7zjgrnliJ3mnJ/ljJbjgYzjgZnjgafjgavooYzjgo/jgozjgabjgYTjgovjgYvjganjgYbjgYtcclxuICAgKiBAcmV0dXJuIOODquOCveODvOOCueeiuuS/neOBjOWujOS6huOBl+OBpuOBhOOCjOOBsHRydWXjgYzov5Tjgorjgb7jgZlcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGlzSW5pdGlhbGl6ZWQoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gc19pc0luaXRpYWxpemVkO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ29yZSBBUEnjgavjg5DjgqTjg7Pjg4njgZfjgZ/jg63jgrDplqLmlbDjgpLlrp/ooYzjgZnjgotcclxuICAgKlxyXG4gICAqIEBwcmFyYW0gbWVzc2FnZSDjg63jgrDjg6Hjg4Pjgrvjg7zjgrhcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGNvcmVMb2dGdW5jdGlvbihtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIC8vIFJldHVybiBpZiBsb2dnaW5nIG5vdCBwb3NzaWJsZS5cclxuICAgIGlmICghTGl2ZTJEQ3ViaXNtQ29yZS5Mb2dnaW5nLmNzbUdldExvZ0Z1bmN0aW9uKCkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIExpdmUyREN1YmlzbUNvcmUuTG9nZ2luZy5jc21HZXRMb2dGdW5jdGlvbigpKG1lc3NhZ2UpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog54++5Zyo44Gu44Ot44Kw5Ye65Yqb44Os44OZ44Or6Kit5a6a44Gu5YCk44KS6L+U44GZ44CCXHJcbiAgICpcclxuICAgKiBAcmV0dXJuICDnj77lnKjjga7jg63jgrDlh7rlipvjg6zjg5njg6voqK3lrprjga7lgKRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldExvZ2dpbmdMZXZlbCgpOiBMb2dMZXZlbCB7XHJcbiAgICBpZiAoc19vcHRpb24gIT0gbnVsbCkge1xyXG4gICAgICByZXR1cm4gc19vcHRpb24ubG9nZ2luZ0xldmVsO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIExvZ0xldmVsLkxvZ0xldmVsX09mZjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIElE44Oe44ON44O844K444Oj44Gu44Kk44Oz44K544K/44Oz44K544KS5Y+W5b6X44GZ44KLXHJcbiAgICogQHJldHVybiBDdWJpc21NYW5hZ2Vy44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K5XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBnZXRJZE1hbmFnZXIoKTogQ3ViaXNtSWRNYW5hZ2VyIHtcclxuICAgIHJldHVybiBzX2N1YmlzbUlkTWFuYWdlcjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOmdmeeahOOCr+ODqeOCueOBqOOBl+OBpuS9v+eUqOOBmeOCi1xyXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueWMluOBleOBm+OBquOBhFxyXG4gICAqL1xyXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7fVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgT3B0aW9uIHtcclxuICBsb2dGdW5jdGlvbjogTGl2ZTJEQ3ViaXNtQ29yZS5jc21Mb2dGdW5jdGlvbjsgLy8g44Ot44Kw5Ye65Yqb44Gu6Zai5pWw44Kq44OW44K444Kn44Kv44OIXHJcbiAgbG9nZ2luZ0xldmVsOiBMb2dMZXZlbDsgLy8g44Ot44Kw5Ye65Yqb44Os44OZ44Or44Gu6Kit5a6aXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDjg63jgrDlh7rlipvjga7jg6zjg5njg6tcclxuICovXHJcbmV4cG9ydCBlbnVtIExvZ0xldmVsIHtcclxuICBMb2dMZXZlbF9WZXJib3NlID0gMCwgLy8g6Kmz57Sw44Ot44KwXHJcbiAgTG9nTGV2ZWxfRGVidWcsIC8vIOODh+ODkOODg+OCsOODreOCsFxyXG4gIExvZ0xldmVsX0luZm8sIC8vIEluZm/jg63jgrBcclxuICBMb2dMZXZlbF9XYXJuaW5nLCAvLyDorablkYrjg63jgrBcclxuICBMb2dMZXZlbF9FcnJvciwgLy8g44Ko44Op44O844Ot44KwXHJcbiAgTG9nTGV2ZWxfT2ZmIC8vIOODreOCsOWHuuWKm+eEoeWKuVxyXG59XHJcblxyXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cclxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcclxuICBleHBvcnQgY29uc3QgQ29uc3RhbnQgPSAkLkNvbnN0YW50O1xyXG4gIGV4cG9ydCBjb25zdCBjc21EZWxldGUgPSAkLmNzbURlbGV0ZTtcclxuICBleHBvcnQgY29uc3QgQ3ViaXNtRnJhbWV3b3JrID0gJC5DdWJpc21GcmFtZXdvcms7XHJcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtRnJhbWV3b3JrID0gJC5DdWJpc21GcmFtZXdvcms7XHJcbn1cclxuIiwiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQgeyBDdWJpc21WZWN0b3IyIH0gZnJvbSAnLi9jdWJpc212ZWN0b3IyJztcclxuXHJcbi8qKlxyXG4gKiDmlbDlgKToqIjnrpfjgarjganjgavkvb/nlKjjgZnjgovjg6bjg7zjg4bjgqPjg6rjg4bjgqPjgq/jg6njgrlcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDdWJpc21NYXRoIHtcclxuICBzdGF0aWMgcmVhZG9ubHkgRXBzaWxvbjogbnVtYmVyID0gMC4wMDAwMTtcclxuXHJcbiAgLyoqXHJcbiAgICog56ys5LiA5byV5pWw44Gu5YCk44KS5pyA5bCP5YCk44Go5pyA5aSn5YCk44Gu56+E5Zuy44Gr5Y+O44KB44Gf5YCk44KS6L+U44GZXHJcbiAgICpcclxuICAgKiBAcGFyYW0gdmFsdWUg5Y+O44KB44KJ44KM44KL5YCkXHJcbiAgICogQHBhcmFtIG1pbiAgIOevhOWbsuOBruacgOWwj+WApFxyXG4gICAqIEBwYXJhbSBtYXggICDnr4Tlm7Ljga7mnIDlpKflgKRcclxuICAgKiBAcmV0dXJuIOacgOWwj+WApOOBqOacgOWkp+WApOOBruevhOWbsuOBq+WPjuOCgeOBn+WApFxyXG4gICAqL1xyXG4gIHN0YXRpYyByYW5nZSh2YWx1ZTogbnVtYmVyLCBtaW46IG51bWJlciwgbWF4OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgaWYgKHZhbHVlIDwgbWluKSB7XHJcbiAgICAgIHZhbHVlID0gbWluO1xyXG4gICAgfSBlbHNlIGlmICh2YWx1ZSA+IG1heCkge1xyXG4gICAgICB2YWx1ZSA9IG1heDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjgrXjgqTjg7PplqLmlbDjga7lgKTjgpLmsYLjgoHjgotcclxuICAgKlxyXG4gICAqIEBwYXJhbSB4IOinkuW6puWApO+8iOODqeOCuOOCouODs++8iVxyXG4gICAqIEByZXR1cm4g44K144Kk44Oz6Zai5pWwc2luKHgp44Gu5YCkXHJcbiAgICovXHJcbiAgc3RhdGljIHNpbih4OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIE1hdGguc2luKHgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Kz44K144Kk44Oz6Zai5pWw44Gu5YCk44KS5rGC44KB44KLXHJcbiAgICpcclxuICAgKiBAcGFyYW0geCDop5LluqblgKQo44Op44K444Ki44OzKVxyXG4gICAqIEByZXR1cm4g44Kz44K144Kk44Oz6Zai5pWwY29zKHgp44Gu5YCkXHJcbiAgICovXHJcbiAgc3RhdGljIGNvcyh4OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIE1hdGguY29zKHgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5YCk44Gu57W25a++5YCk44KS5rGC44KB44KLXHJcbiAgICpcclxuICAgKiBAcGFyYW0geCDntbblr77lgKTjgpLmsYLjgoHjgovlgKRcclxuICAgKiBAcmV0dXJuIOWApOOBrue1tuWvvuWApFxyXG4gICAqL1xyXG4gIHN0YXRpYyBhYnMoeDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBNYXRoLmFicyh4KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOW5s+aWueaguSjjg6vjg7zjg4gp44KS5rGC44KB44KLXHJcbiAgICogQHBhcmFtIHggLT4g5bmz5pa55qC544KS5rGC44KB44KL5YCkXHJcbiAgICogQHJldHVybiDlgKTjga7lubPmlrnmoLlcclxuICAgKi9cclxuICBzdGF0aWMgc3FydCh4OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIE1hdGguc3FydCh4KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOeri+aWueagueOCkuaxguOCgeOCi1xyXG4gICAqIEBwYXJhbSB4IC0+IOeri+aWueagueOCkuaxguOCgeOCi+WApFxyXG4gICAqIEByZXR1cm4g5YCk44Gu56uL5pa55qC5XHJcbiAgICovXHJcbiAgc3RhdGljIGNicnQoeDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGlmICh4ID09PSAwKSB7XHJcbiAgICAgIHJldHVybiB4O1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBjeDogbnVtYmVyID0geDtcclxuICAgIGNvbnN0IGlzTmVnYXRpdmVOdW1iZXI6IGJvb2xlYW4gPSBjeCA8IDA7XHJcblxyXG4gICAgaWYgKGlzTmVnYXRpdmVOdW1iZXIpIHtcclxuICAgICAgY3ggPSAtY3g7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHJldDogbnVtYmVyO1xyXG4gICAgaWYgKGN4ID09PSBJbmZpbml0eSkge1xyXG4gICAgICByZXQgPSBJbmZpbml0eTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldCA9IE1hdGguZXhwKE1hdGgubG9nKGN4KSAvIDMpO1xyXG4gICAgICByZXQgPSAoY3ggLyAocmV0ICogcmV0KSArIDIgKiByZXQpIC8gMztcclxuICAgIH1cclxuICAgIHJldHVybiBpc05lZ2F0aXZlTnVtYmVyID8gLXJldCA6IHJldDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCpOODvOOCuOODs+OCsOWHpueQhuOBleOCjOOBn+OCteOCpOODs+OCkuaxguOCgeOCi1xyXG4gICAqIOODleOCp+ODvOODieOCpOODs+ODu+OCouOCpuODiOaZguOBruOCpOODvOOCuOODs+OCsOOBq+WIqeeUqOOBp+OBjeOCi1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHZhbHVlIOOCpOODvOOCuOODs+OCsOOCkuihjOOBhuWApFxyXG4gICAqIEByZXR1cm4g44Kk44O844K444Oz44Kw5Yem55CG44GV44KM44Gf44K144Kk44Oz5YCkXHJcbiAgICovXHJcbiAgc3RhdGljIGdldEVhc2luZ1NpbmUodmFsdWU6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICBpZiAodmFsdWUgPCAwLjApIHtcclxuICAgICAgcmV0dXJuIDAuMDtcclxuICAgIH0gZWxzZSBpZiAodmFsdWUgPiAxLjApIHtcclxuICAgICAgcmV0dXJuIDEuMDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gMC41IC0gMC41ICogdGhpcy5jb3ModmFsdWUgKiBNYXRoLlBJKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWkp+OBjeOBhOaWueOBruWApOOCkui/lOOBmVxyXG4gICAqXHJcbiAgICogQHBhcmFtIGxlZnQg5bem6L6644Gu5YCkXHJcbiAgICogQHBhcmFtIHJpZ2h0IOWPs+i+uuOBruWApFxyXG4gICAqIEByZXR1cm4g5aSn44GN44GE5pa544Gu5YCkXHJcbiAgICovXHJcbiAgc3RhdGljIG1heChsZWZ0OiBudW1iZXIsIHJpZ2h0OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIGxlZnQgPiByaWdodCA/IGxlZnQgOiByaWdodDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWwj+OBleOBhOaWueOBruWApOOCkui/lOOBmVxyXG4gICAqXHJcbiAgICogQHBhcmFtIGxlZnQgIOW3pui+uuOBruWApFxyXG4gICAqIEBwYXJhbSByaWdodCDlj7Povrrjga7lgKRcclxuICAgKiBAcmV0dXJuIOWwj+OBleOBhOaWueOBruWApFxyXG4gICAqL1xyXG4gIHN0YXRpYyBtaW4obGVmdDogbnVtYmVyLCByaWdodDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBsZWZ0ID4gcmlnaHQgPyByaWdodCA6IGxlZnQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDop5LluqblgKTjgpLjg6njgrjjgqLjg7PlgKTjgavlpInmj5vjgZnjgotcclxuICAgKlxyXG4gICAqIEBwYXJhbSBkZWdyZWVzICAg6KeS5bqm5YCkXHJcbiAgICogQHJldHVybiDop5LluqblgKTjgYvjgonlpInmj5vjgZfjgZ/jg6njgrjjgqLjg7PlgKRcclxuICAgKi9cclxuICBzdGF0aWMgZGVncmVlc1RvUmFkaWFuKGRlZ3JlZXM6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gKGRlZ3JlZXMgLyAxODAuMCkgKiBNYXRoLlBJO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Op44K444Ki44Oz5YCk44KS6KeS5bqm5YCk44Gr5aSJ5o+b44GZ44KLXHJcbiAgICpcclxuICAgKiBAcGFyYW0gcmFkaWFuICAgIOODqeOCuOOCouODs+WApFxyXG4gICAqIEByZXR1cm4g44Op44K444Ki44Oz5YCk44GL44KJ5aSJ5o+b44GX44Gf6KeS5bqm5YCkXHJcbiAgICovXHJcbiAgc3RhdGljIHJhZGlhblRvRGVncmVlcyhyYWRpYW46IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gKHJhZGlhbiAqIDE4MC4wKSAvIE1hdGguUEk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDvvJLjgaTjga7jg5njgq/jg4jjg6vjgYvjgonjg6njgrjjgqLjg7PlgKTjgpLmsYLjgoHjgotcclxuICAgKlxyXG4gICAqIEBwYXJhbSBmcm9tICDlp4vngrnjg5njgq/jg4jjg6tcclxuICAgKiBAcGFyYW0gdG8gICAg57WC54K544OZ44Kv44OI44OrXHJcbiAgICogQHJldHVybiDjg6njgrjjgqLjg7PlgKTjgYvjgonmsYLjgoHjgZ/mlrnlkJHjg5njgq/jg4jjg6tcclxuICAgKi9cclxuICBzdGF0aWMgZGlyZWN0aW9uVG9SYWRpYW4oZnJvbTogQ3ViaXNtVmVjdG9yMiwgdG86IEN1YmlzbVZlY3RvcjIpOiBudW1iZXIge1xyXG4gICAgY29uc3QgcTE6IG51bWJlciA9IE1hdGguYXRhbjIodG8ueSwgdG8ueCk7XHJcbiAgICBjb25zdCBxMjogbnVtYmVyID0gTWF0aC5hdGFuMihmcm9tLnksIGZyb20ueCk7XHJcblxyXG4gICAgbGV0IHJldDogbnVtYmVyID0gcTEgLSBxMjtcclxuXHJcbiAgICB3aGlsZSAocmV0IDwgLU1hdGguUEkpIHtcclxuICAgICAgcmV0ICs9IE1hdGguUEkgKiAyLjA7XHJcbiAgICB9XHJcblxyXG4gICAgd2hpbGUgKHJldCA+IE1hdGguUEkpIHtcclxuICAgICAgcmV0IC09IE1hdGguUEkgKiAyLjA7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJldDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIO+8kuOBpOOBruODmeOCr+ODiOODq+OBi+OCieinkuW6puWApOOCkuaxguOCgeOCi1xyXG4gICAqXHJcbiAgICogQHBhcmFtIGZyb20gIOWni+eCueODmeOCr+ODiOODq1xyXG4gICAqIEBwYXJhbSB0byAgICDntYLngrnjg5njgq/jg4jjg6tcclxuICAgKiBAcmV0dXJuIOinkuW6puWApOOBi+OCieaxguOCgeOBn+aWueWQkeODmeOCr+ODiOODq1xyXG4gICAqL1xyXG4gIHN0YXRpYyBkaXJlY3Rpb25Ub0RlZ3JlZXMoZnJvbTogQ3ViaXNtVmVjdG9yMiwgdG86IEN1YmlzbVZlY3RvcjIpOiBudW1iZXIge1xyXG4gICAgY29uc3QgcmFkaWFuOiBudW1iZXIgPSB0aGlzLmRpcmVjdGlvblRvUmFkaWFuKGZyb20sIHRvKTtcclxuICAgIGxldCBkZWdyZWU6IG51bWJlciA9IHRoaXMucmFkaWFuVG9EZWdyZWVzKHJhZGlhbik7XHJcblxyXG4gICAgaWYgKHRvLnggLSBmcm9tLnggPiAwLjApIHtcclxuICAgICAgZGVncmVlID0gLWRlZ3JlZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZGVncmVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Op44K444Ki44Oz5YCk44KS5pa55ZCR44OZ44Kv44OI44Or44Gr5aSJ5o+b44GZ44KL44CCXHJcbiAgICpcclxuICAgKiBAcGFyYW0gdG90YWxBbmdsZSAgICDjg6njgrjjgqLjg7PlgKRcclxuICAgKiBAcmV0dXJuIOODqeOCuOOCouODs+WApOOBi+OCieWkieaPm+OBl+OBn+aWueWQkeODmeOCr+ODiOODq1xyXG4gICAqL1xyXG5cclxuICBzdGF0aWMgcmFkaWFuVG9EaXJlY3Rpb24odG90YWxBbmdsZTogbnVtYmVyKTogQ3ViaXNtVmVjdG9yMiB7XHJcbiAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigpO1xyXG5cclxuICAgIHJldC54ID0gdGhpcy5zaW4odG90YWxBbmdsZSk7XHJcbiAgICByZXQueSA9IHRoaXMuY29zKHRvdGFsQW5nbGUpO1xyXG5cclxuICAgIHJldHVybiByZXQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDkuInmrKHmlrnnqIvlvI/jga7kuInmrKHpoIXjga7kv4LmlbDjgYww44Gr44Gq44Gj44Gf44Go44GN44Gr6KOc5qyg55qE44Gr5LqM5qyh5pa556iL5byP44Gu6Kej44KS44KC44Go44KB44KL44CCXHJcbiAgICogYSAqIHheMiArIGIgKiB4ICsgYyA9IDBcclxuICAgKlxyXG4gICAqIEBwYXJhbSAgIGEgLT4g5LqM5qyh6aCF44Gu5L+C5pWw5YCkXHJcbiAgICogQHBhcmFtICAgYiAtPiDkuIDmrKHpoIXjga7kv4LmlbDlgKRcclxuICAgKiBAcGFyYW0gICBjIC0+IOWumuaVsOmgheOBruWApFxyXG4gICAqIEByZXR1cm4gIOS6jOasoeaWueeoi+W8j+OBruino1xyXG4gICAqL1xyXG4gIHN0YXRpYyBxdWFkcmF0aWNFcXVhdGlvbihhOiBudW1iZXIsIGI6IG51bWJlciwgYzogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGlmICh0aGlzLmFicyhhKSA8IEN1YmlzbU1hdGguRXBzaWxvbikge1xyXG4gICAgICBpZiAodGhpcy5hYnMoYikgPCBDdWJpc21NYXRoLkVwc2lsb24pIHtcclxuICAgICAgICByZXR1cm4gLWM7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIC1jIC8gYjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gLShiICsgdGhpcy5zcXJ0KGIgKiBiIC0gNC4wICogYSAqIGMpKSAvICgyLjAgKiBhKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCq+ODq+ODgOODjuOBruWFrOW8j+OBq+OCiOOBo+OBpuODmeOCuOOCp+OBrnTlgKTjgavoqbLlvZPjgZnjgovvvJPmrKHmlrnnqIvlvI/jga7op6PjgpLmsYLjgoHjgovjgIJcclxuICAgKiDph43op6PjgavjgarjgaPjgZ/jgajjgY3jgavjga8wLjDvvZ4xLjDjga7lgKTjgavjgarjgovop6PjgpLov5TjgZnjgIJcclxuICAgKlxyXG4gICAqIGEgKiB4XjMgKyBiICogeF4yICsgYyAqIHggKyBkID0gMFxyXG4gICAqXHJcbiAgICogQHBhcmFtICAgYSAtPiDkuInmrKHpoIXjga7kv4LmlbDlgKRcclxuICAgKiBAcGFyYW0gICBiIC0+IOS6jOasoemgheOBruS/guaVsOWApFxyXG4gICAqIEBwYXJhbSAgIGMgLT4g5LiA5qyh6aCF44Gu5L+C5pWw5YCkXHJcbiAgICogQHBhcmFtICAgZCAtPiDlrprmlbDpoIXjga7lgKRcclxuICAgKiBAcmV0dXJuICAwLjDvvZ4xLjDjga7plpPjgavjgYLjgovop6NcclxuICAgKi9cclxuICBzdGF0aWMgY2FyZGFub0FsZ29yaXRobUZvckJlemllcihcclxuICAgIGE6IG51bWJlcixcclxuICAgIGI6IG51bWJlcixcclxuICAgIGM6IG51bWJlcixcclxuICAgIGQ6IG51bWJlclxyXG4gICk6IG51bWJlciB7XHJcbiAgICBpZiAodGhpcy5zcXJ0KGEpIDwgQ3ViaXNtTWF0aC5FcHNpbG9uKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnJhbmdlKHRoaXMucXVhZHJhdGljRXF1YXRpb24oYiwgYywgZCksIDAuMCwgMS4wKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBiYTogbnVtYmVyID0gYiAvIGE7XHJcbiAgICBjb25zdCBjYTogbnVtYmVyID0gYyAvIGE7XHJcbiAgICBjb25zdCBkYTogbnVtYmVyID0gZCAvIGE7XHJcblxyXG4gICAgY29uc3QgcDogbnVtYmVyID0gKDMuMCAqIGNhIC0gYmEgKiBiYSkgLyAzLjA7XHJcbiAgICBjb25zdCBwMzogbnVtYmVyID0gcCAvIDMuMDtcclxuICAgIGNvbnN0IHE6IG51bWJlciA9ICgyLjAgKiBiYSAqIGJhICogYmEgLSA5LjAgKiBiYSAqIGNhICsgMjcuMCAqIGRhKSAvIDI3LjA7XHJcbiAgICBjb25zdCBxMjogbnVtYmVyID0gcSAvIDIuMDtcclxuICAgIGNvbnN0IGRpc2NyaW1pbmFudDogbnVtYmVyID0gcTIgKiBxMiArIHAzICogcDMgKiBwMztcclxuXHJcbiAgICBjb25zdCBjZW50ZXIgPSAwLjU7XHJcbiAgICBjb25zdCB0aHJlc2hvbGQ6IG51bWJlciA9IGNlbnRlciArIDAuMDE7XHJcblxyXG4gICAgaWYgKGRpc2NyaW1pbmFudCA8IDAuMCkge1xyXG4gICAgICBjb25zdCBtcDM6IG51bWJlciA9IC1wIC8gMy4wO1xyXG4gICAgICBjb25zdCBtcDMzOiBudW1iZXIgPSBtcDMgKiBtcDMgKiBtcDM7XHJcbiAgICAgIGNvbnN0IHI6IG51bWJlciA9IHRoaXMuc3FydChtcDMzKTtcclxuICAgICAgY29uc3QgdDogbnVtYmVyID0gLXEgLyAoMi4wICogcik7XHJcbiAgICAgIGNvbnN0IGNvc3BoaTogbnVtYmVyID0gdGhpcy5yYW5nZSh0LCAtMS4wLCAxLjApO1xyXG4gICAgICBjb25zdCBwaGk6IG51bWJlciA9IE1hdGguYWNvcyhjb3NwaGkpO1xyXG4gICAgICBjb25zdCBjcnRyOiBudW1iZXIgPSB0aGlzLmNicnQocik7XHJcbiAgICAgIGNvbnN0IHQxOiBudW1iZXIgPSAyLjAgKiBjcnRyO1xyXG5cclxuICAgICAgY29uc3Qgcm9vdDE6IG51bWJlciA9IHQxICogdGhpcy5jb3MocGhpIC8gMy4wKSAtIGJhIC8gMy4wO1xyXG4gICAgICBpZiAodGhpcy5hYnMocm9vdDEgLSBjZW50ZXIpIDwgdGhyZXNob2xkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmFuZ2Uocm9vdDEsIDAuMCwgMS4wKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3Qgcm9vdDI6IG51bWJlciA9XHJcbiAgICAgICAgdDEgKiB0aGlzLmNvcygocGhpICsgMi4wICogTWF0aC5QSSkgLyAzLjApIC0gYmEgLyAzLjA7XHJcbiAgICAgIGlmICh0aGlzLmFicyhyb290MiAtIGNlbnRlcikgPCB0aHJlc2hvbGQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yYW5nZShyb290MiwgMC4wLCAxLjApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCByb290MzogbnVtYmVyID1cclxuICAgICAgICB0MSAqIHRoaXMuY29zKChwaGkgKyA0LjAgKiBNYXRoLlBJKSAvIDMuMCkgLSBiYSAvIDMuMDtcclxuICAgICAgcmV0dXJuIHRoaXMucmFuZ2Uocm9vdDMsIDAuMCwgMS4wKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZGlzY3JpbWluYW50ID09IDAuMCkge1xyXG4gICAgICBsZXQgdTE6IG51bWJlcjtcclxuICAgICAgaWYgKHEyIDwgMC4wKSB7XHJcbiAgICAgICAgdTEgPSB0aGlzLmNicnQoLXEyKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB1MSA9IC10aGlzLmNicnQocTIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCByb290MTogbnVtYmVyID0gMi4wICogdTEgLSBiYSAvIDMuMDtcclxuICAgICAgaWYgKHRoaXMuYWJzKHJvb3QxIC0gY2VudGVyKSA8IHRocmVzaG9sZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJhbmdlKHJvb3QxLCAwLjAsIDEuMCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHJvb3QyOiBudW1iZXIgPSAtdTEgLSBiYSAvIDMuMDtcclxuICAgICAgcmV0dXJuIHRoaXMucmFuZ2Uocm9vdDIsIDAuMCwgMS4wKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzZDogbnVtYmVyID0gdGhpcy5zcXJ0KGRpc2NyaW1pbmFudCk7XHJcbiAgICBjb25zdCB1MTogbnVtYmVyID0gdGhpcy5jYnJ0KHNkIC0gcTIpO1xyXG4gICAgY29uc3QgdjE6IG51bWJlciA9IHRoaXMuY2JydChzZCArIHEyKTtcclxuICAgIGNvbnN0IHJvb3QxOiBudW1iZXIgPSB1MSAtIHYxIC0gYmEgLyAzLjA7XHJcbiAgICByZXR1cm4gdGhpcy5yYW5nZShyb290MSwgMC4wLCAxLjApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHt9XHJcbn1cclxuXHJcbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxyXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtbWF0aCc7XHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcclxuICBleHBvcnQgY29uc3QgQ3ViaXNtTWF0aCA9ICQuQ3ViaXNtTWF0aDtcclxuICBleHBvcnQgdHlwZSBDdWJpc21NYXRoID0gJC5DdWJpc21NYXRoO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIDR4NOOBruihjOWIl1xyXG4gKlxyXG4gKiA0eDTooYzliJfjga7kvr/liKnjgq/jg6njgrnjgIJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDdWJpc21NYXRyaXg0NCB7XHJcbiAgLyoqXHJcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5fdHIgPSBuZXcgRmxvYXQzMkFycmF5KDE2KTsgLy8gNCAqIDTjga7jgrXjgqTjgrpcclxuICAgIHRoaXMubG9hZElkZW50aXR5KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlj5fjgZHlj5bjgaPjgZ/vvJLjgaTjga7ooYzliJfjga7kuZfnrpfjgpLooYzjgYbjgIJcclxuICAgKlxyXG4gICAqIEBwYXJhbSBhIOihjOWIl2FcclxuICAgKiBAcGFyYW0gYiDooYzliJdiXHJcbiAgICogQHJldHVybiDkuZfnrpfntZDmnpzjga7ooYzliJdcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIG11bHRpcGx5KFxyXG4gICAgYTogRmxvYXQzMkFycmF5LFxyXG4gICAgYjogRmxvYXQzMkFycmF5LFxyXG4gICAgZHN0OiBGbG9hdDMyQXJyYXlcclxuICApOiB2b2lkIHtcclxuICAgIGNvbnN0IGM6IEZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoW1xyXG4gICAgICAwLjAsXHJcbiAgICAgIDAuMCxcclxuICAgICAgMC4wLFxyXG4gICAgICAwLjAsXHJcbiAgICAgIDAuMCxcclxuICAgICAgMC4wLFxyXG4gICAgICAwLjAsXHJcbiAgICAgIDAuMCxcclxuICAgICAgMC4wLFxyXG4gICAgICAwLjAsXHJcbiAgICAgIDAuMCxcclxuICAgICAgMC4wLFxyXG4gICAgICAwLjAsXHJcbiAgICAgIDAuMCxcclxuICAgICAgMC4wLFxyXG4gICAgICAwLjBcclxuICAgIF0pO1xyXG5cclxuICAgIGNvbnN0IG4gPSA0O1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbjsgKytqKSB7XHJcbiAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBuOyArK2spIHtcclxuICAgICAgICAgIGNbaiArIGkgKiA0XSArPSBhW2sgKyBpICogNF0gKiBiW2ogKyBrICogNF07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgKytpKSB7XHJcbiAgICAgIGRzdFtpXSA9IGNbaV07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDljZjkvY3ooYzliJfjgavliJ3mnJ/ljJbjgZnjgotcclxuICAgKi9cclxuICBwdWJsaWMgbG9hZElkZW50aXR5KCk6IHZvaWQge1xyXG4gICAgY29uc3QgYzogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShbXHJcbiAgICAgIDEuMCxcclxuICAgICAgMC4wLFxyXG4gICAgICAwLjAsXHJcbiAgICAgIDAuMCxcclxuICAgICAgMC4wLFxyXG4gICAgICAxLjAsXHJcbiAgICAgIDAuMCxcclxuICAgICAgMC4wLFxyXG4gICAgICAwLjAsXHJcbiAgICAgIDAuMCxcclxuICAgICAgMS4wLFxyXG4gICAgICAwLjAsXHJcbiAgICAgIDAuMCxcclxuICAgICAgMC4wLFxyXG4gICAgICAwLjAsXHJcbiAgICAgIDEuMFxyXG4gICAgXSk7XHJcblxyXG4gICAgdGhpcy5zZXRNYXRyaXgoYyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDooYzliJfjgpLoqK3lrppcclxuICAgKlxyXG4gICAqIEBwYXJhbSB0ciAxNuWAi+OBrua1ruWLleWwj+aVsOeCueaVsOOBp+ihqOOBleOCjOOCizR4NOOBruihjOWIl1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRNYXRyaXgodHI6IEZsb2F0MzJBcnJheSk6IHZvaWQge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgKytpKSB7XHJcbiAgICAgIHRoaXMuX3RyW2ldID0gdHJbaV07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDooYzliJfjgpLmta7li5XlsI/mlbDngrnmlbDjga7phY3liJfjgaflj5blvpdcclxuICAgKlxyXG4gICAqIEByZXR1cm4gMTblgIvjga7mta7li5XlsI/mlbDngrnmlbDjgafooajjgZXjgozjgos0eDTjga7ooYzliJdcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0QXJyYXkoKTogRmxvYXQzMkFycmF5IHtcclxuICAgIHJldHVybiB0aGlzLl90cjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFjou7jjga7mi6HlpKfnjofjgpLlj5blvpdcclxuICAgKiBAcmV0dXJuIFjou7jjga7mi6HlpKfnjodcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0U2NhbGVYKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fdHJbMF07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBZ6Lu444Gu5ouh5aSn546H44KS5Y+W5b6X44GZ44KLXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIFnou7jjga7mi6HlpKfnjodcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0U2NhbGVZKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fdHJbNV07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBY6Lu444Gu56e75YuV6YeP44KS5Y+W5b6XXHJcbiAgICogQHJldHVybiBY6Lu444Gu56e75YuV6YePXHJcbiAgICovXHJcbiAgcHVibGljIGdldFRyYW5zbGF0ZVgoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl90clsxMl07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBZ6Lu444Gu56e75YuV6YeP44KS5Y+W5b6XXHJcbiAgICogQHJldHVybiBZ6Lu444Gu56e75YuV6YePXHJcbiAgICovXHJcbiAgcHVibGljIGdldFRyYW5zbGF0ZVkoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl90clsxM107XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBY6Lu444Gu5YCk44KS54++5Zyo44Gu6KGM5YiX44Gn6KiI566XXHJcbiAgICpcclxuICAgKiBAcGFyYW0gc3JjIFjou7jjga7lgKRcclxuICAgKiBAcmV0dXJuIOePvuWcqOOBruihjOWIl+OBp+ioiOeul+OBleOCjOOBn1jou7jjga7lgKRcclxuICAgKi9cclxuICBwdWJsaWMgdHJhbnNmb3JtWChzcmM6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fdHJbMF0gKiBzcmMgKyB0aGlzLl90clsxMl07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBZ6Lu444Gu5YCk44KS54++5Zyo44Gu6KGM5YiX44Gn6KiI566XXHJcbiAgICpcclxuICAgKiBAcGFyYW0gc3JjIFnou7jjga7lgKRcclxuICAgKiBAcmV0dXJuIOePvuWcqOOBruihjOWIl+OBp+ioiOeul+OBleOCjOOBn1nou7jjga7lgKRcclxuICAgKi9cclxuICBwdWJsaWMgdHJhbnNmb3JtWShzcmM6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fdHJbNV0gKiBzcmMgKyB0aGlzLl90clsxM107XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBY6Lu444Gu5YCk44KS54++5Zyo44Gu6KGM5YiX44Gn6YCG6KiI566XXHJcbiAgICovXHJcbiAgcHVibGljIGludmVydFRyYW5zZm9ybVgoc3JjOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIChzcmMgLSB0aGlzLl90clsxMl0pIC8gdGhpcy5fdHJbMF07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBZ6Lu444Gu5YCk44KS54++5Zyo44Gu6KGM5YiX44Gn6YCG6KiI566XXHJcbiAgICovXHJcbiAgcHVibGljIGludmVydFRyYW5zZm9ybVkoc3JjOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIChzcmMgLSB0aGlzLl90clsxM10pIC8gdGhpcy5fdHJbNV07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDnj77lnKjjga7ooYzliJfjga7kvY3nva7jgpLotbfngrnjgavjgZfjgabnp7vli5VcclxuICAgKlxyXG4gICAqIOePvuWcqOOBruihjOWIl+OBruS9jee9ruOCkui1t+eCueOBq+OBl+OBpuebuOWvvueahOOBq+enu+WLleOBmeOCi+OAglxyXG4gICAqXHJcbiAgICogQHBhcmFtIHggWOi7uOOBruenu+WLlemHj1xyXG4gICAqIEBwYXJhbSB5IFnou7jjga7np7vli5Xph49cclxuICAgKi9cclxuICBwdWJsaWMgdHJhbnNsYXRlUmVsYXRpdmUoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGNvbnN0IHRyMTogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShbXHJcbiAgICAgIDEuMCxcclxuICAgICAgMC4wLFxyXG4gICAgICAwLjAsXHJcbiAgICAgIDAuMCxcclxuICAgICAgMC4wLFxyXG4gICAgICAxLjAsXHJcbiAgICAgIDAuMCxcclxuICAgICAgMC4wLFxyXG4gICAgICAwLjAsXHJcbiAgICAgIDAuMCxcclxuICAgICAgMS4wLFxyXG4gICAgICAwLjAsXHJcbiAgICAgIHgsXHJcbiAgICAgIHksXHJcbiAgICAgIDAuMCxcclxuICAgICAgMS4wXHJcbiAgICBdKTtcclxuXHJcbiAgICBDdWJpc21NYXRyaXg0NC5tdWx0aXBseSh0cjEsIHRoaXMuX3RyLCB0aGlzLl90cik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDnj77lnKjjga7ooYzliJfjga7kvY3nva7jgpLnp7vli5VcclxuICAgKlxyXG4gICAqIOePvuWcqOOBruihjOWIl+OBruS9jee9ruOCkuaMh+WumuOBl+OBn+S9jee9ruOBuOenu+WLleOBmeOCi1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHggWOi7uOOBruenu+WLlemHj1xyXG4gICAqIEBwYXJhbSB5IHnou7jjga7np7vli5Xph49cclxuICAgKi9cclxuICBwdWJsaWMgdHJhbnNsYXRlKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLl90clsxMl0gPSB4O1xyXG4gICAgdGhpcy5fdHJbMTNdID0geTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOePvuWcqOOBruihjOWIl+OBrljou7jjga7kvY3nva7jgpLmjIflrprjgZfjgZ/kvY3nva7jgbjnp7vli5XjgZnjgotcclxuICAgKlxyXG4gICAqIEBwYXJhbSB4IFjou7jjga7np7vli5Xph49cclxuICAgKi9cclxuICBwdWJsaWMgdHJhbnNsYXRlWCh4OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuX3RyWzEyXSA9IHg7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDnj77lnKjjga7ooYzliJfjga5Z6Lu444Gu5L2N572u44KS5oyH5a6a44GX44Gf5L2N572u44G456e75YuV44GZ44KLXHJcbiAgICpcclxuICAgKiBAcGFyYW0geSBZ6Lu444Gu56e75YuV6YePXHJcbiAgICovXHJcbiAgcHVibGljIHRyYW5zbGF0ZVkoeTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLl90clsxM10gPSB5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog54++5Zyo44Gu6KGM5YiX44Gu5ouh5aSn546H44KS55u45a++55qE44Gr6Kit5a6a44GZ44KLXHJcbiAgICpcclxuICAgKiBAcGFyYW0geCBY6Lu444Gu5ouh5aSn546HXHJcbiAgICogQHBhcmFtIHkgWei7uOOBruaLoeWkp+eOh1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzY2FsZVJlbGF0aXZlKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBjb25zdCB0cjE6IEZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoW1xyXG4gICAgICB4LFxyXG4gICAgICAwLjAsXHJcbiAgICAgIDAuMCxcclxuICAgICAgMC4wLFxyXG4gICAgICAwLjAsXHJcbiAgICAgIHksXHJcbiAgICAgIDAuMCxcclxuICAgICAgMC4wLFxyXG4gICAgICAwLjAsXHJcbiAgICAgIDAuMCxcclxuICAgICAgMS4wLFxyXG4gICAgICAwLjAsXHJcbiAgICAgIDAuMCxcclxuICAgICAgMC4wLFxyXG4gICAgICAwLjAsXHJcbiAgICAgIDEuMFxyXG4gICAgXSk7XHJcblxyXG4gICAgQ3ViaXNtTWF0cml4NDQubXVsdGlwbHkodHIxLCB0aGlzLl90ciwgdGhpcy5fdHIpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog54++5Zyo44Gu6KGM5YiX44Gu5ouh5aSn546H44KS5oyH5a6a44GX44Gf5YCN546H44Gr6Kit5a6a44GZ44KLXHJcbiAgICpcclxuICAgKiBAcGFyYW0geCBY6Lu444Gu5ouh5aSn546HXHJcbiAgICogQHBhcmFtIHkgWei7uOOBruaLoeWkp+eOh1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzY2FsZSh4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5fdHJbMF0gPSB4O1xyXG4gICAgdGhpcy5fdHJbNV0gPSB5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog54++5Zyo44Gu6KGM5YiX44Gr6KGM5YiX44KS5LmX566XXHJcbiAgICpcclxuICAgKiBAcGFyYW0gbSDooYzliJdcclxuICAgKi9cclxuICBwdWJsaWMgbXVsdGlwbHlCeU1hdHJpeChtOiBDdWJpc21NYXRyaXg0NCk6IHZvaWQge1xyXG4gICAgQ3ViaXNtTWF0cml4NDQubXVsdGlwbHkobS5nZXRBcnJheSgpLCB0aGlzLl90ciwgdGhpcy5fdHIpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Kq44OW44K444Kn44Kv44OI44Gu44Kz44OU44O844KS55Sf5oiQ44GZ44KLXHJcbiAgICovXHJcbiAgcHVibGljIGNsb25lKCk6IEN1YmlzbU1hdHJpeDQ0IHtcclxuICAgIGNvbnN0IGNsb25lTWF0cml4OiBDdWJpc21NYXRyaXg0NCA9IG5ldyBDdWJpc21NYXRyaXg0NCgpO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fdHIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY2xvbmVNYXRyaXguX3RyW2ldID0gdGhpcy5fdHJbaV07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNsb25lTWF0cml4O1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIF90cjogRmxvYXQzMkFycmF5OyAvLyA0eDTooYzliJfjg4fjg7zjgr9cclxufVxyXG5cclxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXHJcbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21tYXRyaXg0NCc7XHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcclxuICBleHBvcnQgY29uc3QgQ3ViaXNtTWF0cml4NDQgPSAkLkN1YmlzbU1hdHJpeDQ0O1xyXG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1hdHJpeDQ0ID0gJC5DdWJpc21NYXRyaXg0NDtcclxufVxyXG4iLCIvKipcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IGNzbU1hcCwgaXRlcmF0b3IgfSBmcm9tICcuLi90eXBlL2NzbW1hcCc7XHJcbmltcG9ydCB7IEN1YmlzbU1hdHJpeDQ0IH0gZnJvbSAnLi9jdWJpc21tYXRyaXg0NCc7XHJcblxyXG4vKipcclxuICog44Oi44OH44Or5bqn5qiZ6Kit5a6a55So44GuNHg06KGM5YiXXHJcbiAqXHJcbiAqIOODouODh+ODq+W6p+aomeioreWumueUqOOBrjR4NOihjOWIl+OCr+ODqeOCuVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEN1YmlzbU1vZGVsTWF0cml4IGV4dGVuZHMgQ3ViaXNtTWF0cml4NDQge1xyXG4gIC8qKlxyXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHcg5qiq5bmFXHJcbiAgICogQHBhcmFtIGgg57im5bmFXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Iodz86IG51bWJlciwgaD86IG51bWJlcikge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICB0aGlzLl93aWR0aCA9IHcgIT09IHVuZGVmaW5lZCA/IHcgOiAwLjA7XHJcbiAgICB0aGlzLl9oZWlnaHQgPSBoICE9PSB1bmRlZmluZWQgPyBoIDogMC4wO1xyXG5cclxuICAgIHRoaXMuc2V0SGVpZ2h0KDIuMCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmqKrluYXjgpLoqK3lrppcclxuICAgKlxyXG4gICAqIEBwYXJhbSB3IOaoquW5hVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRXaWR0aCh3OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGNvbnN0IHNjYWxlWDogbnVtYmVyID0gdyAvIHRoaXMuX3dpZHRoO1xyXG4gICAgY29uc3Qgc2NhbGVZOiBudW1iZXIgPSBzY2FsZVg7XHJcbiAgICB0aGlzLnNjYWxlKHNjYWxlWCwgc2NhbGVZKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOe4puW5heOCkuioreWumlxyXG4gICAqIEBwYXJhbSBoIOe4puW5hVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRIZWlnaHQoaDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBjb25zdCBzY2FsZVg6IG51bWJlciA9IGggLyB0aGlzLl9oZWlnaHQ7XHJcbiAgICBjb25zdCBzY2FsZVk6IG51bWJlciA9IHNjYWxlWDtcclxuICAgIHRoaXMuc2NhbGUoc2NhbGVYLCBzY2FsZVkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5L2N572u44KS6Kit5a6aXHJcbiAgICpcclxuICAgKiBAcGFyYW0geCBY6Lu444Gu5L2N572uXHJcbiAgICogQHBhcmFtIHkgWei7uOOBruS9jee9rlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRQb3NpdGlvbih4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy50cmFuc2xhdGUoeCwgeSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDkuK3lv4PkvY3nva7jgpLoqK3lrppcclxuICAgKlxyXG4gICAqIEBwYXJhbSB4IFjou7jjga7kuK3lv4PkvY3nva5cclxuICAgKiBAcGFyYW0geSBZ6Lu444Gu5Lit5b+D5L2N572uXHJcbiAgICpcclxuICAgKiBAbm90ZSB3aWR0aOOBi2hlaWdodOOCkuioreWumuOBl+OBn+OBguOBqOOBp+OBquOBhOOBqOOAgeaLoeWkp+eOh+OBjOato+OBl+OBj+WPluW+l+OBp+OBjeOBquOBhOOBn+OCgeOBmuOCjOOCi+OAglxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRDZW50ZXJQb3NpdGlvbih4OiBudW1iZXIsIHk6IG51bWJlcikge1xyXG4gICAgdGhpcy5jZW50ZXJYKHgpO1xyXG4gICAgdGhpcy5jZW50ZXJZKHkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5LiK6L6644Gu5L2N572u44KS6Kit5a6a44GZ44KLXHJcbiAgICpcclxuICAgKiBAcGFyYW0geSDkuIrovrrjga5Z6Lu45L2N572uXHJcbiAgICovXHJcbiAgcHVibGljIHRvcCh5OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuc2V0WSh5KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOS4i+i+uuOBruS9jee9ruOCkuioreWumuOBmeOCi1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHkg5LiL6L6644GuWei7uOS9jee9rlxyXG4gICAqL1xyXG4gIHB1YmxpYyBib3R0b20oeTogbnVtYmVyKSB7XHJcbiAgICBjb25zdCBoOiBudW1iZXIgPSB0aGlzLl9oZWlnaHQgKiB0aGlzLmdldFNjYWxlWSgpO1xyXG5cclxuICAgIHRoaXMudHJhbnNsYXRlWSh5IC0gaCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlt6bovrrjga7kvY3nva7jgpLoqK3lrppcclxuICAgKlxyXG4gICAqIEBwYXJhbSB4IOW3pui+uuOBrljou7jkvY3nva5cclxuICAgKi9cclxuICBwdWJsaWMgbGVmdCh4OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuc2V0WCh4KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWPs+i+uuOBruS9jee9ruOCkuioreWumlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHgg5Y+z6L6644GuWOi7uOS9jee9rlxyXG4gICAqL1xyXG4gIHB1YmxpYyByaWdodCh4OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGNvbnN0IHcgPSB0aGlzLl93aWR0aCAqIHRoaXMuZ2V0U2NhbGVYKCk7XHJcblxyXG4gICAgdGhpcy50cmFuc2xhdGVYKHggLSB3KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFjou7jjga7kuK3lv4PkvY3nva7jgpLoqK3lrppcclxuICAgKlxyXG4gICAqIEBwYXJhbSB4IFjou7jjga7kuK3lv4PkvY3nva5cclxuICAgKi9cclxuICBwdWJsaWMgY2VudGVyWCh4OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGNvbnN0IHcgPSB0aGlzLl93aWR0aCAqIHRoaXMuZ2V0U2NhbGVYKCk7XHJcblxyXG4gICAgdGhpcy50cmFuc2xhdGVYKHggLSB3IC8gMi4wKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFjou7jjga7kvY3nva7jgpLoqK3lrppcclxuICAgKlxyXG4gICAqIEBwYXJhbSB4IFjou7jjga7kvY3nva5cclxuICAgKi9cclxuICBwdWJsaWMgc2V0WCh4OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMudHJhbnNsYXRlWCh4KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFnou7jjga7kuK3lv4PkvY3nva7jgpLoqK3lrppcclxuICAgKlxyXG4gICAqIEBwYXJhbSB5IFnou7jjga7kuK3lv4PkvY3nva5cclxuICAgKi9cclxuICBwdWJsaWMgY2VudGVyWSh5OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGNvbnN0IGg6IG51bWJlciA9IHRoaXMuX2hlaWdodCAqIHRoaXMuZ2V0U2NhbGVZKCk7XHJcblxyXG4gICAgdGhpcy50cmFuc2xhdGVZKHkgLSBoIC8gMi4wKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFnou7jjga7kvY3nva7jgpLoqK3lrprjgZnjgotcclxuICAgKlxyXG4gICAqIEBwYXJhbSB5IFnou7jjga7kvY3nva5cclxuICAgKi9cclxuICBwdWJsaWMgc2V0WSh5OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMudHJhbnNsYXRlWSh5KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODrOOCpOOCouOCpuODiOaDheWgseOBi+OCieS9jee9ruOCkuioreWumlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGxheW91dCDjg6zjgqTjgqLjgqbjg4jmg4XloLFcclxuICAgKi9cclxuICBwdWJsaWMgc2V0dXBGcm9tTGF5b3V0KGxheW91dDogY3NtTWFwPHN0cmluZywgbnVtYmVyPik6IHZvaWQge1xyXG4gICAgY29uc3Qga2V5V2lkdGggPSAnd2lkdGgnO1xyXG4gICAgY29uc3Qga2V5SGVpZ2h0ID0gJ2hlaWdodCc7XHJcbiAgICBjb25zdCBrZXlYID0gJ3gnO1xyXG4gICAgY29uc3Qga2V5WSA9ICd5JztcclxuICAgIGNvbnN0IGtleUNlbnRlclggPSAnY2VudGVyX3gnO1xyXG4gICAgY29uc3Qga2V5Q2VudGVyWSA9ICdjZW50ZXJfeSc7XHJcbiAgICBjb25zdCBrZXlUb3AgPSAndG9wJztcclxuICAgIGNvbnN0IGtleUJvdHRvbSA9ICdib3R0b20nO1xyXG4gICAgY29uc3Qga2V5TGVmdCA9ICdsZWZ0JztcclxuICAgIGNvbnN0IGtleVJpZ2h0ID0gJ3JpZ2h0JztcclxuXHJcbiAgICBmb3IgKFxyXG4gICAgICBjb25zdCBpdGU6IGl0ZXJhdG9yPHN0cmluZywgbnVtYmVyPiA9IGxheW91dC5iZWdpbigpO1xyXG4gICAgICBpdGUubm90RXF1YWwobGF5b3V0LmVuZCgpKTtcclxuICAgICAgaXRlLnByZUluY3JlbWVudCgpXHJcbiAgICApIHtcclxuICAgICAgY29uc3Qga2V5OiBzdHJpbmcgPSBpdGUucHRyKCkuZmlyc3Q7XHJcbiAgICAgIGNvbnN0IHZhbHVlOiBudW1iZXIgPSBpdGUucHRyKCkuc2Vjb25kO1xyXG5cclxuICAgICAgaWYgKGtleSA9PSBrZXlXaWR0aCkge1xyXG4gICAgICAgIHRoaXMuc2V0V2lkdGgodmFsdWUpO1xyXG4gICAgICB9IGVsc2UgaWYgKGtleSA9PSBrZXlIZWlnaHQpIHtcclxuICAgICAgICB0aGlzLnNldEhlaWdodCh2YWx1ZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmb3IgKFxyXG4gICAgICBjb25zdCBpdGU6IGl0ZXJhdG9yPHN0cmluZywgbnVtYmVyPiA9IGxheW91dC5iZWdpbigpO1xyXG4gICAgICBpdGUubm90RXF1YWwobGF5b3V0LmVuZCgpKTtcclxuICAgICAgaXRlLnByZUluY3JlbWVudCgpXHJcbiAgICApIHtcclxuICAgICAgY29uc3Qga2V5OiBzdHJpbmcgPSBpdGUucHRyKCkuZmlyc3Q7XHJcbiAgICAgIGNvbnN0IHZhbHVlOiBudW1iZXIgPSBpdGUucHRyKCkuc2Vjb25kO1xyXG5cclxuICAgICAgaWYgKGtleSA9PSBrZXlYKSB7XHJcbiAgICAgICAgdGhpcy5zZXRYKHZhbHVlKTtcclxuICAgICAgfSBlbHNlIGlmIChrZXkgPT0ga2V5WSkge1xyXG4gICAgICAgIHRoaXMuc2V0WSh2YWx1ZSk7XHJcbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09IGtleUNlbnRlclgpIHtcclxuICAgICAgICB0aGlzLmNlbnRlclgodmFsdWUpO1xyXG4gICAgICB9IGVsc2UgaWYgKGtleSA9PSBrZXlDZW50ZXJZKSB7XHJcbiAgICAgICAgdGhpcy5jZW50ZXJZKHZhbHVlKTtcclxuICAgICAgfSBlbHNlIGlmIChrZXkgPT0ga2V5VG9wKSB7XHJcbiAgICAgICAgdGhpcy50b3AodmFsdWUpO1xyXG4gICAgICB9IGVsc2UgaWYgKGtleSA9PSBrZXlCb3R0b20pIHtcclxuICAgICAgICB0aGlzLmJvdHRvbSh2YWx1ZSk7XHJcbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09IGtleUxlZnQpIHtcclxuICAgICAgICB0aGlzLmxlZnQodmFsdWUpO1xyXG4gICAgICB9IGVsc2UgaWYgKGtleSA9PSBrZXlSaWdodCkge1xyXG4gICAgICAgIHRoaXMucmlnaHQodmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF93aWR0aDogbnVtYmVyOyAvLyDmqKrluYVcclxuICBwcml2YXRlIF9oZWlnaHQ6IG51bWJlcjsgLy8g57im5bmFXHJcbn1cclxuXHJcbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxyXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtbW9kZWxtYXRyaXgnO1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vZGVsTWF0cml4ID0gJC5DdWJpc21Nb2RlbE1hdHJpeDtcclxuICBleHBvcnQgdHlwZSBDdWJpc21Nb2RlbE1hdHJpeCA9ICQuQ3ViaXNtTW9kZWxNYXRyaXg7XHJcbn1cclxuIiwiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQgeyBDdWJpc21NYXRoIH0gZnJvbSAnLi9jdWJpc21tYXRoJztcclxuXHJcbmNvbnN0IEZyYW1lUmF0ZSA9IDMwO1xyXG5jb25zdCBFcHNpbG9uID0gMC4wMTtcclxuXHJcbi8qKlxyXG4gKiDpoZTjga7lkJHjgY3jga7liLblvqHmqZ/og71cclxuICpcclxuICog6aGU44Gu5ZCR44GN44Gu5Yi25b6h5qmf6IO944KS5o+Q5L6b44GZ44KL44Kv44Op44K544CCXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ3ViaXNtVGFyZ2V0UG9pbnQge1xyXG4gIC8qKlxyXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuX2ZhY2VUYXJnZXRYID0gMC4wO1xyXG4gICAgdGhpcy5fZmFjZVRhcmdldFkgPSAwLjA7XHJcbiAgICB0aGlzLl9mYWNlWCA9IDAuMDtcclxuICAgIHRoaXMuX2ZhY2VZID0gMC4wO1xyXG4gICAgdGhpcy5fZmFjZVZYID0gMC4wO1xyXG4gICAgdGhpcy5fZmFjZVZZID0gMC4wO1xyXG4gICAgdGhpcy5fbGFzdFRpbWVTZWNvbmRzID0gMC4wO1xyXG4gICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzID0gMC4wO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5pu05paw5Yem55CGXHJcbiAgICovXHJcbiAgcHVibGljIHVwZGF0ZShkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIC8vIOODh+ODq+OCv+aZgumWk+OCkuWKoOeul+OBmeOCi1xyXG4gICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzICs9IGRlbHRhVGltZVNlY29uZHM7XHJcblxyXG4gICAgLy8g6aaW44KS5Lit5aSu44GL44KJ5bem5Y+z44Gr5oyv44KL44Go44GN44Gu5bmz5Z2H55qE44Gq6YCf44GV44GvIOenkumAn+W6puOAguWKoOmAn+ODu+a4m+mAn+OCkuiAg+aFruOBl+OBpuOAgeOBneOBru+8kuWAjeOCkuacgOmrmOmAn+W6puOBqOOBmeOCi1xyXG4gICAgLy8g6aGU44Gu5oyv44KK5YW35ZCI44KS44CB5Lit5aSu77yIMC4w77yJ44GL44KJ44CB5bem5Y+z44Gv77yIKy0xLjDvvInjgajjgZnjgotcclxuICAgIGNvbnN0IGZhY2VQYXJhbU1heFY6IG51bWJlciA9IDQwLjAgLyAxMC4wOyAvLyA3LjXnp5LplpPjgas0MOWIhuenu+WLlSg1LjMvc2MpXHJcbiAgICBjb25zdCBtYXhWOiBudW1iZXIgPSAoZmFjZVBhcmFtTWF4ViAqIDEuMCkgLyBGcmFtZVJhdGU7IC8vIDFmcmFtZeOBguOBn+OCiuOBq+WkieWMluOBp+OBjeOCi+mAn+W6puOBruS4iumZkFxyXG5cclxuICAgIGlmICh0aGlzLl9sYXN0VGltZVNlY29uZHMgPT0gMC4wKSB7XHJcbiAgICAgIHRoaXMuX2xhc3RUaW1lU2Vjb25kcyA9IHRoaXMuX3VzZXJUaW1lU2Vjb25kcztcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGRlbHRhVGltZVdlaWdodDogbnVtYmVyID1cclxuICAgICAgKHRoaXMuX3VzZXJUaW1lU2Vjb25kcyAtIHRoaXMuX2xhc3RUaW1lU2Vjb25kcykgKiBGcmFtZVJhdGU7XHJcbiAgICB0aGlzLl9sYXN0VGltZVNlY29uZHMgPSB0aGlzLl91c2VyVGltZVNlY29uZHM7XHJcblxyXG4gICAgLy8g5pyA6auY6YCf5bqm44Gr44Gq44KL44G+44Gn44Gu5pmC6ZaT44KSXHJcbiAgICBjb25zdCB0aW1lVG9NYXhTcGVlZCA9IDAuMTU7XHJcbiAgICBjb25zdCBmcmFtZVRvTWF4U3BlZWQ6IG51bWJlciA9IHRpbWVUb01heFNwZWVkICogRnJhbWVSYXRlOyAvLyBzZWMgKiBmcmFtZS9zZWNcclxuICAgIGNvbnN0IG1heEE6IG51bWJlciA9IChkZWx0YVRpbWVXZWlnaHQgKiBtYXhWKSAvIGZyYW1lVG9NYXhTcGVlZDsgLy8gMWZyYW1l44GC44Gf44KK44Gu5Yqg6YCf5bqmXHJcblxyXG4gICAgLy8g55uu5oyH44GZ5ZCR44GN44Gv44CB77yIZHgsIGR577yJ5pa55ZCR44Gu44OZ44Kv44OI44Or44Go44Gq44KLXHJcbiAgICBjb25zdCBkeDogbnVtYmVyID0gdGhpcy5fZmFjZVRhcmdldFggLSB0aGlzLl9mYWNlWDtcclxuICAgIGNvbnN0IGR5OiBudW1iZXIgPSB0aGlzLl9mYWNlVGFyZ2V0WSAtIHRoaXMuX2ZhY2VZO1xyXG5cclxuICAgIGlmIChDdWJpc21NYXRoLmFicyhkeCkgPD0gRXBzaWxvbiAmJiBDdWJpc21NYXRoLmFicyhkeSkgPD0gRXBzaWxvbikge1xyXG4gICAgICByZXR1cm47IC8vIOWkieWMluOBquOBl1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOmAn+W6puOBruacgOWkp+OCiOOCiuOCguWkp+OBjeOBhOWgtOWQiOOBr+OAgemAn+W6puOCkuiQveOBqOOBmVxyXG4gICAgY29uc3QgZDogbnVtYmVyID0gQ3ViaXNtTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcclxuXHJcbiAgICAvLyDpgLLooYzmlrnlkJHjga7mnIDlpKfpgJ/luqbjg5njgq/jg4jjg6tcclxuICAgIGNvbnN0IHZ4OiBudW1iZXIgPSAobWF4ViAqIGR4KSAvIGQ7XHJcbiAgICBjb25zdCB2eTogbnVtYmVyID0gKG1heFYgKiBkeSkgLyBkO1xyXG5cclxuICAgIC8vIOePvuWcqOOBrumAn+W6puOBi+OCieOAgeaWsOimj+mAn+W6puOBuOOBruWkieWMlu+8iOWKoOmAn+W6pu+8ieOCkuaxguOCgeOCi1xyXG4gICAgbGV0IGF4OiBudW1iZXIgPSB2eCAtIHRoaXMuX2ZhY2VWWDtcclxuICAgIGxldCBheTogbnVtYmVyID0gdnkgLSB0aGlzLl9mYWNlVlk7XHJcblxyXG4gICAgY29uc3QgYTogbnVtYmVyID0gQ3ViaXNtTWF0aC5zcXJ0KGF4ICogYXggKyBheSAqIGF5KTtcclxuXHJcbiAgICAvLyDliqDpgJ/jga7jgajjgY1cclxuICAgIGlmIChhIDwgLW1heEEgfHwgYSA+IG1heEEpIHtcclxuICAgICAgYXggKj0gbWF4QSAvIGE7XHJcbiAgICAgIGF5ICo9IG1heEEgLyBhO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOWKoOmAn+W6puOCkuWFg+OBrumAn+W6puOBq+i2s+OBl+OBpuOAgeaWsOmAn+W6puOBqOOBmeOCi1xyXG4gICAgdGhpcy5fZmFjZVZYICs9IGF4O1xyXG4gICAgdGhpcy5fZmFjZVZZICs9IGF5O1xyXG5cclxuICAgIC8vIOebrueahOOBruaWueWQkeOBq+i/keOBpeOBhOOBn+OBqOOBjeOAgea7keOCieOBi+OBq+a4m+mAn+OBmeOCi+OBn+OCgeOBruWHpueQhlxyXG4gICAgLy8g6Kit5a6a44GV44KM44Gf5Yqg6YCf5bqm44Gn5q2i44G+44KL5LqL44Gu5Ye65p2l44KL6Led6Zui44Go6YCf5bqm44Gu6Zai5L+C44GL44KJXHJcbiAgICAvLyDnj77lnKjjgajjgorjgYbjgovmnIDpq5jpgJ/luqbjgpLoqIjnrpfjgZfjgIHjgZ3jgozku6XkuIrjga7mmYLjga/pgJ/luqbjgpLokL3jgajjgZlcclxuICAgIC8vIOKAu+acrOadpeOAgeS6uumWk+OBr+eti+WKm+OBp+WKm++8iOWKoOmAn+W6pu+8ieOCkuiqv+aVtOOBp+OBjeOCi+OBn+OCgeOAgeOCiOOCiuiHqueUseW6puOBjOmrmOOBhOOBjOOAgeewoeWNmOOBquWHpueQhuOBp+a4iOOBvuOBm+OBpuOBhOOCi1xyXG4gICAge1xyXG4gICAgICAvLyDliqDpgJ/luqbjgIHpgJ/luqbjgIHot53pm6Ljga7plqLkv4LlvI/jgIJcclxuICAgICAgLy8gICAgICAgICAgICAyICA2ICAgICAgICAgICAyICAgICAgICAgICAgICAgM1xyXG4gICAgICAvLyAgICAgIHNxcnQoYSAgdCAgKyAxNiBhIGggdCAgLSA4IGEgaCkgLSBhIHRcclxuICAgICAgLy8gdiA9IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAyXHJcbiAgICAgIC8vICAgICAgICAgICAgICAgICA0IHQgIC0gMlxyXG4gICAgICAvLyAodD0xKVxyXG4gICAgICAvLyBcdOaZguWIu3Tjga/jgIHjgYLjgonjgYvjgZjjgoHliqDpgJ/luqbjgIHpgJ/luqbjgpIxLzYwKOODleODrOODvOODoOODrOODvOODiOOAgeWNmOS9jeOBquOBlynjgadcclxuICAgICAgLy8gXHTogIPjgYjjgabjgYTjgovjga7jgafjgIF077yd77yR44Go44GX44Gm5raI44GX44Gm44KI44GE77yI4oC75pyq5qSc6Ki877yJXHJcblxyXG4gICAgICBjb25zdCBtYXhWOiBudW1iZXIgPVxyXG4gICAgICAgIDAuNSAqXHJcbiAgICAgICAgKEN1YmlzbU1hdGguc3FydChtYXhBICogbWF4QSArIDE2LjAgKiBtYXhBICogZCAtIDguMCAqIG1heEEgKiBkKSAtXHJcbiAgICAgICAgICBtYXhBKTtcclxuICAgICAgY29uc3QgY3VyVjogbnVtYmVyID0gQ3ViaXNtTWF0aC5zcXJ0KFxyXG4gICAgICAgIHRoaXMuX2ZhY2VWWCAqIHRoaXMuX2ZhY2VWWCArIHRoaXMuX2ZhY2VWWSAqIHRoaXMuX2ZhY2VWWVxyXG4gICAgICApO1xyXG5cclxuICAgICAgaWYgKGN1clYgPiBtYXhWKSB7XHJcbiAgICAgICAgLy8g54++5Zyo44Gu6YCf5bqmID4g5pyA6auY6YCf5bqm44Gu44Go44GN44CB5pyA6auY6YCf5bqm44G+44Gn5rib6YCfXHJcbiAgICAgICAgdGhpcy5fZmFjZVZYICo9IG1heFYgLyBjdXJWO1xyXG4gICAgICAgIHRoaXMuX2ZhY2VWWSAqPSBtYXhWIC8gY3VyVjtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2ZhY2VYICs9IHRoaXMuX2ZhY2VWWDtcclxuICAgIHRoaXMuX2ZhY2VZICs9IHRoaXMuX2ZhY2VWWTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFjou7jjga7poZTjga7lkJHjgY3jga7lgKTjgpLlj5blvpdcclxuICAgKlxyXG4gICAqIEByZXR1cm4gWOi7uOOBrumhlOOBruWQkeOBjeOBruWApO+8iC0xLjAgfiAxLjDvvIlcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0WCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2ZhY2VYO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogWei7uOOBrumhlOOBruWQkeOBjeOBruWApOOCkuWPluW+l1xyXG4gICAqXHJcbiAgICogQHJldHVybiBZ6Lu444Gu6aGU44Gu5ZCR44GN44Gu5YCk77yILTEuMCB+IDEuMO+8iVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRZKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fZmFjZVk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDpoZTjga7lkJHjgY3jga7nm67mqJnlgKTjgpLoqK3lrppcclxuICAgKlxyXG4gICAqIEBwYXJhbSB4IFjou7jjga7poZTjga7lkJHjgY3jga7lgKTvvIgtMS4wIH4gMS4w77yJXHJcbiAgICogQHBhcmFtIHkgWei7uOOBrumhlOOBruWQkeOBjeOBruWApO+8iC0xLjAgfiAxLjDvvIlcclxuICAgKi9cclxuICBwdWJsaWMgc2V0KHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLl9mYWNlVGFyZ2V0WCA9IHg7XHJcbiAgICB0aGlzLl9mYWNlVGFyZ2V0WSA9IHk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF9mYWNlVGFyZ2V0WDogbnVtYmVyOyAvLyDpoZTjga7lkJHjgY3jga5Y55uu5qiZ5YCk77yI44GT44Gu5YCk44Gr6L+R44Gl44GE44Gm44GE44GP77yJXHJcbiAgcHJpdmF0ZSBfZmFjZVRhcmdldFk6IG51bWJlcjsgLy8g6aGU44Gu5ZCR44GN44GuWeebruaomeWApO+8iOOBk+OBruWApOOBq+i/keOBpeOBhOOBpuOBhOOBj++8iVxyXG4gIHByaXZhdGUgX2ZhY2VYOiBudW1iZXI7IC8vIOmhlOOBruWQkeOBjVjvvIgtMS4wIH4gMS4w77yJXHJcbiAgcHJpdmF0ZSBfZmFjZVk6IG51bWJlcjsgLy8g6aGU44Gu5ZCR44GNWe+8iC0xLjAgfiAxLjDvvIlcclxuICBwcml2YXRlIF9mYWNlVlg6IG51bWJlcjsgLy8g6aGU44Gu5ZCR44GN44Gu5aSJ5YyW6YCf5bqmWFxyXG4gIHByaXZhdGUgX2ZhY2VWWTogbnVtYmVyOyAvLyDpoZTjga7lkJHjgY3jga7lpInljJbpgJ/luqZZXHJcbiAgcHJpdmF0ZSBfbGFzdFRpbWVTZWNvbmRzOiBudW1iZXI7IC8vIOacgOW+jOOBruWun+ihjOaZgumWk1vnp5JdXHJcbiAgcHJpdmF0ZSBfdXNlclRpbWVTZWNvbmRzOiBudW1iZXI7IC8vIOODh+ODq+OCv+aZgumWk+OBruepjeeul+WApFvnp5JdXHJcbn1cclxuXHJcbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxyXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtdGFyZ2V0cG9pbnQnO1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVRhcmdldFBvaW50ID0gJC5DdWJpc21UYXJnZXRQb2ludDtcclxuICBleHBvcnQgdHlwZSBDdWJpc21UYXJnZXRQb2ludCA9ICQuQ3ViaXNtVGFyZ2V0UG9pbnQ7XHJcbn1cclxuIiwiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG4vKipcclxuICogMuasoeWFg+ODmeOCr+ODiOODq+Wei1xyXG4gKlxyXG4gKiAy5qyh5YWD44OZ44Kv44OI44Or5Z6L44Gu5qmf6IO944KS5o+Q5L6b44GZ44KL44CCXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ3ViaXNtVmVjdG9yMiB7XHJcbiAgLyoqXHJcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyB4PzogbnVtYmVyLCBwdWJsaWMgeT86IG51bWJlcikge1xyXG4gICAgdGhpcy54ID0geCA9PSB1bmRlZmluZWQgPyAwLjAgOiB4O1xyXG5cclxuICAgIHRoaXMueSA9IHkgPT0gdW5kZWZpbmVkID8gMC4wIDogeTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODmeOCr+ODiOODq+OBruWKoOeul1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHZlY3RvcjIg5Yqg566X44GZ44KL44OZ44Kv44OI44Or5YCkXHJcbiAgICogQHJldHVybiDliqDnrpfntZDmnpwg44OZ44Kv44OI44Or5YCkXHJcbiAgICovXHJcbiAgcHVibGljIGFkZCh2ZWN0b3IyOiBDdWJpc21WZWN0b3IyKTogQ3ViaXNtVmVjdG9yMiB7XHJcbiAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XHJcbiAgICByZXQueCA9IHRoaXMueCArIHZlY3RvcjIueDtcclxuICAgIHJldC55ID0gdGhpcy55ICsgdmVjdG9yMi55O1xyXG4gICAgcmV0dXJuIHJldDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODmeOCr+ODiOODq+OBrua4m+eul1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHZlY3RvcjIg5rib566X44GZ44KL44OZ44Kv44OI44Or5YCkXHJcbiAgICogQHJldHVybiDmuJvnrpfntZDmnpwg44OZ44Kv44OI44Or5YCkXHJcbiAgICovXHJcbiAgcHVibGljIHN1YnN0cmFjdCh2ZWN0b3IyOiBDdWJpc21WZWN0b3IyKTogQ3ViaXNtVmVjdG9yMiB7XHJcbiAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XHJcbiAgICByZXQueCA9IHRoaXMueCAtIHZlY3RvcjIueDtcclxuICAgIHJldC55ID0gdGhpcy55IC0gdmVjdG9yMi55O1xyXG4gICAgcmV0dXJuIHJldDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODmeOCr+ODiOODq+OBruS5l+eul1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHZlY3RvcjIg5LmX566X44GZ44KL44OZ44Kv44OI44Or5YCkXHJcbiAgICogQHJldHVybiDkuZfnrpfntZDmnpwg44OZ44Kv44OI44Or5YCkXHJcbiAgICovXHJcbiAgcHVibGljIG11bHRpcGx5KHZlY3RvcjI6IEN1YmlzbVZlY3RvcjIpOiBDdWJpc21WZWN0b3IyIHtcclxuICAgIGNvbnN0IHJldDogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcclxuICAgIHJldC54ID0gdGhpcy54ICogdmVjdG9yMi54O1xyXG4gICAgcmV0LnkgPSB0aGlzLnkgKiB2ZWN0b3IyLnk7XHJcbiAgICByZXR1cm4gcmV0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OZ44Kv44OI44Or44Gu5LmX566XKOOCueOCq+ODqeODvClcclxuICAgKlxyXG4gICAqIEBwYXJhbSBzY2FsYXIg5LmX566X44GZ44KL44K544Kr44Op44O85YCkXHJcbiAgICogQHJldHVybiDkuZfnrpfntZDmnpwg44OZ44Kv44OI44Or5YCkXHJcbiAgICovXHJcbiAgcHVibGljIG11bHRpcGx5QnlTY2FsZXIoc2NhbGFyOiBudW1iZXIpOiBDdWJpc21WZWN0b3IyIHtcclxuICAgIHJldHVybiB0aGlzLm11bHRpcGx5KG5ldyBDdWJpc21WZWN0b3IyKHNjYWxhciwgc2NhbGFyKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg5njgq/jg4jjg6vjga7pmaTnrpdcclxuICAgKlxyXG4gICAqIEBwYXJhbSB2ZWN0b3IyIOmZpOeul+OBmeOCi+ODmeOCr+ODiOODq+WApFxyXG4gICAqIEByZXR1cm4g6Zmk566X57WQ5p6cIOODmeOCr+ODiOODq+WApFxyXG4gICAqL1xyXG4gIHB1YmxpYyBkaXZpc2lvbih2ZWN0b3IyOiBDdWJpc21WZWN0b3IyKTogQ3ViaXNtVmVjdG9yMiB7XHJcbiAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XHJcbiAgICByZXQueCA9IHRoaXMueCAvIHZlY3RvcjIueDtcclxuICAgIHJldC55ID0gdGhpcy55IC8gdmVjdG9yMi55O1xyXG4gICAgcmV0dXJuIHJldDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODmeOCr+ODiOODq+OBrumZpOeulyjjgrnjgqvjg6njg7wpXHJcbiAgICpcclxuICAgKiBAcGFyYW0gc2NhbGFyIOmZpOeul+OBmeOCi+OCueOCq+ODqeODvOWApFxyXG4gICAqIEByZXR1cm4g6Zmk566X57WQ5p6cIOODmeOCr+ODiOODq+WApFxyXG4gICAqL1xyXG4gIHB1YmxpYyBkaXZpc2lvbkJ5U2NhbGFyKHNjYWxhcjogbnVtYmVyKTogQ3ViaXNtVmVjdG9yMiB7XHJcbiAgICByZXR1cm4gdGhpcy5kaXZpc2lvbihuZXcgQ3ViaXNtVmVjdG9yMihzY2FsYXIsIHNjYWxhcikpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OZ44Kv44OI44Or44Gu6ZW344GV44KS5Y+W5b6X44GZ44KLXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIOODmeOCr+ODiOODq+OBrumVt+OBlVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRMZW5ndGgoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBNYXRoLnNxcnQodGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODmeOCr+ODiOODq+OBrui3nembouOBruWPluW+l1xyXG4gICAqXHJcbiAgICogQHBhcmFtIGEg54K5XHJcbiAgICogQHJldHVybiDjg5njgq/jg4jjg6vjga7ot53pm6JcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RGlzdGFuY2VXaXRoKGE6IEN1YmlzbVZlY3RvcjIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIE1hdGguc3FydChcclxuICAgICAgKHRoaXMueCAtIGEueCkgKiAodGhpcy54IC0gYS54KSArICh0aGlzLnkgLSBhLnkpICogKHRoaXMueSAtIGEueSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg4njg4Pjg4jnqY3jga7oqIjnrpdcclxuICAgKlxyXG4gICAqIEBwYXJhbSBhIOWApFxyXG4gICAqIEByZXR1cm4g57WQ5p6cXHJcbiAgICovXHJcbiAgcHVibGljIGRvdChhOiBDdWJpc21WZWN0b3IyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnggKiBhLnggKyB0aGlzLnkgKiBhLnk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmraPopo/ljJbjga7pgannlKhcclxuICAgKi9cclxuICBwdWJsaWMgbm9ybWFsaXplKCk6IHZvaWQge1xyXG4gICAgY29uc3QgbGVuZ3RoOiBudW1iZXIgPSBNYXRoLnBvdyh0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnksIDAuNSk7XHJcblxyXG4gICAgdGhpcy54ID0gdGhpcy54IC8gbGVuZ3RoO1xyXG4gICAgdGhpcy55ID0gdGhpcy55IC8gbGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog562J44GX44GV44Gu56K66KqN77yI562J44GX44GE44GL77yf77yJXHJcbiAgICpcclxuICAgKiDlgKTjgYznrYnjgZfjgYTjgYvvvJ9cclxuICAgKlxyXG4gICAqIEBwYXJhbSByaHMg56K66KqN44GZ44KL5YCkXHJcbiAgICogQHJldHVybiB0cnVlIOWApOOBr+etieOBl+OBhFxyXG4gICAqIEByZXR1cm4gZmFsc2Ug5YCk44Gv562J44GX44GP44Gq44GEXHJcbiAgICovXHJcbiAgcHVibGljIGlzRXF1YWwocmhzOiBDdWJpc21WZWN0b3IyKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy54ID09IHJocy54ICYmIHRoaXMueSA9PSByaHMueTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOetieOBl+OBleOBrueiuuiqje+8iOetieOBl+OBj+OBquOBhOOBi++8n++8iVxyXG4gICAqXHJcbiAgICog5YCk44GM562J44GX44GP44Gq44GE44GL77yfXHJcbiAgICpcclxuICAgKiBAcGFyYW0gcmhzIOeiuuiqjeOBmeOCi+WApFxyXG4gICAqIEByZXR1cm4gdHJ1ZSDlgKTjga/nrYnjgZfjgY/jgarjgYRcclxuICAgKiBAcmV0dXJuIGZhbHNlIOWApOOBr+etieOBl+OBhFxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc05vdEVxdWFsKHJoczogQ3ViaXNtVmVjdG9yMik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuICF0aGlzLmlzRXF1YWwocmhzKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxyXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtdmVjdG9yMic7XHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcclxuICBleHBvcnQgY29uc3QgQ3ViaXNtVmVjdG9yMiA9ICQuQ3ViaXNtVmVjdG9yMjtcclxuICBleHBvcnQgdHlwZSBDdWJpc21WZWN0b3IyID0gJC5DdWJpc21WZWN0b3IyO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQ3ViaXNtTWF0cml4NDQgfSBmcm9tICcuL2N1YmlzbW1hdHJpeDQ0JztcclxuXHJcbi8qKlxyXG4gKiDjgqvjg6Hjg6njga7kvY3nva7lpInmm7Tjgavkvb/jgYbjgajkvr/liKnjgao0eDTooYzliJdcclxuICpcclxuICog44Kr44Oh44Op44Gu5L2N572u5aSJ5pu044Gr5L2/44GG44Go5L6/5Yip44GqNHg06KGM5YiX44Gu44Kv44Op44K544CCXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ3ViaXNtVmlld01hdHJpeCBleHRlbmRzIEN1YmlzbU1hdHJpeDQ0IHtcclxuICAvKipcclxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5fc2NyZWVuTGVmdCA9IDAuMDtcclxuICAgIHRoaXMuX3NjcmVlblJpZ2h0ID0gMC4wO1xyXG4gICAgdGhpcy5fc2NyZWVuVG9wID0gMC4wO1xyXG4gICAgdGhpcy5fc2NyZWVuQm90dG9tID0gMC4wO1xyXG4gICAgdGhpcy5fbWF4TGVmdCA9IDAuMDtcclxuICAgIHRoaXMuX21heFJpZ2h0ID0gMC4wO1xyXG4gICAgdGhpcy5fbWF4VG9wID0gMC4wO1xyXG4gICAgdGhpcy5fbWF4Qm90dG9tID0gMC4wO1xyXG4gICAgdGhpcy5fbWF4U2NhbGUgPSAwLjA7XHJcbiAgICB0aGlzLl9taW5TY2FsZSA9IDAuMDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOenu+WLleOCkuiqv+aVtFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHggWOi7uOOBruenu+WLlemHj1xyXG4gICAqIEBwYXJhbSB5IFnou7jjga7np7vli5Xph49cclxuICAgKi9cclxuICBwdWJsaWMgYWRqdXN0VHJhbnNsYXRlKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5fdHJbMF0gKiB0aGlzLl9tYXhMZWZ0ICsgKHRoaXMuX3RyWzEyXSArIHgpID4gdGhpcy5fc2NyZWVuTGVmdCkge1xyXG4gICAgICB4ID0gdGhpcy5fc2NyZWVuTGVmdCAtIHRoaXMuX3RyWzBdICogdGhpcy5fbWF4TGVmdCAtIHRoaXMuX3RyWzEyXTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5fdHJbMF0gKiB0aGlzLl9tYXhSaWdodCArICh0aGlzLl90clsxMl0gKyB4KSA8IHRoaXMuX3NjcmVlblJpZ2h0KSB7XHJcbiAgICAgIHggPSB0aGlzLl9zY3JlZW5SaWdodCAtIHRoaXMuX3RyWzBdICogdGhpcy5fbWF4UmlnaHQgLSB0aGlzLl90clsxMl07XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuX3RyWzVdICogdGhpcy5fbWF4VG9wICsgKHRoaXMuX3RyWzEzXSArIHkpIDwgdGhpcy5fc2NyZWVuVG9wKSB7XHJcbiAgICAgIHkgPSB0aGlzLl9zY3JlZW5Ub3AgLSB0aGlzLl90cls1XSAqIHRoaXMuX21heFRvcCAtIHRoaXMuX3RyWzEzXTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoXHJcbiAgICAgIHRoaXMuX3RyWzVdICogdGhpcy5fbWF4Qm90dG9tICsgKHRoaXMuX3RyWzEzXSArIHkpID5cclxuICAgICAgdGhpcy5fc2NyZWVuQm90dG9tXHJcbiAgICApIHtcclxuICAgICAgeSA9IHRoaXMuX3NjcmVlbkJvdHRvbSAtIHRoaXMuX3RyWzVdICogdGhpcy5fbWF4Qm90dG9tIC0gdGhpcy5fdHJbMTNdO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHRyMTogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShbXHJcbiAgICAgIDEuMCxcclxuICAgICAgMC4wLFxyXG4gICAgICAwLjAsXHJcbiAgICAgIDAuMCxcclxuICAgICAgMC4wLFxyXG4gICAgICAxLjAsXHJcbiAgICAgIDAuMCxcclxuICAgICAgMC4wLFxyXG4gICAgICAwLjAsXHJcbiAgICAgIDAuMCxcclxuICAgICAgMS4wLFxyXG4gICAgICAwLjAsXHJcbiAgICAgIHgsXHJcbiAgICAgIHksXHJcbiAgICAgIDAuMCxcclxuICAgICAgMS4wXHJcbiAgICBdKTtcclxuXHJcbiAgICBDdWJpc21NYXRyaXg0NC5tdWx0aXBseSh0cjEsIHRoaXMuX3RyLCB0aGlzLl90cik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmi6HlpKfnjofjgpLoqr/mlbRcclxuICAgKlxyXG4gICAqIEBwYXJhbSBjeCDmi6HlpKfjgpLooYzjgYZY6Lu444Gu5Lit5b+D5L2N572uXHJcbiAgICogQHBhcmFtIGN5IOaLoeWkp+OCkuihjOOBhlnou7jjga7kuK3lv4PkvY3nva5cclxuICAgKiBAcGFyYW0gc2NhbGUg5ouh5aSn546HXHJcbiAgICovXHJcbiAgcHVibGljIGFkanVzdFNjYWxlKGN4OiBudW1iZXIsIGN5OiBudW1iZXIsIHNjYWxlOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGNvbnN0IG1heFNjYWxlOiBudW1iZXIgPSB0aGlzLmdldE1heFNjYWxlKCk7XHJcbiAgICBjb25zdCBtaW5TY2FsZTogbnVtYmVyID0gdGhpcy5nZXRNaW5TY2FsZSgpO1xyXG5cclxuICAgIGNvbnN0IHRhcmdldFNjYWxlID0gc2NhbGUgKiB0aGlzLl90clswXTtcclxuXHJcbiAgICBpZiAodGFyZ2V0U2NhbGUgPCBtaW5TY2FsZSkge1xyXG4gICAgICBpZiAodGhpcy5fdHJbMF0gPiAwLjApIHtcclxuICAgICAgICBzY2FsZSA9IG1pblNjYWxlIC8gdGhpcy5fdHJbMF07XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAodGFyZ2V0U2NhbGUgPiBtYXhTY2FsZSkge1xyXG4gICAgICBpZiAodGhpcy5fdHJbMF0gPiAwLjApIHtcclxuICAgICAgICBzY2FsZSA9IG1heFNjYWxlIC8gdGhpcy5fdHJbMF07XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0cjE6IEZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoW1xyXG4gICAgICAxLjAsXHJcbiAgICAgIDAuMCxcclxuICAgICAgMC4wLFxyXG4gICAgICAwLjAsXHJcbiAgICAgIDAuMCxcclxuICAgICAgMS4wLFxyXG4gICAgICAwLjAsXHJcbiAgICAgIDAuMCxcclxuICAgICAgMC4wLFxyXG4gICAgICAwLjAsXHJcbiAgICAgIDEuMCxcclxuICAgICAgMC4wLFxyXG4gICAgICBjeCxcclxuICAgICAgY3ksXHJcbiAgICAgIDAuMCxcclxuICAgICAgMS4wXHJcbiAgICBdKTtcclxuXHJcbiAgICBjb25zdCB0cjI6IEZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoW1xyXG4gICAgICBzY2FsZSxcclxuICAgICAgMC4wLFxyXG4gICAgICAwLjAsXHJcbiAgICAgIDAuMCxcclxuICAgICAgMC4wLFxyXG4gICAgICBzY2FsZSxcclxuICAgICAgMC4wLFxyXG4gICAgICAwLjAsXHJcbiAgICAgIDAuMCxcclxuICAgICAgMC4wLFxyXG4gICAgICAxLjAsXHJcbiAgICAgIDAuMCxcclxuICAgICAgMC4wLFxyXG4gICAgICAwLjAsXHJcbiAgICAgIDAuMCxcclxuICAgICAgMS4wXHJcbiAgICBdKTtcclxuXHJcbiAgICBjb25zdCB0cjM6IEZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoW1xyXG4gICAgICAxLjAsXHJcbiAgICAgIDAuMCxcclxuICAgICAgMC4wLFxyXG4gICAgICAwLjAsXHJcbiAgICAgIDAuMCxcclxuICAgICAgMS4wLFxyXG4gICAgICAwLjAsXHJcbiAgICAgIDAuMCxcclxuICAgICAgMC4wLFxyXG4gICAgICAwLjAsXHJcbiAgICAgIDEuMCxcclxuICAgICAgMC4wLFxyXG4gICAgICAtY3gsXHJcbiAgICAgIC1jeSxcclxuICAgICAgMC4wLFxyXG4gICAgICAxLjBcclxuICAgIF0pO1xyXG5cclxuICAgIEN1YmlzbU1hdHJpeDQ0Lm11bHRpcGx5KHRyMywgdGhpcy5fdHIsIHRoaXMuX3RyKTtcclxuICAgIEN1YmlzbU1hdHJpeDQ0Lm11bHRpcGx5KHRyMiwgdGhpcy5fdHIsIHRoaXMuX3RyKTtcclxuICAgIEN1YmlzbU1hdHJpeDQ0Lm11bHRpcGx5KHRyMSwgdGhpcy5fdHIsIHRoaXMuX3RyKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+mkiueUn+OBruevhOWbsuOBruioreWumlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGxlZnQgICAgICDlt6bovrrjga5Y6Lu444Gu5L2N572uXHJcbiAgICogQHBhcmFtIHJpZ2h0ICAgICDlj7Povrrjga5Y6Lu444Gu5L2N572uXHJcbiAgICogQHBhcmFtIGJvdHRvbSAgICDkuIvovrrjga5Z6Lu444Gu5L2N572uXHJcbiAgICogQHBhcmFtIHRvcCAgICAgICDkuIrovrrjga5Z6Lu444Gu5L2N572uXHJcbiAgICovXHJcbiAgcHVibGljIHNldFNjcmVlblJlY3QoXHJcbiAgICBsZWZ0OiBudW1iZXIsXHJcbiAgICByaWdodDogbnVtYmVyLFxyXG4gICAgYm90dG9tOiBudW1iZXIsXHJcbiAgICB0b3A6IG51bWJlclxyXG4gICk6IHZvaWQge1xyXG4gICAgdGhpcy5fc2NyZWVuTGVmdCA9IGxlZnQ7XHJcbiAgICB0aGlzLl9zY3JlZW5SaWdodCA9IHJpZ2h0O1xyXG4gICAgdGhpcy5fc2NyZWVuQm90dG9tID0gYm90dG9tO1xyXG4gICAgdGhpcy5fc2NyZWVuVG9wID0gdG9wO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ5LiK44Gu56e75YuV5Y+v6IO956+E5Zuy44Gu6Kit5a6aXHJcbiAgICogQHBhcmFtIGxlZnQgICAgICDlt6bovrrjga5Y6Lu444Gu5L2N572uXHJcbiAgICogQHBhcmFtIHJpZ2h0ICAgICDlj7Povrrjga5Y6Lu444Gu5L2N572uXHJcbiAgICogQHBhcmFtIGJvdHRvbSAgICDkuIvovrrjga5Z6Lu444Gu5L2N572uXHJcbiAgICogQHBhcmFtIHRvcCAgICAgICDkuIrovrrjga5Z6Lu444Gu5L2N572uXHJcbiAgICovXHJcbiAgcHVibGljIHNldE1heFNjcmVlblJlY3QoXHJcbiAgICBsZWZ0OiBudW1iZXIsXHJcbiAgICByaWdodDogbnVtYmVyLFxyXG4gICAgYm90dG9tOiBudW1iZXIsXHJcbiAgICB0b3A6IG51bWJlclxyXG4gICk6IHZvaWQge1xyXG4gICAgdGhpcy5fbWF4TGVmdCA9IGxlZnQ7XHJcbiAgICB0aGlzLl9tYXhSaWdodCA9IHJpZ2h0O1xyXG4gICAgdGhpcy5fbWF4VG9wID0gdG9wO1xyXG4gICAgdGhpcy5fbWF4Qm90dG9tID0gYm90dG9tO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5pyA5aSn5ouh5aSn546H44Gu6Kit5a6aXHJcbiAgICogQHBhcmFtIG1heFNjYWxlIOacgOWkp+aLoeWkp+eOh1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRNYXhTY2FsZShtYXhTY2FsZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLl9tYXhTY2FsZSA9IG1heFNjYWxlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5pyA5bCP5ouh5aSn546H44Gu6Kit5a6aXHJcbiAgICogQHBhcmFtIG1pblNjYWxlIOacgOWwj+aLoeWkp+eOh1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRNaW5TY2FsZShtaW5TY2FsZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLl9taW5TY2FsZSA9IG1pblNjYWxlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5pyA5aSn5ouh5aSn546H44Gu5Y+W5b6XXHJcbiAgICogQHJldHVybiDmnIDlpKfmi6HlpKfnjodcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0TWF4U2NhbGUoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9tYXhTY2FsZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOacgOWwj+aLoeWkp+eOh+OBruWPluW+l1xyXG4gICAqIEByZXR1cm4g5pyA5bCP5ouh5aSn546HXHJcbiAgICovXHJcbiAgcHVibGljIGdldE1pblNjYWxlKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fbWluU2NhbGU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmi6HlpKfnjofjgYzmnIDlpKfjgavjgarjgaPjgabjgYTjgovjgYvjgpLnorroqo3jgZnjgotcclxuICAgKlxyXG4gICAqIEByZXR1cm4gdHJ1ZSDmi6HlpKfnjofjga/mnIDlpKdcclxuICAgKiBAcmV0dXJuIGZhbHNlIOaLoeWkp+eOh+OBr+acgOWkp+OBp+OBr+OBquOBhFxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc01heFNjYWxlKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0U2NhbGVYKCkgPj0gdGhpcy5fbWF4U2NhbGU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmi6HlpKfnjofjgYzmnIDlsI/jgavjgarjgaPjgabjgYTjgovjgYvjgpLnorroqo3jgZnjgotcclxuICAgKlxyXG4gICAqIEByZXR1cm4gdHJ1ZSDmi6HlpKfnjofjga/mnIDlsI9cclxuICAgKiBAcmV0dXJuIGZhbHNlIOaLoeWkp+eOh+OBr+acgOWwj+OBp+OBr+OBquOBhFxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc01pblNjYWxlKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0U2NhbGVYKCkgPD0gdGhpcy5fbWluU2NhbGU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnjga7lt6bovrrjga7vvLjou7jkvY3nva7jgpLlj5blvpfjgZnjgotcclxuICAgKiBAcmV0dXJuIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+aomeOBruW3pui+uuOBrljou7jkvY3nva5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0U2NyZWVuTGVmdCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX3NjcmVlbkxlZnQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnjga7lj7Povrrjga7vvLjou7jkvY3nva7jgpLlj5blvpfjgZnjgotcclxuICAgKiBAcmV0dXJuIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+aomeOBruWPs+i+uuOBrljou7jkvY3nva5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0U2NyZWVuUmlnaHQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9zY3JlZW5SaWdodDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+aomeOBruS4i+i+uuOBrlnou7jkvY3nva7jgpLlj5blvpfjgZnjgotcclxuICAgKiBAcmV0dXJuIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+aomeOBruS4i+i+uuOBrlnou7jkvY3nva5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0U2NyZWVuQm90dG9tKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fc2NyZWVuQm90dG9tO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ44Gu5LiK6L6644GuWei7uOS9jee9ruOCkuWPluW+l+OBmeOCi1xyXG4gICAqIEByZXR1cm4g44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ44Gu5LiK6L6644GuWei7uOS9jee9rlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRTY3JlZW5Ub3AoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9zY3JlZW5Ub3A7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlt6bovrrjga5Y6Lu45L2N572u44Gu5pyA5aSn5YCk44Gu5Y+W5b6XXHJcbiAgICogQHJldHVybiDlt6bovrrjga5Y6Lu45L2N572u44Gu5pyA5aSn5YCkXHJcbiAgICovXHJcbiAgcHVibGljIGdldE1heExlZnQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9tYXhMZWZ0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Y+z6L6644GuWOi7uOS9jee9ruOBruacgOWkp+WApOOBruWPluW+l1xyXG4gICAqIEByZXR1cm4g5Y+z6L6644GuWOi7uOS9jee9ruOBruacgOWkp+WApFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRNYXhSaWdodCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX21heFJpZ2h0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5LiL6L6644GuWei7uOS9jee9ruOBruacgOWkp+WApOOBruWPluW+l1xyXG4gICAqIEByZXR1cm4g5LiL6L6644GuWei7uOS9jee9ruOBruacgOWkp+WApFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRNYXhCb3R0b20oKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9tYXhCb3R0b207XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDkuIrovrrjga5Z6Lu45L2N572u44Gu5pyA5aSn5YCk44Gu5Y+W5b6XXHJcbiAgICogQHJldHVybiDkuIrovrrjga5Z6Lu45L2N572u44Gu5pyA5aSn5YCkXHJcbiAgICovXHJcbiAgcHVibGljIGdldE1heFRvcCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX21heFRvcDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX3NjcmVlbkxlZnQ6IG51bWJlcjsgLy8g44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ5LiK44Gu56+E5Zuy77yI5bem6L66WOi7uOS9jee9ru+8iVxyXG4gIHByaXZhdGUgX3NjcmVlblJpZ2h0OiBudW1iZXI7IC8vIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+aomeS4iuOBruevhOWbsu+8iOWPs+i+uljou7jkvY3nva7vvIlcclxuICBwcml2YXRlIF9zY3JlZW5Ub3A6IG51bWJlcjsgLy8g44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ5LiK44Gu56+E5Zuy77yI5LiK6L66Wei7uOS9jee9ru+8iVxyXG4gIHByaXZhdGUgX3NjcmVlbkJvdHRvbTogbnVtYmVyOyAvLyDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnkuIrjga7nr4Tlm7LvvIjkuIvovrpZ6Lu45L2N572u77yJXHJcbiAgcHJpdmF0ZSBfbWF4TGVmdDogbnVtYmVyOyAvLyDoq5bnkIbluqfmqJnkuIrjga7np7vli5Xlj6/og73nr4Tlm7LvvIjlt6bovrpY6Lu45L2N572u77yJXHJcbiAgcHJpdmF0ZSBfbWF4UmlnaHQ6IG51bWJlcjsgLy8g6KuW55CG5bqn5qiZ5LiK44Gu56e75YuV5Y+v6IO956+E5Zuy77yI5Y+z6L66WOi7uOS9jee9ru+8iVxyXG4gIHByaXZhdGUgX21heFRvcDogbnVtYmVyOyAvLyDoq5bnkIbluqfmqJnkuIrjga7np7vli5Xlj6/og73nr4Tlm7LvvIjkuIrovrpZ6Lu45L2N572u77yJXHJcbiAgcHJpdmF0ZSBfbWF4Qm90dG9tOiBudW1iZXI7IC8vIOirlueQhuW6p+aomeS4iuOBruenu+WLleWPr+iDveevhOWbsu+8iOS4i+i+ulnou7jkvY3nva7vvIlcclxuICBwcml2YXRlIF9tYXhTY2FsZTogbnVtYmVyOyAvLyDmi6HlpKfnjofjga7mnIDlpKflgKRcclxuICBwcml2YXRlIF9taW5TY2FsZTogbnVtYmVyOyAvLyDmi6HlpKfnjofjga7mnIDlsI/lgKRcclxufVxyXG5cclxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXHJcbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc212aWV3bWF0cml4JztcclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xyXG4gIGV4cG9ydCBjb25zdCBDdWJpc21WaWV3TWF0cml4ID0gJC5DdWJpc21WaWV3TWF0cml4O1xyXG4gIGV4cG9ydCB0eXBlIEN1YmlzbVZpZXdNYXRyaXggPSAkLkN1YmlzbVZpZXdNYXRyaXg7XHJcbn1cclxuIiwiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQgeyBDU01fQVNTRVJUIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtZGVidWcnO1xyXG5pbXBvcnQgeyBDdWJpc21Nb2RlbCB9IGZyb20gJy4vY3ViaXNtbW9kZWwnO1xyXG5cclxuLyoqXHJcbiAqIE1vY+ODh+ODvOOCv+OBrueuoeeQhlxyXG4gKlxyXG4gKiBNb2Pjg4fjg7zjgr/jga7nrqHnkIbjgpLooYzjgYbjgq/jg6njgrnjgIJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDdWJpc21Nb2Mge1xyXG4gIC8qKlxyXG4gICAqIE1vY+ODh+ODvOOCv+OBruS9nOaIkFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlKG1vY0J5dGVzOiBBcnJheUJ1ZmZlcik6IEN1YmlzbU1vYyB7XHJcbiAgICBsZXQgY3ViaXNtTW9jOiBDdWJpc21Nb2MgPSBudWxsO1xyXG4gICAgY29uc3QgbW9jOiBMaXZlMkRDdWJpc21Db3JlLk1vYyA9IExpdmUyREN1YmlzbUNvcmUuTW9jLmZyb21BcnJheUJ1ZmZlcihcclxuICAgICAgbW9jQnl0ZXNcclxuICAgICk7XHJcblxyXG4gICAgaWYgKG1vYykge1xyXG4gICAgICBjdWJpc21Nb2MgPSBuZXcgQ3ViaXNtTW9jKG1vYyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGN1YmlzbU1vYztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE1vY+ODh+ODvOOCv+OCkuWJiumZpFxyXG4gICAqXHJcbiAgICogTW9j44OH44O844K/44KS5YmK6Zmk44GZ44KLXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBkZWxldGUobW9jOiBDdWJpc21Nb2MpOiB2b2lkIHtcclxuICAgIG1vYy5fbW9jLl9yZWxlYXNlKCk7XHJcbiAgICBtb2MuX21vYyA9IG51bGw7XHJcbiAgICBtb2MgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44OH44Or44KS5L2c5oiQ44GZ44KLXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIE1vY+ODh+ODvOOCv+OBi+OCieS9nOaIkOOBleOCjOOBn+ODouODh+ODq1xyXG4gICAqL1xyXG4gIGNyZWF0ZU1vZGVsKCk6IEN1YmlzbU1vZGVsIHtcclxuICAgIGxldCBjdWJpc21Nb2RlbDogQ3ViaXNtTW9kZWwgPSBudWxsO1xyXG5cclxuICAgIGNvbnN0IG1vZGVsOiBMaXZlMkRDdWJpc21Db3JlLk1vZGVsID0gTGl2ZTJEQ3ViaXNtQ29yZS5Nb2RlbC5mcm9tTW9jKFxyXG4gICAgICB0aGlzLl9tb2NcclxuICAgICk7XHJcblxyXG4gICAgaWYgKG1vZGVsKSB7XHJcbiAgICAgIGN1YmlzbU1vZGVsID0gbmV3IEN1YmlzbU1vZGVsKG1vZGVsKTtcclxuICAgICAgY3ViaXNtTW9kZWwuaW5pdGlhbGl6ZSgpO1xyXG5cclxuICAgICAgKyt0aGlzLl9tb2RlbENvdW50O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjdWJpc21Nb2RlbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODh+ODq+OCkuWJiumZpOOBmeOCi1xyXG4gICAqL1xyXG4gIGRlbGV0ZU1vZGVsKG1vZGVsOiBDdWJpc21Nb2RlbCk6IHZvaWQge1xyXG4gICAgaWYgKG1vZGVsICE9IG51bGwpIHtcclxuICAgICAgbW9kZWwucmVsZWFzZSgpO1xyXG4gICAgICBtb2RlbCA9IG51bGw7XHJcbiAgICAgIC0tdGhpcy5fbW9kZWxDb3VudDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAqL1xyXG4gIHByaXZhdGUgY29uc3RydWN0b3IobW9jOiBMaXZlMkRDdWJpc21Db3JlLk1vYykge1xyXG4gICAgdGhpcy5fbW9jID0gbW9jO1xyXG4gICAgdGhpcy5fbW9kZWxDb3VudCA9IDA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcclxuICAgKi9cclxuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcclxuICAgIENTTV9BU1NFUlQodGhpcy5fbW9kZWxDb3VudCA9PSAwKTtcclxuXHJcbiAgICB0aGlzLl9tb2MuX3JlbGVhc2UoKTtcclxuICAgIHRoaXMuX21vYyA9IG51bGw7XHJcbiAgfVxyXG5cclxuICBfbW9jOiBMaXZlMkRDdWJpc21Db3JlLk1vYzsgLy8gTW9j44OH44O844K/XHJcbiAgX21vZGVsQ291bnQ6IG51bWJlcjsgLy8gTW9j44OH44O844K/44GL44KJ5L2c44KJ44KM44Gf44Oi44OH44Or44Gu5YCL5pWwXHJcbn1cclxuXHJcbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxyXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtbW9jJztcclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xyXG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb2MgPSAkLkN1YmlzbU1vYztcclxuICBleHBvcnQgdHlwZSBDdWJpc21Nb2MgPSAkLkN1YmlzbU1vYztcclxufVxyXG4iLCIvKipcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xyXG5pbXBvcnQgeyBDdWJpc21GcmFtZXdvcmsgfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xyXG5pbXBvcnQgeyBDdWJpc21CbGVuZE1vZGUgfSBmcm9tICcuLi9yZW5kZXJpbmcvY3ViaXNtcmVuZGVyZXInO1xyXG5pbXBvcnQgeyBjc21NYXAgfSBmcm9tICcuLi90eXBlL2NzbW1hcCc7XHJcbmltcG9ydCB7IGNzbVZlY3RvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcclxuaW1wb3J0IHsgQ1NNX0FTU0VSVCB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWRlYnVnJztcclxuXHJcbi8qKlxyXG4gKiDjg6Ljg4fjg6tcclxuICpcclxuICogTW9j44OH44O844K/44GL44KJ55Sf5oiQ44GV44KM44KL44Oi44OH44Or44Gu44Kv44Op44K544CCXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW9kZWwge1xyXG4gIC8qKlxyXG4gICAqIOODouODh+ODq+OBruODkeODqeODoeODvOOCv+OBruabtOaWsFxyXG4gICAqL1xyXG4gIHB1YmxpYyB1cGRhdGUoKTogdm9pZCB7XHJcbiAgICAvLyBVcGRhdGUgbW9kZWxcclxuICAgIHRoaXMuX21vZGVsLnVwZGF0ZSgpO1xyXG5cclxuICAgIHRoaXMuX21vZGVsLmRyYXdhYmxlcy5yZXNldER5bmFtaWNGbGFncygpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Kt44Oj44Oz44OQ44K544Gu5bmF44KS5Y+W5b6X44GZ44KLXHJcbiAgICovXHJcbiAgcHVibGljIGdldENhbnZhc1dpZHRoKCk6IG51bWJlciB7XHJcbiAgICBpZiAodGhpcy5fbW9kZWwgPT0gbnVsbCkge1xyXG4gICAgICByZXR1cm4gMC4wO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgIHRoaXMuX21vZGVsLmNhbnZhc2luZm8uQ2FudmFzV2lkdGggLyB0aGlzLl9tb2RlbC5jYW52YXNpbmZvLlBpeGVsc1BlclVuaXRcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjgq3jg6Pjg7Pjg5Djgrnjga7pq5jjgZXjgpLlj5blvpfjgZnjgotcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Q2FudmFzSGVpZ2h0KCk6IG51bWJlciB7XHJcbiAgICBpZiAodGhpcy5fbW9kZWwgPT0gbnVsbCkge1xyXG4gICAgICByZXR1cm4gMC4wO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgIHRoaXMuX21vZGVsLmNhbnZhc2luZm8uQ2FudmFzSGVpZ2h0IC8gdGhpcy5fbW9kZWwuY2FudmFzaW5mby5QaXhlbHNQZXJVbml0XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OR44Op44Oh44O844K/44KS5L+d5a2Y44GZ44KLXHJcbiAgICovXHJcbiAgcHVibGljIHNhdmVQYXJhbWV0ZXJzKCk6IHZvaWQge1xyXG4gICAgY29uc3QgcGFyYW1ldGVyQ291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMuY291bnQ7XHJcbiAgICBjb25zdCBzYXZlZFBhcmFtZXRlckNvdW50OiBudW1iZXIgPSB0aGlzLl9zYXZlZFBhcmFtZXRlcnMuZ2V0U2l6ZSgpO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW1ldGVyQ291bnQ7ICsraSkge1xyXG4gICAgICBpZiAoaSA8IHNhdmVkUGFyYW1ldGVyQ291bnQpIHtcclxuICAgICAgICB0aGlzLl9zYXZlZFBhcmFtZXRlcnMuc2V0KGksIHRoaXMuX3BhcmFtZXRlclZhbHVlc1tpXSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5fc2F2ZWRQYXJhbWV0ZXJzLnB1c2hCYWNrKHRoaXMuX3BhcmFtZXRlclZhbHVlc1tpXSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODh+ODq+OCkuWPluW+l1xyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRNb2RlbCgpOiBMaXZlMkRDdWJpc21Db3JlLk1vZGVsIHtcclxuICAgIHJldHVybiB0aGlzLl9tb2RlbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODkeODvOODhOOBruOCpOODs+ODh+ODg+OCr+OCueOCkuWPluW+l1xyXG4gICAqIEBwYXJhbSBwYXJ0SWQg44OR44O844OE44GuSURcclxuICAgKiBAcmV0dXJuIOODkeODvOODhOOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRQYXJ0SW5kZXgocGFydElkOiBDdWJpc21JZEhhbmRsZSk6IG51bWJlciB7XHJcbiAgICBsZXQgcGFydEluZGV4OiBudW1iZXI7XHJcbiAgICBjb25zdCBwYXJ0Q291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsLnBhcnRzLmNvdW50O1xyXG5cclxuICAgIGZvciAocGFydEluZGV4ID0gMDsgcGFydEluZGV4IDwgcGFydENvdW50OyArK3BhcnRJbmRleCkge1xyXG4gICAgICBpZiAocGFydElkID09IHRoaXMuX3BhcnRJZHMuYXQocGFydEluZGV4KSkge1xyXG4gICAgICAgIHJldHVybiBwYXJ0SW5kZXg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyDjg6Ljg4fjg6vjgavlrZjlnKjjgZfjgabjgYTjgarjgYTloLTlkIjjgIHpnZ7lrZjlnKjjg5Hjg7zjg4RJROODquOCueODiOWGheOBq+OBguOCi+OBi+OCkuaknOe0ouOBl+OAgeOBneOBruOCpOODs+ODh+ODg+OCr+OCueOCkui/lOOBmVxyXG4gICAgaWYgKHRoaXMuX25vdEV4aXN0UGFydElkLmlzRXhpc3QocGFydElkKSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5fbm90RXhpc3RQYXJ0SWQuZ2V0VmFsdWUocGFydElkKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDpnZ7lrZjlnKjjg5Hjg7zjg4RJROODquOCueODiOOBq+OBquOBhOWgtOWQiOOAgeaWsOOBl+OBj+imgee0oOOCkui/veWKoOOBmeOCi1xyXG4gICAgcGFydEluZGV4ID0gcGFydENvdW50ICsgdGhpcy5fbm90RXhpc3RQYXJ0SWQuZ2V0U2l6ZSgpO1xyXG4gICAgdGhpcy5fbm90RXhpc3RQYXJ0SWQuc2V0VmFsdWUocGFydElkLCBwYXJ0SW5kZXgpO1xyXG4gICAgdGhpcy5fbm90RXhpc3RQYXJ0T3BhY2l0aWVzLmFwcGVuZEtleShwYXJ0SW5kZXgpO1xyXG5cclxuICAgIHJldHVybiBwYXJ0SW5kZXg7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg5Hjg7zjg4Tjga7lgIvmlbDjga7lj5blvpdcclxuICAgKiBAcmV0dXJuIOODkeODvOODhOOBruWAi+aVsFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRQYXJ0Q291bnQoKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IHBhcnRDb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwucGFydHMuY291bnQ7XHJcbiAgICByZXR1cm4gcGFydENvdW50O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OR44O844OE44Gu5LiN6YCP5piO5bqm44Gu6Kit5a6aKEluZGV4KVxyXG4gICAqIEBwYXJhbSBwYXJ0SW5kZXgg44OR44O844OE44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICogQHBhcmFtIG9wYWNpdHkg5LiN6YCP5piO5bqmXHJcbiAgICovXHJcbiAgcHVibGljIHNldFBhcnRPcGFjaXR5QnlJbmRleChwYXJ0SW5kZXg6IG51bWJlciwgb3BhY2l0eTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5fbm90RXhpc3RQYXJ0T3BhY2l0aWVzLmlzRXhpc3QocGFydEluZGV4KSkge1xyXG4gICAgICB0aGlzLl9ub3RFeGlzdFBhcnRPcGFjaXRpZXMuc2V0VmFsdWUocGFydEluZGV4LCBvcGFjaXR5KTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOOCpOODs+ODh+ODg+OCr+OCueOBruevhOWbsuWGheaknOefpVxyXG4gICAgQ1NNX0FTU0VSVCgwIDw9IHBhcnRJbmRleCAmJiBwYXJ0SW5kZXggPCB0aGlzLmdldFBhcnRDb3VudCgpKTtcclxuXHJcbiAgICB0aGlzLl9wYXJ0T3BhY2l0aWVzW3BhcnRJbmRleF0gPSBvcGFjaXR5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OR44O844OE44Gu5LiN6YCP5piO5bqm44Gu6Kit5a6aKElkKVxyXG4gICAqIEBwYXJhbSBwYXJ0SWQg44OR44O844OE44GuSURcclxuICAgKiBAcGFyYW0gb3BhY2l0eSDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqZcclxuICAgKi9cclxuICBwdWJsaWMgc2V0UGFydE9wYWNpdHlCeUlkKHBhcnRJZDogQ3ViaXNtSWRIYW5kbGUsIG9wYWNpdHk6IG51bWJlcik6IHZvaWQge1xyXG4gICAgLy8g6auY6YCf5YyW44Gu44Gf44KB44GrUGFydEluZGV444KS5Y+W5b6X44Gn44GN44KL5qmf5qeL44Gr44Gq44Gj44Gm44GE44KL44GM44CB5aSW6YOo44GL44KJ44Gu6Kit5a6a44Gu5pmC44Gv5ZG844Gz5Ye644GX6aC75bqm44GM5L2O44GE44Gf44KB5LiN6KaBXHJcbiAgICBjb25zdCBpbmRleDogbnVtYmVyID0gdGhpcy5nZXRQYXJ0SW5kZXgocGFydElkKTtcclxuXHJcbiAgICBpZiAoaW5kZXggPCAwKSB7XHJcbiAgICAgIHJldHVybjsgLy8g44OR44O844OE44GM44Gq44GE44Gu44Gn44K544Kt44OD44OXXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zZXRQYXJ0T3BhY2l0eUJ5SW5kZXgoaW5kZXgsIG9wYWNpdHkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OR44O844OE44Gu5LiN6YCP5piO5bqm44Gu5Y+W5b6XKGluZGV4KVxyXG4gICAqIEBwYXJhbSBwYXJ0SW5kZXgg44OR44O844OE44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICogQHJldHVybiDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqZcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0UGFydE9wYWNpdHlCeUluZGV4KHBhcnRJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGlmICh0aGlzLl9ub3RFeGlzdFBhcnRPcGFjaXRpZXMuaXNFeGlzdChwYXJ0SW5kZXgpKSB7XHJcbiAgICAgIC8vIOODouODh+ODq+OBq+WtmOWcqOOBl+OBquOBhOODkeODvOODhElE44Gu5aC05ZCI44CB6Z2e5a2Y5Zyo44OR44O844OE44Oq44K544OI44GL44KJ5LiN6YCP5piO5bqm44KS6L+U44GZ44CCXHJcbiAgICAgIHJldHVybiB0aGlzLl9ub3RFeGlzdFBhcnRPcGFjaXRpZXMuZ2V0VmFsdWUocGFydEluZGV4KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDjgqTjg7Pjg4fjg4Pjgq/jgrnjga7nr4Tlm7LlhoXmpJznn6VcclxuICAgIENTTV9BU1NFUlQoMCA8PSBwYXJ0SW5kZXggJiYgcGFydEluZGV4IDwgdGhpcy5nZXRQYXJ0Q291bnQoKSk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX3BhcnRPcGFjaXRpZXNbcGFydEluZGV4XTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODkeODvOODhOOBruS4jemAj+aYjuW6puOBruWPluW+lyhpZClcclxuICAgKiBAcGFyYW0gcGFydElkIOODkeODvOODhOOBru+8qe+9hFxyXG4gICAqIEByZXR1cm4g44OR44O844OE44Gu5LiN6YCP5piO5bqmXHJcbiAgICovXHJcbiAgcHVibGljIGdldFBhcnRPcGFjaXR5QnlJZChwYXJ0SWQ6IEN1YmlzbUlkSGFuZGxlKTogbnVtYmVyIHtcclxuICAgIC8vIOmrmOmAn+WMluOBruOBn+OCgeOBq1BhcnRJbmRleOOCkuWPluW+l+OBp+OBjeOCi+apn+ani+OBq+OBquOBo+OBpuOBhOOCi+OBjOOAgeWklumDqOOBi+OCieOBruioreWumuOBruaZguOBr+WRvOOBs+WHuuOBl+mgu+W6puOBjOS9juOBhOOBn+OCgeS4jeimgVxyXG4gICAgY29uc3QgaW5kZXg6IG51bWJlciA9IHRoaXMuZ2V0UGFydEluZGV4KHBhcnRJZCk7XHJcblxyXG4gICAgaWYgKGluZGV4IDwgMCkge1xyXG4gICAgICByZXR1cm4gMDsgLy8g44OR44O844OE44GM54Sh44GE44Gu44Gn44K544Kt44OD44OXXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuZ2V0UGFydE9wYWNpdHlCeUluZGV4KGluZGV4KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCueOBruWPluW+l1xyXG4gICAqIEBwYXJhbSDjg5Hjg6njg6Hjg7zjgr9JRFxyXG4gICAqIEByZXR1cm4g44OR44Op44Oh44O844K/44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICovXHJcbiAgcHVibGljIGdldFBhcmFtZXRlckluZGV4KHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZSk6IG51bWJlciB7XHJcbiAgICBsZXQgcGFyYW1ldGVySW5kZXg6IG51bWJlcjtcclxuICAgIGNvbnN0IGlkQ291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMuY291bnQ7XHJcblxyXG4gICAgZm9yIChwYXJhbWV0ZXJJbmRleCA9IDA7IHBhcmFtZXRlckluZGV4IDwgaWRDb3VudDsgKytwYXJhbWV0ZXJJbmRleCkge1xyXG4gICAgICBpZiAocGFyYW1ldGVySWQgIT0gdGhpcy5fcGFyYW1ldGVySWRzLmF0KHBhcmFtZXRlckluZGV4KSkge1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gcGFyYW1ldGVySW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g44Oi44OH44Or44Gr5a2Y5Zyo44GX44Gm44GE44Gq44GE5aC05ZCI44CB6Z2e5a2Y5Zyo44OR44Op44Oh44O844K/SUTjg6rjgrnjg4jlhoXjgpLmpJzntKLjgZfjgIHjgZ3jga7jgqTjg7Pjg4fjg4Pjgq/jgrnjgpLov5TjgZlcclxuICAgIGlmICh0aGlzLl9ub3RFeGlzdFBhcmFtZXRlcklkLmlzRXhpc3QocGFyYW1ldGVySWQpKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9ub3RFeGlzdFBhcmFtZXRlcklkLmdldFZhbHVlKHBhcmFtZXRlcklkKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDpnZ7lrZjlnKjjg5Hjg6njg6Hjg7zjgr9JROODquOCueODiOOBq+OBquOBhOWgtOWQiOaWsOOBl+OBj+imgee0oOOCkui/veWKoOOBmeOCi1xyXG4gICAgcGFyYW1ldGVySW5kZXggPVxyXG4gICAgICB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLmNvdW50ICsgdGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJJZC5nZXRTaXplKCk7XHJcblxyXG4gICAgdGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJJZC5zZXRWYWx1ZShwYXJhbWV0ZXJJZCwgcGFyYW1ldGVySW5kZXgpO1xyXG4gICAgdGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJWYWx1ZXMuYXBwZW5kS2V5KHBhcmFtZXRlckluZGV4KTtcclxuXHJcbiAgICByZXR1cm4gcGFyYW1ldGVySW5kZXg7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7lgIvmlbDjga7lj5blvpdcclxuICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv+OBruWAi+aVsFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRQYXJhbWV0ZXJDb3VudCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX21vZGVsLnBhcmFtZXRlcnMuY291bnQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7mnIDlpKflgKTjga7lj5blvpdcclxuICAgKiBAcGFyYW0gcGFyYW1ldGVySW5kZXgg44OR44Op44Oh44O844K/44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr/jga7mnIDlpKflgKRcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0UGFyYW1ldGVyTWF4aW11bVZhbHVlKHBhcmFtZXRlckluZGV4OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX21vZGVsLnBhcmFtZXRlcnMubWF4aW11bVZhbHVlc1twYXJhbWV0ZXJJbmRleF07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7mnIDlsI/lgKTjga7lj5blvpdcclxuICAgKiBAcGFyYW0gcGFyYW1ldGVySW5kZXgg44OR44Op44Oh44O844K/44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr/jga7mnIDlsI/lgKRcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0UGFyYW1ldGVyTWluaW11bVZhbHVlKHBhcmFtZXRlckluZGV4OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX21vZGVsLnBhcmFtZXRlcnMubWluaW11bVZhbHVlc1twYXJhbWV0ZXJJbmRleF07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7jg4fjg5Xjgqnjg6vjg4jlgKTjga7lj5blvpdcclxuICAgKiBAcGFyYW0gcGFyYW1ldGVySW5kZXgg44OR44Op44Oh44O844K/44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr/jga7jg4fjg5Xjgqnjg6vjg4jlgKRcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0UGFyYW1ldGVyRGVmYXVsdFZhbHVlKHBhcmFtZXRlckluZGV4OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX21vZGVsLnBhcmFtZXRlcnMuZGVmYXVsdFZhbHVlc1twYXJhbWV0ZXJJbmRleF07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7lgKTjga7lj5blvpdcclxuICAgKiBAcGFyYW0gcGFyYW1ldGVySW5kZXggICAg44OR44Op44Oh44O844K/44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr/jga7lgKRcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KHBhcmFtZXRlckluZGV4OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgaWYgKHRoaXMuX25vdEV4aXN0UGFyYW1ldGVyVmFsdWVzLmlzRXhpc3QocGFyYW1ldGVySW5kZXgpKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9ub3RFeGlzdFBhcmFtZXRlclZhbHVlcy5nZXRWYWx1ZShwYXJhbWV0ZXJJbmRleCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g44Kk44Oz44OH44OD44Kv44K544Gu56+E5Zuy5YaF5qSc55+lXHJcbiAgICBDU01fQVNTRVJUKFxyXG4gICAgICAwIDw9IHBhcmFtZXRlckluZGV4ICYmIHBhcmFtZXRlckluZGV4IDwgdGhpcy5nZXRQYXJhbWV0ZXJDb3VudCgpXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiB0aGlzLl9wYXJhbWV0ZXJWYWx1ZXNbcGFyYW1ldGVySW5kZXhdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OR44Op44Oh44O844K/44Gu5YCk44Gu5Y+W5b6XXHJcbiAgICogQHBhcmFtIHBhcmFtZXRlcklkICAgIOODkeODqeODoeODvOOCv+OBrklEXHJcbiAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr/jga7lgKRcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0UGFyYW1ldGVyVmFsdWVCeUlkKHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZSk6IG51bWJlciB7XHJcbiAgICAvLyDpq5jpgJ/ljJbjga7jgZ/jgoHjgatwYXJhbWV0ZXJJbmRleOOCkuWPluW+l+OBp+OBjeOCi+apn+ani+OBq+OBquOBo+OBpuOBhOOCi+OBjOOAgeWklumDqOOBi+OCieOBruioreWumuOBruaZguOBr+WRvOOBs+WHuuOBl+mgu+W6puOBjOS9juOBhOOBn+OCgeS4jeimgVxyXG4gICAgY29uc3QgcGFyYW1ldGVySW5kZXg6IG51bWJlciA9IHRoaXMuZ2V0UGFyYW1ldGVySW5kZXgocGFyYW1ldGVySWQpO1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KHBhcmFtZXRlckluZGV4KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODkeODqeODoeODvOOCv+OBruWApOOBruioreWumlxyXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJJbmRleCDjg5Hjg6njg6Hjg7zjgr/jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgKiBAcGFyYW0gdmFsdWUg44OR44Op44Oh44O844K/44Gu5YCkXHJcbiAgICogQHBhcmFtIHdlaWdodCDph43jgb9cclxuICAgKi9cclxuICBwdWJsaWMgc2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KFxyXG4gICAgcGFyYW1ldGVySW5kZXg6IG51bWJlcixcclxuICAgIHZhbHVlOiBudW1iZXIsXHJcbiAgICB3ZWlnaHQgPSAxLjBcclxuICApOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLl9ub3RFeGlzdFBhcmFtZXRlclZhbHVlcy5pc0V4aXN0KHBhcmFtZXRlckluZGV4KSkge1xyXG4gICAgICB0aGlzLl9ub3RFeGlzdFBhcmFtZXRlclZhbHVlcy5zZXRWYWx1ZShcclxuICAgICAgICBwYXJhbWV0ZXJJbmRleCxcclxuICAgICAgICB3ZWlnaHQgPT0gMVxyXG4gICAgICAgICAgPyB2YWx1ZVxyXG4gICAgICAgICAgOiB0aGlzLl9ub3RFeGlzdFBhcmFtZXRlclZhbHVlcy5nZXRWYWx1ZShwYXJhbWV0ZXJJbmRleCkgKlxyXG4gICAgICAgICAgICAgICgxIC0gd2VpZ2h0KSArXHJcbiAgICAgICAgICAgICAgdmFsdWUgKiB3ZWlnaHRcclxuICAgICAgKTtcclxuXHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyDjgqTjg7Pjg4fjg4Pjgq/jgrnjga7nr4Tlm7LlhoXmpJznn6VcclxuICAgIENTTV9BU1NFUlQoXHJcbiAgICAgIDAgPD0gcGFyYW1ldGVySW5kZXggJiYgcGFyYW1ldGVySW5kZXggPCB0aGlzLmdldFBhcmFtZXRlckNvdW50KClcclxuICAgICk7XHJcblxyXG4gICAgaWYgKHRoaXMuX21vZGVsLnBhcmFtZXRlcnMubWF4aW11bVZhbHVlc1twYXJhbWV0ZXJJbmRleF0gPCB2YWx1ZSkge1xyXG4gICAgICB2YWx1ZSA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMubWF4aW11bVZhbHVlc1twYXJhbWV0ZXJJbmRleF07XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5fbW9kZWwucGFyYW1ldGVycy5taW5pbXVtVmFsdWVzW3BhcmFtZXRlckluZGV4XSA+IHZhbHVlKSB7XHJcbiAgICAgIHZhbHVlID0gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5taW5pbXVtVmFsdWVzW3BhcmFtZXRlckluZGV4XTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9wYXJhbWV0ZXJWYWx1ZXNbcGFyYW1ldGVySW5kZXhdID1cclxuICAgICAgd2VpZ2h0ID09IDFcclxuICAgICAgICA/IHZhbHVlXHJcbiAgICAgICAgOiAodGhpcy5fcGFyYW1ldGVyVmFsdWVzW3BhcmFtZXRlckluZGV4XSA9XHJcbiAgICAgICAgICAgIHRoaXMuX3BhcmFtZXRlclZhbHVlc1twYXJhbWV0ZXJJbmRleF0gKiAoMSAtIHdlaWdodCkgK1xyXG4gICAgICAgICAgICB2YWx1ZSAqIHdlaWdodCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7lgKTjga7oqK3lrppcclxuICAgKiBAcGFyYW0gcGFyYW1ldGVySWQg44OR44Op44Oh44O844K/44GuSURcclxuICAgKiBAcGFyYW0gdmFsdWUg44OR44Op44Oh44O844K/44Gu5YCkXHJcbiAgICogQHBhcmFtIHdlaWdodCDph43jgb9cclxuICAgKi9cclxuICBwdWJsaWMgc2V0UGFyYW1ldGVyVmFsdWVCeUlkKFxyXG4gICAgcGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlLFxyXG4gICAgdmFsdWU6IG51bWJlcixcclxuICAgIHdlaWdodCA9IDEuMFxyXG4gICk6IHZvaWQge1xyXG4gICAgY29uc3QgaW5kZXg6IG51bWJlciA9IHRoaXMuZ2V0UGFyYW1ldGVySW5kZXgocGFyYW1ldGVySWQpO1xyXG4gICAgdGhpcy5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgoaW5kZXgsIHZhbHVlLCB3ZWlnaHQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OR44Op44Oh44O844K/44Gu5YCk44Gu5Yqg566XKGluZGV4KVxyXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJJbmRleCDjg5Hjg6njg6Hjg7zjgr/jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgKiBAcGFyYW0gdmFsdWUg5Yqg566X44GZ44KL5YCkXHJcbiAgICogQHBhcmFtIHdlaWdodCDph43jgb9cclxuICAgKi9cclxuICBwdWJsaWMgYWRkUGFyYW1ldGVyVmFsdWVCeUluZGV4KFxyXG4gICAgcGFyYW1ldGVySW5kZXg6IG51bWJlcixcclxuICAgIHZhbHVlOiBudW1iZXIsXHJcbiAgICB3ZWlnaHQgPSAxLjBcclxuICApOiB2b2lkIHtcclxuICAgIHRoaXMuc2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KFxyXG4gICAgICBwYXJhbWV0ZXJJbmRleCxcclxuICAgICAgdGhpcy5nZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgocGFyYW1ldGVySW5kZXgpICsgdmFsdWUgKiB3ZWlnaHRcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7lgKTjga7liqDnrpcoaWQpXHJcbiAgICogQHBhcmFtIHBhcmFtZXRlcklkIOODkeODqeODoeODvOOCv++8qe+8pFxyXG4gICAqIEBwYXJhbSB2YWx1ZSDliqDnrpfjgZnjgovlgKRcclxuICAgKiBAcGFyYW0gd2VpZ2h0IOmHjeOBv1xyXG4gICAqL1xyXG4gIHB1YmxpYyBhZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQoXHJcbiAgICBwYXJhbWV0ZXJJZDogYW55LFxyXG4gICAgdmFsdWU6IG51bWJlcixcclxuICAgIHdlaWdodCA9IDEuMFxyXG4gICk6IHZvaWQge1xyXG4gICAgY29uc3QgaW5kZXg6IG51bWJlciA9IHRoaXMuZ2V0UGFyYW1ldGVySW5kZXgocGFyYW1ldGVySWQpO1xyXG4gICAgdGhpcy5hZGRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgoaW5kZXgsIHZhbHVlLCB3ZWlnaHQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OR44Op44Oh44O844K/44Gu5YCk44Gu5LmX566XXHJcbiAgICogQHBhcmFtIHBhcmFtZXRlcklkIOODkeODqeODoeODvOOCv+OBrklEXHJcbiAgICogQHBhcmFtIHZhbHVlIOS5l+eul+OBmeOCi+WApFxyXG4gICAqIEBwYXJhbSB3ZWlnaHQg6YeN44G/XHJcbiAgICovXHJcbiAgcHVibGljIG11bHRpcGx5UGFyYW1ldGVyVmFsdWVCeUlkKFxyXG4gICAgcGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlLFxyXG4gICAgdmFsdWU6IG51bWJlcixcclxuICAgIHdlaWdodCA9IDEuMFxyXG4gICk6IHZvaWQge1xyXG4gICAgY29uc3QgaW5kZXg6IG51bWJlciA9IHRoaXMuZ2V0UGFyYW1ldGVySW5kZXgocGFyYW1ldGVySWQpO1xyXG4gICAgdGhpcy5tdWx0aXBseVBhcmFtZXRlclZhbHVlQnlJbmRleChpbmRleCwgdmFsdWUsIHdlaWdodCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7lgKTjga7kuZfnrpdcclxuICAgKiBAcGFyYW0gcGFyYW1ldGVySW5kZXgg44OR44Op44Oh44O844K/44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICogQHBhcmFtIHZhbHVlIOS5l+eul+OBmeOCi+WApFxyXG4gICAqIEBwYXJhbSB3ZWlnaHQg6YeN44G/XHJcbiAgICovXHJcbiAgcHVibGljIG11bHRpcGx5UGFyYW1ldGVyVmFsdWVCeUluZGV4KFxyXG4gICAgcGFyYW1ldGVySW5kZXg6IG51bWJlcixcclxuICAgIHZhbHVlOiBudW1iZXIsXHJcbiAgICB3ZWlnaHQgPSAxLjBcclxuICApOiB2b2lkIHtcclxuICAgIHRoaXMuc2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KFxyXG4gICAgICBwYXJhbWV0ZXJJbmRleCxcclxuICAgICAgdGhpcy5nZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgocGFyYW1ldGVySW5kZXgpICpcclxuICAgICAgICAoMS4wICsgKHZhbHVlIC0gMS4wKSAqIHdlaWdodClcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCueOBruWPluW+l1xyXG4gICAqIEBwYXJhbSBkcmF3YWJsZUlkIERyYXdhYmxl44GuSURcclxuICAgKiBAcmV0dXJuIERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICovXHJcbiAgcHVibGljIGdldERyYXdhYmxlSW5kZXgoZHJhd2FibGVJZDogQ3ViaXNtSWRIYW5kbGUpOiBudW1iZXIge1xyXG4gICAgY29uc3QgZHJhd2FibGVDb3VudCA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5jb3VudDtcclxuXHJcbiAgICBmb3IgKFxyXG4gICAgICBsZXQgZHJhd2FibGVJbmRleCA9IDA7XHJcbiAgICAgIGRyYXdhYmxlSW5kZXggPCBkcmF3YWJsZUNvdW50O1xyXG4gICAgICArK2RyYXdhYmxlSW5kZXhcclxuICAgICkge1xyXG4gICAgICBpZiAodGhpcy5fZHJhd2FibGVJZHMuYXQoZHJhd2FibGVJbmRleCkgPT0gZHJhd2FibGVJZCkge1xyXG4gICAgICAgIHJldHVybiBkcmF3YWJsZUluZGV4O1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIC0xO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRHJhd2FibGXjga7lgIvmlbDjga7lj5blvpdcclxuICAgKiBAcmV0dXJuIGRyYXdhYmxl44Gu5YCL5pWwXHJcbiAgICovXHJcbiAgcHVibGljIGdldERyYXdhYmxlQ291bnQoKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IGRyYXdhYmxlQ291bnQgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuY291bnQ7XHJcbiAgICByZXR1cm4gZHJhd2FibGVDb3VudDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERyYXdhYmxl44GuSUTjgpLlj5blvpfjgZnjgotcclxuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAqIEByZXR1cm4gZHJhd2FibGXjga5JRFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXREcmF3YWJsZUlkKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlIHtcclxuICAgIGNvbnN0IHBhcmFtZXRlcklkczogc3RyaW5nW10gPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuaWRzO1xyXG4gICAgcmV0dXJuIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChwYXJhbWV0ZXJJZHNbZHJhd2FibGVJbmRleF0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRHJhd2FibGXjga7mj4/nlLvpoIbjg6rjgrnjg4jjga7lj5blvpdcclxuICAgKiBAcmV0dXJuIERyYXdhYmxl44Gu5o+P55S76aCG44Oq44K544OIXHJcbiAgICovXHJcbiAgcHVibGljIGdldERyYXdhYmxlUmVuZGVyT3JkZXJzKCk6IEludDMyQXJyYXkge1xyXG4gICAgY29uc3QgcmVuZGVyT3JkZXJzOiBJbnQzMkFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLnJlbmRlck9yZGVycztcclxuICAgIHJldHVybiByZW5kZXJPcmRlcnM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEcmF3YWJsZeOBruODhuOCr+OCueODgeODo+OCpOODs+ODh+ODg+OCr+OCueODquOCueODiOOBruWPluW+l1xyXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICogQHJldHVybiBkcmF3YWJsZeOBruODhuOCr+OCueODgeODo+OCpOODs+ODh+ODg+OCr+OCueODquOCueODiFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXREcmF3YWJsZVRleHR1cmVJbmRpY2VzKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICBjb25zdCB0ZXh0dXJlSW5kaWNlczogSW50MzJBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy50ZXh0dXJlSW5kaWNlcztcclxuICAgIHJldHVybiB0ZXh0dXJlSW5kaWNlc1tkcmF3YWJsZUluZGV4XTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERyYXdhYmxl44GuVmVydGV4UG9zaXRpb25z44Gu5aSJ5YyW5oOF5aCx44Gu5Y+W5b6XXHJcbiAgICpcclxuICAgKiDnm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgadEcmF3YWJsZeOBrumggueCueaDheWgseOBjOWkieWMluOBl+OBn+OBi+OCkuWPluW+l+OBmeOCi+OAglxyXG4gICAqXHJcbiAgICogQHBhcmFtICAgZHJhd2FibGVJbmRleCAgIERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICogQHJldHZhbCAgdHJ1ZSAgICBEcmF3YWJsZeOBrumggueCueaDheWgseOBjOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp+WkieWMluOBl+OBn1xyXG4gICAqIEByZXR2YWwgIGZhbHNlICAgRHJhd2FibGXjga7poILngrnmg4XloLHjgYznm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgaflpInljJbjgZfjgabjgYTjgarjgYRcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RHJhd2FibGVEeW5hbWljRmxhZ1ZlcnRleFBvc2l0aW9uc0RpZENoYW5nZShcclxuICAgIGRyYXdhYmxlSW5kZXg6IG51bWJlclxyXG4gICk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgZHluYW1pY0ZsYWdzOiBVaW50OEFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmR5bmFtaWNGbGFncztcclxuICAgIHJldHVybiBMaXZlMkRDdWJpc21Db3JlLlV0aWxzLmhhc1ZlcnRleFBvc2l0aW9uc0RpZENoYW5nZUJpdChcclxuICAgICAgZHluYW1pY0ZsYWdzW2RyYXdhYmxlSW5kZXhdXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRHJhd2FibGXjga7poILngrnjgqTjg7Pjg4fjg4Pjgq/jgrnjga7lgIvmlbDjga7lj5blvpdcclxuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAqIEByZXR1cm4gZHJhd2FibGXjga7poILngrnjgqTjg7Pjg4fjg4Pjgq/jgrnjga7lgIvmlbBcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RHJhd2FibGVWZXJ0ZXhJbmRleENvdW50KGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICBjb25zdCBpbmRleENvdW50czogSW50MzJBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5pbmRleENvdW50cztcclxuICAgIHJldHVybiBpbmRleENvdW50c1tkcmF3YWJsZUluZGV4XTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERyYXdhYmxl44Gu6aCC54K544Gu5YCL5pWw44Gu5Y+W5b6XXHJcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgKiBAcmV0dXJuIGRyYXdhYmxl44Gu6aCC54K544Gu5YCL5pWwXHJcbiAgICovXHJcbiAgcHVibGljIGdldERyYXdhYmxlVmVydGV4Q291bnQoZHJhd2FibGVJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IHZlcnRleENvdW50cyA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy52ZXJ0ZXhDb3VudHM7XHJcbiAgICByZXR1cm4gdmVydGV4Q291bnRzW2RyYXdhYmxlSW5kZXhdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRHJhd2FibGXjga7poILngrnjg6rjgrnjg4jjga7lj5blvpdcclxuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBkcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAqIEByZXR1cm4gZHJhd2FibGXjga7poILngrnjg6rjgrnjg4hcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RHJhd2FibGVWZXJ0aWNlcyhkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBGbG9hdDMyQXJyYXkge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0RHJhd2FibGVWZXJ0ZXhQb3NpdGlvbnMoZHJhd2FibGVJbmRleCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEcmF3YWJsZeOBrumggueCueOCpOODs+ODh+ODg+OCr+OCueODquOCueODiOOBruWPluW+l1xyXG4gICAqIEBwYXJhbSBkcmFyYWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICogQHJldHVybiBkcmF3YWJsZeOBrumggueCueOCpOODs+ODh+ODg+OCr+OCueODquOCueODiFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXREcmF3YWJsZVZlcnRleEluZGljZXMoZHJhd2FibGVJbmRleDogbnVtYmVyKTogVWludDE2QXJyYXkge1xyXG4gICAgY29uc3QgaW5kaWNlc0FycmF5OiBVaW50MTZBcnJheVtdID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmluZGljZXM7XHJcbiAgICByZXR1cm4gaW5kaWNlc0FycmF5W2RyYXdhYmxlSW5kZXhdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRHJhd2FibGXjga7poILngrnjg6rjgrnjg4jjga7lj5blvpdcclxuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAqIEByZXR1cm4gZHJhd2FibGXjga7poILngrnjg6rjgrnjg4hcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RHJhd2FibGVWZXJ0ZXhQb3NpdGlvbnMoZHJhd2FibGVJbmRleDogbnVtYmVyKTogRmxvYXQzMkFycmF5IHtcclxuICAgIGNvbnN0IHZlcnRpY2VzQXJyYXk6IEZsb2F0MzJBcnJheVtdID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLnZlcnRleFBvc2l0aW9ucztcclxuICAgIHJldHVybiB2ZXJ0aWNlc0FycmF5W2RyYXdhYmxlSW5kZXhdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRHJhd2FibGXjga7poILngrnjga5VVuODquOCueODiOOBruWPluW+l1xyXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICogQHJldHVybiBkcmF3YWJsZeOBrumggueCuVVW44Oq44K544OIXHJcbiAgICovXHJcbiAgcHVibGljIGdldERyYXdhYmxlVmVydGV4VXZzKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IEZsb2F0MzJBcnJheSB7XHJcbiAgICBjb25zdCB1dnNBcnJheTogRmxvYXQzMkFycmF5W10gPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMudmVydGV4VXZzO1xyXG4gICAgcmV0dXJuIHV2c0FycmF5W2RyYXdhYmxlSW5kZXhdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRHJhd2FibGXjga7kuI3pgI/mmI7luqbjga7lj5blvpdcclxuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAqIEByZXR1cm4gZHJhd2FibGXjga7kuI3pgI/mmI7luqZcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RHJhd2FibGVPcGFjaXR5KGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICBjb25zdCBvcGFjaXRpZXM6IEZsb2F0MzJBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5vcGFjaXRpZXM7XHJcbiAgICByZXR1cm4gb3BhY2l0aWVzW2RyYXdhYmxlSW5kZXhdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRHJhd2FibGXjga7jgqvjg6rjg7PjgrDmg4XloLHjga7lj5blvpdcclxuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAqIEByZXR1cm4gZHJhd2FibGXjga7jgqvjg6rjg7PjgrDmg4XloLFcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RHJhd2FibGVDdWxsaW5nKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgY29uc3RhbnRGbGFncyA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5jb25zdGFudEZsYWdzO1xyXG5cclxuICAgIHJldHVybiAhTGl2ZTJEQ3ViaXNtQ29yZS5VdGlscy5oYXNJc0RvdWJsZVNpZGVkQml0KFxyXG4gICAgICBjb25zdGFudEZsYWdzW2RyYXdhYmxlSW5kZXhdXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRHJhd2FibGXjga7jg5bjg6zjg7Pjg4njg6Ljg7zjg4njgpLlj5blvpdcclxuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAqIEByZXR1cm4gZHJhd2FibGXjga7jg5bjg6zjg7Pjg4njg6Ljg7zjg4lcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RHJhd2FibGVCbGVuZE1vZGUoZHJhd2FibGVJbmRleDogbnVtYmVyKTogQ3ViaXNtQmxlbmRNb2RlIHtcclxuICAgIGNvbnN0IGNvbnN0YW50RmxhZ3MgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuY29uc3RhbnRGbGFncztcclxuXHJcbiAgICByZXR1cm4gTGl2ZTJEQ3ViaXNtQ29yZS5VdGlscy5oYXNCbGVuZEFkZGl0aXZlQml0KFxyXG4gICAgICBjb25zdGFudEZsYWdzW2RyYXdhYmxlSW5kZXhdXHJcbiAgICApXHJcbiAgICAgID8gQ3ViaXNtQmxlbmRNb2RlLkN1YmlzbUJsZW5kTW9kZV9BZGRpdGl2ZVxyXG4gICAgICA6IExpdmUyREN1YmlzbUNvcmUuVXRpbHMuaGFzQmxlbmRNdWx0aXBsaWNhdGl2ZUJpdChcclxuICAgICAgICAgIGNvbnN0YW50RmxhZ3NbZHJhd2FibGVJbmRleF1cclxuICAgICAgICApXHJcbiAgICAgID8gQ3ViaXNtQmxlbmRNb2RlLkN1YmlzbUJsZW5kTW9kZV9NdWx0aXBsaWNhdGl2ZVxyXG4gICAgICA6IEN1YmlzbUJsZW5kTW9kZS5DdWJpc21CbGVuZE1vZGVfTm9ybWFsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRHJhd2FibGXjga7jg57jgrnjgq/jga7lj43ou6Lkvb/nlKjjga7lj5blvpdcclxuICAgKlxyXG4gICAqIERyYXdhYmxl44Gu44Oe44K544Kv5L2/55So5pmC44Gu5Y+N6Lui6Kit5a6a44KS5Y+W5b6X44GZ44KL44CCXHJcbiAgICog44Oe44K544Kv44KS5L2/55So44GX44Gq44GE5aC05ZCI44Gv54Sh6KaW44GV44KM44KL44CCXHJcbiAgICpcclxuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAqIEByZXR1cm4gRHJhd2FibGXjga7lj43ou6LoqK3lrppcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RHJhd2FibGVJbnZlcnRlZE1hc2tCaXQoZHJhd2FibGVJbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBjb25zdGFudEZsYWdzOiBVaW50OEFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmNvbnN0YW50RmxhZ3M7XHJcblxyXG4gICAgcmV0dXJuIExpdmUyREN1YmlzbUNvcmUuVXRpbHMuaGFzSXNJbnZlcnRlZE1hc2tCaXQoXHJcbiAgICAgIGNvbnN0YW50RmxhZ3NbZHJhd2FibGVJbmRleF1cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEcmF3YWJsZeOBruOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODquOCueODiOOBruWPluW+l1xyXG4gICAqIEByZXR1cm4gRHJhd2FibGXjga7jgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jg6rjgrnjg4hcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RHJhd2FibGVNYXNrcygpOiBJbnQzMkFycmF5W10ge1xyXG4gICAgY29uc3QgbWFza3M6IEludDMyQXJyYXlbXSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5tYXNrcztcclxuICAgIHJldHVybiBtYXNrcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERyYXdhYmxl44Gu44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu5YCL5pWw44Oq44K544OI44Gu5Y+W5b6XXHJcbiAgICogQHJldHVybiBEcmF3YWJsZeOBruOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBruWAi+aVsOODquOCueODiFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXREcmF3YWJsZU1hc2tDb3VudHMoKTogSW50MzJBcnJheSB7XHJcbiAgICBjb25zdCBtYXNrQ291bnRzOiBJbnQzMkFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLm1hc2tDb3VudHM7XHJcbiAgICByZXR1cm4gbWFza0NvdW50cztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBruS9v+eUqOeKtuaFi1xyXG4gICAqXHJcbiAgICogQHJldHVybiB0cnVlIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OCkuS9v+eUqOOBl+OBpuOBhOOCi1xyXG4gICAqIEByZXR1cm4gZmFsc2Ug44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44KS5L2/55So44GX44Gm44GE44Gq44GEXHJcbiAgICovXHJcbiAgcHVibGljIGlzVXNpbmdNYXNraW5nKCk6IGJvb2xlYW4ge1xyXG4gICAgZm9yIChsZXQgZCA9IDA7IGQgPCB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuY291bnQ7ICsrZCkge1xyXG4gICAgICBpZiAodGhpcy5fbW9kZWwuZHJhd2FibGVzLm1hc2tDb3VudHNbZF0gPD0gMCkge1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRHJhd2FibGXjga7ooajnpLrmg4XloLHjgpLlj5blvpfjgZnjgotcclxuICAgKlxyXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICogQHJldHVybiB0cnVlIERyYXdhYmxl44GM6KGo56S6XHJcbiAgICogQHJldHVybiBmYWxzZSBEcmF3YWJsZeOBjOmdnuihqOekulxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXREcmF3YWJsZUR5bmFtaWNGbGFnSXNWaXNpYmxlKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgZHluYW1pY0ZsYWdzOiBVaW50OEFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmR5bmFtaWNGbGFncztcclxuICAgIHJldHVybiBMaXZlMkRDdWJpc21Db3JlLlV0aWxzLmhhc0lzVmlzaWJsZUJpdChkeW5hbWljRmxhZ3NbZHJhd2FibGVJbmRleF0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRHJhd2FibGXjga5EcmF3T3JkZXLjga7lpInljJbmg4XloLHjga7lj5blvpdcclxuICAgKlxyXG4gICAqIOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp2RyYXdhYmxl44GuZHJhd09yZGVy44GM5aSJ5YyW44GX44Gf44GL44KS5Y+W5b6X44GZ44KL44CCXHJcbiAgICogZHJhd09yZGVy44GvYXJ0TWVzaOS4iuOBp+aMh+WumuOBmeOCizDjgYvjgokxMDAw44Gu5oOF5aCxXHJcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggZHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgKiBAcmV0dXJuIHRydWUgZHJhd2FibGXjga7kuI3pgI/mmI7luqbjgYznm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgaflpInljJbjgZfjgZ9cclxuICAgKiBAcmV0dXJuIGZhbHNlIGRyYXdhYmxl44Gu5LiN6YCP5piO5bqm44GM55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44Gn5aSJ5YyW44GX44Gm44GE44KLXHJcbiAgICovXHJcbiAgcHVibGljIGdldERyYXdhYmxlRHluYW1pY0ZsYWdWaXNpYmlsaXR5RGlkQ2hhbmdlKFxyXG4gICAgZHJhd2FibGVJbmRleDogbnVtYmVyXHJcbiAgKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBkeW5hbWljRmxhZ3M6IFVpbnQ4QXJyYXkgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuZHluYW1pY0ZsYWdzO1xyXG4gICAgcmV0dXJuIExpdmUyREN1YmlzbUNvcmUuVXRpbHMuaGFzVmlzaWJpbGl0eURpZENoYW5nZUJpdChcclxuICAgICAgZHluYW1pY0ZsYWdzW2RyYXdhYmxlSW5kZXhdXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRHJhd2FibGXjga7kuI3pgI/mmI7luqbjga7lpInljJbmg4XloLHjga7lj5blvpdcclxuICAgKlxyXG4gICAqIOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp2RyYXdhYmxl44Gu5LiN6YCP5piO5bqm44GM5aSJ5YyW44GX44Gf44GL44KS5Y+W5b6X44GZ44KL44CCXHJcbiAgICpcclxuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBkcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAqIEByZXR1cm4gdHJ1ZSBEcmF3YWJsZeOBruS4jemAj+aYjuW6puOBjOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp+WkieWMluOBl+OBn1xyXG4gICAqIEByZXR1cm4gZmFsc2UgRHJhd2FibGXjga7kuI3pgI/mmI7luqbjgYznm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgaflpInljJbjgZfjgabjgarjgYRcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RHJhd2FibGVEeW5hbWljRmxhZ09wYWNpdHlEaWRDaGFuZ2UoXHJcbiAgICBkcmF3YWJsZUluZGV4OiBudW1iZXJcclxuICApOiBib29sZWFuIHtcclxuICAgIGNvbnN0IGR5bmFtaWNGbGFnczogVWludDhBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5keW5hbWljRmxhZ3M7XHJcbiAgICByZXR1cm4gTGl2ZTJEQ3ViaXNtQ29yZS5VdGlscy5oYXNPcGFjaXR5RGlkQ2hhbmdlQml0KFxyXG4gICAgICBkeW5hbWljRmxhZ3NbZHJhd2FibGVJbmRleF1cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEcmF3YWJsZeOBruaPj+eUu+mghuW6j+OBruWkieWMluaDheWgseOBruWPluW+l1xyXG4gICAqXHJcbiAgICog55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44GnRHJhd2FibGXjga7mj4/nlLvjga7poIbluo/jgYzlpInljJbjgZfjgZ/jgYvjgpLlj5blvpfjgZnjgovjgIJcclxuICAgKlxyXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICogQHJldHVybiB0cnVlIERyYXdhYmxl44Gu5o+P55S744Gu6aCG5bqP44GM55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44Gn5aSJ5YyW44GX44GfXHJcbiAgICogQHJldHVybiBmYWxzZSBEcmF3YWJsZeOBruaPj+eUu+OBrumghuW6j+OBjOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp+WkieWMluOBl+OBpuOBquOBhFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXREcmF3YWJsZUR5bmFtaWNGbGFnUmVuZGVyT3JkZXJEaWRDaGFuZ2UoXHJcbiAgICBkcmF3YWJsZUluZGV4OiBudW1iZXJcclxuICApOiBib29sZWFuIHtcclxuICAgIGNvbnN0IGR5bmFtaWNGbGFnczogVWludDhBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5keW5hbWljRmxhZ3M7XHJcbiAgICByZXR1cm4gTGl2ZTJEQ3ViaXNtQ29yZS5VdGlscy5oYXNSZW5kZXJPcmRlckRpZENoYW5nZUJpdChcclxuICAgICAgZHluYW1pY0ZsYWdzW2RyYXdhYmxlSW5kZXhdXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5L+d5a2Y44GV44KM44Gf44OR44Op44Oh44O844K/44Gu6Kqt44G/6L6844G/XHJcbiAgICovXHJcbiAgcHVibGljIGxvYWRQYXJhbWV0ZXJzKCk6IHZvaWQge1xyXG4gICAgbGV0IHBhcmFtZXRlckNvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLmNvdW50O1xyXG4gICAgY29uc3Qgc2F2ZWRQYXJhbWV0ZXJDb3VudDogbnVtYmVyID0gdGhpcy5fc2F2ZWRQYXJhbWV0ZXJzLmdldFNpemUoKTtcclxuXHJcbiAgICBpZiAocGFyYW1ldGVyQ291bnQgPiBzYXZlZFBhcmFtZXRlckNvdW50KSB7XHJcbiAgICAgIHBhcmFtZXRlckNvdW50ID0gc2F2ZWRQYXJhbWV0ZXJDb3VudDtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmFtZXRlckNvdW50OyArK2kpIHtcclxuICAgICAgdGhpcy5fcGFyYW1ldGVyVmFsdWVzW2ldID0gdGhpcy5fc2F2ZWRQYXJhbWV0ZXJzLmF0KGkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yid5pyf5YyW44GZ44KLXHJcbiAgICovXHJcbiAgcHVibGljIGluaXRpYWxpemUoKTogdm9pZCB7XHJcbiAgICBDU01fQVNTRVJUKHRoaXMuX21vZGVsKTtcclxuXHJcbiAgICB0aGlzLl9wYXJhbWV0ZXJWYWx1ZXMgPSB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLnZhbHVlcztcclxuICAgIHRoaXMuX3BhcnRPcGFjaXRpZXMgPSB0aGlzLl9tb2RlbC5wYXJ0cy5vcGFjaXRpZXM7XHJcbiAgICB0aGlzLl9wYXJhbWV0ZXJNYXhpbXVtVmFsdWVzID0gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5tYXhpbXVtVmFsdWVzO1xyXG4gICAgdGhpcy5fcGFyYW1ldGVyTWluaW11bVZhbHVlcyA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMubWluaW11bVZhbHVlcztcclxuXHJcbiAgICB7XHJcbiAgICAgIGNvbnN0IHBhcmFtZXRlcklkczogc3RyaW5nW10gPSB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLmlkcztcclxuICAgICAgY29uc3QgcGFyYW1ldGVyQ291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMuY291bnQ7XHJcblxyXG4gICAgICB0aGlzLl9wYXJhbWV0ZXJJZHMucHJlcGFyZUNhcGFjaXR5KHBhcmFtZXRlckNvdW50KTtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbWV0ZXJDb3VudDsgKytpKSB7XHJcbiAgICAgICAgdGhpcy5fcGFyYW1ldGVySWRzLnB1c2hCYWNrKFxyXG4gICAgICAgICAgQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKHBhcmFtZXRlcklkc1tpXSlcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAge1xyXG4gICAgICBjb25zdCBwYXJ0SWRzOiBzdHJpbmdbXSA9IHRoaXMuX21vZGVsLnBhcnRzLmlkcztcclxuICAgICAgY29uc3QgcGFydENvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbC5wYXJ0cy5jb3VudDtcclxuXHJcbiAgICAgIHRoaXMuX3BhcnRJZHMucHJlcGFyZUNhcGFjaXR5KHBhcnRDb3VudCk7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFydENvdW50OyArK2kpIHtcclxuICAgICAgICB0aGlzLl9wYXJ0SWRzLnB1c2hCYWNrKFxyXG4gICAgICAgICAgQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKHBhcnRJZHNbaV0pXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHtcclxuICAgICAgY29uc3QgZHJhd2FibGVJZHM6IHN0cmluZ1tdID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmlkcztcclxuICAgICAgY29uc3QgZHJhd2FibGVDb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmNvdW50O1xyXG5cclxuICAgICAgdGhpcy5fZHJhd2FibGVJZHMucHJlcGFyZUNhcGFjaXR5KGRyYXdhYmxlQ291bnQpO1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRyYXdhYmxlQ291bnQ7ICsraSkge1xyXG4gICAgICAgIHRoaXMuX2RyYXdhYmxlSWRzLnB1c2hCYWNrKFxyXG4gICAgICAgICAgQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKGRyYXdhYmxlSWRzW2ldKVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAqIEBwYXJhbSBtb2RlbCDjg6Ljg4fjg6tcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IobW9kZWw6IExpdmUyREN1YmlzbUNvcmUuTW9kZWwpIHtcclxuICAgIHRoaXMuX21vZGVsID0gbW9kZWw7XHJcbiAgICB0aGlzLl9wYXJhbWV0ZXJWYWx1ZXMgPSBudWxsO1xyXG4gICAgdGhpcy5fcGFyYW1ldGVyTWF4aW11bVZhbHVlcyA9IG51bGw7XHJcbiAgICB0aGlzLl9wYXJhbWV0ZXJNaW5pbXVtVmFsdWVzID0gbnVsbDtcclxuICAgIHRoaXMuX3BhcnRPcGFjaXRpZXMgPSBudWxsO1xyXG4gICAgdGhpcy5fc2F2ZWRQYXJhbWV0ZXJzID0gbmV3IGNzbVZlY3RvcjxudW1iZXI+KCk7XHJcbiAgICB0aGlzLl9wYXJhbWV0ZXJJZHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPigpO1xyXG4gICAgdGhpcy5fZHJhd2FibGVJZHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPigpO1xyXG4gICAgdGhpcy5fcGFydElkcyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+KCk7XHJcblxyXG4gICAgdGhpcy5fbm90RXhpc3RQYXJ0SWQgPSBuZXcgY3NtTWFwPEN1YmlzbUlkSGFuZGxlLCBudW1iZXI+KCk7XHJcbiAgICB0aGlzLl9ub3RFeGlzdFBhcmFtZXRlcklkID0gbmV3IGNzbU1hcDxDdWJpc21JZEhhbmRsZSwgbnVtYmVyPigpO1xyXG4gICAgdGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJWYWx1ZXMgPSBuZXcgY3NtTWFwPG51bWJlciwgbnVtYmVyPigpO1xyXG4gICAgdGhpcy5fbm90RXhpc3RQYXJ0T3BhY2l0aWVzID0gbmV3IGNzbU1hcDxudW1iZXIsIG51bWJlcj4oKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5fbW9kZWwucmVsZWFzZSgpO1xyXG4gICAgdGhpcy5fbW9kZWwgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfbm90RXhpc3RQYXJ0T3BhY2l0aWVzOiBjc21NYXA8bnVtYmVyLCBudW1iZXI+OyAvLyDlrZjlnKjjgZfjgabjgYTjgarjgYTjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjga7jg6rjgrnjg4hcclxuICBwcml2YXRlIF9ub3RFeGlzdFBhcnRJZDogY3NtTWFwPEN1YmlzbUlkSGFuZGxlLCBudW1iZXI+OyAvLyDlrZjlnKjjgZfjgabjgYTjgarjgYTjg5Hjg7zjg4RJROOBruODquOCueODiFxyXG5cclxuICBwcml2YXRlIF9ub3RFeGlzdFBhcmFtZXRlclZhbHVlczogY3NtTWFwPG51bWJlciwgbnVtYmVyPjsgLy8g5a2Y5Zyo44GX44Gm44GE44Gq44GE44OR44Op44Oh44O844K/44Gu5YCk44Gu44Oq44K544OIXHJcbiAgcHJpdmF0ZSBfbm90RXhpc3RQYXJhbWV0ZXJJZDogY3NtTWFwPEN1YmlzbUlkSGFuZGxlLCBudW1iZXI+OyAvLyDlrZjlnKjjgZfjgabjgYTjgarjgYTjg5Hjg6njg6Hjg7zjgr9JROOBruODquOCueODiFxyXG5cclxuICBwcml2YXRlIF9zYXZlZFBhcmFtZXRlcnM6IGNzbVZlY3RvcjxudW1iZXI+OyAvLyDkv53lrZjjgZXjgozjgZ/jg5Hjg6njg6Hjg7zjgr9cclxuXHJcbiAgcHJpdmF0ZSBfbW9kZWw6IExpdmUyREN1YmlzbUNvcmUuTW9kZWw7IC8vIOODouODh+ODq1xyXG5cclxuICBwcml2YXRlIF9wYXJhbWV0ZXJWYWx1ZXM6IEZsb2F0MzJBcnJheTsgLy8g44OR44Op44Oh44O844K/44Gu5YCk44Gu44Oq44K544OIXHJcbiAgcHJpdmF0ZSBfcGFyYW1ldGVyTWF4aW11bVZhbHVlczogRmxvYXQzMkFycmF5OyAvLyDjg5Hjg6njg6Hjg7zjgr/jga7mnIDlpKflgKTjga7jg6rjgrnjg4hcclxuICBwcml2YXRlIF9wYXJhbWV0ZXJNaW5pbXVtVmFsdWVzOiBGbG9hdDMyQXJyYXk7IC8vIOODkeODqeODoeODvOOCv+OBruacgOWwj+WApOOBruODquOCueODiFxyXG5cclxuICBwcml2YXRlIF9wYXJ0T3BhY2l0aWVzOiBGbG9hdDMyQXJyYXk7IC8vIOODkeODvOODhOOBruS4jemAj+aYjuW6puOBruODquOCueODiFxyXG5cclxuICBwcml2YXRlIF9wYXJhbWV0ZXJJZHM6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT47XHJcbiAgcHJpdmF0ZSBfcGFydElkczogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPjtcclxuICBwcml2YXRlIF9kcmF3YWJsZUlkczogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPjtcclxufVxyXG5cclxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXHJcbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21tb2RlbCc7XHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcclxuICBleHBvcnQgY29uc3QgQ3ViaXNtTW9kZWwgPSAkLkN1YmlzbU1vZGVsO1xyXG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vZGVsID0gJC5DdWJpc21Nb2RlbDtcclxufVxyXG4iLCIvKipcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xyXG5pbXBvcnQgeyBDdWJpc21GcmFtZXdvcmsgfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xyXG5pbXBvcnQgeyBjc21TdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XHJcbmltcG9ydCB7IGNzbVZlY3RvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcclxuaW1wb3J0IHsgQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb24gfSBmcm9tICcuL2N1YmlzbW1vZGVsdXNlcmRhdGFqc29uJztcclxuXHJcbmNvbnN0IEFydE1lc2ggPSAnQXJ0TWVzaCc7XHJcblxyXG4vKipcclxuICog44Om44O844K244O844OH44O844K/44Kk44Oz44K/44O844OV44Kn44O844K5XHJcbiAqXHJcbiAqIEpzb27jgYvjgonoqq3jgb/ovrzjgpPjgaDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jgpLoqJjpjLLjgZfjgabjgYrjgY/jgZ/jgoHjga7mp4vpgKDkvZNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZSB7XHJcbiAgdGFyZ2V0VHlwZTogQ3ViaXNtSWRIYW5kbGU7IC8vIOODpuODvOOCtuODvOODh+ODvOOCv+OCv+ODvOOCsuODg+ODiOOCv+OCpOODl1xyXG4gIHRhcmdldElkOiBDdWJpc21JZEhhbmRsZTsgLy8g44Om44O844K244O844OH44O844K/44K/44O844Ky44OD44OI44GuSURcclxuICB2YWx1ZTogY3NtU3RyaW5nOyAvLyDjg6bjg7zjgrbjg7zjg4fjg7zjgr9cclxufVxyXG5cclxuLyoqXHJcbiAqIOODpuODvOOCtuODh+ODvOOCv+OBrueuoeeQhuOCr+ODqeOCuVxyXG4gKlxyXG4gKiDjg6bjg7zjgrbjg4fjg7zjgr/jgpLjg63jg7zjg4njgIHnrqHnkIbjgIHmpJzntKLjgqTjg7Pjgr/jg7zjg5XjgqfjgqTjgrnjgIHop6PmlL7jgb7jgafjgpLooYzjgYbjgIJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDdWJpc21Nb2RlbFVzZXJEYXRhIHtcclxuICAvKipcclxuICAgKiDjgqTjg7Pjgrnjgr/jg7Pjgrnjga7kvZzmiJBcclxuICAgKlxyXG4gICAqIEBwYXJhbSBidWZmZXIgICAgdXNlcmRhdGEzLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcclxuICAgKiBAcGFyYW0gc2l6ZSAgICAgIOODkOODg+ODleOCoeOBruOCteOCpOOCulxyXG4gICAqIEByZXR1cm4g5L2c5oiQ44GV44KM44Gf44Kk44Oz44K544K/44Oz44K5XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGUoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogQ3ViaXNtTW9kZWxVc2VyRGF0YSB7XHJcbiAgICBjb25zdCByZXQ6IEN1YmlzbU1vZGVsVXNlckRhdGEgPSBuZXcgQ3ViaXNtTW9kZWxVc2VyRGF0YSgpO1xyXG5cclxuICAgIHJldC5wYXJzZVVzZXJEYXRhKGJ1ZmZlciwgc2l6ZSk7XHJcblxyXG4gICAgcmV0dXJuIHJldDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOCkuegtOajhOOBmeOCi1xyXG4gICAqXHJcbiAgICogQHBhcmFtIG1vZGVsVXNlckRhdGEg56C05qOE44GZ44KL44Kk44Oz44K544K/44Oz44K5XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBkZWxldGUobW9kZWxVc2VyRGF0YTogQ3ViaXNtTW9kZWxVc2VyRGF0YSk6IHZvaWQge1xyXG4gICAgaWYgKG1vZGVsVXNlckRhdGEgIT0gbnVsbCkge1xyXG4gICAgICBtb2RlbFVzZXJEYXRhLnJlbGVhc2UoKTtcclxuICAgICAgbW9kZWxVc2VyRGF0YSA9IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBcnRNZXNo44Gu44Om44O844K244O844OH44O844K/44Gu44Oq44K544OI44Gu5Y+W5b6XXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIOODpuODvOOCtuODvOODh+ODvOOCv+ODquOCueODiFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRBcnRNZXNoVXNlckRhdGFzKCk6IGNzbVZlY3RvcjxDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2FydE1lc2hVc2VyRGF0YU5vZGU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiB1c2VyZGF0YTMuanNvbuOBruODkeODvOOCuVxyXG4gICAqXHJcbiAgICogQHBhcmFtIGJ1ZmZlciAgICB1c2VyZGF0YTMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxyXG4gICAqIEBwYXJhbSBzaXplICAgICAg44OQ44OD44OV44Kh44Gu44K144Kk44K6XHJcbiAgICovXHJcbiAgcHVibGljIHBhcnNlVXNlckRhdGEoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBsZXQganNvbjogQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb24gPSBuZXcgQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb24oXHJcbiAgICAgIGJ1ZmZlcixcclxuICAgICAgc2l6ZVxyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdCB0eXBlT2ZBcnRNZXNoID0gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKEFydE1lc2gpO1xyXG4gICAgY29uc3Qgbm9kZUNvdW50OiBudW1iZXIgPSBqc29uLmdldFVzZXJEYXRhQ291bnQoKTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVDb3VudDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGFkZE5vZGU6IEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlID0gbmV3IEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlKCk7XHJcblxyXG4gICAgICBhZGROb2RlLnRhcmdldElkID0ganNvbi5nZXRVc2VyRGF0YUlkKGkpO1xyXG4gICAgICBhZGROb2RlLnRhcmdldFR5cGUgPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXHJcbiAgICAgICAganNvbi5nZXRVc2VyRGF0YVRhcmdldFR5cGUoaSlcclxuICAgICAgKTtcclxuICAgICAgYWRkTm9kZS52YWx1ZSA9IG5ldyBjc21TdHJpbmcoanNvbi5nZXRVc2VyRGF0YVZhbHVlKGkpKTtcclxuICAgICAgdGhpcy5fdXNlckRhdGFOb2Rlcy5wdXNoQmFjayhhZGROb2RlKTtcclxuXHJcbiAgICAgIGlmIChhZGROb2RlLnRhcmdldFR5cGUgPT0gdHlwZU9mQXJ0TWVzaCkge1xyXG4gICAgICAgIHRoaXMuX2FydE1lc2hVc2VyRGF0YU5vZGUucHVzaEJhY2soYWRkTm9kZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBqc29uLnJlbGVhc2UoKTtcclxuICAgIGpzb24gPSB2b2lkIDA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLl91c2VyRGF0YU5vZGVzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZT4oKTtcclxuICAgIHRoaXMuX2FydE1lc2hVc2VyRGF0YU5vZGUgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlPigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXHJcbiAgICpcclxuICAgKiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/mp4vpgKDkvZPphY3liJfjgpLop6PmlL7jgZnjgotcclxuICAgKi9cclxuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fdXNlckRhdGFOb2Rlcy5nZXRTaXplKCk7ICsraSkge1xyXG4gICAgICB0aGlzLl91c2VyRGF0YU5vZGVzLnNldChpLCBudWxsKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl91c2VyRGF0YU5vZGVzID0gbnVsbDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX3VzZXJEYXRhTm9kZXM6IGNzbVZlY3RvcjxDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZT47IC8vIOODpuODvOOCtuODvOODh+ODvOOCv+ani+mAoOS9k+mFjeWIl1xyXG4gIHByaXZhdGUgX2FydE1lc2hVc2VyRGF0YU5vZGU6IGNzbVZlY3RvcjxDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZT47IC8vIOmWsuimp+ODquOCueODiOOBruS/neaMgVxyXG59XHJcblxyXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cclxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbW1vZGVsdXNlcmRhdGEnO1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vZGVsVXNlckRhdGEgPSAkLkN1YmlzbU1vZGVsVXNlckRhdGE7XHJcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW9kZWxVc2VyRGF0YSA9ICQuQ3ViaXNtTW9kZWxVc2VyRGF0YTtcclxuICBleHBvcnQgY29uc3QgQ3ViaXNtTW9kZWxVc2VyRGF0YU5vZGUgPSAkLkN1YmlzbU1vZGVsVXNlckRhdGFOb2RlO1xyXG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlID0gJC5DdWJpc21Nb2RlbFVzZXJEYXRhTm9kZTtcclxufVxyXG4iLCIvKipcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xyXG5pbXBvcnQgeyBDdWJpc21GcmFtZXdvcmsgfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xyXG5pbXBvcnQgeyBDdWJpc21Kc29uIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtanNvbic7XHJcblxyXG5jb25zdCBNZXRhID0gJ01ldGEnO1xyXG5jb25zdCBVc2VyRGF0YUNvdW50ID0gJ1VzZXJEYXRhQ291bnQnO1xyXG5jb25zdCBUb3RhbFVzZXJEYXRhU2l6ZSA9ICdUb3RhbFVzZXJEYXRhU2l6ZSc7XHJcbmNvbnN0IFVzZXJEYXRhID0gJ1VzZXJEYXRhJztcclxuY29uc3QgVGFyZ2V0ID0gJ1RhcmdldCc7XHJcbmNvbnN0IElkID0gJ0lkJztcclxuY29uc3QgVmFsdWUgPSAnVmFsdWUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEN1YmlzbU1vZGVsVXNlckRhdGFKc29uIHtcclxuICAvKipcclxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgKiBAcGFyYW0gYnVmZmVyICAgIHVzZXJkYXRhMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXHJcbiAgICogQHBhcmFtIHNpemUgICAgICDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKSB7XHJcbiAgICB0aGlzLl9qc29uID0gQ3ViaXNtSnNvbi5jcmVhdGUoYnVmZmVyLCBzaXplKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xyXG4gICAgQ3ViaXNtSnNvbi5kZWxldGUodGhpcy5fanNvbik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/lgIvmlbDjga7lj5blvpdcclxuICAgKiBAcmV0dXJuIOODpuODvOOCtuODvOODh+ODvOOCv+OBruWAi+aVsFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRVc2VyRGF0YUNvdW50KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fanNvblxyXG4gICAgICAuZ2V0Um9vdCgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhQ291bnQpXHJcbiAgICAgIC50b0ludCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Om44O844K244O844OH44O844K/57eP5paH5a2X5YiX5pWw44Gu5Y+W5b6XXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIOODpuODvOOCtuODvOODh+ODvOOCv+e3j+aWh+Wtl+WIl+aVsFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRUb3RhbFVzZXJEYXRhU2l6ZSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2pzb25cclxuICAgICAgLmdldFJvb3QoKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhUb3RhbFVzZXJEYXRhU2l6ZSlcclxuICAgICAgLnRvSW50KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jga7jgr/jgqTjg5fjga7lj5blvpdcclxuICAgKlxyXG4gICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/44Gu44K/44Kk44OXXHJcbiAgICovXHJcbiAgcHVibGljIGdldFVzZXJEYXRhVGFyZ2V0VHlwZShpOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuX2pzb25cclxuICAgICAgLmdldFJvb3QoKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhVc2VyRGF0YSlcclxuICAgICAgLmdldFZhbHVlQnlJbmRleChpKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhUYXJnZXQpXHJcbiAgICAgIC5nZXRSYXdTdHJpbmcoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODpuODvOOCtuODvOODh+ODvOOCv+OBruOCv+ODvOOCsuODg+ODiElE44Gu5Y+W5b6XXHJcbiAgICpcclxuICAgKiBAcGFyYW0gaSDjgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgKiBAcmV0dXJuIOODpuODvOOCtuODvOODh+ODvOOCv+OCv+ODvOOCsuODg+ODiElEXHJcbiAgICovXHJcbiAgcHVibGljIGdldFVzZXJEYXRhSWQoaTogbnVtYmVyKTogQ3ViaXNtSWRIYW5kbGUge1xyXG4gICAgcmV0dXJuIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcclxuICAgICAgdGhpcy5fanNvblxyXG4gICAgICAgIC5nZXRSb290KClcclxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhVc2VyRGF0YSlcclxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGkpXHJcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoSWQpXHJcbiAgICAgICAgLmdldFJhd1N0cmluZygpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Om44O844K244O844OH44O844K/44Gu5paH5a2X5YiX44Gu5Y+W5b6XXHJcbiAgICpcclxuICAgKiBAcGFyYW0gaSDjgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgKiBAcmV0dXJuIOODpuODvOOCtuODvOODh+ODvOOCv1xyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRVc2VyRGF0YVZhbHVlKGk6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fanNvblxyXG4gICAgICAuZ2V0Um9vdCgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhKVxyXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGkpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFZhbHVlKVxyXG4gICAgICAuZ2V0UmF3U3RyaW5nKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF9qc29uOiBDdWJpc21Kc29uO1xyXG59XHJcblxyXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cclxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbW1vZGVsdXNlcmRhdGFqc29uJztcclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xyXG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb2RlbFVzZXJEYXRhSnNvbiA9ICQuQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb247XHJcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb24gPSAkLkN1YmlzbU1vZGVsVXNlckRhdGFKc29uO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQ3ViaXNtQnJlYXRoIH0gZnJvbSAnLi4vZWZmZWN0L2N1YmlzbWJyZWF0aCc7XHJcbmltcG9ydCB7IEN1YmlzbUV5ZUJsaW5rIH0gZnJvbSAnLi4vZWZmZWN0L2N1YmlzbWV5ZWJsaW5rJztcclxuaW1wb3J0IHsgQ3ViaXNtUG9zZSB9IGZyb20gJy4uL2VmZmVjdC9jdWJpc21wb3NlJztcclxuaW1wb3J0IHsgQ3ViaXNtSWRIYW5kbGUgfSBmcm9tICcuLi9pZC9jdWJpc21pZCc7XHJcbmltcG9ydCB7IENvbnN0YW50IH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcclxuaW1wb3J0IHsgQ3ViaXNtTW9kZWxNYXRyaXggfSBmcm9tICcuLi9tYXRoL2N1YmlzbW1vZGVsbWF0cml4JztcclxuaW1wb3J0IHsgQ3ViaXNtVGFyZ2V0UG9pbnQgfSBmcm9tICcuLi9tYXRoL2N1YmlzbXRhcmdldHBvaW50JztcclxuaW1wb3J0IHsgQUN1YmlzbU1vdGlvbiwgRmluaXNoZWRNb3Rpb25DYWxsYmFjayB9IGZyb20gJy4uL21vdGlvbi9hY3ViaXNtbW90aW9uJztcclxuaW1wb3J0IHsgQ3ViaXNtRXhwcmVzc2lvbk1vdGlvbiB9IGZyb20gJy4uL21vdGlvbi9jdWJpc21leHByZXNzaW9ubW90aW9uJztcclxuaW1wb3J0IHsgQ3ViaXNtTW90aW9uIH0gZnJvbSAnLi4vbW90aW9uL2N1YmlzbW1vdGlvbic7XHJcbmltcG9ydCB7IEN1YmlzbU1vdGlvbk1hbmFnZXIgfSBmcm9tICcuLi9tb3Rpb24vY3ViaXNtbW90aW9ubWFuYWdlcic7XHJcbmltcG9ydCB7IEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlciB9IGZyb20gJy4uL21vdGlvbi9jdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXInO1xyXG5pbXBvcnQgeyBDdWJpc21QaHlzaWNzIH0gZnJvbSAnLi4vcGh5c2ljcy9jdWJpc21waHlzaWNzJztcclxuaW1wb3J0IHsgQ3ViaXNtUmVuZGVyZXJfV2ViR0wgfSBmcm9tICcuLi9yZW5kZXJpbmcvY3ViaXNtcmVuZGVyZXJfd2ViZ2wnO1xyXG5pbXBvcnQgeyBjc21TdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XHJcbmltcG9ydCB7IEN1YmlzbUxvZ0Vycm9yLCBDdWJpc21Mb2dJbmZvIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtZGVidWcnO1xyXG5pbXBvcnQgeyBDdWJpc21Nb2MgfSBmcm9tICcuL2N1YmlzbW1vYyc7XHJcbmltcG9ydCB7IEN1YmlzbU1vZGVsIH0gZnJvbSAnLi9jdWJpc21tb2RlbCc7XHJcbmltcG9ydCB7IEN1YmlzbU1vZGVsVXNlckRhdGEgfSBmcm9tICcuL2N1YmlzbW1vZGVsdXNlcmRhdGEnO1xyXG5cclxuLyoqXHJcbiAqIOODpuODvOOCtuODvOOBjOWun+mam+OBq+S9v+eUqOOBmeOCi+ODouODh+ODq1xyXG4gKlxyXG4gKiDjg6bjg7zjgrbjg7zjgYzlrp/pmpvjgavkvb/nlKjjgZnjgovjg6Ljg4fjg6vjga7ln7rlupXjgq/jg6njgrnjgILjgZPjgozjgpLntpnmib/jgZfjgabjg6bjg7zjgrbjg7zjgYzlrp/oo4XjgZnjgovjgIJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDdWJpc21Vc2VyTW9kZWwge1xyXG4gIC8qKlxyXG4gICAqIOWIneacn+WMlueKtuaFi+OBruWPluW+l1xyXG4gICAqXHJcbiAgICog5Yid5pyf5YyW44GV44KM44Gm44GE44KL54q25oWL44GL77yfXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIHRydWUgICAgIOWIneacn+WMluOBleOCjOOBpuOBhOOCi1xyXG4gICAqIEByZXR1cm4gZmFsc2UgICAg5Yid5pyf5YyW44GV44KM44Gm44GE44Gq44GEXHJcbiAgICovXHJcbiAgcHVibGljIGlzSW5pdGlhbGl6ZWQoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5faW5pdGlhbGl6ZWQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliJ3mnJ/ljJbnirbmhYvjga7oqK3lrppcclxuICAgKlxyXG4gICAqIOWIneacn+WMlueKtuaFi+OCkuioreWumuOBmeOCi+OAglxyXG4gICAqXHJcbiAgICogQHBhcmFtIHYg5Yid5pyf5YyW54q25oWLXHJcbiAgICovXHJcbiAgcHVibGljIHNldEluaXRpYWxpemVkKHY6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgIHRoaXMuX2luaXRpYWxpemVkID0gdjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOabtOaWsOeKtuaFi+OBruWPluW+l1xyXG4gICAqXHJcbiAgICog5pu05paw44GV44KM44Gm44GE44KL54q25oWL44GL77yfXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIHRydWUgICAgIOabtOaWsOOBleOCjOOBpuOBhOOCi1xyXG4gICAqIEByZXR1cm4gZmFsc2UgICAg5pu05paw44GV44KM44Gm44GE44Gq44GEXHJcbiAgICovXHJcbiAgcHVibGljIGlzVXBkYXRpbmcoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5fdXBkYXRpbmc7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmm7TmlrDnirbmhYvjga7oqK3lrppcclxuICAgKlxyXG4gICAqIOabtOaWsOeKtuaFi+OCkuioreWumuOBmeOCi1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHYg5pu05paw54q25oWLXHJcbiAgICovXHJcbiAgcHVibGljIHNldFVwZGF0aW5nKHY6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgIHRoaXMuX3VwZGF0aW5nID0gdjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODnuOCpuOCueODieODqeODg+OCsOaDheWgseOBruioreWumlxyXG4gICAqIEBwYXJhbSDjg4njg6njg4PjgrDjgZfjgabjgYTjgovjgqvjg7zjgr3jg6vjga5Y5L2N572uXHJcbiAgICogQHBhcmFtIOODieODqeODg+OCsOOBl+OBpuOBhOOCi+OCq+ODvOOCveODq+OBrlnkvY3nva5cclxuICAgKi9cclxuICBwdWJsaWMgc2V0RHJhZ2dpbmcoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuX2RyYWdNYW5hZ2VyLnNldCh4LCB5KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWKoOmAn+W6puOBruaDheWgseOCkuioreWumuOBmeOCi1xyXG4gICAqIEBwYXJhbSB4IFjou7jmlrnlkJHjga7liqDpgJ/luqZcclxuICAgKiBAcGFyYW0geSBZ6Lu45pa55ZCR44Gu5Yqg6YCf5bqmXHJcbiAgICogQHBhcmFtIHogWui7uOaWueWQkeOBruWKoOmAn+W6plxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRBY2NlbGVyYXRpb24oeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5fYWNjZWxlcmF0aW9uWCA9IHg7XHJcbiAgICB0aGlzLl9hY2NlbGVyYXRpb25ZID0geTtcclxuICAgIHRoaXMuX2FjY2VsZXJhdGlvblogPSB6O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44OH44Or6KGM5YiX44KS5Y+W5b6X44GZ44KLXHJcbiAgICogQHJldHVybiDjg6Ljg4fjg6vooYzliJdcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0TW9kZWxNYXRyaXgoKTogQ3ViaXNtTW9kZWxNYXRyaXgge1xyXG4gICAgcmV0dXJuIHRoaXMuX21vZGVsTWF0cml4O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5LiN6YCP5piO5bqm44Gu6Kit5a6aXHJcbiAgICogQHBhcmFtIGEg5LiN6YCP5piO5bqmXHJcbiAgICovXHJcbiAgcHVibGljIHNldE9wYWNpdHkoYTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLl9vcGFjaXR5ID0gYTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOS4jemAj+aYjuW6puOBruWPluW+l1xyXG4gICAqIEByZXR1cm4g5LiN6YCP5piO5bqmXHJcbiAgICovXHJcbiAgcHVibGljIGdldE9wYWNpdHkoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9vcGFjaXR5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44OH44Or44OH44O844K/44KS6Kqt44G/6L6844KAXHJcbiAgICpcclxuICAgKiBAcGFyYW0gYnVmZmVyICAgIG1vYzPjg5XjgqHjgqTjg6vjgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcclxuICAgKi9cclxuICBwdWJsaWMgbG9hZE1vZGVsKGJ1ZmZlcjogQXJyYXlCdWZmZXIpIHtcclxuICAgIHRoaXMuX21vYyA9IEN1YmlzbU1vYy5jcmVhdGUoYnVmZmVyKTtcclxuICAgIHRoaXMuX21vZGVsID0gdGhpcy5fbW9jLmNyZWF0ZU1vZGVsKCk7XHJcbiAgICB0aGlzLl9tb2RlbC5zYXZlUGFyYW1ldGVycygpO1xyXG5cclxuICAgIGlmICh0aGlzLl9tb2MgPT0gbnVsbCB8fCB0aGlzLl9tb2RlbCA9PSBudWxsKSB7XHJcbiAgICAgIEN1YmlzbUxvZ0Vycm9yKCdGYWlsZWQgdG8gQ3JlYXRlTW9kZWwoKS4nKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX21vZGVsTWF0cml4ID0gbmV3IEN1YmlzbU1vZGVsTWF0cml4KFxyXG4gICAgICB0aGlzLl9tb2RlbC5nZXRDYW52YXNXaWR0aCgpLFxyXG4gICAgICB0aGlzLl9tb2RlbC5nZXRDYW52YXNIZWlnaHQoKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODvOOCt+ODp+ODs+ODh+ODvOOCv+OCkuiqreOBv+i+vOOCgFxyXG4gICAqIEBwYXJhbSBidWZmZXIgbW90aW9uMy5qc29u44OV44Kh44Kk44Or44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXHJcbiAgICogQHBhcmFtIHNpemUg44OQ44OD44OV44Kh44Gu44K144Kk44K6XHJcbiAgICogQHBhcmFtIG5hbWUg44Oi44O844K344On44Oz44Gu5ZCN5YmNXHJcbiAgICogQHBhcmFtIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyIOODouODvOOCt+ODp+ODs+WGjeeUn+e1guS6huaZguOBq+WRvOOBs+WHuuOBleOCjOOCi+OCs+ODvOODq+ODkOODg+OCr+mWouaVsFxyXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Kv44Op44K5XHJcbiAgICovXHJcbiAgcHVibGljIGxvYWRNb3Rpb24gPSAoXHJcbiAgICBidWZmZXI6IEFycmF5QnVmZmVyLFxyXG4gICAgc2l6ZTogbnVtYmVyLFxyXG4gICAgbmFtZTogc3RyaW5nLFxyXG4gICAgb25GaW5pc2hlZE1vdGlvbkhhbmRsZXI/OiBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrXHJcbiAgKSA9PiBDdWJpc21Nb3Rpb24uY3JlYXRlKGJ1ZmZlciwgc2l6ZSwgb25GaW5pc2hlZE1vdGlvbkhhbmRsZXIpO1xyXG5cclxuICAvKipcclxuICAgKiDooajmg4Xjg4fjg7zjgr/jga7oqq3jgb/ovrzjgb9cclxuICAgKiBAcGFyYW0gYnVmZmVyIGV4cOODleOCoeOCpOODq+OBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxyXG4gICAqIEBwYXJhbSBzaXplIOODkOODg+ODleOCoeOBruOCteOCpOOCulxyXG4gICAqIEBwYXJhbSBuYW1lIOihqOaDheOBruWQjeWJjVxyXG4gICAqL1xyXG4gIHB1YmxpYyBsb2FkRXhwcmVzc2lvbihcclxuICAgIGJ1ZmZlcjogQXJyYXlCdWZmZXIsXHJcbiAgICBzaXplOiBudW1iZXIsXHJcbiAgICBuYW1lOiBzdHJpbmdcclxuICApOiBBQ3ViaXNtTW90aW9uIHtcclxuICAgIHJldHVybiBDdWJpc21FeHByZXNzaW9uTW90aW9uLmNyZWF0ZShidWZmZXIsIHNpemUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Od44O844K644OH44O844K/44Gu6Kqt44G/6L6844G/XHJcbiAgICogQHBhcmFtIGJ1ZmZlciBwb3NlMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXHJcbiAgICogQHBhcmFtIHNpemUg44OQ44OD44OV44Kh44Gu44K144Kk44K6XHJcbiAgICovXHJcbiAgcHVibGljIGxvYWRQb3NlKGJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5fcG9zZSA9IEN1YmlzbVBvc2UuY3JlYXRlKGJ1ZmZlciwgc2l6ZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6Ljg4fjg6vjgavku5jlsZ7jgZnjgovjg6bjg7zjgrbjg7zjg4fjg7zjgr/jgpLoqq3jgb/ovrzjgoBcclxuICAgKiBAcGFyYW0gYnVmZmVyIHVzZXJkYXRhMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXHJcbiAgICogQHBhcmFtIHNpemUg44OQ44OD44OV44Kh44Gu44K144Kk44K6XHJcbiAgICovXHJcbiAgcHVibGljIGxvYWRVc2VyRGF0YShidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuX21vZGVsVXNlckRhdGEgPSBDdWJpc21Nb2RlbFVzZXJEYXRhLmNyZWF0ZShidWZmZXIsIHNpemUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog54mp55CG5ryU566X44OH44O844K/44Gu6Kqt44G/6L6844G/XHJcbiAgICogQHBhcmFtIGJ1ZmZlciAgcGh5c2ljczMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxyXG4gICAqIEBwYXJhbSBzaXplICAgIOODkOODg+ODleOCoeOBruOCteOCpOOCulxyXG4gICAqL1xyXG4gIHB1YmxpYyBsb2FkUGh5c2ljcyhidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuX3BoeXNpY3MgPSBDdWJpc21QaHlzaWNzLmNyZWF0ZShidWZmZXIsIHNpemUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5b2T44Gf44KK5Yik5a6a44Gu5Y+W5b6XXHJcbiAgICogQHBhcmFtIGRyYXdhYmxlSWQg5qSc6Ki844GX44Gf44GERHJhd2FibGXjga5JRFxyXG4gICAqIEBwYXJhbSBwb2ludFggWOS9jee9rlxyXG4gICAqIEBwYXJhbSBwb2ludFkgWeS9jee9rlxyXG4gICAqIEByZXR1cm4gdHJ1ZSDjg5Ljg4Pjg4jjgZfjgabjgYTjgotcclxuICAgKiBAcmV0dXJuIGZhbHNlIOODkuODg+ODiOOBl+OBpuOBhOOBquOBhFxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc0hpdChcclxuICAgIGRyYXdhYmxlSWQ6IEN1YmlzbUlkSGFuZGxlLFxyXG4gICAgcG9pbnRYOiBudW1iZXIsXHJcbiAgICBwb2ludFk6IG51bWJlclxyXG4gICk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgZHJhd0luZGV4OiBudW1iZXIgPSB0aGlzLl9tb2RlbC5nZXREcmF3YWJsZUluZGV4KGRyYXdhYmxlSWQpO1xyXG5cclxuICAgIGlmIChkcmF3SW5kZXggPCAwKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTsgLy8g5a2Y5Zyo44GX44Gq44GE5aC05ZCI44GvZmFsc2VcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwuZ2V0RHJhd2FibGVWZXJ0ZXhDb3VudChkcmF3SW5kZXgpO1xyXG4gICAgY29uc3QgdmVydGljZXM6IEZsb2F0MzJBcnJheSA9IHRoaXMuX21vZGVsLmdldERyYXdhYmxlVmVydGljZXMoZHJhd0luZGV4KTtcclxuXHJcbiAgICBsZXQgbGVmdDogbnVtYmVyID0gdmVydGljZXNbMF07XHJcbiAgICBsZXQgcmlnaHQ6IG51bWJlciA9IHZlcnRpY2VzWzBdO1xyXG4gICAgbGV0IHRvcDogbnVtYmVyID0gdmVydGljZXNbMV07XHJcbiAgICBsZXQgYm90dG9tOiBudW1iZXIgPSB2ZXJ0aWNlc1sxXTtcclxuXHJcbiAgICBmb3IgKGxldCBqID0gMTsgaiA8IGNvdW50OyArK2opIHtcclxuICAgICAgY29uc3QgeCA9IHZlcnRpY2VzW0NvbnN0YW50LnZlcnRleE9mZnNldCArIGogKiBDb25zdGFudC52ZXJ0ZXhTdGVwXTtcclxuICAgICAgY29uc3QgeSA9IHZlcnRpY2VzW0NvbnN0YW50LnZlcnRleE9mZnNldCArIGogKiBDb25zdGFudC52ZXJ0ZXhTdGVwICsgMV07XHJcblxyXG4gICAgICBpZiAoeCA8IGxlZnQpIHtcclxuICAgICAgICBsZWZ0ID0geDsgLy8gTWluIHhcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHggPiByaWdodCkge1xyXG4gICAgICAgIHJpZ2h0ID0geDsgLy8gTWF4IHhcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHkgPCB0b3ApIHtcclxuICAgICAgICB0b3AgPSB5OyAvLyBNaW4geVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoeSA+IGJvdHRvbSkge1xyXG4gICAgICAgIGJvdHRvbSA9IHk7IC8vIE1heCB5XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0eDogbnVtYmVyID0gdGhpcy5fbW9kZWxNYXRyaXguaW52ZXJ0VHJhbnNmb3JtWChwb2ludFgpO1xyXG4gICAgY29uc3QgdHk6IG51bWJlciA9IHRoaXMuX21vZGVsTWF0cml4LmludmVydFRyYW5zZm9ybVkocG9pbnRZKTtcclxuXHJcbiAgICByZXR1cm4gbGVmdCA8PSB0eCAmJiB0eCA8PSByaWdodCAmJiB0b3AgPD0gdHkgJiYgdHkgPD0gYm90dG9tO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44OH44Or44Gu5Y+W5b6XXHJcbiAgICogQHJldHVybiDjg6Ljg4fjg6tcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0TW9kZWwoKTogQ3ViaXNtTW9kZWwge1xyXG4gICAgcmV0dXJuIHRoaXMuX21vZGVsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Os44Oz44OA44Op44Gu5Y+W5b6XXHJcbiAgICogQHJldHVybiDjg6zjg7Pjg4Djg6lcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0UmVuZGVyZXIoKTogQ3ViaXNtUmVuZGVyZXJfV2ViR0wge1xyXG4gICAgcmV0dXJuIHRoaXMuX3JlbmRlcmVyO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Os44Oz44OA44Op44KS5L2c5oiQ44GX44Gm5Yid5pyf5YyW44KS5a6f6KGM44GZ44KLXHJcbiAgICovXHJcbiAgcHVibGljIGNyZWF0ZVJlbmRlcmVyKCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuX3JlbmRlcmVyKSB7XHJcbiAgICAgIHRoaXMuZGVsZXRlUmVuZGVyZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9yZW5kZXJlciA9IG5ldyBDdWJpc21SZW5kZXJlcl9XZWJHTCgpO1xyXG4gICAgdGhpcy5fcmVuZGVyZXIuaW5pdGlhbGl6ZSh0aGlzLl9tb2RlbCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6zjg7Pjg4Djg6njga7op6PmlL5cclxuICAgKi9cclxuICBwdWJsaWMgZGVsZXRlUmVuZGVyZXIoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5fcmVuZGVyZXIgIT0gbnVsbCkge1xyXG4gICAgICB0aGlzLl9yZW5kZXJlci5yZWxlYXNlKCk7XHJcbiAgICAgIHRoaXMuX3JlbmRlcmVyID0gbnVsbDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCpOODmeODs+ODiOeZuueBq+aZguOBruaomea6luWHpueQhlxyXG4gICAqXHJcbiAgICogRXZlbnTjgYzlho3nlJ/lh6bnkIbmmYLjgavjgYLjgaPjgZ/loLTlkIjjga7lh6bnkIbjgpLjgZnjgovjgIJcclxuICAgKiDntpnmib/jgafkuIrmm7jjgY3jgZnjgovjgZPjgajjgpLmg7PlrprjgZfjgabjgYTjgovjgIJcclxuICAgKiDkuIrmm7jjgY3jgZfjgarjgYTloLTlkIjjga/jg63jgrDlh7rlipvjgpLjgZnjgovjgIJcclxuICAgKlxyXG4gICAqIEBwYXJhbSBldmVudFZhbHVlIOeZuueBq+OBl+OBn+OCpOODmeODs+ODiOOBruaWh+Wtl+WIl+ODh+ODvOOCv1xyXG4gICAqL1xyXG4gIHB1YmxpYyBtb3Rpb25FdmVudEZpcmVkKGV2ZW50VmFsdWU6IGNzbVN0cmluZyk6IHZvaWQge1xyXG4gICAgQ3ViaXNtTG9nSW5mbygnezB9JywgZXZlbnRWYWx1ZS5zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCpOODmeODs+ODiOeUqOOBruOCs+ODvOODq+ODkOODg+OCr1xyXG4gICAqXHJcbiAgICogQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2Vy44Gr44Kk44OZ44Oz44OI55So44Gr55m76Yyy44GZ44KL44Gf44KB44GuQ2FsbGJhY2vjgIJcclxuICAgKiBDdWJpc21Vc2VyTW9kZWzjga7ntpnmib/lhYjjga5FdmVudEZpcmVk44KS5ZG844G244CCXHJcbiAgICpcclxuICAgKiBAcGFyYW0gY2FsbGVyIOeZuueBq+OBl+OBn+OCpOODmeODs+ODiOOCkueuoeeQhuOBl+OBpuOBhOOBn+ODouODvOOCt+ODp+ODs+ODnuODjeODvOOCuOODo+ODvOOAgeavlOi8g+eUqFxyXG4gICAqIEBwYXJhbSBldmVudFZhbHVlIOeZuueBq+OBl+OBn+OCpOODmeODs+ODiOOBruaWh+Wtl+WIl+ODh+ODvOOCv1xyXG4gICAqIEBwYXJhbSBjdXN0b21EYXRhIEN1YmlzbVVzZXJNb2RlbOOCkue2meaJv+OBl+OBn+OCpOODs+OCueOCv+ODs+OCueOCkuaDs+WumlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY3ViaXNtRGVmYXVsdE1vdGlvbkV2ZW50Q2FsbGJhY2soXHJcbiAgICBjYWxsZXI6IEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcixcclxuICAgIGV2ZW50VmFsdWU6IGNzbVN0cmluZyxcclxuICAgIGN1c3RvbURhdGE6IEN1YmlzbVVzZXJNb2RlbFxyXG4gICk6IHZvaWQge1xyXG4gICAgY29uc3QgbW9kZWw6IEN1YmlzbVVzZXJNb2RlbCA9IGN1c3RvbURhdGE7XHJcblxyXG4gICAgaWYgKG1vZGVsICE9IG51bGwpIHtcclxuICAgICAgbW9kZWwubW90aW9uRXZlbnRGaXJlZChldmVudFZhbHVlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICAgIC8vIOWQhOWkieaVsOWIneacn+WMllxyXG4gICAgdGhpcy5fbW9jID0gbnVsbDtcclxuICAgIHRoaXMuX21vZGVsID0gbnVsbDtcclxuICAgIHRoaXMuX21vdGlvbk1hbmFnZXIgPSBudWxsO1xyXG4gICAgdGhpcy5fZXhwcmVzc2lvbk1hbmFnZXIgPSBudWxsO1xyXG4gICAgdGhpcy5fZXllQmxpbmsgPSBudWxsO1xyXG4gICAgdGhpcy5fYnJlYXRoID0gbnVsbDtcclxuICAgIHRoaXMuX21vZGVsTWF0cml4ID0gbnVsbDtcclxuICAgIHRoaXMuX3Bvc2UgPSBudWxsO1xyXG4gICAgdGhpcy5fZHJhZ01hbmFnZXIgPSBudWxsO1xyXG4gICAgdGhpcy5fcGh5c2ljcyA9IG51bGw7XHJcbiAgICB0aGlzLl9tb2RlbFVzZXJEYXRhID0gbnVsbDtcclxuICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XHJcbiAgICB0aGlzLl91cGRhdGluZyA9IGZhbHNlO1xyXG4gICAgdGhpcy5fb3BhY2l0eSA9IDEuMDtcclxuICAgIHRoaXMuX2xpcHN5bmMgPSB0cnVlO1xyXG4gICAgdGhpcy5fbGFzdExpcFN5bmNWYWx1ZSA9IDAuMDtcclxuICAgIHRoaXMuX2RyYWdYID0gMC4wO1xyXG4gICAgdGhpcy5fZHJhZ1kgPSAwLjA7XHJcbiAgICB0aGlzLl9hY2NlbGVyYXRpb25YID0gMC4wO1xyXG4gICAgdGhpcy5fYWNjZWxlcmF0aW9uWSA9IDAuMDtcclxuICAgIHRoaXMuX2FjY2VsZXJhdGlvblogPSAwLjA7XHJcbiAgICB0aGlzLl9kZWJ1Z01vZGUgPSBmYWxzZTtcclxuICAgIHRoaXMuX3JlbmRlcmVyID0gbnVsbDtcclxuXHJcbiAgICAvLyDjg6Ljg7zjgrfjg6fjg7Pjg57jg43jg7zjgrjjg6Pjg7zjgpLkvZzmiJBcclxuICAgIHRoaXMuX21vdGlvbk1hbmFnZXIgPSBuZXcgQ3ViaXNtTW90aW9uTWFuYWdlcigpO1xyXG4gICAgdGhpcy5fbW90aW9uTWFuYWdlci5zZXRFdmVudENhbGxiYWNrKFxyXG4gICAgICBDdWJpc21Vc2VyTW9kZWwuY3ViaXNtRGVmYXVsdE1vdGlvbkV2ZW50Q2FsbGJhY2ssXHJcbiAgICAgIHRoaXNcclxuICAgICk7XHJcblxyXG4gICAgLy8g6KGo5oOF44Oe44ON44O844K444Oj44O844KS5L2c5oiQXHJcbiAgICB0aGlzLl9leHByZXNzaW9uTWFuYWdlciA9IG5ldyBDdWJpc21Nb3Rpb25NYW5hZ2VyKCk7XHJcblxyXG4gICAgLy8g44OJ44Op44OD44Kw44Gr44KI44KL44Ki44OL44Oh44O844K344On44OzXHJcbiAgICB0aGlzLl9kcmFnTWFuYWdlciA9IG5ldyBDdWJpc21UYXJnZXRQb2ludCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OH44K544OI44Op44Kv44K/44Gr55u45b2T44GZ44KL5Yem55CGXHJcbiAgICovXHJcbiAgcHVibGljIHJlbGVhc2UoKSB7XHJcbiAgICBpZiAodGhpcy5fbW90aW9uTWFuYWdlciAhPSBudWxsKSB7XHJcbiAgICAgIHRoaXMuX21vdGlvbk1hbmFnZXIucmVsZWFzZSgpO1xyXG4gICAgICB0aGlzLl9tb3Rpb25NYW5hZ2VyID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5fZXhwcmVzc2lvbk1hbmFnZXIgIT0gbnVsbCkge1xyXG4gICAgICB0aGlzLl9leHByZXNzaW9uTWFuYWdlci5yZWxlYXNlKCk7XHJcbiAgICAgIHRoaXMuX2V4cHJlc3Npb25NYW5hZ2VyID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5fbW9jICE9IG51bGwpIHtcclxuICAgICAgdGhpcy5fbW9jLmRlbGV0ZU1vZGVsKHRoaXMuX21vZGVsKTtcclxuICAgICAgdGhpcy5fbW9jLnJlbGVhc2UoKTtcclxuICAgICAgdGhpcy5fbW9jID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9tb2RlbE1hdHJpeCA9IG51bGw7XHJcblxyXG4gICAgQ3ViaXNtUG9zZS5kZWxldGUodGhpcy5fcG9zZSk7XHJcbiAgICBDdWJpc21FeWVCbGluay5kZWxldGUodGhpcy5fZXllQmxpbmspO1xyXG4gICAgQ3ViaXNtQnJlYXRoLmRlbGV0ZSh0aGlzLl9icmVhdGgpO1xyXG5cclxuICAgIHRoaXMuX2RyYWdNYW5hZ2VyID0gbnVsbDtcclxuXHJcbiAgICBDdWJpc21QaHlzaWNzLmRlbGV0ZSh0aGlzLl9waHlzaWNzKTtcclxuICAgIEN1YmlzbU1vZGVsVXNlckRhdGEuZGVsZXRlKHRoaXMuX21vZGVsVXNlckRhdGEpO1xyXG5cclxuICAgIHRoaXMuZGVsZXRlUmVuZGVyZXIoKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBfbW9jOiBDdWJpc21Nb2M7IC8vIE1vY+ODh+ODvOOCv1xyXG4gIHByb3RlY3RlZCBfbW9kZWw6IEN1YmlzbU1vZGVsOyAvLyBNb2RlbOOCpOODs+OCueOCv+ODs+OCuVxyXG5cclxuICBwcm90ZWN0ZWQgX21vdGlvbk1hbmFnZXI6IEN1YmlzbU1vdGlvbk1hbmFnZXI7IC8vIOODouODvOOCt+ODp+ODs+euoeeQhlxyXG4gIHByb3RlY3RlZCBfZXhwcmVzc2lvbk1hbmFnZXI6IEN1YmlzbU1vdGlvbk1hbmFnZXI7IC8vIOihqOaDheeuoeeQhlxyXG4gIHByb3RlY3RlZCBfZXllQmxpbms6IEN1YmlzbUV5ZUJsaW5rOyAvLyDoh6rli5Xjgb7jgbDjgZ/jgY1cclxuICBwcm90ZWN0ZWQgX2JyZWF0aDogQ3ViaXNtQnJlYXRoOyAvLyDlkbzlkLhcclxuICBwcm90ZWN0ZWQgX21vZGVsTWF0cml4OiBDdWJpc21Nb2RlbE1hdHJpeDsgLy8g44Oi44OH44Or6KGM5YiXXHJcbiAgcHJvdGVjdGVkIF9wb3NlOiBDdWJpc21Qb3NlOyAvLyDjg53jg7zjgrrnrqHnkIZcclxuICBwcm90ZWN0ZWQgX2RyYWdNYW5hZ2VyOiBDdWJpc21UYXJnZXRQb2ludDsgLy8g44Oe44Km44K544OJ44Op44OD44KwXHJcbiAgcHJvdGVjdGVkIF9waHlzaWNzOiBDdWJpc21QaHlzaWNzOyAvLyDniannkIbmvJTnrpdcclxuICBwcm90ZWN0ZWQgX21vZGVsVXNlckRhdGE6IEN1YmlzbU1vZGVsVXNlckRhdGE7IC8vIOODpuODvOOCtuODvOODh+ODvOOCv1xyXG5cclxuICBwcm90ZWN0ZWQgX2luaXRpYWxpemVkOiBib29sZWFuOyAvLyDliJ3mnJ/ljJbjgZXjgozjgZ/jgYvjganjgYbjgYtcclxuICBwcm90ZWN0ZWQgX3VwZGF0aW5nOiBib29sZWFuOyAvLyDmm7TmlrDjgZXjgozjgZ/jgYvjganjgYbjgYtcclxuICBwcm90ZWN0ZWQgX29wYWNpdHk6IG51bWJlcjsgLy8g5LiN6YCP5piO5bqmXHJcbiAgcHJvdGVjdGVkIF9saXBzeW5jOiBib29sZWFuOyAvLyDjg6rjg4Pjg5fjgrfjg7Pjgq/jgZnjgovjgYvjganjgYbjgYtcclxuICBwcm90ZWN0ZWQgX2xhc3RMaXBTeW5jVmFsdWU6IG51bWJlcjsgLy8g5pyA5b6M44Gu44Oq44OD44OX44K344Oz44Kv44Gu5Yi25b6h5ZywXHJcbiAgcHJvdGVjdGVkIF9kcmFnWDogbnVtYmVyOyAvLyDjg57jgqbjgrnjg4njg6njg4PjgrDjga5Y5L2N572uXHJcbiAgcHJvdGVjdGVkIF9kcmFnWTogbnVtYmVyOyAvLyDjg57jgqbjgrnjg4njg6njg4PjgrDjga5Z5L2N572uXHJcbiAgcHJvdGVjdGVkIF9hY2NlbGVyYXRpb25YOiBudW1iZXI7IC8vIFjou7jmlrnlkJHjga7liqDpgJ/luqZcclxuICBwcm90ZWN0ZWQgX2FjY2VsZXJhdGlvblk6IG51bWJlcjsgLy8gWei7uOaWueWQkeOBruWKoOmAn+W6plxyXG4gIHByb3RlY3RlZCBfYWNjZWxlcmF0aW9uWjogbnVtYmVyOyAvLyBa6Lu45pa55ZCR44Gu5Yqg6YCf5bqmXHJcbiAgcHJvdGVjdGVkIF9kZWJ1Z01vZGU6IGJvb2xlYW47IC8vIOODh+ODkOODg+OCsOODouODvOODieOBi+OBqeOBhuOBi1xyXG5cclxuICBwcml2YXRlIF9yZW5kZXJlcjogQ3ViaXNtUmVuZGVyZXJfV2ViR0w7IC8vIOODrOODs+ODgOODqVxyXG59XHJcblxyXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cclxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbXVzZXJtb2RlbCc7XHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcclxuICBleHBvcnQgY29uc3QgQ3ViaXNtVXNlck1vZGVsID0gJC5DdWJpc21Vc2VyTW9kZWw7XHJcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtVXNlck1vZGVsID0gJC5DdWJpc21Vc2VyTW9kZWw7XHJcbn1cclxuIiwiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQgeyBDdWJpc21NYXRoIH0gZnJvbSAnLi4vbWF0aC9jdWJpc21tYXRoJztcclxuaW1wb3J0IHsgQ3ViaXNtTW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XHJcbmltcG9ydCB7IGNzbVN0cmluZyB9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcclxuaW1wb3J0IHsgY3NtVmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xyXG5pbXBvcnQgeyBDU01fQVNTRVJUIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtZGVidWcnO1xyXG5pbXBvcnQgeyBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5IH0gZnJvbSAnLi9jdWJpc21tb3Rpb25xdWV1ZWVudHJ5JztcclxuXHJcbi8qKiDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbDlrprnvqkgKi9cclxuZXhwb3J0IHR5cGUgRmluaXNoZWRNb3Rpb25DYWxsYmFjayA9IChzZWxmOiBBQ3ViaXNtTW90aW9uKSA9PiB2b2lkO1xyXG5cclxuLyoqXHJcbiAqIOODouODvOOCt+ODp+ODs+OBruaKveixoeWfuuW6leOCr+ODqeOCuVxyXG4gKlxyXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjga7mir3osaHln7rlupXjgq/jg6njgrnjgIJNb3Rpb25RdWV1ZU1hbmFnZXLjgavjgojjgaPjgabjg6Ljg7zjgrfjg6fjg7Pjga7lho3nlJ/jgpLnrqHnkIbjgZnjgovjgIJcclxuICovXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBQ3ViaXNtTW90aW9uIHtcclxuICAvKipcclxuICAgKiDjgqTjg7Pjgrnjgr/jg7Pjgrnjga7noLTmo4RcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGRlbGV0ZShtb3Rpb246IEFDdWJpc21Nb3Rpb24pOiB2b2lkIHtcclxuICAgIG1vdGlvbi5yZWxlYXNlKCk7XHJcbiAgICBtb3Rpb24gPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5fZmFkZUluU2Vjb25kcyA9IC0xLjA7XHJcbiAgICB0aGlzLl9mYWRlT3V0U2Vjb25kcyA9IC0xLjA7XHJcbiAgICB0aGlzLl93ZWlnaHQgPSAxLjA7XHJcbiAgICB0aGlzLl9vZmZzZXRTZWNvbmRzID0gMC4wOyAvLyDlho3nlJ/jga7plovlp4vmmYLliLtcclxuICAgIHRoaXMuX2ZpcmVkRXZlbnRWYWx1ZXMgPSBuZXcgY3NtVmVjdG9yPGNzbVN0cmluZz4oKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5fd2VpZ2h0ID0gMC4wO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/XHJcbiAgICogQHBhcmFtIG1vZGVsIOWvvuixoeOBruODouODh+ODq1xyXG4gICAqIEBwYXJhbSBtb3Rpb25RdWV1ZUVudHJ5IEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcuOBp+euoeeQhuOBleOCjOOBpuOBhOOCi+ODouODvOOCt+ODp+ODs1xyXG4gICAqIEBwYXJhbSB1c2VyVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cclxuICAgKi9cclxuICBwdWJsaWMgdXBkYXRlUGFyYW1ldGVycyhcclxuICAgIG1vZGVsOiBDdWJpc21Nb2RlbCxcclxuICAgIG1vdGlvblF1ZXVlRW50cnk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnksXHJcbiAgICB1c2VyVGltZVNlY29uZHM6IG51bWJlclxyXG4gICk6IHZvaWQge1xyXG4gICAgaWYgKCFtb3Rpb25RdWV1ZUVudHJ5LmlzQXZhaWxhYmxlKCkgfHwgbW90aW9uUXVldWVFbnRyeS5pc0ZpbmlzaGVkKCkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghbW90aW9uUXVldWVFbnRyeS5pc1N0YXJ0ZWQoKSkge1xyXG4gICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldElzU3RhcnRlZCh0cnVlKTtcclxuICAgICAgbW90aW9uUXVldWVFbnRyeS5zZXRTdGFydFRpbWUodXNlclRpbWVTZWNvbmRzIC0gdGhpcy5fb2Zmc2V0U2Vjb25kcyk7IC8vIOODouODvOOCt+ODp+ODs+OBrumWi+Wni+aZguWIu+OCkuiomOmMslxyXG4gICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldEZhZGVJblN0YXJ0VGltZSh1c2VyVGltZVNlY29uZHMpOyAvLyDjg5Xjgqfjg7zjg4njgqTjg7Pjga7plovlp4vmmYLliLtcclxuXHJcbiAgICAgIGNvbnN0IGR1cmF0aW9uOiBudW1iZXIgPSB0aGlzLmdldER1cmF0aW9uKCk7XHJcblxyXG4gICAgICBpZiAobW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgPCAwKSB7XHJcbiAgICAgICAgLy8g6ZaL5aeL44GX44Gm44GE44Gq44GE44GG44Gh44Gr57WC5LqG6Kit5a6a44GX44Gm44GE44KL5aC05ZCI44GM44GC44KL44CCXHJcbiAgICAgICAgbW90aW9uUXVldWVFbnRyeS5zZXRFbmRUaW1lKFxyXG4gICAgICAgICAgZHVyYXRpb24gPD0gMCA/IC0xIDogbW90aW9uUXVldWVFbnRyeS5nZXRTdGFydFRpbWUoKSArIGR1cmF0aW9uXHJcbiAgICAgICAgKTtcclxuICAgICAgICAvLyBkdXJhdGlvbiA9PSAtMSDjga7loLTlkIjjga/jg6vjg7zjg5fjgZnjgotcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGxldCBmYWRlV2VpZ2h0OiBudW1iZXIgPSB0aGlzLl93ZWlnaHQ7IC8vIOePvuWcqOOBruWApOOBqOaOm+OBkeWQiOOCj+OBm+OCi+WJsuWQiFxyXG5cclxuICAgIC8vLS0tLSDjg5Xjgqfjg7zjg4njgqTjg7Pjg7vjgqLjgqbjg4jjga7lh6bnkIYgLS0tLVxyXG4gICAgLy8g5Y2Y57SU44Gq44K144Kk44Oz6Zai5pWw44Gn44Kk44O844K444Oz44Kw44GZ44KLXHJcbiAgICBjb25zdCBmYWRlSW46IG51bWJlciA9XHJcbiAgICAgIHRoaXMuX2ZhZGVJblNlY29uZHMgPT0gMC4wXHJcbiAgICAgICAgPyAxLjBcclxuICAgICAgICA6IEN1YmlzbU1hdGguZ2V0RWFzaW5nU2luZShcclxuICAgICAgICAgICAgKHVzZXJUaW1lU2Vjb25kcyAtIG1vdGlvblF1ZXVlRW50cnkuZ2V0RmFkZUluU3RhcnRUaW1lKCkpIC9cclxuICAgICAgICAgICAgICB0aGlzLl9mYWRlSW5TZWNvbmRzXHJcbiAgICAgICAgICApO1xyXG5cclxuICAgIGNvbnN0IGZhZGVPdXQ6IG51bWJlciA9XHJcbiAgICAgIHRoaXMuX2ZhZGVPdXRTZWNvbmRzID09IDAuMCB8fCBtb3Rpb25RdWV1ZUVudHJ5LmdldEVuZFRpbWUoKSA8IDAuMFxyXG4gICAgICAgID8gMS4wXHJcbiAgICAgICAgOiBDdWJpc21NYXRoLmdldEVhc2luZ1NpbmUoXHJcbiAgICAgICAgICAgIChtb3Rpb25RdWV1ZUVudHJ5LmdldEVuZFRpbWUoKSAtIHVzZXJUaW1lU2Vjb25kcykgL1xyXG4gICAgICAgICAgICAgIHRoaXMuX2ZhZGVPdXRTZWNvbmRzXHJcbiAgICAgICAgICApO1xyXG5cclxuICAgIGZhZGVXZWlnaHQgPSBmYWRlV2VpZ2h0ICogZmFkZUluICogZmFkZU91dDtcclxuXHJcbiAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldFN0YXRlKHVzZXJUaW1lU2Vjb25kcywgZmFkZVdlaWdodCk7XHJcblxyXG4gICAgQ1NNX0FTU0VSVCgwLjAgPD0gZmFkZVdlaWdodCAmJiBmYWRlV2VpZ2h0IDw9IDEuMCk7XHJcblxyXG4gICAgLy8tLS0tIOWFqOOBpuOBruODkeODqeODoeODvOOCv0lE44KS44Or44O844OX44GZ44KLIC0tLS1cclxuICAgIHRoaXMuZG9VcGRhdGVQYXJhbWV0ZXJzKFxyXG4gICAgICBtb2RlbCxcclxuICAgICAgdXNlclRpbWVTZWNvbmRzLFxyXG4gICAgICBmYWRlV2VpZ2h0LFxyXG4gICAgICBtb3Rpb25RdWV1ZUVudHJ5XHJcbiAgICApO1xyXG5cclxuICAgIC8vIOW+jOWHpueQhlxyXG4gICAgLy8g57WC5LqG5pmC5Yi744KS6YGO44GO44Gf44KJ57WC5LqG44OV44Op44Kw44KS56uL44Gm44KLKEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcilcclxuICAgIGlmIChcclxuICAgICAgbW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgPiAwICYmXHJcbiAgICAgIG1vdGlvblF1ZXVlRW50cnkuZ2V0RW5kVGltZSgpIDwgdXNlclRpbWVTZWNvbmRzXHJcbiAgICApIHtcclxuICAgICAgbW90aW9uUXVldWVFbnRyeS5zZXRJc0ZpbmlzaGVkKHRydWUpOyAvLyDntYLkuoZcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODleOCp+ODvOODieOCpOODs+OBruaZgumWk+OCkuioreWumuOBmeOCi1xyXG4gICAqIEBwYXJhbSBmYWRlSW5TZWNvbmRzIOODleOCp+ODvOODieOCpOODs+OBq+OBi+OBi+OCi+aZgumWk1vnp5JdXHJcbiAgICovXHJcbiAgcHVibGljIHNldEZhZGVJblRpbWUoZmFkZUluU2Vjb25kczogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLl9mYWRlSW5TZWNvbmRzID0gZmFkZUluU2Vjb25kcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODleOCp+ODvOODieOCouOCpuODiOOBruaZgumWk+OCkuioreWumuOBmeOCi1xyXG4gICAqIEBwYXJhbSBmYWRlT3V0U2Vjb25kcyDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgavjgYvjgYvjgovmmYLplpNb56eSXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRGYWRlT3V0VGltZShmYWRlT3V0U2Vjb25kczogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLl9mYWRlT3V0U2Vjb25kcyA9IGZhZGVPdXRTZWNvbmRzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OV44Kn44O844OJ44Ki44Km44OI44Gr44GL44GL44KL5pmC6ZaT44Gu5Y+W5b6XXHJcbiAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgavjgYvjgYvjgovmmYLplpNb56eSXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRGYWRlT3V0VGltZSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2ZhZGVPdXRTZWNvbmRzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OV44Kn44O844OJ44Kk44Oz44Gr44GL44GL44KL5pmC6ZaT44Gu5Y+W5b6XXHJcbiAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqTjg7PjgavjgYvjgYvjgovmmYLplpNb56eSXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRGYWRlSW5UaW1lKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fZmFkZUluU2Vjb25kcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODvOOCt+ODp+ODs+mBqeeUqOOBrumHjeOBv+OBruioreWumlxyXG4gICAqIEBwYXJhbSB3ZWlnaHQg6YeN44G/77yIMC4wIC0gMS4w77yJXHJcbiAgICovXHJcbiAgcHVibGljIHNldFdlaWdodCh3ZWlnaHQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5fd2VpZ2h0ID0gd2VpZ2h0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44O844K344On44Oz6YGp55So44Gu6YeN44G/44Gu5Y+W5b6XXHJcbiAgICogQHJldHVybiDph43jgb/vvIgwLjAgLSAxLjDvvIlcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0V2VpZ2h0KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fd2VpZ2h0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44O844K344On44Oz44Gu6ZW344GV44Gu5Y+W5b6XXHJcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjga7plbfjgZVb56eSXVxyXG4gICAqXHJcbiAgICogQG5vdGUg44Or44O844OX44Gu5pmC44Gv44CMLTHjgI3jgIJcclxuICAgKiAgICAgICDjg6vjg7zjg5fjgafjgarjgYTloLTlkIjjga/jgIHjgqrjg7zjg5Djg7zjg6njgqTjg4njgZnjgovjgIJcclxuICAgKiAgICAgICDmraPjga7lgKTjga7mmYLjga/lj5blvpfjgZXjgozjgovmmYLplpPjgafntYLkuobjgZnjgovjgIJcclxuICAgKiAgICAgICDjgIwtMeOAjeOBruaZguOBr+WklumDqOOBi+OCieWBnOatouWRveS7pOOBjOOBquOBhOmZkOOCiue1guOCj+OCieOBquOBhOWHpueQhuOBqOOBquOCi+OAglxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXREdXJhdGlvbigpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIC0xLjA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jg6vjg7zjg5cx5Zue5YiG44Gu6ZW344GV44Gu5Y+W5b6XXHJcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjga7jg6vjg7zjg5fkuIDlm57liIbjga7plbfjgZVb56eSXVxyXG4gICAqXHJcbiAgICogQG5vdGUg44Or44O844OX44GX44Gq44GE5aC05ZCI44Gv44CBZ2V0RHVyYXRpb24oKeOBqOWQjOOBmOWApOOCkui/lOOBmVxyXG4gICAqICAgICAgIOODq+ODvOODl+S4gOWbnuWIhuOBrumVt+OBleOBjOWumue+qeOBp+OBjeOBquOBhOWgtOWQiCjjg5fjg63jgrDjg6njg6DnmoTjgavli5XjgY3ntprjgZHjgovjgrXjg5bjgq/jg6njgrnjgarjgakp44Gu5aC05ZCI44Gv44CMLTHjgI3jgpLov5TjgZlcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0TG9vcER1cmF0aW9uKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gLTEuMDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODvOOCt+ODp+ODs+WGjeeUn+OBrumWi+Wni+aZguWIu+OBruioreWumlxyXG4gICAqIEBwYXJhbSBvZmZzZXRTZWNvbmRzIOODouODvOOCt+ODp+ODs+WGjeeUn+OBrumWi+Wni+aZguWIu1vnp5JdXHJcbiAgICovXHJcbiAgcHVibGljIHNldE9mZnNldFRpbWUob2Zmc2V0U2Vjb25kczogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLl9vZmZzZXRTZWNvbmRzID0gb2Zmc2V0U2Vjb25kcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODh+ODq+OBruODkeODqeODoeODvOOCv+abtOaWsFxyXG4gICAqXHJcbiAgICog44Kk44OZ44Oz44OI55m654Gr44Gu44OB44Kn44OD44Kv44CCXHJcbiAgICog5YWl5Yqb44GZ44KL5pmC6ZaT44Gv5ZG844Gw44KM44KL44Oi44O844K344On44Oz44K/44Kk44Of44Oz44Kw44KS77yQ44Go44GX44Gf56eS5pWw44Gn6KGM44GG44CCXHJcbiAgICpcclxuICAgKiBAcGFyYW0gYmVmb3JlQ2hlY2tUaW1lU2Vjb25kcyDliY3lm57jga7jgqTjg5njg7Pjg4jjg4Hjgqfjg4Pjgq/mmYLplpNb56eSXVxyXG4gICAqIEBwYXJhbSBtb3Rpb25UaW1lU2Vjb25kcyDku4rlm57jga7lho3nlJ/mmYLplpNb56eSXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRGaXJlZEV2ZW50KFxyXG4gICAgYmVmb3JlQ2hlY2tUaW1lU2Vjb25kczogbnVtYmVyLFxyXG4gICAgbW90aW9uVGltZVNlY29uZHM6IG51bWJlclxyXG4gICk6IGNzbVZlY3Rvcjxjc21TdHJpbmc+IHtcclxuICAgIHJldHVybiB0aGlzLl9maXJlZEV2ZW50VmFsdWVzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44O844K344On44Oz44KS5pu05paw44GX44Gm44CB44Oi44OH44Or44Gr44OR44Op44Oh44O844K/5YCk44KS5Y+N5pig44GZ44KLXHJcbiAgICogQHBhcmFtIG1vZGVsIOWvvuixoeOBruODouODh+ODq1xyXG4gICAqIEBwYXJhbSB1c2VyVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cclxuICAgKiBAcGFyYW0gd2VpZ2h0IOODouODvOOCt+ODp+ODs+OBrumHjeOBv1xyXG4gICAqIEBwYXJhbSBtb3Rpb25RdWV1ZUVudHJ5IEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcuOBp+euoeeQhuOBleOCjOOBpuOBhOOCi+ODouODvOOCt+ODp+ODs1xyXG4gICAqIEByZXR1cm4gdHJ1ZSDjg6Ljg4fjg6vjgbjjg5Hjg6njg6Hjg7zjgr/lgKTjga7lj43mmKDjgYLjgopcclxuICAgKiBAcmV0dXJuIGZhbHNlIOODouODh+ODq+OBuOOBruODkeODqeODoeODvOOCv+WApOOBruWPjeaYoOOBquOBl++8iOODouODvOOCt+ODp+ODs+OBruWkieWMluOBquOBl++8iVxyXG4gICAqL1xyXG4gIHB1YmxpYyBhYnN0cmFjdCBkb1VwZGF0ZVBhcmFtZXRlcnMoXHJcbiAgICBtb2RlbDogQ3ViaXNtTW9kZWwsXHJcbiAgICB1c2VyVGltZVNlY29uZHM6IG51bWJlcixcclxuICAgIHdlaWdodDogbnVtYmVyLFxyXG4gICAgbW90aW9uUXVldWVFbnRyeTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeVxyXG4gICk6IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODvOOCt+ODp+ODs+WGjeeUn+e1guS6huOCs+ODvOODq+ODkOODg+OCr+OBrueZu+mMslxyXG4gICAqXHJcbiAgICog44Oi44O844K344On44Oz5YaN55Sf57WC5LqG44Kz44O844Or44OQ44OD44Kv44KS55m76Yyy44GZ44KL44CCXHJcbiAgICogaXNGaW5pc2hlZOODleODqeOCsOOCkuioreWumuOBmeOCi+OCv+OCpOODn+ODs+OCsOOBp+WRvOOBs+WHuuOBleOCjOOCi+OAglxyXG4gICAqIOS7peS4i+OBrueKtuaFi+OBrumam+OBq+OBr+WRvOOBs+WHuuOBleOCjOOBquOBhDpcclxuICAgKiAgIDEuIOWGjeeUn+S4reOBruODouODvOOCt+ODp+ODs+OBjOOAjOODq+ODvOODl+OAjeOBqOOBl+OBpuioreWumuOBleOCjOOBpuOBhOOCi+OBqOOBjVxyXG4gICAqICAgMi4g44Kz44O844Or44OQ44OD44Kv44GM55m76Yyy44GV44KM44Gm44GE44Gq44GE5pmCXHJcbiAgICpcclxuICAgKiBAcGFyYW0gb25GaW5pc2hlZE1vdGlvbkhhbmRsZXIg44Oi44O844K344On44Oz5YaN55Sf57WC5LqG44Kz44O844Or44OQ44OD44Kv6Zai5pWwXHJcbiAgICovXHJcbiAgcHVibGljIHNldEZpbmlzaGVkTW90aW9uSGFuZGxlciA9IChcclxuICAgIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyOiBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrXHJcbiAgKSA9PiAodGhpcy5fb25GaW5pc2hlZE1vdGlvbiA9IG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyKTtcclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44O844K344On44Oz5YaN55Sf57WC5LqG44Kz44O844Or44OQ44OD44Kv44Gu5Y+W5b6XXHJcbiAgICpcclxuICAgKiDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobjgrPjg7zjg6vjg5Djg4Pjgq/jgpLlj5blvpfjgZnjgovjgIJcclxuICAgKlxyXG4gICAqIEByZXR1cm4g55m76Yyy44GV44KM44Gm44GE44KL44Oi44O844K344On44Oz5YaN55Sf57WC5LqG44Kz44O844Or44OQ44OD44Kv6Zai5pWwXHJcbiAgICovXHJcbiAgcHVibGljIGdldEZpbmlzaGVkTW90aW9uSGFuZGxlciA9ICgpID0+IHRoaXMuX29uRmluaXNoZWRNb3Rpb247XHJcblxyXG4gIHB1YmxpYyBfZmFkZUluU2Vjb25kczogbnVtYmVyOyAvLyDjg5Xjgqfjg7zjg4njgqTjg7PjgavjgYvjgYvjgovmmYLplpNb56eSXVxyXG4gIHB1YmxpYyBfZmFkZU91dFNlY29uZHM6IG51bWJlcjsgLy8g44OV44Kn44O844OJ44Ki44Km44OI44Gr44GL44GL44KL5pmC6ZaTW+enkl1cclxuICBwdWJsaWMgX3dlaWdodDogbnVtYmVyOyAvLyDjg6Ljg7zjgrfjg6fjg7Pjga7ph43jgb9cclxuICBwdWJsaWMgX29mZnNldFNlY29uZHM6IG51bWJlcjsgLy8g44Oi44O844K344On44Oz5YaN55Sf44Gu6ZaL5aeL5pmC6ZaTW+enkl1cclxuXHJcbiAgcHVibGljIF9maXJlZEV2ZW50VmFsdWVzOiBjc21WZWN0b3I8Y3NtU3RyaW5nPjtcclxuXHJcbiAgLy8g44Oi44O844K344On44Oz5YaN55Sf57WC5LqG44Kz44O844Or44OQ44OD44Kv6Zai5pWwXHJcbiAgcHVibGljIF9vbkZpbmlzaGVkTW90aW9uPzogRmluaXNoZWRNb3Rpb25DYWxsYmFjaztcclxufVxyXG5cclxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXHJcbmltcG9ydCAqIGFzICQgZnJvbSAnLi9hY3ViaXNtbW90aW9uJztcclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xyXG4gIGV4cG9ydCBjb25zdCBBQ3ViaXNtTW90aW9uID0gJC5BQ3ViaXNtTW90aW9uO1xyXG4gIGV4cG9ydCB0eXBlIEFDdWJpc21Nb3Rpb24gPSAkLkFDdWJpc21Nb3Rpb247XHJcbiAgZXhwb3J0IHR5cGUgRmluaXNoZWRNb3Rpb25DYWxsYmFjayA9ICQuRmluaXNoZWRNb3Rpb25DYWxsYmFjaztcclxufVxyXG4iLCIvKipcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xyXG5pbXBvcnQgeyBDdWJpc21GcmFtZXdvcmsgfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xyXG5pbXBvcnQgeyBDdWJpc21Nb2RlbCB9IGZyb20gJy4uL21vZGVsL2N1YmlzbW1vZGVsJztcclxuaW1wb3J0IHsgY3NtVmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xyXG5pbXBvcnQgeyBDdWJpc21Kc29uLCBWYWx1ZSB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWpzb24nO1xyXG5pbXBvcnQgeyBBQ3ViaXNtTW90aW9uIH0gZnJvbSAnLi9hY3ViaXNtbW90aW9uJztcclxuaW1wb3J0IHsgQ3ViaXNtTW90aW9uUXVldWVFbnRyeSB9IGZyb20gJy4vY3ViaXNtbW90aW9ucXVldWVlbnRyeSc7XHJcblxyXG4vLyBleHAzLmpzb27jga7jgq3jg7zjgajjg4fjg5Xjgqnjg6vjg4hcclxuY29uc3QgRXhwcmVzc2lvbktleUZhZGVJbiA9ICdGYWRlSW5UaW1lJztcclxuY29uc3QgRXhwcmVzc2lvbktleUZhZGVPdXQgPSAnRmFkZU91dFRpbWUnO1xyXG5jb25zdCBFeHByZXNzaW9uS2V5UGFyYW1ldGVycyA9ICdQYXJhbWV0ZXJzJztcclxuY29uc3QgRXhwcmVzc2lvbktleUlkID0gJ0lkJztcclxuY29uc3QgRXhwcmVzc2lvbktleVZhbHVlID0gJ1ZhbHVlJztcclxuY29uc3QgRXhwcmVzc2lvbktleUJsZW5kID0gJ0JsZW5kJztcclxuY29uc3QgQmxlbmRWYWx1ZUFkZCA9ICdBZGQnO1xyXG5jb25zdCBCbGVuZFZhbHVlTXVsdGlwbHkgPSAnTXVsdGlwbHknO1xyXG5jb25zdCBCbGVuZFZhbHVlT3ZlcndyaXRlID0gJ092ZXJ3cml0ZSc7XHJcbmNvbnN0IERlZmF1bHRGYWRlVGltZSA9IDEuMDtcclxuXHJcbi8qKlxyXG4gKiDooajmg4Xjga7jg6Ljg7zjgrfjg6fjg7NcclxuICpcclxuICog6KGo5oOF44Gu44Oi44O844K344On44Oz44Kv44Op44K544CCXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ3ViaXNtRXhwcmVzc2lvbk1vdGlvbiBleHRlbmRzIEFDdWJpc21Nb3Rpb24ge1xyXG4gIC8qKlxyXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOCkuS9nOaIkOOBmeOCi+OAglxyXG4gICAqIEBwYXJhbSBidWZmZXIgZXhw44OV44Kh44Kk44Or44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXHJcbiAgICogQHBhcmFtIHNpemUg44OQ44OD44OV44Kh44Gu44K144Kk44K6XHJcbiAgICogQHJldHVybiDkvZzmiJDjgZXjgozjgZ/jgqTjg7Pjgrnjgr/jg7PjgrlcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGNyZWF0ZShcclxuICAgIGJ1ZmZlcjogQXJyYXlCdWZmZXIsXHJcbiAgICBzaXplOiBudW1iZXJcclxuICApOiBDdWJpc21FeHByZXNzaW9uTW90aW9uIHtcclxuICAgIGNvbnN0IGV4cHJlc3Npb246IEN1YmlzbUV4cHJlc3Npb25Nb3Rpb24gPSBuZXcgQ3ViaXNtRXhwcmVzc2lvbk1vdGlvbigpO1xyXG5cclxuICAgIGNvbnN0IGpzb246IEN1YmlzbUpzb24gPSBDdWJpc21Kc29uLmNyZWF0ZShidWZmZXIsIHNpemUpO1xyXG4gICAgY29uc3Qgcm9vdDogVmFsdWUgPSBqc29uLmdldFJvb3QoKTtcclxuXHJcbiAgICBleHByZXNzaW9uLnNldEZhZGVJblRpbWUoXHJcbiAgICAgIHJvb3QuZ2V0VmFsdWVCeVN0cmluZyhFeHByZXNzaW9uS2V5RmFkZUluKS50b0Zsb2F0KERlZmF1bHRGYWRlVGltZSlcclxuICAgICk7IC8vIOODleOCp+ODvOODieOCpOODs1xyXG4gICAgZXhwcmVzc2lvbi5zZXRGYWRlT3V0VGltZShcclxuICAgICAgcm9vdC5nZXRWYWx1ZUJ5U3RyaW5nKEV4cHJlc3Npb25LZXlGYWRlT3V0KS50b0Zsb2F0KERlZmF1bHRGYWRlVGltZSlcclxuICAgICk7IC8vIOODleOCp+ODvOODieOCouOCpuODiFxyXG5cclxuICAgIC8vIOWQhOODkeODqeODoeODvOOCv+OBq+OBpOOBhOOBplxyXG4gICAgY29uc3QgcGFyYW1ldGVyQ291bnQgPSByb290XHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEV4cHJlc3Npb25LZXlQYXJhbWV0ZXJzKVxyXG4gICAgICAuZ2V0U2l6ZSgpO1xyXG4gICAgZXhwcmVzc2lvbi5fcGFyYW1ldGVycy5wcmVwYXJlQ2FwYWNpdHkocGFyYW1ldGVyQ291bnQpO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW1ldGVyQ291bnQ7ICsraSkge1xyXG4gICAgICBjb25zdCBwYXJhbTogVmFsdWUgPSByb290XHJcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbktleVBhcmFtZXRlcnMpXHJcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChpKTtcclxuICAgICAgY29uc3QgcGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlID0gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxyXG4gICAgICAgIHBhcmFtLmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbktleUlkKS5nZXRSYXdTdHJpbmcoKVxyXG4gICAgICApOyAvLyDjg5Hjg6njg6Hjg7zjgr9JRFxyXG5cclxuICAgICAgY29uc3QgdmFsdWU6IG51bWJlciA9IHBhcmFtXHJcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbktleVZhbHVlKVxyXG4gICAgICAgIC50b0Zsb2F0KCk7IC8vIOWApFxyXG5cclxuICAgICAgLy8g6KiI566X5pa55rOV44Gu6Kit5a6aXHJcbiAgICAgIGxldCBibGVuZFR5cGU6IEV4cHJlc3Npb25CbGVuZFR5cGU7XHJcblxyXG4gICAgICBpZiAoXHJcbiAgICAgICAgcGFyYW0uZ2V0VmFsdWVCeVN0cmluZyhFeHByZXNzaW9uS2V5QmxlbmQpLmlzTnVsbCgpIHx8XHJcbiAgICAgICAgcGFyYW0uZ2V0VmFsdWVCeVN0cmluZyhFeHByZXNzaW9uS2V5QmxlbmQpLmdldFN0cmluZygpID09IEJsZW5kVmFsdWVBZGRcclxuICAgICAgKSB7XHJcbiAgICAgICAgYmxlbmRUeXBlID0gRXhwcmVzc2lvbkJsZW5kVHlwZS5FeHByZXNzaW9uQmxlbmRUeXBlX0FkZDtcclxuICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICBwYXJhbS5nZXRWYWx1ZUJ5U3RyaW5nKEV4cHJlc3Npb25LZXlCbGVuZCkuZ2V0U3RyaW5nKCkgPT1cclxuICAgICAgICBCbGVuZFZhbHVlTXVsdGlwbHlcclxuICAgICAgKSB7XHJcbiAgICAgICAgYmxlbmRUeXBlID0gRXhwcmVzc2lvbkJsZW5kVHlwZS5FeHByZXNzaW9uQmxlbmRUeXBlX011bHRpcGx5O1xyXG4gICAgICB9IGVsc2UgaWYgKFxyXG4gICAgICAgIHBhcmFtLmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbktleUJsZW5kKS5nZXRTdHJpbmcoKSA9PVxyXG4gICAgICAgIEJsZW5kVmFsdWVPdmVyd3JpdGVcclxuICAgICAgKSB7XHJcbiAgICAgICAgYmxlbmRUeXBlID0gRXhwcmVzc2lvbkJsZW5kVHlwZS5FeHByZXNzaW9uQmxlbmRUeXBlX092ZXJ3cml0ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyDjgZ3jga7ku5Yg5LuV5qeY44Gr44Gq44GE5YCk44KS6Kit5a6a44GX44Gf5pmC44Gv5Yqg566X44Oi44O844OJ44Gr44GZ44KL44GT44Go44Gn5b6p5penXHJcbiAgICAgICAgYmxlbmRUeXBlID0gRXhwcmVzc2lvbkJsZW5kVHlwZS5FeHByZXNzaW9uQmxlbmRUeXBlX0FkZDtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8g6Kit5a6a44Kq44OW44K444Kn44Kv44OI44KS5L2c5oiQ44GX44Gm44Oq44K544OI44Gr6L+95Yqg44GZ44KLXHJcbiAgICAgIGNvbnN0IGl0ZW06IEV4cHJlc3Npb25QYXJhbWV0ZXIgPSBuZXcgRXhwcmVzc2lvblBhcmFtZXRlcigpO1xyXG5cclxuICAgICAgaXRlbS5wYXJhbWV0ZXJJZCA9IHBhcmFtZXRlcklkO1xyXG4gICAgICBpdGVtLmJsZW5kVHlwZSA9IGJsZW5kVHlwZTtcclxuICAgICAgaXRlbS52YWx1ZSA9IHZhbHVlO1xyXG5cclxuICAgICAgZXhwcmVzc2lvbi5fcGFyYW1ldGVycy5wdXNoQmFjayhpdGVtKTtcclxuICAgIH1cclxuXHJcbiAgICBDdWJpc21Kc29uLmRlbGV0ZShqc29uKTsgLy8gSlNPTuODh+ODvOOCv+OBr+S4jeimgeOBq+OBquOBo+OBn+OCieWJiumZpOOBmeOCi1xyXG4gICAgcmV0dXJuIGV4cHJlc3Npb247XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6Ljg4fjg6vjga7jg5Hjg6njg6Hjg7zjgr/jga7mm7TmlrDjga7lrp/ooYxcclxuICAgKiBAcGFyYW0gbW9kZWwg5a++6LGh44Gu44Oi44OH44OrXHJcbiAgICogQHBhcmFtIHVzZXJUaW1lU2Vjb25kcyDjg4fjg6vjgr/mmYLplpPjga7nqY3nrpflgKRb56eSXVxyXG4gICAqIEBwYXJhbSB3ZWlnaHQg44Oi44O844K344On44Oz44Gu6YeN44G/XHJcbiAgICogQHBhcmFtIG1vdGlvblF1ZXVlRW50cnkgQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2Vy44Gn566h55CG44GV44KM44Gm44GE44KL44Oi44O844K344On44OzXHJcbiAgICovXHJcbiAgcHVibGljIGRvVXBkYXRlUGFyYW1ldGVycyhcclxuICAgIG1vZGVsOiBDdWJpc21Nb2RlbCxcclxuICAgIHVzZXJUaW1lU2Vjb25kczogbnVtYmVyLFxyXG4gICAgd2VpZ2h0OiBudW1iZXIsXHJcbiAgICBtb3Rpb25RdWV1ZUVudHJ5OiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5XHJcbiAgKTogdm9pZCB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3BhcmFtZXRlcnMuZ2V0U2l6ZSgpOyArK2kpIHtcclxuICAgICAgY29uc3QgcGFyYW1ldGVyOiBFeHByZXNzaW9uUGFyYW1ldGVyID0gdGhpcy5fcGFyYW1ldGVycy5hdChpKTtcclxuXHJcbiAgICAgIHN3aXRjaCAocGFyYW1ldGVyLmJsZW5kVHlwZSkge1xyXG4gICAgICAgIGNhc2UgRXhwcmVzc2lvbkJsZW5kVHlwZS5FeHByZXNzaW9uQmxlbmRUeXBlX0FkZDoge1xyXG4gICAgICAgICAgbW9kZWwuYWRkUGFyYW1ldGVyVmFsdWVCeUlkKFxyXG4gICAgICAgICAgICBwYXJhbWV0ZXIucGFyYW1ldGVySWQsXHJcbiAgICAgICAgICAgIHBhcmFtZXRlci52YWx1ZSxcclxuICAgICAgICAgICAgd2VpZ2h0XHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgRXhwcmVzc2lvbkJsZW5kVHlwZS5FeHByZXNzaW9uQmxlbmRUeXBlX011bHRpcGx5OiB7XHJcbiAgICAgICAgICBtb2RlbC5tdWx0aXBseVBhcmFtZXRlclZhbHVlQnlJZChcclxuICAgICAgICAgICAgcGFyYW1ldGVyLnBhcmFtZXRlcklkLFxyXG4gICAgICAgICAgICBwYXJhbWV0ZXIudmFsdWUsXHJcbiAgICAgICAgICAgIHdlaWdodFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlIEV4cHJlc3Npb25CbGVuZFR5cGUuRXhwcmVzc2lvbkJsZW5kVHlwZV9PdmVyd3JpdGU6IHtcclxuICAgICAgICAgIG1vZGVsLnNldFBhcmFtZXRlclZhbHVlQnlJZChcclxuICAgICAgICAgICAgcGFyYW1ldGVyLnBhcmFtZXRlcklkLFxyXG4gICAgICAgICAgICBwYXJhbWV0ZXIudmFsdWUsXHJcbiAgICAgICAgICAgIHdlaWdodFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgLy8g5LuV5qeY44Gr44Gq44GE5YCk44KS6Kit5a6a44GX44Gf5pmC44Gv44GZ44Gn44Gr5Yqg566X44Oi44O844OJ44Gr44Gq44Gj44Gm44GE44KLXHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIHRoaXMuX3BhcmFtZXRlcnMgPSBuZXcgY3NtVmVjdG9yPEV4cHJlc3Npb25QYXJhbWV0ZXI+KCk7XHJcbiAgfVxyXG5cclxuICBfcGFyYW1ldGVyczogY3NtVmVjdG9yPEV4cHJlc3Npb25QYXJhbWV0ZXI+OyAvLyDooajmg4Xjga7jg5Hjg6njg6Hjg7zjgr/mg4XloLHjg6rjgrnjg4hcclxufVxyXG5cclxuLyoqXHJcbiAqIOihqOaDheODkeODqeODoeODvOOCv+WApOOBruioiOeul+aWueW8j1xyXG4gKi9cclxuZXhwb3J0IGVudW0gRXhwcmVzc2lvbkJsZW5kVHlwZSB7XHJcbiAgRXhwcmVzc2lvbkJsZW5kVHlwZV9BZGQgPSAwLCAvLyDliqDnrpdcclxuICBFeHByZXNzaW9uQmxlbmRUeXBlX011bHRpcGx5ID0gMSwgLy8g5LmX566XXHJcbiAgRXhwcmVzc2lvbkJsZW5kVHlwZV9PdmVyd3JpdGUgPSAyIC8vIOS4iuabuOOBjVxyXG59XHJcblxyXG4vKipcclxuICog6KGo5oOF44Gu44OR44Op44Oh44O844K/5oOF5aCxXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRXhwcmVzc2lvblBhcmFtZXRlciB7XHJcbiAgcGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg5Hjg6njg6Hjg7zjgr9JRFxyXG4gIGJsZW5kVHlwZTogRXhwcmVzc2lvbkJsZW5kVHlwZTsgLy8g44OR44Op44Oh44O844K/44Gu5ryU566X56iu6aGeXHJcbiAgdmFsdWU6IG51bWJlcjsgLy8g5YCkXHJcbn1cclxuXHJcbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxyXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtZXhwcmVzc2lvbm1vdGlvbic7XHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcclxuICBleHBvcnQgY29uc3QgQ3ViaXNtRXhwcmVzc2lvbk1vdGlvbiA9ICQuQ3ViaXNtRXhwcmVzc2lvbk1vdGlvbjtcclxuICBleHBvcnQgdHlwZSBDdWJpc21FeHByZXNzaW9uTW90aW9uID0gJC5DdWJpc21FeHByZXNzaW9uTW90aW9uO1xyXG4gIGV4cG9ydCBjb25zdCBFeHByZXNzaW9uQmxlbmRUeXBlID0gJC5FeHByZXNzaW9uQmxlbmRUeXBlO1xyXG4gIGV4cG9ydCB0eXBlIEV4cHJlc3Npb25CbGVuZFR5cGUgPSAkLkV4cHJlc3Npb25CbGVuZFR5cGU7XHJcbiAgZXhwb3J0IGNvbnN0IEV4cHJlc3Npb25QYXJhbWV0ZXIgPSAkLkV4cHJlc3Npb25QYXJhbWV0ZXI7XHJcbiAgZXhwb3J0IHR5cGUgRXhwcmVzc2lvblBhcmFtZXRlciA9ICQuRXhwcmVzc2lvblBhcmFtZXRlcjtcclxufVxyXG4iLCIvKipcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xyXG5pbXBvcnQgeyBDdWJpc21GcmFtZXdvcmsgfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xyXG5pbXBvcnQgeyBDdWJpc21NYXRoIH0gZnJvbSAnLi4vbWF0aC9jdWJpc21tYXRoJztcclxuaW1wb3J0IHsgQ3ViaXNtTW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XHJcbmltcG9ydCB7IGNzbVN0cmluZyB9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcclxuaW1wb3J0IHsgY3NtVmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xyXG5pbXBvcnQge1xyXG4gIENTTV9BU1NFUlQsXHJcbiAgQ3ViaXNtTG9nRGVidWcsXHJcbiAgQ3ViaXNtTG9nV2FybmluZ1xyXG59IGZyb20gJy4uL3V0aWxzL2N1YmlzbWRlYnVnJztcclxuaW1wb3J0IHsgQUN1YmlzbU1vdGlvbiwgRmluaXNoZWRNb3Rpb25DYWxsYmFjayB9IGZyb20gJy4vYWN1YmlzbW1vdGlvbic7XHJcbmltcG9ydCB7XHJcbiAgQ3ViaXNtTW90aW9uQ3VydmUsXHJcbiAgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQsXHJcbiAgQ3ViaXNtTW90aW9uRGF0YSxcclxuICBDdWJpc21Nb3Rpb25FdmVudCxcclxuICBDdWJpc21Nb3Rpb25Qb2ludCxcclxuICBDdWJpc21Nb3Rpb25TZWdtZW50LFxyXG4gIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlXHJcbn0gZnJvbSAnLi9jdWJpc21tb3Rpb25pbnRlcm5hbCc7XHJcbmltcG9ydCB7IEN1YmlzbU1vdGlvbkpzb24sIEV2YWx1YXRpb25PcHRpb25GbGFnIH0gZnJvbSAnLi9jdWJpc21tb3Rpb25qc29uJztcclxuaW1wb3J0IHsgQ3ViaXNtTW90aW9uUXVldWVFbnRyeSB9IGZyb20gJy4vY3ViaXNtbW90aW9ucXVldWVlbnRyeSc7XHJcblxyXG5jb25zdCBFZmZlY3ROYW1lRXllQmxpbmsgPSAnRXllQmxpbmsnO1xyXG5jb25zdCBFZmZlY3ROYW1lTGlwU3luYyA9ICdMaXBTeW5jJztcclxuY29uc3QgVGFyZ2V0TmFtZU1vZGVsID0gJ01vZGVsJztcclxuY29uc3QgVGFyZ2V0TmFtZVBhcmFtZXRlciA9ICdQYXJhbWV0ZXInO1xyXG5jb25zdCBUYXJnZXROYW1lUGFydE9wYWNpdHkgPSAnUGFydE9wYWNpdHknO1xyXG5cclxuLyoqXHJcbiAqIEN1YmlzbSBTREsgUjIg5Lul5YmN44Gu44Oi44O844K344On44Oz44KS5YaN54++44GV44Gb44KL44Gq44KJIHRydWUg44CB44Ki44OL44Oh44O844K/44Gu44Oi44O844K344On44Oz44KS5q2j44GX44GP5YaN54++44GZ44KL44Gq44KJIGZhbHNlIOOAglxyXG4gKi9cclxuY29uc3QgVXNlT2xkQmV6aWVyc0N1cnZlTW90aW9uID0gZmFsc2U7XHJcblxyXG5mdW5jdGlvbiBsZXJwUG9pbnRzKFxyXG4gIGE6IEN1YmlzbU1vdGlvblBvaW50LFxyXG4gIGI6IEN1YmlzbU1vdGlvblBvaW50LFxyXG4gIHQ6IG51bWJlclxyXG4pOiBDdWJpc21Nb3Rpb25Qb2ludCB7XHJcbiAgY29uc3QgcmVzdWx0OiBDdWJpc21Nb3Rpb25Qb2ludCA9IG5ldyBDdWJpc21Nb3Rpb25Qb2ludCgpO1xyXG5cclxuICByZXN1bHQudGltZSA9IGEudGltZSArIChiLnRpbWUgLSBhLnRpbWUpICogdDtcclxuICByZXN1bHQudmFsdWUgPSBhLnZhbHVlICsgKGIudmFsdWUgLSBhLnZhbHVlKSAqIHQ7XHJcblxyXG4gIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxpbmVhckV2YWx1YXRlKHBvaW50czogQ3ViaXNtTW90aW9uUG9pbnRbXSwgdGltZTogbnVtYmVyKTogbnVtYmVyIHtcclxuICBsZXQgdDogbnVtYmVyID0gKHRpbWUgLSBwb2ludHNbMF0udGltZSkgLyAocG9pbnRzWzFdLnRpbWUgLSBwb2ludHNbMF0udGltZSk7XHJcblxyXG4gIGlmICh0IDwgMC4wKSB7XHJcbiAgICB0ID0gMC4wO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHBvaW50c1swXS52YWx1ZSArIChwb2ludHNbMV0udmFsdWUgLSBwb2ludHNbMF0udmFsdWUpICogdDtcclxufVxyXG5cclxuZnVuY3Rpb24gYmV6aWVyRXZhbHVhdGUocG9pbnRzOiBDdWJpc21Nb3Rpb25Qb2ludFtdLCB0aW1lOiBudW1iZXIpOiBudW1iZXIge1xyXG4gIGxldCB0OiBudW1iZXIgPSAodGltZSAtIHBvaW50c1swXS50aW1lKSAvIChwb2ludHNbM10udGltZSAtIHBvaW50c1swXS50aW1lKTtcclxuXHJcbiAgaWYgKHQgPCAwLjApIHtcclxuICAgIHQgPSAwLjA7XHJcbiAgfVxyXG5cclxuICBjb25zdCBwMDE6IEN1YmlzbU1vdGlvblBvaW50ID0gbGVycFBvaW50cyhwb2ludHNbMF0sIHBvaW50c1sxXSwgdCk7XHJcbiAgY29uc3QgcDEyOiBDdWJpc21Nb3Rpb25Qb2ludCA9IGxlcnBQb2ludHMocG9pbnRzWzFdLCBwb2ludHNbMl0sIHQpO1xyXG4gIGNvbnN0IHAyMzogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHBvaW50c1syXSwgcG9pbnRzWzNdLCB0KTtcclxuXHJcbiAgY29uc3QgcDAxMjogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHAwMSwgcDEyLCB0KTtcclxuICBjb25zdCBwMTIzOiBDdWJpc21Nb3Rpb25Qb2ludCA9IGxlcnBQb2ludHMocDEyLCBwMjMsIHQpO1xyXG5cclxuICByZXR1cm4gbGVycFBvaW50cyhwMDEyLCBwMTIzLCB0KS52YWx1ZTtcclxufVxyXG5cclxuZnVuY3Rpb24gYmV6aWVyRXZhbHVhdGVCaW5hcnlTZWFyY2goXHJcbiAgcG9pbnRzOiBDdWJpc21Nb3Rpb25Qb2ludFtdLFxyXG4gIHRpbWU6IG51bWJlclxyXG4pOiBudW1iZXIge1xyXG4gIGNvbnN0IHhfZXJyb3IgPSAwLjAxO1xyXG5cclxuICBjb25zdCB4OiBudW1iZXIgPSB0aW1lO1xyXG4gIGxldCB4MTogbnVtYmVyID0gcG9pbnRzWzBdLnRpbWU7XHJcbiAgbGV0IHgyOiBudW1iZXIgPSBwb2ludHNbM10udGltZTtcclxuICBsZXQgY3gxOiBudW1iZXIgPSBwb2ludHNbMV0udGltZTtcclxuICBsZXQgY3gyOiBudW1iZXIgPSBwb2ludHNbMl0udGltZTtcclxuXHJcbiAgbGV0IHRhID0gMC4wO1xyXG4gIGxldCB0YiA9IDEuMDtcclxuICBsZXQgdCA9IDAuMDtcclxuICBsZXQgaSA9IDA7XHJcblxyXG4gIGZvciAobGV0IHZhcjMzID0gdHJ1ZTsgaSA8IDIwOyArK2kpIHtcclxuICAgIGlmICh4IDwgeDEgKyB4X2Vycm9yKSB7XHJcbiAgICAgIHQgPSB0YTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHgyIC0geF9lcnJvciA8IHgpIHtcclxuICAgICAgdCA9IHRiO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuXHJcbiAgICBsZXQgY2VudGVyeDogbnVtYmVyID0gKGN4MSArIGN4MikgKiAwLjU7XHJcbiAgICBjeDEgPSAoeDEgKyBjeDEpICogMC41O1xyXG4gICAgY3gyID0gKHgyICsgY3gyKSAqIDAuNTtcclxuICAgIGNvbnN0IGN0cmx4MTI6IG51bWJlciA9IChjeDEgKyBjZW50ZXJ4KSAqIDAuNTtcclxuICAgIGNvbnN0IGN0cmx4MjE6IG51bWJlciA9IChjeDIgKyBjZW50ZXJ4KSAqIDAuNTtcclxuICAgIGNlbnRlcnggPSAoY3RybHgxMiArIGN0cmx4MjEpICogMC41O1xyXG4gICAgaWYgKHggPCBjZW50ZXJ4KSB7XHJcbiAgICAgIHRiID0gKHRhICsgdGIpICogMC41O1xyXG4gICAgICBpZiAoY2VudGVyeCAtIHhfZXJyb3IgPCB4KSB7XHJcbiAgICAgICAgdCA9IHRiO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB4MiA9IGNlbnRlcng7XHJcbiAgICAgIGN4MiA9IGN0cmx4MTI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0YSA9ICh0YSArIHRiKSAqIDAuNTtcclxuICAgICAgaWYgKHggPCBjZW50ZXJ4ICsgeF9lcnJvcikge1xyXG4gICAgICAgIHQgPSB0YTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG5cclxuICAgICAgeDEgPSBjZW50ZXJ4O1xyXG4gICAgICBjeDEgPSBjdHJseDIxO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKGkgPT0gMjApIHtcclxuICAgIHQgPSAodGEgKyB0YikgKiAwLjU7XHJcbiAgfVxyXG5cclxuICBpZiAodCA8IDAuMCkge1xyXG4gICAgdCA9IDAuMDtcclxuICB9XHJcbiAgaWYgKHQgPiAxLjApIHtcclxuICAgIHQgPSAxLjA7XHJcbiAgfVxyXG5cclxuICBjb25zdCBwMDE6IEN1YmlzbU1vdGlvblBvaW50ID0gbGVycFBvaW50cyhwb2ludHNbMF0sIHBvaW50c1sxXSwgdCk7XHJcbiAgY29uc3QgcDEyOiBDdWJpc21Nb3Rpb25Qb2ludCA9IGxlcnBQb2ludHMocG9pbnRzWzFdLCBwb2ludHNbMl0sIHQpO1xyXG4gIGNvbnN0IHAyMzogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHBvaW50c1syXSwgcG9pbnRzWzNdLCB0KTtcclxuXHJcbiAgY29uc3QgcDAxMjogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHAwMSwgcDEyLCB0KTtcclxuICBjb25zdCBwMTIzOiBDdWJpc21Nb3Rpb25Qb2ludCA9IGxlcnBQb2ludHMocDEyLCBwMjMsIHQpO1xyXG5cclxuICByZXR1cm4gbGVycFBvaW50cyhwMDEyLCBwMTIzLCB0KS52YWx1ZTtcclxufVxyXG5cclxuZnVuY3Rpb24gYmV6aWVyRXZhbHVhdGVDYXJkYW5vSW50ZXJwcmV0YXRpb24oXHJcbiAgcG9pbnRzOiBDdWJpc21Nb3Rpb25Qb2ludFtdLFxyXG4gIHRpbWU6IG51bWJlclxyXG4pOiBudW1iZXIge1xyXG4gIGNvbnN0IHg6IG51bWJlciA9IHRpbWU7XHJcbiAgY29uc3QgeDE6IG51bWJlciA9IHBvaW50c1swXS50aW1lO1xyXG4gIGNvbnN0IHgyOiBudW1iZXIgPSBwb2ludHNbM10udGltZTtcclxuICBjb25zdCBjeDE6IG51bWJlciA9IHBvaW50c1sxXS50aW1lO1xyXG4gIGNvbnN0IGN4MjogbnVtYmVyID0gcG9pbnRzWzJdLnRpbWU7XHJcblxyXG4gIGNvbnN0IGE6IG51bWJlciA9IHgyIC0gMy4wICogY3gyICsgMy4wICogY3gxIC0geDE7XHJcbiAgY29uc3QgYjogbnVtYmVyID0gMy4wICogY3gyIC0gNi4wICogY3gxICsgMy4wICogeDE7XHJcbiAgY29uc3QgYzogbnVtYmVyID0gMy4wICogY3gxIC0gMy4wICogeDE7XHJcbiAgY29uc3QgZDogbnVtYmVyID0geDEgLSB4O1xyXG5cclxuICBjb25zdCB0OiBudW1iZXIgPSBDdWJpc21NYXRoLmNhcmRhbm9BbGdvcml0aG1Gb3JCZXppZXIoYSwgYiwgYywgZCk7XHJcblxyXG4gIGNvbnN0IHAwMTogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHBvaW50c1swXSwgcG9pbnRzWzFdLCB0KTtcclxuICBjb25zdCBwMTI6IEN1YmlzbU1vdGlvblBvaW50ID0gbGVycFBvaW50cyhwb2ludHNbMV0sIHBvaW50c1syXSwgdCk7XHJcbiAgY29uc3QgcDIzOiBDdWJpc21Nb3Rpb25Qb2ludCA9IGxlcnBQb2ludHMocG9pbnRzWzJdLCBwb2ludHNbM10sIHQpO1xyXG5cclxuICBjb25zdCBwMDEyOiBDdWJpc21Nb3Rpb25Qb2ludCA9IGxlcnBQb2ludHMocDAxLCBwMTIsIHQpO1xyXG4gIGNvbnN0IHAxMjM6IEN1YmlzbU1vdGlvblBvaW50ID0gbGVycFBvaW50cyhwMTIsIHAyMywgdCk7XHJcblxyXG4gIHJldHVybiBsZXJwUG9pbnRzKHAwMTIsIHAxMjMsIHQpLnZhbHVlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzdGVwcGVkRXZhbHVhdGUocG9pbnRzOiBDdWJpc21Nb3Rpb25Qb2ludFtdLCB0aW1lOiBudW1iZXIpOiBudW1iZXIge1xyXG4gIHJldHVybiBwb2ludHNbMF0udmFsdWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGludmVyc2VTdGVwcGVkRXZhbHVhdGUoXHJcbiAgcG9pbnRzOiBDdWJpc21Nb3Rpb25Qb2ludFtdLFxyXG4gIHRpbWU6IG51bWJlclxyXG4pOiBudW1iZXIge1xyXG4gIHJldHVybiBwb2ludHNbMV0udmFsdWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGV2YWx1YXRlQ3VydmUoXHJcbiAgbW90aW9uRGF0YTogQ3ViaXNtTW90aW9uRGF0YSxcclxuICBpbmRleDogbnVtYmVyLFxyXG4gIHRpbWU6IG51bWJlclxyXG4pOiBudW1iZXIge1xyXG4gIC8vIEZpbmQgc2VnbWVudCB0byBldmFsdWF0ZS5cclxuICBjb25zdCBjdXJ2ZTogQ3ViaXNtTW90aW9uQ3VydmUgPSBtb3Rpb25EYXRhLmN1cnZlcy5hdChpbmRleCk7XHJcblxyXG4gIGxldCB0YXJnZXQgPSAtMTtcclxuICBjb25zdCB0b3RhbFNlZ21lbnRDb3VudDogbnVtYmVyID0gY3VydmUuYmFzZVNlZ21lbnRJbmRleCArIGN1cnZlLnNlZ21lbnRDb3VudDtcclxuICBsZXQgcG9pbnRQb3NpdGlvbiA9IDA7XHJcbiAgZm9yIChsZXQgaTogbnVtYmVyID0gY3VydmUuYmFzZVNlZ21lbnRJbmRleDsgaSA8IHRvdGFsU2VnbWVudENvdW50OyArK2kpIHtcclxuICAgIC8vIEdldCBmaXJzdCBwb2ludCBvZiBuZXh0IHNlZ21lbnQuXHJcbiAgICBwb2ludFBvc2l0aW9uID1cclxuICAgICAgbW90aW9uRGF0YS5zZWdtZW50cy5hdChpKS5iYXNlUG9pbnRJbmRleCArXHJcbiAgICAgIChtb3Rpb25EYXRhLnNlZ21lbnRzLmF0KGkpLnNlZ21lbnRUeXBlID09XHJcbiAgICAgICAgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfQmV6aWVyXHJcbiAgICAgICAgPyAzXHJcbiAgICAgICAgOiAxKTtcclxuXHJcbiAgICAvLyBCcmVhayBpZiB0aW1lIGxpZXMgd2l0aGluIGN1cnJlbnQgc2VnbWVudC5cclxuICAgIGlmIChtb3Rpb25EYXRhLnBvaW50cy5hdChwb2ludFBvc2l0aW9uKS50aW1lID4gdGltZSkge1xyXG4gICAgICB0YXJnZXQgPSBpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmICh0YXJnZXQgPT0gLTEpIHtcclxuICAgIHJldHVybiBtb3Rpb25EYXRhLnBvaW50cy5hdChwb2ludFBvc2l0aW9uKS52YWx1ZTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHNlZ21lbnQ6IEN1YmlzbU1vdGlvblNlZ21lbnQgPSBtb3Rpb25EYXRhLnNlZ21lbnRzLmF0KHRhcmdldCk7XHJcblxyXG4gIHJldHVybiBzZWdtZW50LmV2YWx1YXRlKG1vdGlvbkRhdGEucG9pbnRzLmdldChzZWdtZW50LmJhc2VQb2ludEluZGV4KSwgdGltZSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjgq/jg6njgrlcclxuICpcclxuICog44Oi44O844K344On44Oz44Gu44Kv44Op44K544CCXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uIGV4dGVuZHMgQUN1YmlzbU1vdGlvbiB7XHJcbiAgLyoqXHJcbiAgICog44Kk44Oz44K544K/44Oz44K544KS5L2c5oiQ44GZ44KLXHJcbiAgICpcclxuICAgKiBAcGFyYW0gYnVmZmVyIG1vdGlvbjMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxyXG4gICAqIEBwYXJhbSBzaXplIOODkOODg+ODleOCoeOBruOCteOCpOOCulxyXG4gICAqIEBwYXJhbSBvbkZpbmlzaGVkTW90aW9uSGFuZGxlciDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobmmYLjgavlkbzjgbPlh7rjgZXjgozjgovjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcclxuICAgKiBAcmV0dXJuIOS9nOaIkOOBleOCjOOBn+OCpOODs+OCueOCv+ODs+OCuVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlKFxyXG4gICAgYnVmZmVyOiBBcnJheUJ1ZmZlcixcclxuICAgIHNpemU6IG51bWJlcixcclxuICAgIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyPzogRmluaXNoZWRNb3Rpb25DYWxsYmFja1xyXG4gICk6IEN1YmlzbU1vdGlvbiB7XHJcbiAgICBjb25zdCByZXQgPSBuZXcgQ3ViaXNtTW90aW9uKCk7XHJcblxyXG4gICAgcmV0LnBhcnNlKGJ1ZmZlciwgc2l6ZSk7XHJcbiAgICByZXQuX3NvdXJjZUZyYW1lUmF0ZSA9IHJldC5fbW90aW9uRGF0YS5mcHM7XHJcbiAgICByZXQuX2xvb3BEdXJhdGlvblNlY29uZHMgPSByZXQuX21vdGlvbkRhdGEuZHVyYXRpb247XHJcbiAgICByZXQuX29uRmluaXNoZWRNb3Rpb24gPSBvbkZpbmlzaGVkTW90aW9uSGFuZGxlcjtcclxuXHJcbiAgICAvLyBOT1RFOiBFZGl0b3Ljgafjga/jg6vjg7zjg5fjgYLjgorjga7jg6Ljg7zjgrfjg6fjg7Pmm7jjgY3lh7rjgZfjga/pnZ7lr77lv5xcclxuICAgIC8vIHJldC0+X2xvb3AgPSAocmV0LT5fbW90aW9uRGF0YS0+TG9vcCA+IDApO1xyXG4gICAgcmV0dXJuIHJldDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODh+ODq+OBruODkeODqeODoeODvOOCv+OBruabtOaWsOOBruWun+ihjFxyXG4gICAqIEBwYXJhbSBtb2RlbCAgICAgICAgICAgICDlr77osaHjga7jg6Ljg4fjg6tcclxuICAgKiBAcGFyYW0gdXNlclRpbWVTZWNvbmRzICAg54++5Zyo44Gu5pmC5Yi7W+enkl1cclxuICAgKiBAcGFyYW0gZmFkZVdlaWdodCAgICAgICAg44Oi44O844K344On44Oz44Gu6YeN44G/XHJcbiAgICogQHBhcmFtIG1vdGlvblF1ZXVlRW50cnkgIEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcuOBp+euoeeQhuOBleOCjOOBpuOBhOOCi+ODouODvOOCt+ODp+ODs1xyXG4gICAqL1xyXG4gIHB1YmxpYyBkb1VwZGF0ZVBhcmFtZXRlcnMoXHJcbiAgICBtb2RlbDogQ3ViaXNtTW9kZWwsXHJcbiAgICB1c2VyVGltZVNlY29uZHM6IG51bWJlcixcclxuICAgIGZhZGVXZWlnaHQ6IG51bWJlcixcclxuICAgIG1vdGlvblF1ZXVlRW50cnk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlcclxuICApOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLl9tb2RlbEN1cnZlSWRFeWVCbGluayA9PSBudWxsKSB7XHJcbiAgICAgIHRoaXMuX21vZGVsQ3VydmVJZEV5ZUJsaW5rID0gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxyXG4gICAgICAgIEVmZmVjdE5hbWVFeWVCbGlua1xyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLl9tb2RlbEN1cnZlSWRMaXBTeW5jID09IG51bGwpIHtcclxuICAgICAgdGhpcy5fbW9kZWxDdXJ2ZUlkTGlwU3luYyA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcclxuICAgICAgICBFZmZlY3ROYW1lTGlwU3luY1xyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB0aW1lT2Zmc2V0U2Vjb25kczogbnVtYmVyID1cclxuICAgICAgdXNlclRpbWVTZWNvbmRzIC0gbW90aW9uUXVldWVFbnRyeS5nZXRTdGFydFRpbWUoKTtcclxuXHJcbiAgICBpZiAodGltZU9mZnNldFNlY29uZHMgPCAwLjApIHtcclxuICAgICAgdGltZU9mZnNldFNlY29uZHMgPSAwLjA7IC8vIOOCqOODqeODvOWbnumBv1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBsaXBTeW5jVmFsdWU6IG51bWJlciA9IE51bWJlci5NQVhfVkFMVUU7XHJcbiAgICBsZXQgZXllQmxpbmtWYWx1ZTogbnVtYmVyID0gTnVtYmVyLk1BWF9WQUxVRTtcclxuXHJcbiAgICAvL+OBvuOBsOOBn+OBjeOAgeODquODg+ODl+OCt+ODs+OCr+OBruOBhuOBoeODouODvOOCt+ODp+ODs+OBrumBqeeUqOOCkuaknOWHuuOBmeOCi+OBn+OCgeOBruODk+ODg+ODiO+8iG1heEZsYWdDb3VudOWAi+OBvuOBp1xyXG4gICAgY29uc3QgTWF4VGFyZ2V0U2l6ZSA9IDY0O1xyXG4gICAgbGV0IGxpcFN5bmNGbGFncyA9IDA7XHJcbiAgICBsZXQgZXllQmxpbmtGbGFncyA9IDA7XHJcblxyXG4gICAgLy/nnqzjgY3jgIHjg6rjg4Pjg5fjgrfjg7Pjgq/jga7jgr/jg7zjgrLjg4Pjg4jmlbDjgYzkuIrpmZDjgpLotoXjgYjjgabjgYTjgovloLTlkIhcclxuICAgIGlmICh0aGlzLl9leWVCbGlua1BhcmFtZXRlcklkcy5nZXRTaXplKCkgPiBNYXhUYXJnZXRTaXplKSB7XHJcbiAgICAgIEN1YmlzbUxvZ0RlYnVnKFxyXG4gICAgICAgICd0b28gbWFueSBleWUgYmxpbmsgdGFyZ2V0cyA6IHswfScsXHJcbiAgICAgICAgdGhpcy5fZXllQmxpbmtQYXJhbWV0ZXJJZHMuZ2V0U2l6ZSgpXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcy5nZXRTaXplKCkgPiBNYXhUYXJnZXRTaXplKSB7XHJcbiAgICAgIEN1YmlzbUxvZ0RlYnVnKFxyXG4gICAgICAgICd0b28gbWFueSBsaXAgc3luYyB0YXJnZXRzIDogezB9JyxcclxuICAgICAgICB0aGlzLl9saXBTeW5jUGFyYW1ldGVySWRzLmdldFNpemUoKVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHRtcEZhZGVJbjogbnVtYmVyID1cclxuICAgICAgdGhpcy5fZmFkZUluU2Vjb25kcyA8PSAwLjBcclxuICAgICAgICA/IDEuMFxyXG4gICAgICAgIDogQ3ViaXNtTWF0aC5nZXRFYXNpbmdTaW5lKFxyXG4gICAgICAgICAgKHVzZXJUaW1lU2Vjb25kcyAtIG1vdGlvblF1ZXVlRW50cnkuZ2V0RmFkZUluU3RhcnRUaW1lKCkpIC9cclxuICAgICAgICAgIHRoaXMuX2ZhZGVJblNlY29uZHNcclxuICAgICAgICApO1xyXG5cclxuICAgIGNvbnN0IHRtcEZhZGVPdXQ6IG51bWJlciA9XHJcbiAgICAgIHRoaXMuX2ZhZGVPdXRTZWNvbmRzIDw9IDAuMCB8fCBtb3Rpb25RdWV1ZUVudHJ5LmdldEVuZFRpbWUoKSA8IDAuMFxyXG4gICAgICAgID8gMS4wXHJcbiAgICAgICAgOiBDdWJpc21NYXRoLmdldEVhc2luZ1NpbmUoXHJcbiAgICAgICAgICAobW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgLSB1c2VyVGltZVNlY29uZHMpIC9cclxuICAgICAgICAgIHRoaXMuX2ZhZGVPdXRTZWNvbmRzXHJcbiAgICAgICAgKTtcclxuICAgIGxldCB2YWx1ZTogbnVtYmVyO1xyXG4gICAgbGV0IGM6IG51bWJlciwgcGFyYW1ldGVySW5kZXg6IG51bWJlcjtcclxuXHJcbiAgICAvLyAnUmVwZWF0JyB0aW1lIGFzIG5lY2Vzc2FyeS5cclxuICAgIGxldCB0aW1lOiBudW1iZXIgPSB0aW1lT2Zmc2V0U2Vjb25kcztcclxuXHJcbiAgICBpZiAodGhpcy5faXNMb29wKSB7XHJcbiAgICAgIHdoaWxlICh0aW1lID4gdGhpcy5fbW90aW9uRGF0YS5kdXJhdGlvbikge1xyXG4gICAgICAgIHRpbWUgLT0gdGhpcy5fbW90aW9uRGF0YS5kdXJhdGlvbjtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGN1cnZlczogY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkN1cnZlPiA9IHRoaXMuX21vdGlvbkRhdGEuY3VydmVzO1xyXG5cclxuICAgIC8vIEV2YWx1YXRlIG1vZGVsIGN1cnZlcy5cclxuICAgIGZvciAoXHJcbiAgICAgIGMgPSAwO1xyXG4gICAgICBjIDwgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZUNvdW50ICYmXHJcbiAgICAgIGN1cnZlcy5hdChjKS50eXBlID09XHJcbiAgICAgIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0LkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X01vZGVsO1xyXG4gICAgICArK2NcclxuICAgICkge1xyXG4gICAgICAvLyBFdmFsdWF0ZSBjdXJ2ZSBhbmQgY2FsbCBoYW5kbGVyLlxyXG4gICAgICB2YWx1ZSA9IGV2YWx1YXRlQ3VydmUodGhpcy5fbW90aW9uRGF0YSwgYywgdGltZSk7XHJcblxyXG4gICAgICBpZiAoY3VydmVzLmF0KGMpLmlkID09IHRoaXMuX21vZGVsQ3VydmVJZEV5ZUJsaW5rKSB7XHJcbiAgICAgICAgZXllQmxpbmtWYWx1ZSA9IHZhbHVlO1xyXG4gICAgICB9IGVsc2UgaWYgKGN1cnZlcy5hdChjKS5pZCA9PSB0aGlzLl9tb2RlbEN1cnZlSWRMaXBTeW5jKSB7XHJcbiAgICAgICAgbGlwU3luY1ZhbHVlID0gdmFsdWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBsZXQgcGFyYW1ldGVyTW90aW9uQ3VydmVDb3VudCA9IDA7XHJcblxyXG4gICAgZm9yIChcclxuICAgICAgO1xyXG4gICAgICBjIDwgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZUNvdW50ICYmXHJcbiAgICAgIGN1cnZlcy5hdChjKS50eXBlID09XHJcbiAgICAgIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0LkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X1BhcmFtZXRlcjtcclxuICAgICAgKytjXHJcbiAgICApIHtcclxuICAgICAgcGFyYW1ldGVyTW90aW9uQ3VydmVDb3VudCsrO1xyXG5cclxuICAgICAgLy8gRmluZCBwYXJhbWV0ZXIgaW5kZXguXHJcbiAgICAgIHBhcmFtZXRlckluZGV4ID0gbW9kZWwuZ2V0UGFyYW1ldGVySW5kZXgoY3VydmVzLmF0KGMpLmlkKTtcclxuXHJcbiAgICAgIC8vIFNraXAgY3VydmUgZXZhbHVhdGlvbiBpZiBubyB2YWx1ZSBpbiBzaW5rLlxyXG4gICAgICBpZiAocGFyYW1ldGVySW5kZXggPT0gLTEpIHtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3Qgc291cmNlVmFsdWU6IG51bWJlciA9IG1vZGVsLmdldFBhcmFtZXRlclZhbHVlQnlJbmRleChcclxuICAgICAgICBwYXJhbWV0ZXJJbmRleFxyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gRXZhbHVhdGUgY3VydmUgYW5kIGFwcGx5IHZhbHVlLlxyXG4gICAgICB2YWx1ZSA9IGV2YWx1YXRlQ3VydmUodGhpcy5fbW90aW9uRGF0YSwgYywgdGltZSk7XHJcblxyXG4gICAgICBpZiAoZXllQmxpbmtWYWx1ZSAhPSBOdW1iZXIuTUFYX1ZBTFVFKSB7XHJcbiAgICAgICAgZm9yIChcclxuICAgICAgICAgIGxldCBpID0gMDtcclxuICAgICAgICAgIGkgPCB0aGlzLl9leWVCbGlua1BhcmFtZXRlcklkcy5nZXRTaXplKCkgJiYgaSA8IE1heFRhcmdldFNpemU7XHJcbiAgICAgICAgICArK2lcclxuICAgICAgICApIHtcclxuICAgICAgICAgIGlmICh0aGlzLl9leWVCbGlua1BhcmFtZXRlcklkcy5hdChpKSA9PSBjdXJ2ZXMuYXQoYykuaWQpIHtcclxuICAgICAgICAgICAgdmFsdWUgKj0gZXllQmxpbmtWYWx1ZTtcclxuICAgICAgICAgICAgZXllQmxpbmtGbGFncyB8PSAxIDw8IGk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGxpcFN5bmNWYWx1ZSAhPSBOdW1iZXIuTUFYX1ZBTFVFKSB7XHJcbiAgICAgICAgZm9yIChcclxuICAgICAgICAgIGxldCBpID0gMDtcclxuICAgICAgICAgIGkgPCB0aGlzLl9saXBTeW5jUGFyYW1ldGVySWRzLmdldFNpemUoKSAmJiBpIDwgTWF4VGFyZ2V0U2l6ZTtcclxuICAgICAgICAgICsraVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgaWYgKHRoaXMuX2xpcFN5bmNQYXJhbWV0ZXJJZHMuYXQoaSkgPT0gY3VydmVzLmF0KGMpLmlkKSB7XHJcbiAgICAgICAgICAgIHZhbHVlICs9IGxpcFN5bmNWYWx1ZTtcclxuICAgICAgICAgICAgbGlwU3luY0ZsYWdzIHw9IDEgPDwgaTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgdjogbnVtYmVyO1xyXG5cclxuICAgICAgLy8g44OR44Op44Oh44O844K/44GU44Go44Gu44OV44Kn44O844OJXHJcbiAgICAgIGlmIChjdXJ2ZXMuYXQoYykuZmFkZUluVGltZSA8IDAuMCAmJiBjdXJ2ZXMuYXQoYykuZmFkZU91dFRpbWUgPCAwLjApIHtcclxuICAgICAgICAvLyDjg6Ljg7zjgrfjg6fjg7Pjga7jg5Xjgqfjg7zjg4njgpLpgannlKhcclxuICAgICAgICB2ID0gc291cmNlVmFsdWUgKyAodmFsdWUgLSBzb3VyY2VWYWx1ZSkgKiBmYWRlV2VpZ2h0O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIOODkeODqeODoeODvOOCv+OBq+WvvuOBl+OBpuODleOCp+ODvOODieOCpOODs+OBi+ODleOCp+ODvOODieOCouOCpuODiOOBjOioreWumuOBl+OBpuOBguOCi+WgtOWQiOOBr+OBneOBoeOCieOCkumBqeeUqFxyXG4gICAgICAgIGxldCBmaW46IG51bWJlcjtcclxuICAgICAgICBsZXQgZm91dDogbnVtYmVyO1xyXG5cclxuICAgICAgICBpZiAoY3VydmVzLmF0KGMpLmZhZGVJblRpbWUgPCAwLjApIHtcclxuICAgICAgICAgIGZpbiA9IHRtcEZhZGVJbjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZmluID1cclxuICAgICAgICAgICAgY3VydmVzLmF0KGMpLmZhZGVJblRpbWUgPT0gMC4wXHJcbiAgICAgICAgICAgICAgPyAxLjBcclxuICAgICAgICAgICAgICA6IEN1YmlzbU1hdGguZ2V0RWFzaW5nU2luZShcclxuICAgICAgICAgICAgICAgICh1c2VyVGltZVNlY29uZHMgLSBtb3Rpb25RdWV1ZUVudHJ5LmdldEZhZGVJblN0YXJ0VGltZSgpKSAvXHJcbiAgICAgICAgICAgICAgICBjdXJ2ZXMuYXQoYykuZmFkZUluVGltZVxyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY3VydmVzLmF0KGMpLmZhZGVPdXRUaW1lIDwgMC4wKSB7XHJcbiAgICAgICAgICBmb3V0ID0gdG1wRmFkZU91dDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZm91dCA9XHJcbiAgICAgICAgICAgIGN1cnZlcy5hdChjKS5mYWRlT3V0VGltZSA9PSAwLjAgfHxcclxuICAgICAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LmdldEVuZFRpbWUoKSA8IDAuMFxyXG4gICAgICAgICAgICAgID8gMS4wXHJcbiAgICAgICAgICAgICAgOiBDdWJpc21NYXRoLmdldEVhc2luZ1NpbmUoXHJcbiAgICAgICAgICAgICAgICAobW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgLSB1c2VyVGltZVNlY29uZHMpIC9cclxuICAgICAgICAgICAgICAgIGN1cnZlcy5hdChjKS5mYWRlT3V0VGltZVxyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBwYXJhbVdlaWdodDogbnVtYmVyID0gdGhpcy5fd2VpZ2h0ICogZmluICogZm91dDtcclxuXHJcbiAgICAgICAgLy8g44OR44Op44Oh44O844K/44GU44Go44Gu44OV44Kn44O844OJ44KS6YGp55SoXHJcbiAgICAgICAgdiA9IHNvdXJjZVZhbHVlICsgKHZhbHVlIC0gc291cmNlVmFsdWUpICogcGFyYW1XZWlnaHQ7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG1vZGVsLnNldFBhcmFtZXRlclZhbHVlQnlJbmRleChwYXJhbWV0ZXJJbmRleCwgdiwgMS4wKTtcclxuICAgIH1cclxuXHJcbiAgICB7XHJcbiAgICAgIGlmIChleWVCbGlua1ZhbHVlICE9IE51bWJlci5NQVhfVkFMVUUpIHtcclxuICAgICAgICBmb3IgKFxyXG4gICAgICAgICAgbGV0IGkgPSAwO1xyXG4gICAgICAgICAgaSA8IHRoaXMuX2V5ZUJsaW5rUGFyYW1ldGVySWRzLmdldFNpemUoKSAmJiBpIDwgTWF4VGFyZ2V0U2l6ZTtcclxuICAgICAgICAgICsraVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgY29uc3Qgc291cmNlVmFsdWU6IG51bWJlciA9IG1vZGVsLmdldFBhcmFtZXRlclZhbHVlQnlJZChcclxuICAgICAgICAgICAgdGhpcy5fZXllQmxpbmtQYXJhbWV0ZXJJZHMuYXQoaSlcclxuICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgLy8g44Oi44O844K344On44Oz44Gn44Gu5LiK5pu444GN44GM44GC44Gj44Gf5pmC44Gr44Gv44G+44Gw44Gf44GN44Gv6YGp55So44GX44Gq44GEXHJcbiAgICAgICAgICBpZiAoKGV5ZUJsaW5rRmxhZ3MgPj4gaSkgJiAweDAxKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGNvbnN0IHY6IG51bWJlciA9XHJcbiAgICAgICAgICAgIHNvdXJjZVZhbHVlICsgKGV5ZUJsaW5rVmFsdWUgLSBzb3VyY2VWYWx1ZSkgKiBmYWRlV2VpZ2h0O1xyXG5cclxuICAgICAgICAgIG1vZGVsLnNldFBhcmFtZXRlclZhbHVlQnlJZCh0aGlzLl9leWVCbGlua1BhcmFtZXRlcklkcy5hdChpKSwgdik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAobGlwU3luY1ZhbHVlICE9IE51bWJlci5NQVhfVkFMVUUpIHtcclxuICAgICAgICBmb3IgKFxyXG4gICAgICAgICAgbGV0IGkgPSAwO1xyXG4gICAgICAgICAgaSA8IHRoaXMuX2xpcFN5bmNQYXJhbWV0ZXJJZHMuZ2V0U2l6ZSgpICYmIGkgPCBNYXhUYXJnZXRTaXplO1xyXG4gICAgICAgICAgKytpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBjb25zdCBzb3VyY2VWYWx1ZTogbnVtYmVyID0gbW9kZWwuZ2V0UGFyYW1ldGVyVmFsdWVCeUlkKFxyXG4gICAgICAgICAgICB0aGlzLl9saXBTeW5jUGFyYW1ldGVySWRzLmF0KGkpXHJcbiAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgIC8vIOODouODvOOCt+ODp+ODs+OBp+OBruS4iuabuOOBjeOBjOOBguOBo+OBn+aZguOBq+OBr+ODquODg+ODl+OCt+ODs+OCr+OBr+mBqeeUqOOBl+OBquOBhFxyXG4gICAgICAgICAgaWYgKChsaXBTeW5jRmxhZ3MgPj4gaSkgJiAweDAxKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGNvbnN0IHY6IG51bWJlciA9XHJcbiAgICAgICAgICAgIHNvdXJjZVZhbHVlICsgKGxpcFN5bmNWYWx1ZSAtIHNvdXJjZVZhbHVlKSAqIGZhZGVXZWlnaHQ7XHJcblxyXG4gICAgICAgICAgbW9kZWwuc2V0UGFyYW1ldGVyVmFsdWVCeUlkKHRoaXMuX2xpcFN5bmNQYXJhbWV0ZXJJZHMuYXQoaSksIHYpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZvciAoXHJcbiAgICAgIDtcclxuICAgICAgYyA8IHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudCAmJlxyXG4gICAgICBjdXJ2ZXMuYXQoYykudHlwZSA9PVxyXG4gICAgICBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldC5DdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9QYXJ0T3BhY2l0eTtcclxuICAgICAgKytjXHJcbiAgICApIHtcclxuICAgICAgLy8gRmluZCBwYXJhbWV0ZXIgaW5kZXguXHJcbiAgICAgIHBhcmFtZXRlckluZGV4ID0gbW9kZWwuZ2V0UGFyYW1ldGVySW5kZXgoY3VydmVzLmF0KGMpLmlkKTtcclxuXHJcbiAgICAgIC8vIFNraXAgY3VydmUgZXZhbHVhdGlvbiBpZiBubyB2YWx1ZSBpbiBzaW5rLlxyXG4gICAgICBpZiAocGFyYW1ldGVySW5kZXggPT0gLTEpIHtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gRXZhbHVhdGUgY3VydmUgYW5kIGFwcGx5IHZhbHVlLlxyXG4gICAgICB2YWx1ZSA9IGV2YWx1YXRlQ3VydmUodGhpcy5fbW90aW9uRGF0YSwgYywgdGltZSk7XHJcblxyXG4gICAgICBtb2RlbC5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgocGFyYW1ldGVySW5kZXgsIHZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGltZU9mZnNldFNlY29uZHMgPj0gdGhpcy5fbW90aW9uRGF0YS5kdXJhdGlvbikge1xyXG4gICAgICBpZiAodGhpcy5faXNMb29wKSB7XHJcbiAgICAgICAgbW90aW9uUXVldWVFbnRyeS5zZXRTdGFydFRpbWUodXNlclRpbWVTZWNvbmRzKTsgLy8g5pyA5Yid44Gu54q25oWL44G4XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzTG9vcEZhZGVJbikge1xyXG4gICAgICAgICAgLy8g44Or44O844OX5YaF44Gn44Or44O844OX55So44OV44Kn44O844OJ44Kk44Oz44GM5pyJ5Yq544Gu5pmC44Gv44CB44OV44Kn44O844OJ44Kk44Oz6Kit5a6a44GX55u044GXXHJcbiAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldEZhZGVJblN0YXJ0VGltZSh1c2VyVGltZVNlY29uZHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAodGhpcy5fb25GaW5pc2hlZE1vdGlvbikge1xyXG4gICAgICAgICAgdGhpcy5fb25GaW5pc2hlZE1vdGlvbih0aGlzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG1vdGlvblF1ZXVlRW50cnkuc2V0SXNGaW5pc2hlZCh0cnVlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5fbGFzdFdlaWdodCA9IGZhZGVXZWlnaHQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6vjg7zjg5fmg4XloLHjga7oqK3lrppcclxuICAgKiBAcGFyYW0gbG9vcCDjg6vjg7zjg5fmg4XloLFcclxuICAgKi9cclxuICBwdWJsaWMgc2V0SXNMb29wKGxvb3A6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgIHRoaXMuX2lzTG9vcCA9IGxvb3A7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6vjg7zjg5fmg4XloLHjga7lj5blvpdcclxuICAgKiBAcmV0dXJuIHRydWUg44Or44O844OX44GZ44KLXHJcbiAgICogQHJldHVybiBmYWxzZSDjg6vjg7zjg5fjgZfjgarjgYRcclxuICAgKi9cclxuICBwdWJsaWMgaXNMb29wKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lzTG9vcDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODq+ODvOODl+aZguOBruODleOCp+ODvOODieOCpOODs+aDheWgseOBruioreWumlxyXG4gICAqIEBwYXJhbSBsb29wRmFkZUluICDjg6vjg7zjg5fmmYLjga7jg5Xjgqfjg7zjg4njgqTjg7Pmg4XloLFcclxuICAgKi9cclxuICBwdWJsaWMgc2V0SXNMb29wRmFkZUluKGxvb3BGYWRlSW46IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgIHRoaXMuX2lzTG9vcEZhZGVJbiA9IGxvb3BGYWRlSW47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6vjg7zjg5fmmYLjga7jg5Xjgqfjg7zjg4njgqTjg7Pmg4XloLHjga7lj5blvpdcclxuICAgKlxyXG4gICAqIEByZXR1cm4gIHRydWUgICAg44GZ44KLXHJcbiAgICogQHJldHVybiAgZmFsc2UgICDjgZfjgarjgYRcclxuICAgKi9cclxuICBwdWJsaWMgaXNMb29wRmFkZUluKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lzTG9vcEZhZGVJbjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODvOOCt+ODp+ODs+OBrumVt+OBleOCkuWPluW+l+OBmeOCi+OAglxyXG4gICAqXHJcbiAgICogQHJldHVybiAg44Oi44O844K344On44Oz44Gu6ZW344GVW+enkl1cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RHVyYXRpb24oKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9pc0xvb3AgPyAtMS4wIDogdGhpcy5fbG9vcER1cmF0aW9uU2Vjb25kcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODvOOCt+ODp+ODs+OBruODq+ODvOODl+aZguOBrumVt+OBleOCkuWPluW+l+OBmeOCi+OAglxyXG4gICAqXHJcbiAgICogQHJldHVybiAg44Oi44O844K344On44Oz44Gu44Or44O844OX5pmC44Gu6ZW344GVW+enkl1cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0TG9vcER1cmF0aW9uKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fbG9vcER1cmF0aW9uU2Vjb25kcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODkeODqeODoeODvOOCv+OBq+WvvuOBmeOCi+ODleOCp+ODvOODieOCpOODs+OBruaZgumWk+OCkuioreWumuOBmeOCi+OAglxyXG4gICAqXHJcbiAgICogQHBhcmFtIHBhcmFtZXRlcklkICAgICDjg5Hjg6njg6Hjg7zjgr9JRFxyXG4gICAqIEBwYXJhbSB2YWx1ZSAgICAgICAgICAg44OV44Kn44O844OJ44Kk44Oz44Gr44GL44GL44KL5pmC6ZaTW+enkl1cclxuICAgKi9cclxuICBwdWJsaWMgc2V0UGFyYW1ldGVyRmFkZUluVGltZShcclxuICAgIHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZSxcclxuICAgIHZhbHVlOiBudW1iZXJcclxuICApOiB2b2lkIHtcclxuICAgIGNvbnN0IGN1cnZlczogY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkN1cnZlPiA9IHRoaXMuX21vdGlvbkRhdGEuY3VydmVzO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZUNvdW50OyArK2kpIHtcclxuICAgICAgaWYgKHBhcmFtZXRlcklkID09IGN1cnZlcy5hdChpKS5pZCkge1xyXG4gICAgICAgIGN1cnZlcy5hdChpKS5mYWRlSW5UaW1lID0gdmFsdWU7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jgavlr77jgZnjgovjg5Xjgqfjg7zjg4njgqLjgqbjg4jjga7mmYLplpPjga7oqK3lrppcclxuICAgKiBAcGFyYW0gcGFyYW1ldGVySWQgICAgIOODkeODqeODoeODvOOCv0lEXHJcbiAgICogQHBhcmFtIHZhbHVlICAgICAgICAgICDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgavjgYvjgYvjgovmmYLplpNb56eSXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRQYXJhbWV0ZXJGYWRlT3V0VGltZShcclxuICAgIHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZSxcclxuICAgIHZhbHVlOiBudW1iZXJcclxuICApOiB2b2lkIHtcclxuICAgIGNvbnN0IGN1cnZlczogY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkN1cnZlPiA9IHRoaXMuX21vdGlvbkRhdGEuY3VydmVzO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZUNvdW50OyArK2kpIHtcclxuICAgICAgaWYgKHBhcmFtZXRlcklkID09IGN1cnZlcy5hdChpKS5pZCkge1xyXG4gICAgICAgIGN1cnZlcy5hdChpKS5mYWRlT3V0VGltZSA9IHZhbHVlO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OR44Op44Oh44O844K/44Gr5a++44GZ44KL44OV44Kn44O844OJ44Kk44Oz44Gu5pmC6ZaT44Gu5Y+W5b6XXHJcbiAgICogQHBhcmFtICAgIHBhcmFtZXRlcklkICAgICDjg5Hjg6njg6Hjg7zjgr9JRFxyXG4gICAqIEByZXR1cm4gICDjg5Xjgqfjg7zjg4njgqTjg7PjgavjgYvjgYvjgovmmYLplpNb56eSXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRQYXJhbWV0ZXJGYWRlSW5UaW1lKHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZSk6IG51bWJlciB7XHJcbiAgICBjb25zdCBjdXJ2ZXM6IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25DdXJ2ZT4gPSB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcztcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudDsgKytpKSB7XHJcbiAgICAgIGlmIChwYXJhbWV0ZXJJZCA9PSBjdXJ2ZXMuYXQoaSkuaWQpIHtcclxuICAgICAgICByZXR1cm4gY3VydmVzLmF0KGkpLmZhZGVJblRpbWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gLTE7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jgavlr77jgZnjgovjg5Xjgqfjg7zjg4njgqLjgqbjg4jjga7mmYLplpPjgpLlj5blvpdcclxuICAgKlxyXG4gICAqIEBwYXJhbSAgIHBhcmFtZXRlcklkICAgICDjg5Hjg6njg6Hjg7zjgr9JRFxyXG4gICAqIEByZXR1cm4gICDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgavjgYvjgYvjgovmmYLplpNb56eSXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRQYXJhbWV0ZXJGYWRlT3V0VGltZShwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGUpOiBudW1iZXIge1xyXG4gICAgY29uc3QgY3VydmVzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uQ3VydmU+ID0gdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXM7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQ7ICsraSkge1xyXG4gICAgICBpZiAocGFyYW1ldGVySWQgPT0gY3VydmVzLmF0KGkpLmlkKSB7XHJcbiAgICAgICAgcmV0dXJuIGN1cnZlcy5hdChpKS5mYWRlT3V0VGltZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAtMTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiHquWLleOCqOODleOCp+OCr+ODiOOBjOOBi+OBi+OBo+OBpuOBhOOCi+ODkeODqeODoeODvOOCv0lE44Oq44K544OI44Gu6Kit5a6aXHJcbiAgICogQHBhcmFtIGV5ZUJsaW5rUGFyYW1ldGVySWRzICAgIOiHquWLleOBvuOBsOOBn+OBjeOBjOOBi+OBi+OBo+OBpuOBhOOCi+ODkeODqeODoeODvOOCv0lE44Gu44Oq44K544OIXHJcbiAgICogQHBhcmFtIGxpcFN5bmNQYXJhbWV0ZXJJZHMgICAgIOODquODg+ODl+OCt+ODs+OCr+OBjOOBi+OBi+OBo+OBpuOBhOOCi+ODkeODqeODoeODvOOCv0lE44Gu44Oq44K544OIXHJcbiAgICovXHJcbiAgcHVibGljIHNldEVmZmVjdElkcyhcclxuICAgIGV5ZUJsaW5rUGFyYW1ldGVySWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+LFxyXG4gICAgbGlwU3luY1BhcmFtZXRlcklkczogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPlxyXG4gICk6IHZvaWQge1xyXG4gICAgdGhpcy5fZXllQmxpbmtQYXJhbWV0ZXJJZHMgPSBleWVCbGlua1BhcmFtZXRlcklkcztcclxuICAgIHRoaXMuX2xpcFN5bmNQYXJhbWV0ZXJJZHMgPSBsaXBTeW5jUGFyYW1ldGVySWRzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMuX3NvdXJjZUZyYW1lUmF0ZSA9IDMwLjA7XHJcbiAgICB0aGlzLl9sb29wRHVyYXRpb25TZWNvbmRzID0gLTEuMDtcclxuICAgIHRoaXMuX2lzTG9vcCA9IGZhbHNlOyAvLyB0cnVl44GL44KJIGZhbHNlIOOBuOODh+ODleOCqeODq+ODiOOCkuWkieabtFxyXG4gICAgdGhpcy5faXNMb29wRmFkZUluID0gdHJ1ZTsgLy8g44Or44O844OX5pmC44Gr44OV44Kn44O844OJ44Kk44Oz44GM5pyJ5Yq544GL44Gp44GG44GL44Gu44OV44Op44KwXHJcbiAgICB0aGlzLl9sYXN0V2VpZ2h0ID0gMC4wO1xyXG4gICAgdGhpcy5fbW90aW9uRGF0YSA9IG51bGw7XHJcbiAgICB0aGlzLl9tb2RlbEN1cnZlSWRFeWVCbGluayA9IG51bGw7XHJcbiAgICB0aGlzLl9tb2RlbEN1cnZlSWRMaXBTeW5jID0gbnVsbDtcclxuICAgIHRoaXMuX2V5ZUJsaW5rUGFyYW1ldGVySWRzID0gbnVsbDtcclxuICAgIHRoaXMuX2xpcFN5bmNQYXJhbWV0ZXJJZHMgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXHJcbiAgICovXHJcbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLl9tb3Rpb25EYXRhID0gdm9pZCAwO1xyXG4gICAgdGhpcy5fbW90aW9uRGF0YSA9IG51bGw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtb3Rpb24zLmpzb27jgpLjg5Hjg7zjgrnjgZnjgovjgIJcclxuICAgKlxyXG4gICAqIEBwYXJhbSBtb3Rpb25Kc29uICBtb3Rpb24zLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcclxuICAgKiBAcGFyYW0gc2l6ZSAgICAgICAg44OQ44OD44OV44Kh44Gu44K144Kk44K6XHJcbiAgICovXHJcbiAgcHVibGljIHBhcnNlKG1vdGlvbkpzb246IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuX21vdGlvbkRhdGEgPSBuZXcgQ3ViaXNtTW90aW9uRGF0YSgpO1xyXG5cclxuICAgIGxldCBqc29uOiBDdWJpc21Nb3Rpb25Kc29uID0gbmV3IEN1YmlzbU1vdGlvbkpzb24obW90aW9uSnNvbiwgc2l6ZSk7XHJcblxyXG4gICAgdGhpcy5fbW90aW9uRGF0YS5kdXJhdGlvbiA9IGpzb24uZ2V0TW90aW9uRHVyYXRpb24oKTtcclxuICAgIHRoaXMuX21vdGlvbkRhdGEubG9vcCA9IGpzb24uaXNNb3Rpb25Mb29wKCk7XHJcbiAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQgPSBqc29uLmdldE1vdGlvbkN1cnZlQ291bnQoKTtcclxuICAgIHRoaXMuX21vdGlvbkRhdGEuZnBzID0ganNvbi5nZXRNb3Rpb25GcHMoKTtcclxuICAgIHRoaXMuX21vdGlvbkRhdGEuZXZlbnRDb3VudCA9IGpzb24uZ2V0RXZlbnRDb3VudCgpO1xyXG5cclxuICAgIGNvbnN0IGFyZUJlemllcnNSZXN0cnVjdGVkOiBib29sZWFuID0ganNvbi5nZXRFdmFsdWF0aW9uT3B0aW9uRmxhZyhcclxuICAgICAgRXZhbHVhdGlvbk9wdGlvbkZsYWcuRXZhbHVhdGlvbk9wdGlvbkZsYWdfQXJlQmV6aWVyc1Jpc3RyaWN0ZWRcclxuICAgICk7XHJcblxyXG4gICAgaWYgKGpzb24uaXNFeGlzdE1vdGlvbkZhZGVJblRpbWUoKSkge1xyXG4gICAgICB0aGlzLl9mYWRlSW5TZWNvbmRzID1cclxuICAgICAgICBqc29uLmdldE1vdGlvbkZhZGVJblRpbWUoKSA8IDAuMCA/IDEuMCA6IGpzb24uZ2V0TW90aW9uRmFkZUluVGltZSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fZmFkZUluU2Vjb25kcyA9IDEuMDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoanNvbi5pc0V4aXN0TW90aW9uRmFkZU91dFRpbWUoKSkge1xyXG4gICAgICB0aGlzLl9mYWRlT3V0U2Vjb25kcyA9XHJcbiAgICAgICAganNvbi5nZXRNb3Rpb25GYWRlT3V0VGltZSgpIDwgMC4wID8gMS4wIDoganNvbi5nZXRNb3Rpb25GYWRlT3V0VGltZSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fZmFkZU91dFNlY29uZHMgPSAxLjA7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMudXBkYXRlU2l6ZShcclxuICAgICAgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZUNvdW50LFxyXG4gICAgICBDdWJpc21Nb3Rpb25DdXJ2ZSxcclxuICAgICAgdHJ1ZVxyXG4gICAgKTtcclxuICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMudXBkYXRlU2l6ZShcclxuICAgICAganNvbi5nZXRNb3Rpb25Ub3RhbFNlZ21lbnRDb3VudCgpLFxyXG4gICAgICBDdWJpc21Nb3Rpb25TZWdtZW50LFxyXG4gICAgICB0cnVlXHJcbiAgICApO1xyXG4gICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMudXBkYXRlU2l6ZShcclxuICAgICAganNvbi5nZXRNb3Rpb25Ub3RhbFBvaW50Q291bnQoKSxcclxuICAgICAgQ3ViaXNtTW90aW9uUG9pbnQsXHJcbiAgICAgIHRydWVcclxuICAgICk7XHJcbiAgICB0aGlzLl9tb3Rpb25EYXRhLmV2ZW50cy51cGRhdGVTaXplKFxyXG4gICAgICB0aGlzLl9tb3Rpb25EYXRhLmV2ZW50Q291bnQsXHJcbiAgICAgIEN1YmlzbU1vdGlvbkV2ZW50LFxyXG4gICAgICB0cnVlXHJcbiAgICApO1xyXG5cclxuICAgIGxldCB0b3RhbFBvaW50Q291bnQgPSAwO1xyXG4gICAgbGV0IHRvdGFsU2VnbWVudENvdW50ID0gMDtcclxuXHJcbiAgICAvLyBDdXJ2ZXNcclxuICAgIGZvciAoXHJcbiAgICAgIGxldCBjdXJ2ZUNvdW50ID0gMDtcclxuICAgICAgY3VydmVDb3VudCA8IHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudDtcclxuICAgICAgKytjdXJ2ZUNvdW50XHJcbiAgICApIHtcclxuICAgICAgaWYgKGpzb24uZ2V0TW90aW9uQ3VydmVUYXJnZXQoY3VydmVDb3VudCkgPT0gVGFyZ2V0TmFtZU1vZGVsKSB7XHJcbiAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMuYXQoY3VydmVDb3VudCkudHlwZSA9XHJcbiAgICAgICAgICBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldC5DdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9Nb2RlbDtcclxuICAgICAgfSBlbHNlIGlmIChqc29uLmdldE1vdGlvbkN1cnZlVGFyZ2V0KGN1cnZlQ291bnQpID09IFRhcmdldE5hbWVQYXJhbWV0ZXIpIHtcclxuICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcy5hdChjdXJ2ZUNvdW50KS50eXBlID1cclxuICAgICAgICAgIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0LkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X1BhcmFtZXRlcjtcclxuICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICBqc29uLmdldE1vdGlvbkN1cnZlVGFyZ2V0KGN1cnZlQ291bnQpID09IFRhcmdldE5hbWVQYXJ0T3BhY2l0eVxyXG4gICAgICApIHtcclxuICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcy5hdChjdXJ2ZUNvdW50KS50eXBlID1cclxuICAgICAgICAgIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0LkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X1BhcnRPcGFjaXR5O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIEN1YmlzbUxvZ1dhcm5pbmcoXHJcbiAgICAgICAgICAnV2FybmluZyA6IFVuYWJsZSB0byBnZXQgc2VnbWVudCB0eXBlIGZyb20gQ3VydmUhIFRoZSBudW1iZXIgb2YgXCJDdXJ2ZUNvdW50XCIgbWF5IGJlIGluY29ycmVjdCEnXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMuYXQoY3VydmVDb3VudCkuaWQgPSBqc29uLmdldE1vdGlvbkN1cnZlSWQoXHJcbiAgICAgICAgY3VydmVDb3VudFxyXG4gICAgICApO1xyXG5cclxuICAgICAgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMuYXQoXHJcbiAgICAgICAgY3VydmVDb3VudFxyXG4gICAgICApLmJhc2VTZWdtZW50SW5kZXggPSB0b3RhbFNlZ21lbnRDb3VudDtcclxuXHJcbiAgICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVzLmF0KFxyXG4gICAgICAgIGN1cnZlQ291bnRcclxuICAgICAgKS5mYWRlSW5UaW1lID0ganNvbi5pc0V4aXN0TW90aW9uQ3VydmVGYWRlSW5UaW1lKGN1cnZlQ291bnQpXHJcbiAgICAgICAgICA/IGpzb24uZ2V0TW90aW9uQ3VydmVGYWRlSW5UaW1lKGN1cnZlQ291bnQpXHJcbiAgICAgICAgICA6IC0xLjA7XHJcbiAgICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVzLmF0KFxyXG4gICAgICAgIGN1cnZlQ291bnRcclxuICAgICAgKS5mYWRlT3V0VGltZSA9IGpzb24uaXNFeGlzdE1vdGlvbkN1cnZlRmFkZU91dFRpbWUoY3VydmVDb3VudClcclxuICAgICAgICAgID8ganNvbi5nZXRNb3Rpb25DdXJ2ZUZhZGVPdXRUaW1lKGN1cnZlQ291bnQpXHJcbiAgICAgICAgICA6IC0xLjA7XHJcblxyXG4gICAgICAvLyBTZWdtZW50c1xyXG4gICAgICBmb3IgKFxyXG4gICAgICAgIGxldCBzZWdtZW50UG9zaXRpb24gPSAwO1xyXG4gICAgICAgIHNlZ21lbnRQb3NpdGlvbiA8IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50Q291bnQoY3VydmVDb3VudCk7XHJcblxyXG4gICAgICApIHtcclxuICAgICAgICBpZiAoc2VnbWVudFBvc2l0aW9uID09IDApIHtcclxuICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMuYXQoXHJcbiAgICAgICAgICAgIHRvdGFsU2VnbWVudENvdW50XHJcbiAgICAgICAgICApLmJhc2VQb2ludEluZGV4ID0gdG90YWxQb2ludENvdW50O1xyXG5cclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmICh0b3RhbFBvaW50Q291bnQgPj0gdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuZ2V0U2l6ZSgpKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMucHVzaEJhY2sobmV3IEN1YmlzbU1vdGlvblBvaW50KCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KFxyXG4gICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudFxyXG4gICAgICAgICAgICApLnRpbWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChjdXJ2ZUNvdW50LCBzZWdtZW50UG9zaXRpb24pO1xyXG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdChcclxuICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnRcclxuICAgICAgICAgICAgKS52YWx1ZSA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KGN1cnZlQ291bnQsIHNlZ21lbnRQb3NpdGlvbiArIDEpO1xyXG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB0b3RhbFBvaW50Q291bnQgKz0gMTtcclxuICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArPSAyO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KHRvdGFsU2VnbWVudENvdW50KS5iYXNlUG9pbnRJbmRleCA9XHJcbiAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudCAtIDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBzZWdtZW50OiBudW1iZXIgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChcclxuICAgICAgICAgIGN1cnZlQ291bnQsXHJcbiAgICAgICAgICBzZWdtZW50UG9zaXRpb25cclxuICAgICAgICApO1xyXG4gICAgICAgIHN3aXRjaCAoc2VnbWVudCkge1xyXG4gICAgICAgICAgY2FzZSBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9MaW5lYXI6IHtcclxuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdCh0b3RhbFNlZ21lbnRDb3VudCkuc2VnbWVudFR5cGUgPVxyXG4gICAgICAgICAgICAgIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0xpbmVhcjtcclxuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdChcclxuICAgICAgICAgICAgICB0b3RhbFNlZ21lbnRDb3VudFxyXG4gICAgICAgICAgICApLmV2YWx1YXRlID0gbGluZWFyRXZhbHVhdGU7XHJcblxyXG4gICAgICAgICAgICBpZiAodG90YWxQb2ludENvdW50ID49IHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmdldFNpemUoKSkge1xyXG4gICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLnB1c2hCYWNrKG5ldyBDdWJpc21Nb3Rpb25Qb2ludCgpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQoXHJcbiAgICAgICAgICAgICAgdG90YWxQb2ludENvdW50XHJcbiAgICAgICAgICAgICkudGltZSA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxyXG4gICAgICAgICAgICAgIGN1cnZlQ291bnQsXHJcbiAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICsgMVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdChcclxuICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnRcclxuICAgICAgICAgICAgKS52YWx1ZSA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxyXG4gICAgICAgICAgICAgIGN1cnZlQ291bnQsXHJcbiAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICsgMlxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgdG90YWxQb2ludENvdW50ICs9IDE7XHJcbiAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArPSAzO1xyXG5cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjYXNlIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0Jlemllcjoge1xyXG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KHRvdGFsU2VnbWVudENvdW50KS5zZWdtZW50VHlwZSA9XHJcbiAgICAgICAgICAgICAgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfQmV6aWVyO1xyXG5cclxuICAgICAgICAgICAgaWYgKGFyZUJlemllcnNSZXN0cnVjdGVkIHx8IFVzZU9sZEJlemllcnNDdXJ2ZU1vdGlvbikge1xyXG4gICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMuYXQoXHJcbiAgICAgICAgICAgICAgICB0b3RhbFNlZ21lbnRDb3VudFxyXG4gICAgICAgICAgICAgICkuZXZhbHVhdGUgPSBiZXppZXJFdmFsdWF0ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KFxyXG4gICAgICAgICAgICAgICAgdG90YWxTZWdtZW50Q291bnRcclxuICAgICAgICAgICAgICApLmV2YWx1YXRlID0gYmV6aWVyRXZhbHVhdGVDYXJkYW5vSW50ZXJwcmV0YXRpb247XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0b3RhbFBvaW50Q291bnQgPj0gdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuZ2V0U2l6ZSgpKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMucHVzaEJhY2sobmV3IEN1YmlzbU1vdGlvblBvaW50KCkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdChcclxuICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnRcclxuICAgICAgICAgICAgKS50aW1lID0ganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoXHJcbiAgICAgICAgICAgICAgY3VydmVDb3VudCxcclxuICAgICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKyAxXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KFxyXG4gICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudFxyXG4gICAgICAgICAgICApLnZhbHVlID0ganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoXHJcbiAgICAgICAgICAgICAgY3VydmVDb3VudCxcclxuICAgICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKyAyXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBpZiAodG90YWxQb2ludENvdW50ICsgMSA+PSB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5nZXRTaXplKCkpIHtcclxuICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5wdXNoQmFjayhuZXcgQ3ViaXNtTW90aW9uUG9pbnQoKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KFxyXG4gICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudCArIDFcclxuICAgICAgICAgICAgKS50aW1lID0ganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoXHJcbiAgICAgICAgICAgICAgY3VydmVDb3VudCxcclxuICAgICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKyAzXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KFxyXG4gICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudCArIDFcclxuICAgICAgICAgICAgKS52YWx1ZSA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxyXG4gICAgICAgICAgICAgIGN1cnZlQ291bnQsXHJcbiAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICsgNFxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRvdGFsUG9pbnRDb3VudCArIDIgPj0gdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuZ2V0U2l6ZSgpKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMucHVzaEJhY2sobmV3IEN1YmlzbU1vdGlvblBvaW50KCkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdChcclxuICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnQgKyAyXHJcbiAgICAgICAgICAgICkudGltZSA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxyXG4gICAgICAgICAgICAgIGN1cnZlQ291bnQsXHJcbiAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICsgNVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdChcclxuICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnQgKyAyXHJcbiAgICAgICAgICAgICkudmFsdWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChcclxuICAgICAgICAgICAgICBjdXJ2ZUNvdW50LFxyXG4gICAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArIDZcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudCArPSAzO1xyXG4gICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKz0gNztcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGNhc2UgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfU3RlcHBlZDoge1xyXG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KHRvdGFsU2VnbWVudENvdW50KS5zZWdtZW50VHlwZSA9XHJcbiAgICAgICAgICAgICAgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfU3RlcHBlZDtcclxuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdChcclxuICAgICAgICAgICAgICB0b3RhbFNlZ21lbnRDb3VudFxyXG4gICAgICAgICAgICApLmV2YWx1YXRlID0gc3RlcHBlZEV2YWx1YXRlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRvdGFsUG9pbnRDb3VudCA+PSB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5nZXRTaXplKCkpIHtcclxuICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5wdXNoQmFjayhuZXcgQ3ViaXNtTW90aW9uUG9pbnQoKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KFxyXG4gICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudFxyXG4gICAgICAgICAgICApLnRpbWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChcclxuICAgICAgICAgICAgICBjdXJ2ZUNvdW50LFxyXG4gICAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArIDFcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQoXHJcbiAgICAgICAgICAgICAgdG90YWxQb2ludENvdW50XHJcbiAgICAgICAgICAgICkudmFsdWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChcclxuICAgICAgICAgICAgICBjdXJ2ZUNvdW50LFxyXG4gICAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArIDJcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudCArPSAxO1xyXG4gICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKz0gMztcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGNhc2UgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfSW52ZXJzZVN0ZXBwZWQ6IHtcclxuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdCh0b3RhbFNlZ21lbnRDb3VudCkuc2VnbWVudFR5cGUgPVxyXG4gICAgICAgICAgICAgIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0ludmVyc2VTdGVwcGVkO1xyXG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KFxyXG4gICAgICAgICAgICAgIHRvdGFsU2VnbWVudENvdW50XHJcbiAgICAgICAgICAgICkuZXZhbHVhdGUgPSBpbnZlcnNlU3RlcHBlZEV2YWx1YXRlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRvdGFsUG9pbnRDb3VudCA+PSB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5nZXRTaXplKCkpIHtcclxuICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5wdXNoQmFjayhuZXcgQ3ViaXNtTW90aW9uUG9pbnQoKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KFxyXG4gICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudFxyXG4gICAgICAgICAgICApLnRpbWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChcclxuICAgICAgICAgICAgICBjdXJ2ZUNvdW50LFxyXG4gICAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArIDFcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQoXHJcbiAgICAgICAgICAgICAgdG90YWxQb2ludENvdW50XHJcbiAgICAgICAgICAgICkudmFsdWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChcclxuICAgICAgICAgICAgICBjdXJ2ZUNvdW50LFxyXG4gICAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArIDJcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudCArPSAxO1xyXG4gICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKz0gMztcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgICAgICBDU01fQVNTRVJUKDApO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICsrdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMuYXQoY3VydmVDb3VudCkuc2VnbWVudENvdW50O1xyXG4gICAgICAgICsrdG90YWxTZWdtZW50Q291bnQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmb3IgKFxyXG4gICAgICBsZXQgdXNlcmRhdGFjb3VudCA9IDA7XHJcbiAgICAgIHVzZXJkYXRhY291bnQgPCBqc29uLmdldEV2ZW50Q291bnQoKTtcclxuICAgICAgKyt1c2VyZGF0YWNvdW50XHJcbiAgICApIHtcclxuICAgICAgdGhpcy5fbW90aW9uRGF0YS5ldmVudHMuYXQodXNlcmRhdGFjb3VudCkuZmlyZVRpbWUgPSBqc29uLmdldEV2ZW50VGltZShcclxuICAgICAgICB1c2VyZGF0YWNvdW50XHJcbiAgICAgICk7XHJcbiAgICAgIHRoaXMuX21vdGlvbkRhdGEuZXZlbnRzLmF0KHVzZXJkYXRhY291bnQpLnZhbHVlID0ganNvbi5nZXRFdmVudFZhbHVlKFxyXG4gICAgICAgIHVzZXJkYXRhY291bnRcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBqc29uLnJlbGVhc2UoKTtcclxuICAgIGpzb24gPSB2b2lkIDA7XHJcbiAgICBqc29uID0gbnVsbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODh+ODq+OBruODkeODqeODoeODvOOCv+abtOaWsFxyXG4gICAqXHJcbiAgICog44Kk44OZ44Oz44OI55m654Gr44Gu44OB44Kn44OD44Kv44CCXHJcbiAgICog5YWl5Yqb44GZ44KL5pmC6ZaT44Gv5ZG844Gw44KM44KL44Oi44O844K344On44Oz44K/44Kk44Of44Oz44Kw44KS77yQ44Go44GX44Gf56eS5pWw44Gn6KGM44GG44CCXHJcbiAgICpcclxuICAgKiBAcGFyYW0gYmVmb3JlQ2hlY2tUaW1lU2Vjb25kcyAgIOWJjeWbnuOBruOCpOODmeODs+ODiOODgeOCp+ODg+OCr+aZgumWk1vnp5JdXHJcbiAgICogQHBhcmFtIG1vdGlvblRpbWVTZWNvbmRzICAgICAgICDku4rlm57jga7lho3nlJ/mmYLplpNb56eSXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRGaXJlZEV2ZW50KFxyXG4gICAgYmVmb3JlQ2hlY2tUaW1lU2Vjb25kczogbnVtYmVyLFxyXG4gICAgbW90aW9uVGltZVNlY29uZHM6IG51bWJlclxyXG4gICk6IGNzbVZlY3Rvcjxjc21TdHJpbmc+IHtcclxuICAgIHRoaXMuX2ZpcmVkRXZlbnRWYWx1ZXMudXBkYXRlU2l6ZSgwKTtcclxuXHJcbiAgICAvLyDjgqTjg5njg7Pjg4jjga7nmbrngavjg4Hjgqfjg4Pjgq9cclxuICAgIGZvciAobGV0IHUgPSAwOyB1IDwgdGhpcy5fbW90aW9uRGF0YS5ldmVudENvdW50OyArK3UpIHtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIHRoaXMuX21vdGlvbkRhdGEuZXZlbnRzLmF0KHUpLmZpcmVUaW1lID4gYmVmb3JlQ2hlY2tUaW1lU2Vjb25kcyAmJlxyXG4gICAgICAgIHRoaXMuX21vdGlvbkRhdGEuZXZlbnRzLmF0KHUpLmZpcmVUaW1lIDw9IG1vdGlvblRpbWVTZWNvbmRzXHJcbiAgICAgICkge1xyXG4gICAgICAgIHRoaXMuX2ZpcmVkRXZlbnRWYWx1ZXMucHVzaEJhY2soXHJcbiAgICAgICAgICBuZXcgY3NtU3RyaW5nKHRoaXMuX21vdGlvbkRhdGEuZXZlbnRzLmF0KHUpLnZhbHVlLnMpXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLl9maXJlZEV2ZW50VmFsdWVzO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIF9zb3VyY2VGcmFtZVJhdGU6IG51bWJlcjsgLy8g44Ot44O844OJ44GX44Gf44OV44Kh44Kk44Or44GuRlBT44CC6KiY6L+w44GM54Sh44GR44KM44Gw44OH44OV44Kp44Or44OI5YCkMTVmcHPjgajjgarjgotcclxuICBwdWJsaWMgX2xvb3BEdXJhdGlvblNlY29uZHM6IG51bWJlcjsgLy8gbXRu44OV44Kh44Kk44Or44Gn5a6a576p44GV44KM44KL5LiA6YCj44Gu44Oi44O844K344On44Oz44Gu6ZW344GVXHJcbiAgcHVibGljIF9pc0xvb3A6IGJvb2xlYW47IC8vIOODq+ODvOODl+OBmeOCi+OBiz9cclxuICBwdWJsaWMgX2lzTG9vcEZhZGVJbjogYm9vbGVhbjsgLy8g44Or44O844OX5pmC44Gr44OV44Kn44O844OJ44Kk44Oz44GM5pyJ5Yq544GL44Gp44GG44GL44Gu44OV44Op44Kw44CC5Yid5pyf5YCk44Gn44Gv5pyJ5Yq544CCXHJcbiAgcHVibGljIF9sYXN0V2VpZ2h0OiBudW1iZXI7IC8vIOacgOW+jOOBq+ioreWumuOBleOCjOOBn+mHjeOBv1xyXG5cclxuICBwdWJsaWMgX21vdGlvbkRhdGE6IEN1YmlzbU1vdGlvbkRhdGE7IC8vIOWun+mam+OBruODouODvOOCt+ODp+ODs+ODh+ODvOOCv+acrOS9k1xyXG5cclxuICBwdWJsaWMgX2V5ZUJsaW5rUGFyYW1ldGVySWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+OyAvLyDoh6rli5Xjgb7jgbDjgZ/jgY3jgpLpgannlKjjgZnjgovjg5Hjg6njg6Hjg7zjgr9JROODj+ODs+ODieODq+OBruODquOCueODiOOAgiAg44Oi44OH44Or77yI44Oi44OH44Or44K744OD44OG44Kj44Oz44Kw77yJ44Go44OR44Op44Oh44O844K/44KS5a++5b+c5LuY44GR44KL44CCXHJcbiAgcHVibGljIF9saXBTeW5jUGFyYW1ldGVySWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+OyAvLyDjg6rjg4Pjg5fjgrfjg7Pjgq/jgpLpgannlKjjgZnjgovjg5Hjg6njg6Hjg7zjgr9JROODj+ODs+ODieODq+OBruODquOCueODiOOAgiAg44Oi44OH44Or77yI44Oi44OH44Or44K744OD44OG44Kj44Oz44Kw77yJ44Go44OR44Op44Oh44O844K/44KS5a++5b+c5LuY44GR44KL44CCXHJcblxyXG4gIHB1YmxpYyBfbW9kZWxDdXJ2ZUlkRXllQmxpbms6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg6Ljg4fjg6vjgYzmjIHjgaToh6rli5Xjgb7jgbDjgZ/jgY3nlKjjg5Hjg6njg6Hjg7zjgr9JROOBruODj+ODs+ODieODq+OAgiAg44Oi44OH44Or44Go44Oi44O844K344On44Oz44KS5a++5b+c5LuY44GR44KL44CCXHJcbiAgcHVibGljIF9tb2RlbEN1cnZlSWRMaXBTeW5jOiBDdWJpc21JZEhhbmRsZTsgLy8g44Oi44OH44Or44GM5oyB44Gk44Oq44OD44OX44K344Oz44Kv55So44OR44Op44Oh44O844K/SUTjga7jg4/jg7Pjg4njg6vjgIIgIOODouODh+ODq+OBqOODouODvOOCt+ODp+ODs+OCkuWvvuW/nOS7mOOBkeOCi+OAglxyXG59XHJcblxyXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cclxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbW1vdGlvbic7XHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcclxuICBleHBvcnQgY29uc3QgQ3ViaXNtTW90aW9uID0gJC5DdWJpc21Nb3Rpb247XHJcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW90aW9uID0gJC5DdWJpc21Nb3Rpb247XHJcbn1cclxuIiwiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcclxuaW1wb3J0IHsgY3NtU3RyaW5nIH0gZnJvbSAnLi4vdHlwZS9jc21zdHJpbmcnO1xyXG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XHJcblxyXG4vKipcclxuICogQGJyaWVmIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBrueorumhnlxyXG4gKlxyXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7nqK7poZ7jgIJcclxuICovXHJcbmV4cG9ydCBlbnVtIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0IHtcclxuICBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9Nb2RlbCwgLy8g44Oi44OH44Or44Gr5a++44GX44GmXHJcbiAgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfUGFyYW1ldGVyLCAvLyDjg5Hjg6njg6Hjg7zjgr/jgavlr77jgZfjgaZcclxuICBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9QYXJ0T3BhY2l0eSAvLyDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjgavlr77jgZfjgaZcclxufVxyXG5cclxuLyoqXHJcbiAqIEBicmllZiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7jgrvjgrDjg6Hjg7Pjg4jjga7nqK7poZ5cclxuICpcclxuICog44Oi44O844K344On44Oz44Kr44O844OW44Gu44K744Kw44Oh44Oz44OI44Gu56iu6aGe44CCXHJcbiAqL1xyXG5leHBvcnQgZW51bSBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZSB7XHJcbiAgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfTGluZWFyID0gMCwgLy8g44Oq44OL44KiXHJcbiAgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfQmV6aWVyID0gMSwgLy8g44OZ44K444Kn5puy57eaXHJcbiAgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfU3RlcHBlZCA9IDIsIC8vIOOCueODhuODg+ODl1xyXG4gIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0ludmVyc2VTdGVwcGVkID0gMyAvLyDjgqTjg7Pjg5Djg7zjgrnjgrnjg4bjg4Pjg5dcclxufVxyXG5cclxuLyoqXHJcbiAqIEBicmllZiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7liLblvqHngrlcclxuICpcclxuICog44Oi44O844K344On44Oz44Kr44O844OW44Gu5Yi25b6h54K544CCXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uUG9pbnQge1xyXG4gIHRpbWUgPSAwLjA7IC8vIOaZgumWk1vnp5JdXHJcbiAgdmFsdWUgPSAwLjA7IC8vIOWApFxyXG59XHJcblxyXG4vKipcclxuICog44Oi44O844K344On44Oz44Kr44O844OW44Gu44K744Kw44Oh44Oz44OI44Gu6KmV5L6h6Zai5pWwXHJcbiAqXHJcbiAqIEBwYXJhbSAgIHBvaW50cyAgICAgIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruWItuW+oeeCueODquOCueODiFxyXG4gKiBAcGFyYW0gICB0aW1lICAgICAgICDoqZXkvqHjgZnjgovmmYLplpNb56eSXVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBjc21Nb3Rpb25TZWdtZW50RXZhbHVhdGlvbkZ1bmN0aW9uIHtcclxuICAocG9pbnRzOiBDdWJpc21Nb3Rpb25Qb2ludFtdLCB0aW1lOiBudW1iZXIpOiBudW1iZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAYnJpZWYg44Oi44O844K344On44Oz44Kr44O844OW44Gu44K744Kw44Oh44Oz44OIXHJcbiAqXHJcbiAqIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruOCu+OCsOODoeODs+ODiOOAglxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvblNlZ21lbnQge1xyXG4gIC8qKlxyXG4gICAqIEBicmllZiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgKlxyXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv+OAglxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuZXZhbHVhdGUgPSBudWxsO1xyXG4gICAgdGhpcy5iYXNlUG9pbnRJbmRleCA9IDA7XHJcbiAgICB0aGlzLnNlZ21lbnRUeXBlID0gMDtcclxuICB9XHJcblxyXG4gIGV2YWx1YXRlOiBjc21Nb3Rpb25TZWdtZW50RXZhbHVhdGlvbkZ1bmN0aW9uOyAvLyDkvb/nlKjjgZnjgovoqZXkvqHplqLmlbBcclxuICBiYXNlUG9pbnRJbmRleDogbnVtYmVyOyAvLyDmnIDliJ3jga7jgrvjgrDjg6Hjg7Pjg4jjgbjjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICBzZWdtZW50VHlwZTogbnVtYmVyOyAvLyDjgrvjgrDjg6Hjg7Pjg4jjga7nqK7poZ5cclxufVxyXG5cclxuLyoqXHJcbiAqIEBicmllZiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5ZcclxuICpcclxuICog44Oi44O844K344On44Oz44Kr44O844OW44CCXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uQ3VydmUge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMudHlwZSA9IEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0LkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X01vZGVsO1xyXG4gICAgdGhpcy5zZWdtZW50Q291bnQgPSAwO1xyXG4gICAgdGhpcy5iYXNlU2VnbWVudEluZGV4ID0gMDtcclxuICAgIHRoaXMuZmFkZUluVGltZSA9IDAuMDtcclxuICAgIHRoaXMuZmFkZU91dFRpbWUgPSAwLjA7XHJcbiAgfVxyXG5cclxuICB0eXBlOiBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldDsgLy8g44Kr44O844OW44Gu56iu6aGeXHJcbiAgaWQ6IEN1YmlzbUlkSGFuZGxlOyAvLyDjgqvjg7zjg5bjga5JRFxyXG4gIHNlZ21lbnRDb3VudDogbnVtYmVyOyAvLyDjgrvjgrDjg6Hjg7Pjg4jjga7lgIvmlbBcclxuICBiYXNlU2VnbWVudEluZGV4OiBudW1iZXI7IC8vIOacgOWIneOBruOCu+OCsOODoeODs+ODiOOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gIGZhZGVJblRpbWU6IG51bWJlcjsgLy8g44OV44Kn44O844OJ44Kk44Oz44Gr44GL44GL44KL5pmC6ZaTW+enkl1cclxuICBmYWRlT3V0VGltZTogbnVtYmVyOyAvLyDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgavjgYvjgYvjgovmmYLplpNb56eSXVxyXG59XHJcblxyXG4vKipcclxuICog44Kk44OZ44Oz44OI44CCXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uRXZlbnQge1xyXG4gIGZpcmVUaW1lID0gMC4wO1xyXG4gIHZhbHVlOiBjc21TdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAYnJpZWYg44Oi44O844K344On44Oz44OH44O844K/XHJcbiAqXHJcbiAqIOODouODvOOCt+ODp+ODs+ODh+ODvOOCv+OAglxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvbkRhdGEge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuZHVyYXRpb24gPSAwLjA7XHJcbiAgICB0aGlzLmxvb3AgPSBmYWxzZTtcclxuICAgIHRoaXMuY3VydmVDb3VudCA9IDA7XHJcbiAgICB0aGlzLmV2ZW50Q291bnQgPSAwO1xyXG4gICAgdGhpcy5mcHMgPSAwLjA7XHJcblxyXG4gICAgdGhpcy5jdXJ2ZXMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkN1cnZlPigpO1xyXG4gICAgdGhpcy5zZWdtZW50cyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtTW90aW9uU2VnbWVudD4oKTtcclxuICAgIHRoaXMucG9pbnRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25Qb2ludD4oKTtcclxuICAgIHRoaXMuZXZlbnRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25FdmVudD4oKTtcclxuICB9XHJcblxyXG4gIGR1cmF0aW9uOiBudW1iZXI7IC8vIOODouODvOOCt+ODp+ODs+OBrumVt+OBlVvnp5JdXHJcbiAgbG9vcDogYm9vbGVhbjsgLy8g44Or44O844OX44GZ44KL44GL44Gp44GG44GLXHJcbiAgY3VydmVDb3VudDogbnVtYmVyOyAvLyDjgqvjg7zjg5bjga7lgIvmlbBcclxuICBldmVudENvdW50OiBudW1iZXI7IC8vIFVzZXJEYXRh44Gu5YCL5pWwXHJcbiAgZnBzOiBudW1iZXI7IC8vIOODleODrOODvOODoOODrOODvOODiFxyXG4gIGN1cnZlczogY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkN1cnZlPjsgLy8g44Kr44O844OW44Gu44Oq44K544OIXHJcbiAgc2VnbWVudHM6IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25TZWdtZW50PjsgLy8g44K744Kw44Oh44Oz44OI44Gu44Oq44K544OIXHJcbiAgcG9pbnRzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uUG9pbnQ+OyAvLyDjg53jgqTjg7Pjg4jjga7jg6rjgrnjg4hcclxuICBldmVudHM6IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25FdmVudD47IC8vIOOCpOODmeODs+ODiOOBruODquOCueODiFxyXG59XHJcblxyXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cclxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbW1vdGlvbmludGVybmFsJztcclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xyXG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb3Rpb25DdXJ2ZSA9ICQuQ3ViaXNtTW90aW9uQ3VydmU7XHJcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW90aW9uQ3VydmUgPSAkLkN1YmlzbU1vdGlvbkN1cnZlO1xyXG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldCA9ICQuQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQ7XHJcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQgPSAkLkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0O1xyXG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb3Rpb25EYXRhID0gJC5DdWJpc21Nb3Rpb25EYXRhO1xyXG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vdGlvbkRhdGEgPSAkLkN1YmlzbU1vdGlvbkRhdGE7XHJcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vdGlvbkV2ZW50ID0gJC5DdWJpc21Nb3Rpb25FdmVudDtcclxuICBleHBvcnQgdHlwZSBDdWJpc21Nb3Rpb25FdmVudCA9ICQuQ3ViaXNtTW90aW9uRXZlbnQ7XHJcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vdGlvblBvaW50ID0gJC5DdWJpc21Nb3Rpb25Qb2ludDtcclxuICBleHBvcnQgdHlwZSBDdWJpc21Nb3Rpb25Qb2ludCA9ICQuQ3ViaXNtTW90aW9uUG9pbnQ7XHJcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vdGlvblNlZ21lbnQgPSAkLkN1YmlzbU1vdGlvblNlZ21lbnQ7XHJcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW90aW9uU2VnbWVudCA9ICQuQ3ViaXNtTW90aW9uU2VnbWVudDtcclxuICBleHBvcnQgY29uc3QgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUgPSAkLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlO1xyXG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlID0gJC5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZTtcclxuICBleHBvcnQgdHlwZSBjc21Nb3Rpb25TZWdtZW50RXZhbHVhdGlvbkZ1bmN0aW9uID0gJC5jc21Nb3Rpb25TZWdtZW50RXZhbHVhdGlvbkZ1bmN0aW9uO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQ3ViaXNtSWRIYW5kbGUgfSBmcm9tICcuLi9pZC9jdWJpc21pZCc7XHJcbmltcG9ydCB7IEN1YmlzbUZyYW1ld29yayB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XHJcbmltcG9ydCB7IGNzbVN0cmluZyB9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcclxuaW1wb3J0IHsgQ3ViaXNtSnNvbiB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWpzb24nO1xyXG5cclxuLy8gSlNPTiBrZXlzXHJcbmNvbnN0IE1ldGEgPSAnTWV0YSc7XHJcbmNvbnN0IER1cmF0aW9uID0gJ0R1cmF0aW9uJztcclxuY29uc3QgTG9vcCA9ICdMb29wJztcclxuY29uc3QgQXJlQmV6aWVyc1Jlc3RyaWN0ZWQgPSAnQXJlQmV6aWVyc1Jlc3RyaWN0ZWQnO1xyXG5jb25zdCBDdXJ2ZUNvdW50ID0gJ0N1cnZlQ291bnQnO1xyXG5jb25zdCBGcHMgPSAnRnBzJztcclxuY29uc3QgVG90YWxTZWdtZW50Q291bnQgPSAnVG90YWxTZWdtZW50Q291bnQnO1xyXG5jb25zdCBUb3RhbFBvaW50Q291bnQgPSAnVG90YWxQb2ludENvdW50JztcclxuY29uc3QgQ3VydmVzID0gJ0N1cnZlcyc7XHJcbmNvbnN0IFRhcmdldCA9ICdUYXJnZXQnO1xyXG5jb25zdCBJZCA9ICdJZCc7XHJcbmNvbnN0IEZhZGVJblRpbWUgPSAnRmFkZUluVGltZSc7XHJcbmNvbnN0IEZhZGVPdXRUaW1lID0gJ0ZhZGVPdXRUaW1lJztcclxuY29uc3QgU2VnbWVudHMgPSAnU2VnbWVudHMnO1xyXG5jb25zdCBVc2VyRGF0YSA9ICdVc2VyRGF0YSc7XHJcbmNvbnN0IFVzZXJEYXRhQ291bnQgPSAnVXNlckRhdGFDb3VudCc7XHJcbmNvbnN0IFRvdGFsVXNlckRhdGFTaXplID0gJ1RvdGFsVXNlckRhdGFTaXplJztcclxuY29uc3QgVGltZSA9ICdUaW1lJztcclxuY29uc3QgVmFsdWUgPSAnVmFsdWUnO1xyXG5cclxuLyoqXHJcbiAqIG1vdGlvbjMuanNvbuOBruOCs+ODs+ODhuODiuOAglxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvbkpzb24ge1xyXG4gIC8qKlxyXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAqIEBwYXJhbSBidWZmZXIgbW90aW9uMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXHJcbiAgICogQHBhcmFtIHNpemUg44OQ44OD44OV44Kh44Gu44K144Kk44K6XHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKGJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcikge1xyXG4gICAgdGhpcy5fanNvbiA9IEN1YmlzbUpzb24uY3JlYXRlKGJ1ZmZlciwgc2l6ZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcclxuICAgKi9cclxuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcclxuICAgIEN1YmlzbUpzb24uZGVsZXRlKHRoaXMuX2pzb24pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44O844K344On44Oz44Gu6ZW344GV44KS5Y+W5b6X44GZ44KLXHJcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjga7plbfjgZVb56eSXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRNb3Rpb25EdXJhdGlvbigpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2pzb25cclxuICAgICAgLmdldFJvb3QoKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhEdXJhdGlvbilcclxuICAgICAgLnRvRmxvYXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODvOOCt+ODp+ODs+OBruODq+ODvOODl+aDheWgseOBruWPluW+l1xyXG4gICAqIEByZXR1cm4gdHJ1ZSDjg6vjg7zjg5fjgZnjgotcclxuICAgKiBAcmV0dXJuIGZhbHNlIOODq+ODvOODl+OBl+OBquOBhFxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc01vdGlvbkxvb3AoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5fanNvblxyXG4gICAgICAuZ2V0Um9vdCgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKExvb3ApXHJcbiAgICAgIC50b0Jvb2xlYW4oKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRFdmFsdWF0aW9uT3B0aW9uRmxhZyhmbGFnVHlwZTogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoXHJcbiAgICAgIEV2YWx1YXRpb25PcHRpb25GbGFnLkV2YWx1YXRpb25PcHRpb25GbGFnX0FyZUJlemllcnNSaXN0cmljdGVkID09IGZsYWdUeXBlXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cclxuICAgICAgICAuZ2V0Um9vdCgpXHJcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcclxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhBcmVCZXppZXJzUmVzdHJpY3RlZClcclxuICAgICAgICAudG9Cb29sZWFuKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44O844K344On44Oz44Kr44O844OW44Gu5YCL5pWw44Gu5Y+W5b6XXHJcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7lgIvmlbBcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0TW90aW9uQ3VydmVDb3VudCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2pzb25cclxuICAgICAgLmdldFJvb3QoKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhDdXJ2ZUNvdW50KVxyXG4gICAgICAudG9JbnQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODvOOCt+ODp+ODs+OBruODleODrOODvOODoOODrOODvOODiOOBruWPluW+l1xyXG4gICAqIEByZXR1cm4g44OV44Os44O844Og44Os44O844OIW0ZQU11cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0TW90aW9uRnBzKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fanNvblxyXG4gICAgICAuZ2V0Um9vdCgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZwcylcclxuICAgICAgLnRvRmxvYXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODvOOCt+ODp+ODs+OBruOCu+OCsOODoeODs+ODiOOBrue3j+WQiOioiOOBruWPluW+l1xyXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Gu44K744Kw44Oh44Oz44OI44Gu5Y+W5b6XXHJcbiAgICovXHJcbiAgcHVibGljIGdldE1vdGlvblRvdGFsU2VnbWVudENvdW50KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fanNvblxyXG4gICAgICAuZ2V0Um9vdCgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFRvdGFsU2VnbWVudENvdW50KVxyXG4gICAgICAudG9JbnQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODvOOCt+ODp+ODs+OBruOCq+ODvOODluOBruWItuW+oeW6l+OBrue3j+WQiOioiOOBruWPluW+l1xyXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Gu44Kr44O844OW44Gu5Yi25b6h54K544Gu57eP5ZCI6KiIXHJcbiAgICovXHJcbiAgcHVibGljIGdldE1vdGlvblRvdGFsUG9pbnRDb3VudCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2pzb25cclxuICAgICAgLmdldFJvb3QoKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhUb3RhbFBvaW50Q291bnQpXHJcbiAgICAgIC50b0ludCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44O844K344On44Oz44Gu44OV44Kn44O844OJ44Kk44Oz5pmC6ZaT44Gu5a2Y5ZyoXHJcbiAgICogQHJldHVybiB0cnVlIOWtmOWcqOOBmeOCi1xyXG4gICAqIEByZXR1cm4gZmFsc2Ug5a2Y5Zyo44GX44Gq44GEXHJcbiAgICovXHJcbiAgcHVibGljIGlzRXhpc3RNb3Rpb25GYWRlSW5UaW1lKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuICF0aGlzLl9qc29uXHJcbiAgICAgIC5nZXRSb290KClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZUluVGltZSlcclxuICAgICAgLmlzTnVsbCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44O844K344On44Oz44Gu44OV44Kn44O844OJ44Ki44Km44OI5pmC6ZaT44Gu5a2Y5ZyoXHJcbiAgICogQHJldHVybiB0cnVlIOWtmOWcqOOBmeOCi1xyXG4gICAqIEByZXR1cm4gZmFsc2Ug5a2Y5Zyo44GX44Gq44GEXHJcbiAgICovXHJcbiAgcHVibGljIGlzRXhpc3RNb3Rpb25GYWRlT3V0VGltZSgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAhdGhpcy5fanNvblxyXG4gICAgICAuZ2V0Um9vdCgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVPdXRUaW1lKVxyXG4gICAgICAuaXNOdWxsKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jg5Xjgqfjg7zjg4njgqTjg7PmmYLplpPjga7lj5blvpdcclxuICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCpOODs+aZgumWk1vnp5JdXHJcbiAgICovXHJcbiAgcHVibGljIGdldE1vdGlvbkZhZGVJblRpbWUoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9qc29uXHJcbiAgICAgIC5nZXRSb290KClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZUluVGltZSlcclxuICAgICAgLnRvRmxvYXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODvOOCt+ODp+ODs+OBruODleOCp+ODvOODieOCouOCpuODiOaZgumWk+OBruWPluW+l1xyXG4gICAqIEByZXR1cm4g44OV44Kn44O844OJ44Ki44Km44OI5pmC6ZaTW+enkl1cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0TW90aW9uRmFkZU91dFRpbWUoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9qc29uXHJcbiAgICAgIC5nZXRSb290KClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZU91dFRpbWUpXHJcbiAgICAgIC50b0Zsb2F0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga7nqK7poZ7jga7lj5blvpdcclxuICAgKiBAcGFyYW0gY3VydmVJbmRleCDjgqvjg7zjg5bjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgKiBAcmV0dXJuIOOCq+ODvOODluOBrueorumhnlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRNb3Rpb25DdXJ2ZVRhcmdldChjdXJ2ZUluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuX2pzb25cclxuICAgICAgLmdldFJvb3QoKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhDdXJ2ZXMpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoY3VydmVJbmRleClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVGFyZ2V0KVxyXG4gICAgICAuZ2V0UmF3U3RyaW5nKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga5JROOBruWPluW+l1xyXG4gICAqIEBwYXJhbSBjdXJ2ZUluZGV4IOOCq+ODvOODluOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAqIEByZXR1cm4g44Kr44O844OW44GuSURcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0TW90aW9uQ3VydmVJZChjdXJ2ZUluZGV4OiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZSB7XHJcbiAgICByZXR1cm4gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxyXG4gICAgICB0aGlzLl9qc29uXHJcbiAgICAgICAgLmdldFJvb3QoKVxyXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEN1cnZlcylcclxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGN1cnZlSW5kZXgpXHJcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoSWQpXHJcbiAgICAgICAgLmdldFJhd1N0cmluZygpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44O844K344On44Oz44Gu44Kr44O844OW44Gu44OV44Kn44O844OJ44Kk44Oz5pmC6ZaT44Gu5a2Y5ZyoXHJcbiAgICogQHBhcmFtIGN1cnZlSW5kZXgg44Kr44O844OW44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICogQHJldHVybiB0cnVlIOWtmOWcqOOBmeOCi1xyXG4gICAqIEByZXR1cm4gZmFsc2Ug5a2Y5Zyo44GX44Gq44GEXHJcbiAgICovXHJcbiAgcHVibGljIGlzRXhpc3RNb3Rpb25DdXJ2ZUZhZGVJblRpbWUoY3VydmVJbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gIXRoaXMuX2pzb25cclxuICAgICAgLmdldFJvb3QoKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhDdXJ2ZXMpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoY3VydmVJbmRleClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZUluVGltZSlcclxuICAgICAgLmlzTnVsbCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44O844K344On44Oz44Gu44Kr44O844OW44Gu44OV44Kn44O844OJ44Ki44Km44OI5pmC6ZaT44Gu5a2Y5ZyoXHJcbiAgICogQHBhcmFtIGN1cnZlSW5kZXgg44Kr44O844OW44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICogQHJldHVybiB0cnVlIOWtmOWcqOOBmeOCi1xyXG4gICAqIEByZXR1cm4gZmFsc2Ug5a2Y5Zyo44GX44Gq44GEXHJcbiAgICovXHJcbiAgcHVibGljIGlzRXhpc3RNb3Rpb25DdXJ2ZUZhZGVPdXRUaW1lKGN1cnZlSW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuICF0aGlzLl9qc29uXHJcbiAgICAgIC5nZXRSb290KClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQ3VydmVzKVxyXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGN1cnZlSW5kZXgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVPdXRUaW1lKVxyXG4gICAgICAuaXNOdWxsKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga7jg5Xjgqfjg7zjg4njgqTjg7PmmYLplpPjga7lj5blvpdcclxuICAgKiBAcGFyYW0gY3VydmVJbmRleCDjgqvjg7zjg5bjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCpOODs+aZgumWk1vnp5JdXHJcbiAgICovXHJcbiAgcHVibGljIGdldE1vdGlvbkN1cnZlRmFkZUluVGltZShjdXJ2ZUluZGV4OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2pzb25cclxuICAgICAgLmdldFJvb3QoKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhDdXJ2ZXMpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoY3VydmVJbmRleClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZUluVGltZSlcclxuICAgICAgLnRvRmxvYXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODvOOCt+ODp+ODs+OBruOCq+ODvOODluOBruODleOCp+ODvOODieOCouOCpuODiOaZgumWk+OBruWPluW+l1xyXG4gICAqIEBwYXJhbSBjdXJ2ZUluZGV4IOOCq+ODvOODluOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAqIEByZXR1cm4g44OV44Kn44O844OJ44Ki44Km44OI5pmC6ZaTW+enkl1cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0TW90aW9uQ3VydmVGYWRlT3V0VGltZShjdXJ2ZUluZGV4OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2pzb25cclxuICAgICAgLmdldFJvb3QoKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhDdXJ2ZXMpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoY3VydmVJbmRleClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZU91dFRpbWUpXHJcbiAgICAgIC50b0Zsb2F0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga7jgrvjgrDjg6Hjg7Pjg4jjga7lgIvmlbDjgpLlj5blvpfjgZnjgotcclxuICAgKiBAcGFyYW0gY3VydmVJbmRleCDjgqvjg7zjg5bjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OBruOCq+ODvOODluOBruOCu+OCsOODoeODs+ODiOOBruWAi+aVsFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRNb3Rpb25DdXJ2ZVNlZ21lbnRDb3VudChjdXJ2ZUluZGV4OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2pzb25cclxuICAgICAgLmdldFJvb3QoKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhDdXJ2ZXMpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoY3VydmVJbmRleClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoU2VnbWVudHMpXHJcbiAgICAgIC5nZXRWZWN0b3IoKVxyXG4gICAgICAuZ2V0U2l6ZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44O844K344On44Oz44Gu44Kr44O844OW44Gu44K744Kw44Oh44Oz44OI44Gu5YCk44Gu5Y+W5b6XXHJcbiAgICogQHBhcmFtIGN1cnZlSW5kZXgg44Kr44O844OW44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICogQHBhcmFtIHNlZ21lbnRJbmRleCDjgrvjgrDjg6Hjg7Pjg4jjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgKiBAcmV0dXJuIOOCu+OCsOODoeODs+ODiOOBruWApFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoXHJcbiAgICBjdXJ2ZUluZGV4OiBudW1iZXIsXHJcbiAgICBzZWdtZW50SW5kZXg6IG51bWJlclxyXG4gICk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fanNvblxyXG4gICAgICAuZ2V0Um9vdCgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEN1cnZlcylcclxuICAgICAgLmdldFZhbHVlQnlJbmRleChjdXJ2ZUluZGV4KVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhTZWdtZW50cylcclxuICAgICAgLmdldFZhbHVlQnlJbmRleChzZWdtZW50SW5kZXgpXHJcbiAgICAgIC50b0Zsb2F0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjgqTjg5njg7Pjg4jjga7lgIvmlbDjga7lj5blvpdcclxuICAgKiBAcmV0dXJuIOOCpOODmeODs+ODiOOBruWAi+aVsFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRFdmVudENvdW50KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fanNvblxyXG4gICAgICAuZ2V0Um9vdCgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhQ291bnQpXHJcbiAgICAgIC50b0ludCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogIOOCpOODmeODs+ODiOOBrue3j+aWh+Wtl+aVsOOBruWPluW+l1xyXG4gICAqIEByZXR1cm4g44Kk44OZ44Oz44OI44Gu57eP5paH5a2X5pWwXHJcbiAgICovXHJcbiAgcHVibGljIGdldFRvdGFsRXZlbnRWYWx1ZVNpemUoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9qc29uXHJcbiAgICAgIC5nZXRSb290KClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVG90YWxVc2VyRGF0YVNpemUpXHJcbiAgICAgIC50b0ludCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Kk44OZ44Oz44OI44Gu5pmC6ZaT44Gu5Y+W5b6XXHJcbiAgICogQHBhcmFtIHVzZXJEYXRhSW5kZXgg44Kk44OZ44Oz44OI44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICogQHJldHVybiDjgqTjg5njg7Pjg4jjga7mmYLplpNb56eSXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRFdmVudFRpbWUodXNlckRhdGFJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9qc29uXHJcbiAgICAgIC5nZXRSb290KClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVXNlckRhdGEpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgodXNlckRhdGFJbmRleClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVGltZSlcclxuICAgICAgLnRvRmxvYXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCpOODmeODs+ODiOOBruWPluW+l1xyXG4gICAqIEBwYXJhbSB1c2VyRGF0YUluZGV4IOOCpOODmeODs+ODiOOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAqIEByZXR1cm4g44Kk44OZ44Oz44OI44Gu5paH5a2X5YiXXHJcbiAgICovXHJcbiAgcHVibGljIGdldEV2ZW50VmFsdWUodXNlckRhdGFJbmRleDogbnVtYmVyKTogY3NtU3RyaW5nIHtcclxuICAgIHJldHVybiBuZXcgY3NtU3RyaW5nKFxyXG4gICAgICB0aGlzLl9qc29uXHJcbiAgICAgICAgLmdldFJvb3QoKVxyXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhKVxyXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgodXNlckRhdGFJbmRleClcclxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhWYWx1ZSlcclxuICAgICAgICAuZ2V0UmF3U3RyaW5nKClcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBfanNvbjogQ3ViaXNtSnNvbjsgLy8gbW90aW9uMy5qc29u44Gu44OH44O844K/XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAYnJpZWYg44OZ44K444Kn44Kr44O844OW44Gu6Kej6YeI5pa55rOV44Gu44OV44Op44Kw44K/44Kk44OXXHJcbiAqL1xyXG5leHBvcnQgZW51bSBFdmFsdWF0aW9uT3B0aW9uRmxhZyB7XHJcbiAgRXZhbHVhdGlvbk9wdGlvbkZsYWdfQXJlQmV6aWVyc1Jpc3RyaWN0ZWQgPSAwIC8vLzwg44OZ44K444Kn44OP44Oz44OJ44Or44Gu6KaP5Yi254q25oWLXHJcbn1cclxuXHJcbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxyXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtbW90aW9uanNvbic7XHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcclxuICBleHBvcnQgY29uc3QgQ3ViaXNtTW90aW9uSnNvbiA9ICQuQ3ViaXNtTW90aW9uSnNvbjtcclxuICBleHBvcnQgdHlwZSBDdWJpc21Nb3Rpb25Kc29uID0gJC5DdWJpc21Nb3Rpb25Kc29uO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQ3ViaXNtTW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XHJcbmltcG9ydCB7IEFDdWJpc21Nb3Rpb24gfSBmcm9tICcuL2FjdWJpc21tb3Rpb24nO1xyXG5pbXBvcnQge1xyXG4gIEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGUsXHJcbiAgQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyXHJcbn0gZnJvbSAnLi9jdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXInO1xyXG5cclxuLyoqXHJcbiAqIOODouODvOOCt+ODp+ODs+OBrueuoeeQhlxyXG4gKlxyXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjga7nrqHnkIbjgpLooYzjgYbjgq/jg6njgrlcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb25NYW5hZ2VyIGV4dGVuZHMgQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyIHtcclxuICAvKipcclxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5fY3VycmVudFByaW9yaXR5ID0gMDtcclxuICAgIHRoaXMuX3Jlc2VydmVQcmlvcml0eSA9IDA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlho3nlJ/kuK3jga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqbjga7lj5blvpdcclxuICAgKiBAcmV0dXJuICDjg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqZcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Q3VycmVudFByaW9yaXR5KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fY3VycmVudFByaW9yaXR5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5LqI57SE5Lit44Gu44Oi44O844K344On44Oz44Gu5YSq5YWI5bqm44KS5Y+W5b6X44GZ44KL44CCXHJcbiAgICogQHJldHVybiAg44Oi44O844K344On44Oz44Gu5YSq5YWI5bqmXHJcbiAgICovXHJcbiAgcHVibGljIGdldFJlc2VydmVQcmlvcml0eSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX3Jlc2VydmVQcmlvcml0eTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOS6iOe0hOS4reOBruODouODvOOCt+ODp+ODs+OBruWEquWFiOW6puOCkuioreWumuOBmeOCi+OAglxyXG4gICAqIEBwYXJhbSAgIHZhbCAgICAg5YSq5YWI5bqmXHJcbiAgICovXHJcbiAgcHVibGljIHNldFJlc2VydmVQcmlvcml0eSh2YWw6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5fcmVzZXJ2ZVByaW9yaXR5ID0gdmFsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5YSq5YWI5bqm44KS6Kit5a6a44GX44Gm44Oi44O844K344On44Oz44KS6ZaL5aeL44GZ44KL44CCXHJcbiAgICpcclxuICAgKiBAcGFyYW0gbW90aW9uICAgICAgICAgIOODouODvOOCt+ODp+ODs1xyXG4gICAqIEBwYXJhbSBhdXRvRGVsZXRlICAgICAg5YaN55Sf44GM54up54yf44GX44Gf44Oi44O844K344On44Oz44Gu44Kk44Oz44K544K/44Oz44K544KS5YmK6Zmk44GZ44KL44Gq44KJdHJ1ZVxyXG4gICAqIEBwYXJhbSBwcmlvcml0eSAgICAgICAg5YSq5YWI5bqmXHJcbiAgICogQHJldHVybiAgICAgICAgICAgICAgICDplovlp4vjgZfjgZ/jg6Ljg7zjgrfjg6fjg7Pjga7orZjliKXnlarlj7fjgpLov5TjgZnjgILlgIvliKXjga7jg6Ljg7zjgrfjg6fjg7PjgYzntYLkuobjgZfjgZ/jgYvlkKbjgYvjgpLliKTlrprjgZnjgotJc0ZpbmlzaGVkKCnjga7lvJXmlbDjgafkvb/nlKjjgZnjgovjgILplovlp4vjgafjgY3jgarjgYTmmYLjga/jgIwtMeOAjVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGFydE1vdGlvblByaW9yaXR5KFxyXG4gICAgbW90aW9uOiBBQ3ViaXNtTW90aW9uLFxyXG4gICAgYXV0b0RlbGV0ZTogYm9vbGVhbixcclxuICAgIHByaW9yaXR5OiBudW1iZXJcclxuICApOiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlIHtcclxuICAgIGlmIChwcmlvcml0eSA9PSB0aGlzLl9yZXNlcnZlUHJpb3JpdHkpIHtcclxuICAgICAgdGhpcy5fcmVzZXJ2ZVByaW9yaXR5ID0gMDsgLy8g5LqI57SE44KS6Kej6ZmkXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fY3VycmVudFByaW9yaXR5ID0gcHJpb3JpdHk7IC8vIOWGjeeUn+S4reODouODvOOCt+ODp+ODs+OBruWEquWFiOW6puOCkuioreWumlxyXG5cclxuICAgIHJldHVybiBzdXBlci5zdGFydE1vdGlvbihtb3Rpb24sIGF1dG9EZWxldGUsIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6Ljg7zjgrfjg6fjg7PjgpLmm7TmlrDjgZfjgabjgIHjg6Ljg4fjg6vjgavjg5Hjg6njg6Hjg7zjgr/lgKTjgpLlj43mmKDjgZnjgovjgIJcclxuICAgKlxyXG4gICAqIEBwYXJhbSBtb2RlbCAgIOWvvuixoeOBruODouODh+ODq1xyXG4gICAqIEBwYXJhbSBkZWx0YVRpbWVTZWNvbmRzICAgIOODh+ODq+OCv+aZgumWk1vnp5JdXHJcbiAgICogQHJldHVybiAgdHJ1ZSAgICDmm7TmlrDjgZXjgozjgabjgYTjgotcclxuICAgKiBAcmV0dXJuICBmYWxzZSAgIOabtOaWsOOBleOCjOOBpuOBhOOBquOBhFxyXG4gICAqL1xyXG4gIHB1YmxpYyB1cGRhdGVNb3Rpb24obW9kZWw6IEN1YmlzbU1vZGVsLCBkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyArPSBkZWx0YVRpbWVTZWNvbmRzO1xyXG5cclxuICAgIGNvbnN0IHVwZGF0ZWQ6IGJvb2xlYW4gPSBzdXBlci5kb1VwZGF0ZU1vdGlvbihtb2RlbCwgdGhpcy5fdXNlclRpbWVTZWNvbmRzKTtcclxuXHJcbiAgICBpZiAodGhpcy5pc0ZpbmlzaGVkKCkpIHtcclxuICAgICAgdGhpcy5fY3VycmVudFByaW9yaXR5ID0gMDsgLy8g5YaN55Sf5Lit44Gu44Oi44O844K344On44Oz44Gu5YSq5YWI5bqm44KS6Kej6ZmkXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHVwZGF0ZWQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6Ljg7zjgrfjg6fjg7PjgpLkuojntITjgZnjgovjgIJcclxuICAgKlxyXG4gICAqIEBwYXJhbSAgIHByaW9yaXR5ICAgIOWEquWFiOW6plxyXG4gICAqIEByZXR1cm4gIHRydWUgICAg5LqI57SE44Gn44GN44GfXHJcbiAgICogQHJldHVybiAgZmFsc2UgICDkuojntITjgafjgY3jgarjgYvjgaPjgZ9cclxuICAgKi9cclxuICBwdWJsaWMgcmVzZXJ2ZU1vdGlvbihwcmlvcml0eTogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoXHJcbiAgICAgIHByaW9yaXR5IDw9IHRoaXMuX3Jlc2VydmVQcmlvcml0eSB8fFxyXG4gICAgICBwcmlvcml0eSA8PSB0aGlzLl9jdXJyZW50UHJpb3JpdHlcclxuICAgICkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fcmVzZXJ2ZVByaW9yaXR5ID0gcHJpb3JpdHk7XHJcblxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBfY3VycmVudFByaW9yaXR5OiBudW1iZXI7IC8vIOePvuWcqOWGjeeUn+S4reOBruODouODvOOCt+ODp+ODs+OBruWEquWFiOW6plxyXG4gIF9yZXNlcnZlUHJpb3JpdHk6IG51bWJlcjsgLy8g5YaN55Sf5LqI5a6a44Gu44Oi44O844K344On44Oz44Gu5YSq5YWI5bqm44CC5YaN55Sf5Lit44GvMOOBq+OBquOCi+OAguODouODvOOCt+ODp+ODs+ODleOCoeOCpOODq+OCkuWIpeOCueODrOODg+ODieOBp+iqreOBv+i+vOOCgOOBqOOBjeOBruapn+iDveOAglxyXG59XHJcblxyXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cclxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbW1vdGlvbm1hbmFnZXInO1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vdGlvbk1hbmFnZXIgPSAkLkN1YmlzbU1vdGlvbk1hbmFnZXI7XHJcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW90aW9uTWFuYWdlciA9ICQuQ3ViaXNtTW90aW9uTWFuYWdlcjtcclxufVxyXG4iLCIvKipcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEFDdWJpc21Nb3Rpb24gfSBmcm9tICcuL2FjdWJpc21tb3Rpb24nO1xyXG5pbXBvcnQgeyBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlIH0gZnJvbSAnLi9jdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXInO1xyXG5cclxuLyoqXHJcbiAqIEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcuOBp+WGjeeUn+OBl+OBpuOBhOOCi+WQhOODouODvOOCt+ODp+ODs+OBrueuoeeQhuOCr+ODqeOCueOAglxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvblF1ZXVlRW50cnkge1xyXG4gIC8qKlxyXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuX2F1dG9EZWxldGUgPSBmYWxzZTtcclxuICAgIHRoaXMuX21vdGlvbiA9IG51bGw7XHJcbiAgICB0aGlzLl9hdmFpbGFibGUgPSB0cnVlO1xyXG4gICAgdGhpcy5fZmluaXNoZWQgPSBmYWxzZTtcclxuICAgIHRoaXMuX3N0YXJ0ZWQgPSBmYWxzZTtcclxuICAgIHRoaXMuX3N0YXJ0VGltZVNlY29uZHMgPSAtMS4wO1xyXG4gICAgdGhpcy5fZmFkZUluU3RhcnRUaW1lU2Vjb25kcyA9IDAuMDtcclxuICAgIHRoaXMuX2VuZFRpbWVTZWNvbmRzID0gLTEuMDtcclxuICAgIHRoaXMuX3N0YXRlVGltZVNlY29uZHMgPSAwLjA7XHJcbiAgICB0aGlzLl9zdGF0ZVdlaWdodCA9IDAuMDtcclxuICAgIHRoaXMuX2xhc3RFdmVudENoZWNrU2Vjb25kcyA9IDAuMDtcclxuICAgIHRoaXMuX21vdGlvblF1ZXVlRW50cnlIYW5kbGUgPSB0aGlzO1xyXG4gICAgdGhpcy5fZmFkZU91dFNlY29uZHMgPSAwLjA7XHJcbiAgICB0aGlzLl9pc1RyaWdnZXJlZEZhZGVPdXQgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuX2F1dG9EZWxldGUgJiYgdGhpcy5fbW90aW9uKSB7XHJcbiAgICAgIEFDdWJpc21Nb3Rpb24uZGVsZXRlKHRoaXMuX21vdGlvbik7IC8vXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg5Xjgqfjg7zjg4njgqLjgqbjg4jmmYLplpPjgajplovlp4vliKTlrprjga7oqK3lrppcclxuICAgKiBAcGFyYW0gZmFkZU91dFNlY29uZHMg44OV44Kn44O844OJ44Ki44Km44OI44Gr44GL44GL44KL5pmC6ZaTW+enkl1cclxuICAgKi9cclxuICBwdWJsaWMgc2V0RmFkZU91dChmYWRlT3V0U2Vjb25kczogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLl9mYWRlT3V0U2Vjb25kcyA9IGZhZGVPdXRTZWNvbmRzO1xyXG4gICAgdGhpcy5faXNUcmlnZ2VyZWRGYWRlT3V0ID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODleOCp+ODvOODieOCouOCpuODiOOBrumWi+Wni1xyXG4gICAqIEBwYXJhbSBmYWRlT3V0U2Vjb25kcyDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgavjgYvjgYvjgovmmYLplpNb56eSXVxyXG4gICAqIEBwYXJhbSB1c2VyVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cclxuICAgKi9cclxuICBwdWJsaWMgc3RhcnRGYWRlT3V0KGZhZGVPdXRTZWNvbmRzOiBudW1iZXIsIHVzZXJUaW1lU2Vjb25kczogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBjb25zdCBuZXdFbmRUaW1lU2Vjb25kczogbnVtYmVyID0gdXNlclRpbWVTZWNvbmRzICsgZmFkZU91dFNlY29uZHM7XHJcbiAgICB0aGlzLl9pc1RyaWdnZXJlZEZhZGVPdXQgPSB0cnVlO1xyXG5cclxuICAgIGlmIChcclxuICAgICAgdGhpcy5fZW5kVGltZVNlY29uZHMgPCAwLjAgfHxcclxuICAgICAgbmV3RW5kVGltZVNlY29uZHMgPCB0aGlzLl9lbmRUaW1lU2Vjb25kc1xyXG4gICAgKSB7XHJcbiAgICAgIHRoaXMuX2VuZFRpbWVTZWNvbmRzID0gbmV3RW5kVGltZVNlY29uZHM7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7ntYLkuobjga7norroqo1cclxuICAgKlxyXG4gICAqIEByZXR1cm4gdHJ1ZSDjg6Ljg7zjgrfjg6fjg7PjgYzntYLkuobjgZfjgZ9cclxuICAgKiBAcmV0dXJuIGZhbHNlIOe1guS6huOBl+OBpuOBhOOBquOBhFxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc0ZpbmlzaGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2ZpbmlzaGVkO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44O844K344On44Oz44Gu6ZaL5aeL44Gu56K66KqNXHJcbiAgICogQHJldHVybiB0cnVlIOODouODvOOCt+ODp+ODs+OBjOmWi+Wni+OBl+OBn1xyXG4gICAqIEByZXR1cm4gZmFsc2Ug6ZaL5aeL44GX44Gm44GE44Gq44GEXHJcbiAgICovXHJcbiAgcHVibGljIGlzU3RhcnRlZCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9zdGFydGVkO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44O844K344On44Oz44Gu6ZaL5aeL5pmC5Yi744Gu5Y+W5b6XXHJcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjga7plovlp4vmmYLliLtb56eSXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRTdGFydFRpbWUoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9zdGFydFRpbWVTZWNvbmRzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OV44Kn44O844OJ44Kk44Oz44Gu6ZaL5aeL5pmC5Yi744Gu5Y+W5b6XXHJcbiAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqTjg7Pjga7plovlp4vmmYLliLtb56eSXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRGYWRlSW5TdGFydFRpbWUoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9mYWRlSW5TdGFydFRpbWVTZWNvbmRzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OV44Kn44O844OJ44Kk44Oz44Gu57WC5LqG5pmC5Yi744Gu5Y+W5b6XXHJcbiAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqTjg7Pjga7ntYLkuobmmYLliLvjga7lj5blvpdcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RW5kVGltZSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2VuZFRpbWVTZWNvbmRzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44O844K344On44Oz44Gu6ZaL5aeL5pmC5Yi744Gu6Kit5a6aXHJcbiAgICogQHBhcmFtIHN0YXJ0VGltZSDjg6Ljg7zjgrfjg6fjg7Pjga7plovlp4vmmYLliLtcclxuICAgKi9cclxuICBwdWJsaWMgc2V0U3RhcnRUaW1lKHN0YXJ0VGltZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLl9zdGFydFRpbWVTZWNvbmRzID0gc3RhcnRUaW1lO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OV44Kn44O844OJ44Kk44Oz44Gu6ZaL5aeL5pmC5Yi744Gu6Kit5a6aXHJcbiAgICogQHBhcmFtIHN0YXJ0VGltZSDjg5Xjgqfjg7zjg4njgqTjg7Pjga7plovlp4vmmYLliLtb56eSXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRGYWRlSW5TdGFydFRpbWUoc3RhcnRUaW1lOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuX2ZhZGVJblN0YXJ0VGltZVNlY29uZHMgPSBzdGFydFRpbWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg5Xjgqfjg7zjg4njgqTjg7Pjga7ntYLkuobmmYLliLvjga7oqK3lrppcclxuICAgKiBAcGFyYW0gZW5kVGltZSDjg5Xjgqfjg7zjg4njgqTjg7Pjga7ntYLkuobmmYLliLtb56eSXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRFbmRUaW1lKGVuZFRpbWU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5fZW5kVGltZVNlY29uZHMgPSBlbmRUaW1lO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44O844K344On44Oz44Gu57WC5LqG44Gu6Kit5a6aXHJcbiAgICogQHBhcmFtIGYgdHJ1ZeOBquOCieODouODvOOCt+ODp+ODs+OBrue1guS6hlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRJc0ZpbmlzaGVkKGY6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgIHRoaXMuX2ZpbmlzaGVkID0gZjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODvOOCt+ODp+ODs+mWi+Wni+OBruioreWumlxyXG4gICAqIEBwYXJhbSBmIHRydWXjgarjgonjg6Ljg7zjgrfjg6fjg7Pjga7plovlp4tcclxuICAgKi9cclxuICBwdWJsaWMgc2V0SXNTdGFydGVkKGY6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgIHRoaXMuX3N0YXJ0ZWQgPSBmO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44O844K344On44Oz44Gu5pyJ5Yq55oCn44Gu56K66KqNXHJcbiAgICogQHJldHVybiB0cnVlIOODouODvOOCt+ODp+ODs+OBr+acieWKuVxyXG4gICAqIEByZXR1cm4gZmFsc2Ug44Oi44O844K344On44Oz44Gv54Sh5Yq5XHJcbiAgICovXHJcbiAgcHVibGljIGlzQXZhaWxhYmxlKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2F2YWlsYWJsZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODvOOCt+ODp+ODs+OBruacieWKueaAp+OBruioreWumlxyXG4gICAqIEBwYXJhbSB2IHRydWXjgarjgonjg6Ljg7zjgrfjg6fjg7Pjga/mnInlirlcclxuICAgKi9cclxuICBwdWJsaWMgc2V0SXNBdmFpbGFibGUodjogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgdGhpcy5fYXZhaWxhYmxlID0gdjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODvOOCt+ODp+ODs+OBrueKtuaFi+OBruioreWumlxyXG4gICAqIEBwYXJhbSB0aW1lU2Vjb25kcyDnj77lnKjmmYLliLtb56eSXVxyXG4gICAqIEBwYXJhbSB3ZWlnaHQg44Oi44O844K344On44Oz5bC+6YeN44G/XHJcbiAgICovXHJcbiAgcHVibGljIHNldFN0YXRlKHRpbWVTZWNvbmRzOiBudW1iZXIsIHdlaWdodDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLl9zdGF0ZVRpbWVTZWNvbmRzID0gdGltZVNlY29uZHM7XHJcbiAgICB0aGlzLl9zdGF0ZVdlaWdodCA9IHdlaWdodDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODvOOCt+ODp+ODs+OBruePvuWcqOaZguWIu+OBruWPluW+l1xyXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Gu54++5Zyo5pmC5Yi7W+enkl1cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0U3RhdGVUaW1lKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fc3RhdGVUaW1lU2Vjb25kcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODvOOCt+ODp+ODs+OBrumHjeOBv+OBruWPluW+l1xyXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Gu6YeN44G/XHJcbiAgICovXHJcbiAgcHVibGljIGdldFN0YXRlV2VpZ2h0KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fc3RhdGVXZWlnaHQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmnIDlvozjgavjgqTjg5njg7Pjg4jjga7nmbrngavjgpLjg4Hjgqfjg4Pjgq/jgZfjgZ/mmYLplpPjgpLlj5blvpdcclxuICAgKlxyXG4gICAqIEByZXR1cm4g5pyA5b6M44Gr44Kk44OZ44Oz44OI44Gu55m654Gr44KS44OB44Kn44OD44Kv44GX44Gf5pmC6ZaTW+enkl1cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0TGFzdENoZWNrRXZlbnRTZWNvbmRzKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fbGFzdEV2ZW50Q2hlY2tTZWNvbmRzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5pyA5b6M44Gr44Kk44OZ44Oz44OI44KS44OB44Kn44OD44Kv44GX44Gf5pmC6ZaT44KS6Kit5a6aXHJcbiAgICogQHBhcmFtIGNoZWNrU2Vjb25kcyDmnIDlvozjgavjgqTjg5njg7Pjg4jjgpLjg4Hjgqfjg4Pjgq/jgZfjgZ/mmYLplpNb56eSXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRMYXN0Q2hlY2tFdmVudFNlY29uZHMoY2hlY2tTZWNvbmRzOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuX2xhc3RFdmVudENoZWNrU2Vjb25kcyA9IGNoZWNrU2Vjb25kcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODleOCp+ODvOODieOCouOCpuODiOmWi+Wni+WIpOWumuOBruWPluW+l1xyXG4gICAqIEByZXR1cm4g44OV44Kn44O844OJ44Ki44Km44OI6ZaL5aeL44GZ44KL44GL44Gp44GG44GLXHJcbiAgICovXHJcbiAgcHVibGljIGlzVHJpZ2dlcmVkRmFkZU91dCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9pc1RyaWdnZXJlZEZhZGVPdXQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg5Xjgqfjg7zjg4njgqLjgqbjg4jmmYLplpPjga7lj5blvpdcclxuICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCouOCpuODiOaZgumWk1vnp5JdXHJcbiAgICovXHJcbiAgcHVibGljIGdldEZhZGVPdXRTZWNvbmRzKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fZmFkZU91dFNlY29uZHM7XHJcbiAgfVxyXG5cclxuICBfYXV0b0RlbGV0ZTogYm9vbGVhbjsgLy8g6Ieq5YuV5YmK6ZmkXHJcbiAgX21vdGlvbjogQUN1YmlzbU1vdGlvbjsgLy8g44Oi44O844K344On44OzXHJcblxyXG4gIF9hdmFpbGFibGU6IGJvb2xlYW47IC8vIOacieWKueWMluODleODqeOCsFxyXG4gIF9maW5pc2hlZDogYm9vbGVhbjsgLy8g57WC5LqG44OV44Op44KwXHJcbiAgX3N0YXJ0ZWQ6IGJvb2xlYW47IC8vIOmWi+Wni+ODleODqeOCsFxyXG4gIF9zdGFydFRpbWVTZWNvbmRzOiBudW1iZXI7IC8vIOODouODvOOCt+ODp+ODs+WGjeeUn+mWi+Wni+aZguWIu1vnp5JdXHJcbiAgX2ZhZGVJblN0YXJ0VGltZVNlY29uZHM6IG51bWJlcjsgLy8g44OV44Kn44O844OJ44Kk44Oz6ZaL5aeL5pmC5Yi777yI44Or44O844OX44Gu5pmC44Gv5Yid5Zue44Gu44G/77yJW+enkl1cclxuICBfZW5kVGltZVNlY29uZHM6IG51bWJlcjsgLy8g57WC5LqG5LqI5a6a5pmC5Yi7W+enkl1cclxuICBfc3RhdGVUaW1lU2Vjb25kczogbnVtYmVyOyAvLyDmmYLliLvjga7nirbmhYtb56eSXVxyXG4gIF9zdGF0ZVdlaWdodDogbnVtYmVyOyAvLyDph43jgb/jga7nirbmhYtcclxuICBfbGFzdEV2ZW50Q2hlY2tTZWNvbmRzOiBudW1iZXI7IC8vIOacgOe1guOBrk1vdGlvbuWBtOOBruODgeOCp+ODg+OCr+OBl+OBn+aZgumWk1xyXG4gIHByaXZhdGUgX2ZhZGVPdXRTZWNvbmRzOiBudW1iZXI7IC8vIOODleOCp+ODvOODieOCouOCpuODiOaZgumWk1vnp5JdXHJcbiAgcHJpdmF0ZSBfaXNUcmlnZ2VyZWRGYWRlT3V0OiBib29sZWFuOyAvLyDjg5Xjgqfjg7zjg4njgqLjgqbjg4jplovlp4vjg5Xjg6njgrBcclxuXHJcbiAgX21vdGlvblF1ZXVlRW50cnlIYW5kbGU6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGU7IC8vIOOCpOODs+OCueOCv+ODs+OCueOBlOOBqOOBq+S4gOaEj+OBruWApOOCkuaMgeOBpOitmOWIpeeVquWPt1xyXG59XHJcblxyXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cclxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbW1vdGlvbnF1ZXVlZW50cnknO1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkgPSAkLkN1YmlzbU1vdGlvblF1ZXVlRW50cnk7XHJcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW90aW9uUXVldWVFbnRyeSA9ICQuQ3ViaXNtTW90aW9uUXVldWVFbnRyeTtcclxufVxyXG4iLCIvKipcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEFDdWJpc21Nb3Rpb24gfSBmcm9tICcuL2FjdWJpc21tb3Rpb24nO1xyXG5pbXBvcnQgeyBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5IH0gZnJvbSAnLi9jdWJpc21tb3Rpb25xdWV1ZWVudHJ5JztcclxuaW1wb3J0IHsgY3NtVmVjdG9yLCBpdGVyYXRvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcclxuaW1wb3J0IHsgQ3ViaXNtTW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XHJcbmltcG9ydCB7IGNzbVN0cmluZyB9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcclxuXHJcbi8qKlxyXG4gKiDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/jga7nrqHnkIZcclxuICpcclxuICog44Oi44O844K344On44Oz5YaN55Sf44Gu566h55CG55So44Kv44Op44K544CCQ3ViaXNtTW90aW9u44Oi44O844K344On44Oz44Gq44GpQUN1YmlzbU1vdGlvbuOBruOCteODluOCr+ODqeOCueOCkuWGjeeUn+OBmeOCi+OBn+OCgeOBq+S9v+eUqOOBmeOCi+OAglxyXG4gKlxyXG4gKiBAbm90ZSDlho3nlJ/kuK3jgavliKXjga7jg6Ljg7zjgrfjg6fjg7PjgYwgU3RhcnRNb3Rpb24oKeOBleOCjOOBn+WgtOWQiOOBr+OAgeaWsOOBl+OBhOODouODvOOCt+ODp+ODs+OBq+a7keOCieOBi+OBq+WkieWMluOBl+aXp+ODouODvOOCt+ODp+ODs+OBr+S4reaWreOBmeOCi+OAglxyXG4gKiAgICAgICDooajmg4XnlKjjg6Ljg7zjgrfjg6fjg7PjgIHkvZPnlKjjg6Ljg7zjgrfjg6fjg7PjgarjganjgpLliIbjgZHjgabjg6Ljg7zjgrfjg6fjg7PljJbjgZfjgZ/loLTlkIjjgarjganjgIFcclxuICogICAgICAg6KSH5pWw44Gu44Oi44O844K344On44Oz44KS5ZCM5pmC44Gr5YaN55Sf44GV44Gb44KL5aC05ZCI44Gv44CB6KSH5pWw44GuQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2Vy44Kk44Oz44K544K/44Oz44K544KS5L2/55So44GZ44KL44CCXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyIHtcclxuICAvKipcclxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLl91c2VyVGltZVNlY29uZHMgPSAwLjA7XHJcbiAgICB0aGlzLl9ldmVudENhbGxCYWNrID0gbnVsbDtcclxuICAgIHRoaXMuX2V2ZW50Q3VzdG9tRGF0YSA9IG51bGw7XHJcbiAgICB0aGlzLl9tb3Rpb25zID0gbmV3IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5PigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OH44K544OI44Op44Kv44K/XHJcbiAgICovXHJcbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21vdGlvbnMuZ2V0U2l6ZSgpOyArK2kpIHtcclxuICAgICAgaWYgKHRoaXMuX21vdGlvbnMuYXQoaSkpIHtcclxuICAgICAgICB0aGlzLl9tb3Rpb25zLmF0KGkpLnJlbGVhc2UoKTtcclxuICAgICAgICB0aGlzLl9tb3Rpb25zLnNldChpLCBudWxsKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX21vdGlvbnMgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5oyH5a6a44GX44Gf44Oi44O844K344On44Oz44Gu6ZaL5aeLXHJcbiAgICpcclxuICAgKiDmjIflrprjgZfjgZ/jg6Ljg7zjgrfjg6fjg7PjgpLplovlp4vjgZnjgovjgILlkIzjgZjjgr/jgqTjg5fjga7jg6Ljg7zjgrfjg6fjg7PjgYzml6LjgavjgYLjgovloLTlkIjjga/jgIHml6LlrZjjga7jg6Ljg7zjgrfjg6fjg7PjgavntYLkuobjg5Xjg6njgrDjgpLnq4vjgabjgIHjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgpLplovlp4vjgZXjgZvjgovjgIJcclxuICAgKlxyXG4gICAqIEBwYXJhbSAgIG1vdGlvbiAgICAgICAgICDplovlp4vjgZnjgovjg6Ljg7zjgrfjg6fjg7NcclxuICAgKiBAcGFyYW0gICBhdXRvRGVsZXRlICAgICAg5YaN55Sf44GM57WC5LqG44GX44Gf44Oi44O844K344On44Oz44Gu44Kk44Oz44K544K/44Oz44K544KS5YmK6Zmk44GZ44KL44Gq44KJIHRydWVcclxuICAgKiBAcGFyYW0gICB1c2VyVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cclxuICAgKiBAcmV0dXJuICAgICAgICAgICAgICAgICAgICAgIOmWi+Wni+OBl+OBn+ODouODvOOCt+ODp+ODs+OBruitmOWIpeeVquWPt+OCkui/lOOBmeOAguWAi+WIpeOBruODouODvOOCt+ODp+ODs+OBjOe1guS6huOBl+OBn+OBi+WQpuOBi+OCkuWIpOWumuOBmeOCi0lzRmluaXNoZWQoKeOBruW8leaVsOOBp+S9v+eUqOOBmeOCi+OAgumWi+Wni+OBp+OBjeOBquOBhOaZguOBr+OAjC0x44CNXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXJ0TW90aW9uKFxyXG4gICAgbW90aW9uOiBBQ3ViaXNtTW90aW9uLFxyXG4gICAgYXV0b0RlbGV0ZTogYm9vbGVhbixcclxuICAgIHVzZXJUaW1lU2Vjb25kczogbnVtYmVyXHJcbiAgKTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZSB7XHJcbiAgICBpZiAobW90aW9uID09IG51bGwpIHtcclxuICAgICAgcmV0dXJuIEludmFsaWRNb3Rpb25RdWV1ZUVudHJ5SGFuZGxlVmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IG1vdGlvblF1ZXVlRW50cnk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkgPSBudWxsO1xyXG5cclxuICAgIC8vIOaXouOBq+ODouODvOOCt+ODp+ODs+OBjOOBguOCjOOBsOe1guS6huODleODqeOCsOOCkueri+OBpuOCi1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9tb3Rpb25zLmdldFNpemUoKTsgKytpKSB7XHJcbiAgICAgIG1vdGlvblF1ZXVlRW50cnkgPSB0aGlzLl9tb3Rpb25zLmF0KGkpO1xyXG4gICAgICBpZiAobW90aW9uUXVldWVFbnRyeSA9PSBudWxsKSB7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG1vdGlvblF1ZXVlRW50cnkuc2V0RmFkZU91dChtb3Rpb25RdWV1ZUVudHJ5Ll9tb3Rpb24uZ2V0RmFkZU91dFRpbWUoKSk7IC8vIOODleOCp+ODvOODieOCouOCpuODiOioreWumlxyXG4gICAgfVxyXG5cclxuICAgIG1vdGlvblF1ZXVlRW50cnkgPSBuZXcgQ3ViaXNtTW90aW9uUXVldWVFbnRyeSgpOyAvLyDntYLkuobmmYLjgavnoLTmo4TjgZnjgotcclxuICAgIG1vdGlvblF1ZXVlRW50cnkuX2F1dG9EZWxldGUgPSBhdXRvRGVsZXRlO1xyXG4gICAgbW90aW9uUXVldWVFbnRyeS5fbW90aW9uID0gbW90aW9uO1xyXG5cclxuICAgIHRoaXMuX21vdGlvbnMucHVzaEJhY2sobW90aW9uUXVldWVFbnRyeSk7XHJcblxyXG4gICAgcmV0dXJuIG1vdGlvblF1ZXVlRW50cnkuX21vdGlvblF1ZXVlRW50cnlIYW5kbGU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlhajjgabjga7jg6Ljg7zjgrfjg6fjg7Pjga7ntYLkuobjga7norroqo1cclxuICAgKiBAcmV0dXJuIHRydWUg5YWo44Gm57WC5LqG44GX44Gm44GE44KLXHJcbiAgICogQHJldHVybiBmYWxzZSDntYLkuobjgZfjgabjgYTjgarjgYRcclxuICAgKi9cclxuICBwdWJsaWMgaXNGaW5pc2hlZCgpOiBib29sZWFuIHtcclxuICAgIC8vIC0tLS0tLS0g5Yem55CG44KS6KGM44GGIC0tLS0tLS1cclxuICAgIC8vIOaXouOBq+ODouODvOOCt+ODp+ODs+OBjOOBguOCjOOBsOe1guS6huODleODqeOCsOOCkueri+OBpuOCi1xyXG5cclxuICAgIGZvciAoXHJcbiAgICAgIGxldCBpdGU6IGl0ZXJhdG9yPEN1YmlzbU1vdGlvblF1ZXVlRW50cnk+ID0gdGhpcy5fbW90aW9ucy5iZWdpbigpO1xyXG4gICAgICBpdGUubm90RXF1YWwodGhpcy5fbW90aW9ucy5lbmQoKSk7XHJcblxyXG4gICAgKSB7XHJcbiAgICAgIGxldCBtb3Rpb25RdWV1ZUVudHJ5OiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5ID0gaXRlLnB0cigpO1xyXG5cclxuICAgICAgaWYgKG1vdGlvblF1ZXVlRW50cnkgPT0gbnVsbCkge1xyXG4gICAgICAgIGl0ZSA9IHRoaXMuX21vdGlvbnMuZXJhc2UoaXRlKTsgLy8g5YmK6ZmkXHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IG1vdGlvbjogQUN1YmlzbU1vdGlvbiA9IG1vdGlvblF1ZXVlRW50cnkuX21vdGlvbjtcclxuXHJcbiAgICAgIGlmIChtb3Rpb24gPT0gbnVsbCkge1xyXG4gICAgICAgIG1vdGlvblF1ZXVlRW50cnkucmVsZWFzZSgpO1xyXG4gICAgICAgIG1vdGlvblF1ZXVlRW50cnkgPSBudWxsO1xyXG4gICAgICAgIGl0ZSA9IHRoaXMuX21vdGlvbnMuZXJhc2UoaXRlKTsgLy8g5YmK6ZmkXHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIC0tLS0tIOe1guS6hua4iOOBv+OBruWHpueQhuOBjOOBguOCjOOBsOWJiumZpOOBmeOCiyAtLS0tLS1cclxuICAgICAgaWYgKCFtb3Rpb25RdWV1ZUVudHJ5LmlzRmluaXNoZWQoKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpdGUucHJlSW5jcmVtZW50KCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaMh+WumuOBl+OBn+ODouODvOOCt+ODp+ODs+OBrue1guS6huOBrueiuuiqjVxyXG4gICAqIEBwYXJhbSBtb3Rpb25RdWV1ZUVudHJ5TnVtYmVyIOODouODvOOCt+ODp+ODs+OBruitmOWIpeeVquWPt1xyXG4gICAqIEByZXR1cm4gdHJ1ZSDlhajjgabntYLkuobjgZfjgabjgYTjgotcclxuICAgKiBAcmV0dXJuIGZhbHNlIOe1guS6huOBl+OBpuOBhOOBquOBhFxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc0ZpbmlzaGVkQnlIYW5kbGUoXHJcbiAgICBtb3Rpb25RdWV1ZUVudHJ5TnVtYmVyOiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlXHJcbiAgKTogYm9vbGVhbiB7XHJcbiAgICBmb3IgKFxyXG4gICAgICBsZXQgaXRlOiBpdGVyYXRvcjxDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5PiA9IHRoaXMuX21vdGlvbnMuYmVnaW4oKTtcclxuICAgICAgaXRlLm5vdEVxdWFsKHRoaXMuX21vdGlvbnMuZW5kKCkpO1xyXG4gICAgICBpdGUuaW5jcmVtZW50KClcclxuICAgICkge1xyXG4gICAgICBjb25zdCBtb3Rpb25RdWV1ZUVudHJ5OiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5ID0gaXRlLnB0cigpO1xyXG5cclxuICAgICAgaWYgKG1vdGlvblF1ZXVlRW50cnkgPT0gbnVsbCkge1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoXHJcbiAgICAgICAgbW90aW9uUXVldWVFbnRyeS5fbW90aW9uUXVldWVFbnRyeUhhbmRsZSA9PSBtb3Rpb25RdWV1ZUVudHJ5TnVtYmVyICYmXHJcbiAgICAgICAgIW1vdGlvblF1ZXVlRW50cnkuaXNGaW5pc2hlZCgpXHJcbiAgICAgICkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlhajjgabjga7jg6Ljg7zjgrfjg6fjg7PjgpLlgZzmraLjgZnjgotcclxuICAgKi9cclxuICBwdWJsaWMgc3RvcEFsbE1vdGlvbnMoKTogdm9pZCB7XHJcbiAgICAvLyAtLS0tLS0tIOWHpueQhuOCkuihjOOBhiAtLS0tLS0tXHJcbiAgICAvLyDml6Ljgavjg6Ljg7zjgrfjg6fjg7PjgYzjgYLjgozjgbDntYLkuobjg5Xjg6njgrDjgpLnq4vjgabjgotcclxuXHJcbiAgICBmb3IgKFxyXG4gICAgICBsZXQgaXRlOiBpdGVyYXRvcjxDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5PiA9IHRoaXMuX21vdGlvbnMuYmVnaW4oKTtcclxuICAgICAgaXRlLm5vdEVxdWFsKHRoaXMuX21vdGlvbnMuZW5kKCkpO1xyXG5cclxuICAgICkge1xyXG4gICAgICBsZXQgbW90aW9uUXVldWVFbnRyeTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeSA9IGl0ZS5wdHIoKTtcclxuXHJcbiAgICAgIGlmIChtb3Rpb25RdWV1ZUVudHJ5ID09IG51bGwpIHtcclxuICAgICAgICBpdGUgPSB0aGlzLl9tb3Rpb25zLmVyYXNlKGl0ZSk7XHJcblxyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyAtLS0tLSDntYLkuobmuIjjgb/jga7lh6bnkIbjgYzjgYLjgozjgbDliYrpmaTjgZnjgosgLS0tLS0tXHJcbiAgICAgIG1vdGlvblF1ZXVlRW50cnkucmVsZWFzZSgpO1xyXG4gICAgICBtb3Rpb25RdWV1ZUVudHJ5ID0gbnVsbDtcclxuICAgICAgaXRlID0gdGhpcy5fbW90aW9ucy5lcmFzZShpdGUpOyAvLyDliYrpmaRcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgICAgKiDmjIflrprjgZfjgZ9DdWJpc21Nb3Rpb25RdWV1ZUVudHJ544Gu5Y+W5b6XXHJcblxyXG4gICAgICAgICogQHBhcmFtICAgbW90aW9uUXVldWVFbnRyeU51bWJlciAg44Oi44O844K344On44Oz44Gu6K2Y5Yil55Wq5Y+3XHJcbiAgICAgICAgKiBAcmV0dXJuICDmjIflrprjgZfjgZ9DdWJpc21Nb3Rpb25RdWV1ZUVudHJ5XHJcbiAgICAgICAgKiBAcmV0dXJuICBudWxsICAg6KaL44Gk44GL44KJ44Gq44GL44Gj44GfXHJcbiAgICAgICAgKi9cclxuICBwdWJsaWMgZ2V0Q3ViaXNtTW90aW9uUXVldWVFbnRyeShcclxuICAgIG1vdGlvblF1ZXVlRW50cnlOdW1iZXI6IGFueVxyXG4gICk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkge1xyXG4gICAgLy8tLS0tLS0tIOWHpueQhuOCkuihjOOBhiAtLS0tLS0tXHJcbiAgICBmb3IgKFxyXG4gICAgICBsZXQgaXRlOiBpdGVyYXRvcjxDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5PiA9IHRoaXMuX21vdGlvbnMuYmVnaW4oKTtcclxuICAgICAgaXRlLm5vdEVxdWFsKHRoaXMuX21vdGlvbnMuZW5kKCkpO1xyXG4gICAgICBpdGUucHJlSW5jcmVtZW50KClcclxuICAgICkge1xyXG4gICAgICBjb25zdCBtb3Rpb25RdWV1ZUVudHJ5OiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5ID0gaXRlLnB0cigpO1xyXG5cclxuICAgICAgaWYgKG1vdGlvblF1ZXVlRW50cnkgPT0gbnVsbCkge1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAobW90aW9uUXVldWVFbnRyeS5fbW90aW9uUXVldWVFbnRyeUhhbmRsZSA9PSBtb3Rpb25RdWV1ZUVudHJ5TnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIG1vdGlvblF1ZXVlRW50cnk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCpOODmeODs+ODiOOCkuWPl+OBkeWPluOCi0NhbGxiYWNr44Gu55m76YyyXHJcbiAgICpcclxuICAgKiBAcGFyYW0gY2FsbGJhY2sg44Kz44O844Or44OQ44OD44Kv6Zai5pWwXHJcbiAgICogQHBhcmFtIGN1c3RvbURhdGEg44Kz44O844Or44OQ44OD44Kv44Gr6L+U44GV44KM44KL44OH44O844K/XHJcbiAgICovXHJcbiAgcHVibGljIHNldEV2ZW50Q2FsbGJhY2soXHJcbiAgICBjYWxsYmFjazogQ3ViaXNtTW90aW9uRXZlbnRGdW5jdGlvbixcclxuICAgIGN1c3RvbURhdGE6IGFueSA9IG51bGxcclxuICApOiB2b2lkIHtcclxuICAgIHRoaXMuX2V2ZW50Q2FsbEJhY2sgPSBjYWxsYmFjaztcclxuICAgIHRoaXMuX2V2ZW50Q3VzdG9tRGF0YSA9IGN1c3RvbURhdGE7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6Ljg7zjgrfjg6fjg7PjgpLmm7TmlrDjgZfjgabjgIHjg6Ljg4fjg6vjgavjg5Hjg6njg6Hjg7zjgr/lgKTjgpLlj43mmKDjgZnjgovjgIJcclxuICAgKlxyXG4gICAqIEBwYXJhbSAgIG1vZGVsICAg5a++6LGh44Gu44Oi44OH44OrXHJcbiAgICogQHBhcmFtICAgdXNlclRpbWVTZWNvbmRzICAg44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cclxuICAgKiBAcmV0dXJuICB0cnVlICAgIOODouODh+ODq+OBuOODkeODqeODoeODvOOCv+WApOOBruWPjeaYoOOBguOCilxyXG4gICAqIEByZXR1cm4gIGZhbHNlICAg44Oi44OH44Or44G444OR44Op44Oh44O844K/5YCk44Gu5Y+N5pig44Gq44GXKOODouODvOOCt+ODp+ODs+OBruWkieWMluOBquOBlylcclxuICAgKi9cclxuICBwdWJsaWMgZG9VcGRhdGVNb3Rpb24obW9kZWw6IEN1YmlzbU1vZGVsLCB1c2VyVGltZVNlY29uZHM6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgbGV0IHVwZGF0ZWQgPSBmYWxzZTtcclxuXHJcbiAgICAvLyAtLS0tLS0tIOWHpueQhuOCkuihjOOBhiAtLS0tLS0tLVxyXG4gICAgLy8g5pei44Gr44Oi44O844K344On44Oz44GM44GC44KM44Gw57WC5LqG44OV44Op44Kw44KS56uL44Gm44KLXHJcblxyXG4gICAgZm9yIChcclxuICAgICAgbGV0IGl0ZTogaXRlcmF0b3I8Q3ViaXNtTW90aW9uUXVldWVFbnRyeT4gPSB0aGlzLl9tb3Rpb25zLmJlZ2luKCk7XHJcbiAgICAgIGl0ZS5ub3RFcXVhbCh0aGlzLl9tb3Rpb25zLmVuZCgpKTtcclxuXHJcbiAgICApIHtcclxuICAgICAgbGV0IG1vdGlvblF1ZXVlRW50cnk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkgPSBpdGUucHRyKCk7XHJcblxyXG4gICAgICBpZiAobW90aW9uUXVldWVFbnRyeSA9PSBudWxsKSB7XHJcbiAgICAgICAgaXRlID0gdGhpcy5fbW90aW9ucy5lcmFzZShpdGUpOyAvLyDliYrpmaRcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgbW90aW9uOiBBQ3ViaXNtTW90aW9uID0gbW90aW9uUXVldWVFbnRyeS5fbW90aW9uO1xyXG5cclxuICAgICAgaWYgKG1vdGlvbiA9PSBudWxsKSB7XHJcbiAgICAgICAgbW90aW9uUXVldWVFbnRyeS5yZWxlYXNlKCk7XHJcbiAgICAgICAgbW90aW9uUXVldWVFbnRyeSA9IG51bGw7XHJcbiAgICAgICAgaXRlID0gdGhpcy5fbW90aW9ucy5lcmFzZShpdGUpOyAvLyDliYrpmaRcclxuXHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIC0tLS0tLSDlgKTjgpLlj43mmKDjgZnjgosgLS0tLS0tXHJcbiAgICAgIG1vdGlvbi51cGRhdGVQYXJhbWV0ZXJzKG1vZGVsLCBtb3Rpb25RdWV1ZUVudHJ5LCB1c2VyVGltZVNlY29uZHMpO1xyXG4gICAgICB1cGRhdGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgIC8vIC0tLS0tLSDjg6bjg7zjgrbjg4jjg6rjgqzjg7zjgqTjg5njg7Pjg4jjgpLmpJzmn7vjgZnjgosgLS0tLVxyXG4gICAgICBjb25zdCBmaXJlZExpc3Q6IGNzbVZlY3Rvcjxjc21TdHJpbmc+ID0gbW90aW9uLmdldEZpcmVkRXZlbnQoXHJcbiAgICAgICAgbW90aW9uUXVldWVFbnRyeS5nZXRMYXN0Q2hlY2tFdmVudFNlY29uZHMoKSAtXHJcbiAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LmdldFN0YXJ0VGltZSgpLFxyXG4gICAgICAgIHVzZXJUaW1lU2Vjb25kcyAtIG1vdGlvblF1ZXVlRW50cnkuZ2V0U3RhcnRUaW1lKClcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlyZWRMaXN0LmdldFNpemUoKTsgKytpKSB7XHJcbiAgICAgICAgdGhpcy5fZXZlbnRDYWxsQmFjayh0aGlzLCBmaXJlZExpc3QuYXQoaSksIHRoaXMuX2V2ZW50Q3VzdG9tRGF0YSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG1vdGlvblF1ZXVlRW50cnkuc2V0TGFzdENoZWNrRXZlbnRTZWNvbmRzKHVzZXJUaW1lU2Vjb25kcyk7XHJcblxyXG4gICAgICAvLyAtLS0tLS0g57WC5LqG5riI44G/44Gu5Yem55CG44GM44GC44KM44Gw5YmK6Zmk44GZ44KLIC0tLS0tLVxyXG4gICAgICBpZiAobW90aW9uUXVldWVFbnRyeS5pc0ZpbmlzaGVkKCkpIHtcclxuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnJlbGVhc2UoKTtcclxuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5ID0gbnVsbDtcclxuICAgICAgICBpdGUgPSB0aGlzLl9tb3Rpb25zLmVyYXNlKGl0ZSk7IC8vIOWJiumZpFxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChtb3Rpb25RdWV1ZUVudHJ5LmlzVHJpZ2dlcmVkRmFkZU91dCgpKSB7XHJcbiAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnN0YXJ0RmFkZU91dChcclxuICAgICAgICAgICAgbW90aW9uUXVldWVFbnRyeS5nZXRGYWRlT3V0U2Vjb25kcygpLFxyXG4gICAgICAgICAgICB1c2VyVGltZVNlY29uZHNcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB1cGRhdGVkO1xyXG4gIH1cclxuICBfdXNlclRpbWVTZWNvbmRzOiBudW1iZXI7IC8vIOODh+ODq+OCv+aZgumWk+OBruepjeeul+WApFvnp5JdXHJcblxyXG4gIF9tb3Rpb25zOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uUXVldWVFbnRyeT47IC8vIOODouODvOOCt+ODp+ODs1xyXG4gIF9ldmVudENhbGxCYWNrOiBDdWJpc21Nb3Rpb25FdmVudEZ1bmN0aW9uOyAvLyDjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcclxuICBfZXZlbnRDdXN0b21EYXRhOiBhbnk7IC8vIOOCs+ODvOODq+ODkOODg+OCr+OBq+aIu+OBleOCjOOCi+ODh+ODvOOCv1xyXG59XHJcblxyXG4vKipcclxuICog44Kk44OZ44Oz44OI44Gu44Kz44O844Or44OQ44OD44Kv6Zai5pWw44KS5a6a576pXHJcbiAqXHJcbiAqIOOCpOODmeODs+ODiOOBruOCs+ODvOODq+ODkOODg+OCr+OBq+eZu+mMsuOBp+OBjeOCi+mWouaVsOOBruWei+aDheWgsVxyXG4gKiBAcGFyYW0gY2FsbGVyICAgICAgICDnmbrngavjgZfjgZ/jgqTjg5njg7Pjg4jjgpLlho3nlJ/jgZXjgZvjgZ9DdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXJcclxuICogQHBhcmFtIGV2ZW50VmFsdWUgICAg55m654Gr44GX44Gf44Kk44OZ44Oz44OI44Gu5paH5a2X5YiX44OH44O844K/XHJcbiAqIEBwYXJhbSBjdXN0b21EYXRhICAg44Kz44O844Or44OQ44OD44Kv44Gr6L+U44GV44KM44KL55m76Yyy5pmC44Gr5oyH5a6a44GV44KM44Gf44OH44O844K/XHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEN1YmlzbU1vdGlvbkV2ZW50RnVuY3Rpb24ge1xyXG4gIChcclxuICAgIGNhbGxlcjogQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyLFxyXG4gICAgZXZlbnRWYWx1ZTogY3NtU3RyaW5nLFxyXG4gICAgY3VzdG9tRGF0YTogYW55XHJcbiAgKTogdm9pZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIOODouODvOOCt+ODp+ODs+OBruitmOWIpeeVquWPt1xyXG4gKlxyXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjga7orZjliKXnlarlj7fjga7lrprnvqlcclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIHR5cGUgQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZSA9IGFueTtcclxuZXhwb3J0IGNvbnN0IEludmFsaWRNb3Rpb25RdWV1ZUVudHJ5SGFuZGxlVmFsdWU6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGUgPSAtMTtcclxuXHJcbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxyXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtbW90aW9ucXVldWVtYW5hZ2VyJztcclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xyXG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXIgPSAkLkN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcjtcclxuICBleHBvcnQgdHlwZSBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXIgPSAkLkN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcjtcclxuICBleHBvcnQgY29uc3QgSW52YWxpZE1vdGlvblF1ZXVlRW50cnlIYW5kbGVWYWx1ZSA9XHJcbiAgICAkLkludmFsaWRNb3Rpb25RdWV1ZUVudHJ5SGFuZGxlVmFsdWU7XHJcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZSA9ICQuQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZTtcclxuICBleHBvcnQgdHlwZSBDdWJpc21Nb3Rpb25FdmVudEZ1bmN0aW9uID0gJC5DdWJpc21Nb3Rpb25FdmVudEZ1bmN0aW9uO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQ3ViaXNtTWF0aCB9IGZyb20gJy4uL21hdGgvY3ViaXNtbWF0aCc7XHJcbmltcG9ydCB7IEN1YmlzbVZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL2N1YmlzbXZlY3RvcjInO1xyXG5pbXBvcnQgeyBDdWJpc21Nb2RlbCB9IGZyb20gJy4uL21vZGVsL2N1YmlzbW1vZGVsJztcclxuaW1wb3J0IHtcclxuICBDdWJpc21QaHlzaWNzSW5wdXQsXHJcbiAgQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24sXHJcbiAgQ3ViaXNtUGh5c2ljc091dHB1dCxcclxuICBDdWJpc21QaHlzaWNzUGFydGljbGUsXHJcbiAgQ3ViaXNtUGh5c2ljc1JpZyxcclxuICBDdWJpc21QaHlzaWNzU291cmNlLFxyXG4gIEN1YmlzbVBoeXNpY3NTdWJSaWcsXHJcbiAgQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGVcclxufSBmcm9tICcuL2N1YmlzbXBoeXNpY3NpbnRlcm5hbCc7XHJcbmltcG9ydCB7IEN1YmlzbVBoeXNpY3NKc29uIH0gZnJvbSAnLi9jdWJpc21waHlzaWNzanNvbic7XHJcblxyXG4vLyBwaHlzaWNzIHR5cGVzIHRhZ3MuXHJcbmNvbnN0IFBoeXNpY3NUeXBlVGFnWCA9ICdYJztcclxuY29uc3QgUGh5c2ljc1R5cGVUYWdZID0gJ1knO1xyXG5jb25zdCBQaHlzaWNzVHlwZVRhZ0FuZ2xlID0gJ0FuZ2xlJztcclxuXHJcbi8vIENvbnN0YW50IG9mIGFpciByZXNpc3RhbmNlLlxyXG5jb25zdCBBaXJSZXNpc3RhbmNlID0gNS4wO1xyXG5cclxuLy8gQ29uc3RhbnQgb2YgbWF4aW11bSB3ZWlnaHQgb2YgaW5wdXQgYW5kIG91dHB1dCByYXRpby5cclxuY29uc3QgTWF4aW11bVdlaWdodCA9IDEwMC4wO1xyXG5cclxuLy8gQ29uc3RhbnQgb2YgdGhyZXNob2xkIG9mIG1vdmVtZW50LlxyXG5jb25zdCBNb3ZlbWVudFRocmVzaG9sZCA9IDAuMDAxO1xyXG5cclxuLyoqXHJcbiAqIOeJqeeQhua8lOeul+OCr+ODqeOCuVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3Mge1xyXG4gIC8qKlxyXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOBruS9nOaIkFxyXG4gICAqIEBwYXJhbSBidWZmZXIgICAgcGh5c2ljczMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxyXG4gICAqIEBwYXJhbSBzaXplICAgICAg44OQ44OD44OV44Kh44Gu44K144Kk44K6XHJcbiAgICogQHJldHVybiDkvZzmiJDjgZXjgozjgZ/jgqTjg7Pjgrnjgr/jg7PjgrlcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGNyZWF0ZShidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiBDdWJpc21QaHlzaWNzIHtcclxuICAgIGNvbnN0IHJldDogQ3ViaXNtUGh5c2ljcyA9IG5ldyBDdWJpc21QaHlzaWNzKCk7XHJcblxyXG4gICAgcmV0LnBhcnNlKGJ1ZmZlciwgc2l6ZSk7XHJcbiAgICByZXQuX3BoeXNpY3NSaWcuZ3Jhdml0eS55ID0gMDtcclxuXHJcbiAgICByZXR1cm4gcmV0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Kk44Oz44K544K/44Oz44K544KS56C05qOE44GZ44KLXHJcbiAgICogQHBhcmFtIHBoeXNpY3Mg56C05qOE44GZ44KL44Kk44Oz44K544K/44Oz44K5XHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBkZWxldGUocGh5c2ljczogQ3ViaXNtUGh5c2ljcyk6IHZvaWQge1xyXG4gICAgaWYgKHBoeXNpY3MgIT0gbnVsbCkge1xyXG4gICAgICBwaHlzaWNzLnJlbGVhc2UoKTtcclxuICAgICAgcGh5c2ljcyA9IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDniannkIbmvJTnrpfjga7oqZXkvqFcclxuICAgKiBAcGFyYW0gbW9kZWwg54mp55CG5ryU566X44Gu57WQ5p6c44KS6YGp55So44GZ44KL44Oi44OH44OrXHJcbiAgICogQHBhcmFtIGRlbHRhVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaTW+enkl1cclxuICAgKi9cclxuICBwdWJsaWMgZXZhbHVhdGUobW9kZWw6IEN1YmlzbU1vZGVsLCBkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGxldCB0b3RhbEFuZ2xlOiB7IGFuZ2xlOiBudW1iZXIgfTtcclxuICAgIGxldCB3ZWlnaHQ6IG51bWJlcjtcclxuICAgIGxldCByYWRBbmdsZTogbnVtYmVyO1xyXG4gICAgbGV0IG91dHB1dFZhbHVlOiBudW1iZXI7XHJcbiAgICBjb25zdCB0b3RhbFRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoKTtcclxuICAgIGxldCBjdXJyZW50U2V0dGluZzogQ3ViaXNtUGh5c2ljc1N1YlJpZztcclxuICAgIGxldCBjdXJyZW50SW5wdXQ6IEN1YmlzbVBoeXNpY3NJbnB1dFtdO1xyXG4gICAgbGV0IGN1cnJlbnRPdXRwdXQ6IEN1YmlzbVBoeXNpY3NPdXRwdXRbXTtcclxuICAgIGxldCBjdXJyZW50UGFydGljbGVzOiBDdWJpc21QaHlzaWNzUGFydGljbGVbXTtcclxuXHJcbiAgICBsZXQgcGFyYW1ldGVyVmFsdWU6IEZsb2F0MzJBcnJheTtcclxuICAgIGxldCBwYXJhbWV0ZXJNYXhpbXVtVmFsdWU6IEZsb2F0MzJBcnJheTtcclxuICAgIGxldCBwYXJhbWV0ZXJNaW5pbXVtVmFsdWU6IEZsb2F0MzJBcnJheTtcclxuICAgIGxldCBwYXJhbWV0ZXJEZWZhdWx0VmFsdWU6IEZsb2F0MzJBcnJheTtcclxuXHJcbiAgICBwYXJhbWV0ZXJWYWx1ZSA9IG1vZGVsLmdldE1vZGVsKCkucGFyYW1ldGVycy52YWx1ZXM7XHJcbiAgICBwYXJhbWV0ZXJNYXhpbXVtVmFsdWUgPSBtb2RlbC5nZXRNb2RlbCgpLnBhcmFtZXRlcnMubWF4aW11bVZhbHVlcztcclxuICAgIHBhcmFtZXRlck1pbmltdW1WYWx1ZSA9IG1vZGVsLmdldE1vZGVsKCkucGFyYW1ldGVycy5taW5pbXVtVmFsdWVzO1xyXG4gICAgcGFyYW1ldGVyRGVmYXVsdFZhbHVlID0gbW9kZWwuZ2V0TW9kZWwoKS5wYXJhbWV0ZXJzLmRlZmF1bHRWYWx1ZXM7XHJcblxyXG4gICAgZm9yIChcclxuICAgICAgbGV0IHNldHRpbmdJbmRleCA9IDA7XHJcbiAgICAgIHNldHRpbmdJbmRleCA8IHRoaXMuX3BoeXNpY3NSaWcuc3ViUmlnQ291bnQ7XHJcbiAgICAgICsrc2V0dGluZ0luZGV4XHJcbiAgICApIHtcclxuICAgICAgdG90YWxBbmdsZSA9IHsgYW5nbGU6IDAuMCB9O1xyXG4gICAgICB0b3RhbFRyYW5zbGF0aW9uLnggPSAwLjA7XHJcbiAgICAgIHRvdGFsVHJhbnNsYXRpb24ueSA9IDAuMDtcclxuICAgICAgY3VycmVudFNldHRpbmcgPSB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KHNldHRpbmdJbmRleCk7XHJcbiAgICAgIGN1cnJlbnRJbnB1dCA9IHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmdldChjdXJyZW50U2V0dGluZy5iYXNlSW5wdXRJbmRleCk7XHJcbiAgICAgIGN1cnJlbnRPdXRwdXQgPSB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuZ2V0KFxyXG4gICAgICAgIGN1cnJlbnRTZXR0aW5nLmJhc2VPdXRwdXRJbmRleFxyXG4gICAgICApO1xyXG4gICAgICBjdXJyZW50UGFydGljbGVzID0gdGhpcy5fcGh5c2ljc1JpZy5wYXJ0aWNsZXMuZ2V0KFxyXG4gICAgICAgIGN1cnJlbnRTZXR0aW5nLmJhc2VQYXJ0aWNsZUluZGV4XHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvLyBMb2FkIGlucHV0IHBhcmFtZXRlcnNcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50U2V0dGluZy5pbnB1dENvdW50OyArK2kpIHtcclxuICAgICAgICB3ZWlnaHQgPSBjdXJyZW50SW5wdXRbaV0ud2VpZ2h0IC8gTWF4aW11bVdlaWdodDtcclxuXHJcbiAgICAgICAgaWYgKGN1cnJlbnRJbnB1dFtpXS5zb3VyY2VQYXJhbWV0ZXJJbmRleCA9PSAtMSkge1xyXG4gICAgICAgICAgY3VycmVudElucHV0W2ldLnNvdXJjZVBhcmFtZXRlckluZGV4ID0gbW9kZWwuZ2V0UGFyYW1ldGVySW5kZXgoXHJcbiAgICAgICAgICAgIGN1cnJlbnRJbnB1dFtpXS5zb3VyY2UuaWRcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjdXJyZW50SW5wdXRbaV0uZ2V0Tm9ybWFsaXplZFBhcmFtZXRlclZhbHVlKFxyXG4gICAgICAgICAgdG90YWxUcmFuc2xhdGlvbixcclxuICAgICAgICAgIHRvdGFsQW5nbGUsXHJcbiAgICAgICAgICBwYXJhbWV0ZXJWYWx1ZVtjdXJyZW50SW5wdXRbaV0uc291cmNlUGFyYW1ldGVySW5kZXhdLFxyXG4gICAgICAgICAgcGFyYW1ldGVyTWluaW11bVZhbHVlW2N1cnJlbnRJbnB1dFtpXS5zb3VyY2VQYXJhbWV0ZXJJbmRleF0sXHJcbiAgICAgICAgICBwYXJhbWV0ZXJNYXhpbXVtVmFsdWVbY3VycmVudElucHV0W2ldLnNvdXJjZVBhcmFtZXRlckluZGV4XSxcclxuICAgICAgICAgIHBhcmFtZXRlckRlZmF1bHRWYWx1ZVtjdXJyZW50SW5wdXRbaV0uc291cmNlUGFyYW1ldGVySW5kZXhdLFxyXG4gICAgICAgICAgY3VycmVudFNldHRpbmcubm9ybWFsaXphdGlvblBvc2l0aW9uLFxyXG4gICAgICAgICAgY3VycmVudFNldHRpbmcubm9ybWFsaXphdGlvbkFuZ2xlLFxyXG4gICAgICAgICAgY3VycmVudElucHV0W2ldLnJlZmxlY3QsXHJcbiAgICAgICAgICB3ZWlnaHRcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByYWRBbmdsZSA9IEN1YmlzbU1hdGguZGVncmVlc1RvUmFkaWFuKC10b3RhbEFuZ2xlLmFuZ2xlKTtcclxuXHJcbiAgICAgIHRvdGFsVHJhbnNsYXRpb24ueCA9XHJcbiAgICAgICAgdG90YWxUcmFuc2xhdGlvbi54ICogQ3ViaXNtTWF0aC5jb3MocmFkQW5nbGUpIC1cclxuICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLnkgKiBDdWJpc21NYXRoLnNpbihyYWRBbmdsZSk7XHJcbiAgICAgIHRvdGFsVHJhbnNsYXRpb24ueSA9XHJcbiAgICAgICAgdG90YWxUcmFuc2xhdGlvbi54ICogQ3ViaXNtTWF0aC5zaW4ocmFkQW5nbGUpICtcclxuICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLnkgKiBDdWJpc21NYXRoLmNvcyhyYWRBbmdsZSk7XHJcblxyXG4gICAgICAvLyBDYWxjdWxhdGUgcGFydGljbGVzIHBvc2l0aW9uLlxyXG4gICAgICB1cGRhdGVQYXJ0aWNsZXMoXHJcbiAgICAgICAgY3VycmVudFBhcnRpY2xlcyxcclxuICAgICAgICBjdXJyZW50U2V0dGluZy5wYXJ0aWNsZUNvdW50LFxyXG4gICAgICAgIHRvdGFsVHJhbnNsYXRpb24sXHJcbiAgICAgICAgdG90YWxBbmdsZS5hbmdsZSxcclxuICAgICAgICB0aGlzLl9vcHRpb25zLndpbmQsXHJcbiAgICAgICAgTW92ZW1lbnRUaHJlc2hvbGQgKiBjdXJyZW50U2V0dGluZy5ub3JtYWxpemF0aW9uUG9zaXRpb24ubWF4aW11bSxcclxuICAgICAgICBkZWx0YVRpbWVTZWNvbmRzLFxyXG4gICAgICAgIEFpclJlc2lzdGFuY2VcclxuICAgICAgKTtcclxuXHJcbiAgICAgIC8vIFVwZGF0ZSBvdXRwdXQgcGFyYW1ldGVycy5cclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50U2V0dGluZy5vdXRwdXRDb3VudDsgKytpKSB7XHJcbiAgICAgICAgY29uc3QgcGFydGljbGVJbmRleCA9IGN1cnJlbnRPdXRwdXRbaV0udmVydGV4SW5kZXg7XHJcblxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIHBhcnRpY2xlSW5kZXggPCAxIHx8XHJcbiAgICAgICAgICBwYXJ0aWNsZUluZGV4ID49IGN1cnJlbnRTZXR0aW5nLnBhcnRpY2xlQ291bnRcclxuICAgICAgICApIHtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGN1cnJlbnRPdXRwdXRbaV0uZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleCA9PSAtMSkge1xyXG4gICAgICAgICAgY3VycmVudE91dHB1dFtpXS5kZXN0aW5hdGlvblBhcmFtZXRlckluZGV4ID0gbW9kZWwuZ2V0UGFyYW1ldGVySW5kZXgoXHJcbiAgICAgICAgICAgIGN1cnJlbnRPdXRwdXRbaV0uZGVzdGluYXRpb24uaWRcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB0cmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKCk7XHJcbiAgICAgICAgdHJhbnNsYXRpb24ueCA9XHJcbiAgICAgICAgICBjdXJyZW50UGFydGljbGVzW3BhcnRpY2xlSW5kZXhdLnBvc2l0aW9uLnggLVxyXG4gICAgICAgICAgY3VycmVudFBhcnRpY2xlc1twYXJ0aWNsZUluZGV4IC0gMV0ucG9zaXRpb24ueDtcclxuICAgICAgICB0cmFuc2xhdGlvbi55ID1cclxuICAgICAgICAgIGN1cnJlbnRQYXJ0aWNsZXNbcGFydGljbGVJbmRleF0ucG9zaXRpb24ueSAtXHJcbiAgICAgICAgICBjdXJyZW50UGFydGljbGVzW3BhcnRpY2xlSW5kZXggLSAxXS5wb3NpdGlvbi55O1xyXG5cclxuICAgICAgICBvdXRwdXRWYWx1ZSA9IGN1cnJlbnRPdXRwdXRbaV0uZ2V0VmFsdWUoXHJcbiAgICAgICAgICB0cmFuc2xhdGlvbixcclxuICAgICAgICAgIGN1cnJlbnRQYXJ0aWNsZXMsXHJcbiAgICAgICAgICBwYXJ0aWNsZUluZGV4LFxyXG4gICAgICAgICAgY3VycmVudE91dHB1dFtpXS5yZWZsZWN0LFxyXG4gICAgICAgICAgdGhpcy5fb3B0aW9ucy5ncmF2aXR5XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgY29uc3QgZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleDogbnVtYmVyID1cclxuICAgICAgICAgIGN1cnJlbnRPdXRwdXRbaV0uZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleDtcclxuICAgICAgICBjb25zdCBvdXRQYXJhbWV0ZXJWYWx1ZTogRmxvYXQzMkFycmF5ID1cclxuICAgICAgICAgICFGbG9hdDMyQXJyYXkucHJvdG90eXBlLnNsaWNlICYmICdzdWJhcnJheScgaW4gRmxvYXQzMkFycmF5LnByb3RvdHlwZVxyXG4gICAgICAgICAgICA/IEpTT04ucGFyc2UoXHJcbiAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShcclxuICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyVmFsdWUuc3ViYXJyYXkoZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleClcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICApIC8vIOWApOa4oeOBl+OBmeOCi+OBn+OCgeOAgUpTT04ucGFyc2UsIEpTT04uc3RyaW5naWZ5XHJcbiAgICAgICAgICAgIDogcGFyYW1ldGVyVmFsdWUuc2xpY2UoZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleCk7XHJcblxyXG4gICAgICAgIHVwZGF0ZU91dHB1dFBhcmFtZXRlclZhbHVlKFxyXG4gICAgICAgICAgb3V0UGFyYW1ldGVyVmFsdWUsXHJcbiAgICAgICAgICBwYXJhbWV0ZXJNaW5pbXVtVmFsdWVbZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleF0sXHJcbiAgICAgICAgICBwYXJhbWV0ZXJNYXhpbXVtVmFsdWVbZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleF0sXHJcbiAgICAgICAgICBvdXRwdXRWYWx1ZSxcclxuICAgICAgICAgIGN1cnJlbnRPdXRwdXRbaV1cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyDlgKTjgpLlj43mmKBcclxuICAgICAgICBmb3IgKFxyXG4gICAgICAgICAgbGV0IG9mZnNldDogbnVtYmVyID0gZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleCwgb3V0UGFyYW1JbmRleCA9IDA7XHJcbiAgICAgICAgICBvZmZzZXQgPCBwYXJhbWV0ZXJWYWx1ZS5sZW5ndGg7XHJcbiAgICAgICAgICBvZmZzZXQrKywgb3V0UGFyYW1JbmRleCsrXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBwYXJhbWV0ZXJWYWx1ZVtvZmZzZXRdID0gb3V0UGFyYW1ldGVyVmFsdWVbb3V0UGFyYW1JbmRleF07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjgqrjg5fjgrfjg6fjg7Pjga7oqK3lrppcclxuICAgKiBAcGFyYW0gb3B0aW9ucyDjgqrjg5fjgrfjg6fjg7NcclxuICAgKi9cclxuICBwdWJsaWMgc2V0T3B0aW9ucyhvcHRpb25zOiBPcHRpb25zKTogdm9pZCB7XHJcbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCquODl+OCt+ODp+ODs+OBruWPluW+l1xyXG4gICAqIEByZXR1cm4g44Kq44OX44K344On44OzXHJcbiAgICovXHJcbiAgcHVibGljIGdldE9wdGlvbigpOiBPcHRpb25zIHtcclxuICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5fcGh5c2ljc1JpZyA9IG51bGw7XHJcblxyXG4gICAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xyXG4gICAgdGhpcy5fb3B0aW9ucyA9IG5ldyBPcHRpb25zKCk7XHJcbiAgICB0aGlzLl9vcHRpb25zLmdyYXZpdHkueSA9IC0xLjA7XHJcbiAgICB0aGlzLl9vcHRpb25zLmdyYXZpdHkueCA9IDA7XHJcbiAgICB0aGlzLl9vcHRpb25zLndpbmQueCA9IDA7XHJcbiAgICB0aGlzLl9vcHRpb25zLndpbmQueSA9IDA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcclxuICAgKi9cclxuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuX3BoeXNpY3NSaWcgPSB2b2lkIDA7XHJcbiAgICB0aGlzLl9waHlzaWNzUmlnID0gbnVsbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIHBoeXNpY3MzLmpzb27jgpLjg5Hjg7zjgrnjgZnjgovjgIJcclxuICAgKiBAcGFyYW0gcGh5c2ljc0pzb24gcGh5c2ljczMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxyXG4gICAqIEBwYXJhbSBzaXplIOODkOODg+ODleOCoeOBruOCteOCpOOCulxyXG4gICAqL1xyXG4gIHB1YmxpYyBwYXJzZShwaHlzaWNzSnNvbjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5fcGh5c2ljc1JpZyA9IG5ldyBDdWJpc21QaHlzaWNzUmlnKCk7XHJcblxyXG4gICAgbGV0IGpzb246IEN1YmlzbVBoeXNpY3NKc29uID0gbmV3IEN1YmlzbVBoeXNpY3NKc29uKHBoeXNpY3NKc29uLCBzaXplKTtcclxuXHJcbiAgICB0aGlzLl9waHlzaWNzUmlnLmdyYXZpdHkgPSBqc29uLmdldEdyYXZpdHkoKTtcclxuICAgIHRoaXMuX3BoeXNpY3NSaWcud2luZCA9IGpzb24uZ2V0V2luZCgpO1xyXG4gICAgdGhpcy5fcGh5c2ljc1JpZy5zdWJSaWdDb3VudCA9IGpzb24uZ2V0U3ViUmlnQ291bnQoKTtcclxuXHJcbiAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLnVwZGF0ZVNpemUoXHJcbiAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc3ViUmlnQ291bnQsXHJcbiAgICAgIEN1YmlzbVBoeXNpY3NTdWJSaWcsXHJcbiAgICAgIHRydWVcclxuICAgICk7XHJcbiAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy51cGRhdGVTaXplKFxyXG4gICAgICBqc29uLmdldFRvdGFsSW5wdXRDb3VudCgpLFxyXG4gICAgICBDdWJpc21QaHlzaWNzSW5wdXQsXHJcbiAgICAgIHRydWVcclxuICAgICk7XHJcbiAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMudXBkYXRlU2l6ZShcclxuICAgICAganNvbi5nZXRUb3RhbE91dHB1dENvdW50KCksXHJcbiAgICAgIEN1YmlzbVBoeXNpY3NPdXRwdXQsXHJcbiAgICAgIHRydWVcclxuICAgICk7XHJcbiAgICB0aGlzLl9waHlzaWNzUmlnLnBhcnRpY2xlcy51cGRhdGVTaXplKFxyXG4gICAgICBqc29uLmdldFZlcnRleENvdW50KCksXHJcbiAgICAgIEN1YmlzbVBoeXNpY3NQYXJ0aWNsZSxcclxuICAgICAgdHJ1ZVxyXG4gICAgKTtcclxuXHJcbiAgICBsZXQgaW5wdXRJbmRleCA9IDAsXHJcbiAgICAgIG91dHB1dEluZGV4ID0gMCxcclxuICAgICAgcGFydGljbGVJbmRleCA9IDA7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmdldFNpemUoKTsgKytpKSB7XHJcbiAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoXHJcbiAgICAgICAgaVxyXG4gICAgICApLm5vcm1hbGl6YXRpb25Qb3NpdGlvbi5taW5pbXVtID0ganNvbi5nZXROb3JtYWxpemF0aW9uUG9zaXRpb25NaW5pbXVtVmFsdWUoXHJcbiAgICAgICAgaVxyXG4gICAgICApO1xyXG4gICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KFxyXG4gICAgICAgIGlcclxuICAgICAgKS5ub3JtYWxpemF0aW9uUG9zaXRpb24ubWF4aW11bSA9IGpzb24uZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uTWF4aW11bVZhbHVlKFxyXG4gICAgICAgIGlcclxuICAgICAgKTtcclxuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChcclxuICAgICAgICBpXHJcbiAgICAgICkubm9ybWFsaXphdGlvblBvc2l0aW9uLmRlZmFsdXQgPSBqc29uLmdldE5vcm1hbGl6YXRpb25Qb3NpdGlvbkRlZmF1bHRWYWx1ZShcclxuICAgICAgICBpXHJcbiAgICAgICk7XHJcblxyXG4gICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KFxyXG4gICAgICAgIGlcclxuICAgICAgKS5ub3JtYWxpemF0aW9uQW5nbGUubWluaW11bSA9IGpzb24uZ2V0Tm9ybWFsaXphdGlvbkFuZ2xlTWluaW11bVZhbHVlKGkpO1xyXG4gICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KFxyXG4gICAgICAgIGlcclxuICAgICAgKS5ub3JtYWxpemF0aW9uQW5nbGUubWF4aW11bSA9IGpzb24uZ2V0Tm9ybWFsaXphdGlvbkFuZ2xlTWF4aW11bVZhbHVlKGkpO1xyXG4gICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KFxyXG4gICAgICAgIGlcclxuICAgICAgKS5ub3JtYWxpemF0aW9uQW5nbGUuZGVmYWx1dCA9IGpzb24uZ2V0Tm9ybWFsaXphdGlvbkFuZ2xlRGVmYXVsdFZhbHVlKGkpO1xyXG5cclxuICAgICAgLy8gSW5wdXRcclxuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5pbnB1dENvdW50ID0ganNvbi5nZXRJbnB1dENvdW50KGkpO1xyXG4gICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLmJhc2VJbnB1dEluZGV4ID0gaW5wdXRJbmRleDtcclxuXHJcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5pbnB1dENvdW50OyArK2opIHtcclxuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5hdChpbnB1dEluZGV4ICsgaikuc291cmNlUGFyYW1ldGVySW5kZXggPSAtMTtcclxuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5hdChpbnB1dEluZGV4ICsgaikud2VpZ2h0ID0ganNvbi5nZXRJbnB1dFdlaWdodChcclxuICAgICAgICAgIGksXHJcbiAgICAgICAgICBqXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5hdChcclxuICAgICAgICAgIGlucHV0SW5kZXggKyBqXHJcbiAgICAgICAgKS5yZWZsZWN0ID0ganNvbi5nZXRJbnB1dFJlZmxlY3QoaSwgaik7XHJcblxyXG4gICAgICAgIGlmIChqc29uLmdldElucHV0VHlwZShpLCBqKSA9PSBQaHlzaWNzVHlwZVRhZ1gpIHtcclxuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmF0KGlucHV0SW5kZXggKyBqKS50eXBlID1cclxuICAgICAgICAgICAgQ3ViaXNtUGh5c2ljc1NvdXJjZS5DdWJpc21QaHlzaWNzU291cmNlX1g7XHJcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5hdChcclxuICAgICAgICAgICAgaW5wdXRJbmRleCArIGpcclxuICAgICAgICAgICkuZ2V0Tm9ybWFsaXplZFBhcmFtZXRlclZhbHVlID0gZ2V0SW5wdXRUcmFuc2xhdGlvblhGcm9tTm9ybWFsaXplZFBhcmFtZXRlclZhbHVlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoanNvbi5nZXRJbnB1dFR5cGUoaSwgaikgPT0gUGh5c2ljc1R5cGVUYWdZKSB7XHJcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5hdChpbnB1dEluZGV4ICsgaikudHlwZSA9XHJcbiAgICAgICAgICAgIEN1YmlzbVBoeXNpY3NTb3VyY2UuQ3ViaXNtUGh5c2ljc1NvdXJjZV9ZO1xyXG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoXHJcbiAgICAgICAgICAgIGlucHV0SW5kZXggKyBqXHJcbiAgICAgICAgICApLmdldE5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZSA9IGdldElucHV0VHJhbnNsYXRpb25ZRnJvbU5vcm1hbGl6ZWRQYXJhbXRlclZhbHVlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoanNvbi5nZXRJbnB1dFR5cGUoaSwgaikgPT0gUGh5c2ljc1R5cGVUYWdBbmdsZSkge1xyXG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoaW5wdXRJbmRleCArIGopLnR5cGUgPVxyXG4gICAgICAgICAgICBDdWJpc21QaHlzaWNzU291cmNlLkN1YmlzbVBoeXNpY3NTb3VyY2VfQW5nbGU7XHJcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5hdChcclxuICAgICAgICAgICAgaW5wdXRJbmRleCArIGpcclxuICAgICAgICAgICkuZ2V0Tm9ybWFsaXplZFBhcmFtZXRlclZhbHVlID0gZ2V0SW5wdXRBbmdsZUZyb21Ob3JtYWxpemVkUGFyYW1ldGVyVmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5hdChpbnB1dEluZGV4ICsgaikuc291cmNlLnRhcmdldFR5cGUgPVxyXG4gICAgICAgICAgQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGUuQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGVfUGFyYW1ldGVyO1xyXG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmF0KFxyXG4gICAgICAgICAgaW5wdXRJbmRleCArIGpcclxuICAgICAgICApLnNvdXJjZS5pZCA9IGpzb24uZ2V0SW5wdXRTb3VyY2VJZChpLCBqKTtcclxuICAgICAgfVxyXG4gICAgICBpbnB1dEluZGV4ICs9IHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkuaW5wdXRDb3VudDtcclxuXHJcbiAgICAgIC8vIE91dHB1dFxyXG4gICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLm91dHB1dENvdW50ID0ganNvbi5nZXRPdXRwdXRDb3VudChpKTtcclxuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5iYXNlT3V0cHV0SW5kZXggPSBvdXRwdXRJbmRleDtcclxuXHJcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5vdXRwdXRDb3VudDsgKytqKSB7XHJcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KFxyXG4gICAgICAgICAgb3V0cHV0SW5kZXggKyBqXHJcbiAgICAgICAgKS5kZXN0aW5hdGlvblBhcmFtZXRlckluZGV4ID0gLTE7XHJcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KFxyXG4gICAgICAgICAgb3V0cHV0SW5kZXggKyBqXHJcbiAgICAgICAgKS52ZXJ0ZXhJbmRleCA9IGpzb24uZ2V0T3V0cHV0VmVydGV4SW5kZXgoaSwgaik7XHJcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KFxyXG4gICAgICAgICAgb3V0cHV0SW5kZXggKyBqXHJcbiAgICAgICAgKS5hbmdsZVNjYWxlID0ganNvbi5nZXRPdXRwdXRBbmdsZVNjYWxlKGksIGopO1xyXG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChcclxuICAgICAgICAgIG91dHB1dEluZGV4ICsgalxyXG4gICAgICAgICkud2VpZ2h0ID0ganNvbi5nZXRPdXRwdXRXZWlnaHQoaSwgaik7XHJcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KG91dHB1dEluZGV4ICsgaikuZGVzdGluYXRpb24udGFyZ2V0VHlwZSA9XHJcbiAgICAgICAgICBDdWJpc21QaHlzaWNzVGFyZ2V0VHlwZS5DdWJpc21QaHlzaWNzVGFyZ2V0VHlwZV9QYXJhbWV0ZXI7XHJcblxyXG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChcclxuICAgICAgICAgIG91dHB1dEluZGV4ICsgalxyXG4gICAgICAgICkuZGVzdGluYXRpb24uaWQgPSBqc29uLmdldE91dHB1dERlc3RpbmF0aW9uSWQoaSwgaik7XHJcblxyXG4gICAgICAgIGlmIChqc29uLmdldE91dHB1dFR5cGUoaSwgaikgPT0gUGh5c2ljc1R5cGVUYWdYKSB7XHJcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQob3V0cHV0SW5kZXggKyBqKS50eXBlID1cclxuICAgICAgICAgICAgQ3ViaXNtUGh5c2ljc1NvdXJjZS5DdWJpc21QaHlzaWNzU291cmNlX1g7XHJcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQoXHJcbiAgICAgICAgICAgIG91dHB1dEluZGV4ICsgalxyXG4gICAgICAgICAgKS5nZXRWYWx1ZSA9IGdldE91dHB1dFRyYW5zbGF0aW9uWDtcclxuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChcclxuICAgICAgICAgICAgb3V0cHV0SW5kZXggKyBqXHJcbiAgICAgICAgICApLmdldFNjYWxlID0gZ2V0T3V0cHV0U2NhbGVUcmFuc2xhdGlvblg7XHJcbiAgICAgICAgfSBlbHNlIGlmIChqc29uLmdldE91dHB1dFR5cGUoaSwgaikgPT0gUGh5c2ljc1R5cGVUYWdZKSB7XHJcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQob3V0cHV0SW5kZXggKyBqKS50eXBlID1cclxuICAgICAgICAgICAgQ3ViaXNtUGh5c2ljc1NvdXJjZS5DdWJpc21QaHlzaWNzU291cmNlX1k7XHJcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQoXHJcbiAgICAgICAgICAgIG91dHB1dEluZGV4ICsgalxyXG4gICAgICAgICAgKS5nZXRWYWx1ZSA9IGdldE91dHB1dFRyYW5zbGF0aW9uWTtcclxuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChcclxuICAgICAgICAgICAgb3V0cHV0SW5kZXggKyBqXHJcbiAgICAgICAgICApLmdldFNjYWxlID0gZ2V0T3V0cHV0U2NhbGVUcmFuc2xhdGlvblk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChqc29uLmdldE91dHB1dFR5cGUoaSwgaikgPT0gUGh5c2ljc1R5cGVUYWdBbmdsZSkge1xyXG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KG91dHB1dEluZGV4ICsgaikudHlwZSA9XHJcbiAgICAgICAgICAgIEN1YmlzbVBoeXNpY3NTb3VyY2UuQ3ViaXNtUGh5c2ljc1NvdXJjZV9BbmdsZTtcclxuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChcclxuICAgICAgICAgICAgb3V0cHV0SW5kZXggKyBqXHJcbiAgICAgICAgICApLmdldFZhbHVlID0gZ2V0T3V0cHV0QW5nbGU7XHJcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQoXHJcbiAgICAgICAgICAgIG91dHB1dEluZGV4ICsgalxyXG4gICAgICAgICAgKS5nZXRTY2FsZSA9IGdldE91dHB1dFNjYWxlQW5nbGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQoXHJcbiAgICAgICAgICBvdXRwdXRJbmRleCArIGpcclxuICAgICAgICApLnJlZmxlY3QgPSBqc29uLmdldE91dHB1dFJlZmxlY3QoaSwgaik7XHJcbiAgICAgIH1cclxuICAgICAgb3V0cHV0SW5kZXggKz0gdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5vdXRwdXRDb3VudDtcclxuXHJcbiAgICAgIC8vIFBhcnRpY2xlXHJcbiAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkucGFydGljbGVDb3VudCA9IGpzb24uZ2V0UGFydGljbGVDb3VudChpKTtcclxuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5iYXNlUGFydGljbGVJbmRleCA9IHBhcnRpY2xlSW5kZXg7XHJcblxyXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkucGFydGljbGVDb3VudDsgKytqKSB7XHJcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5wYXJ0aWNsZXMuYXQoXHJcbiAgICAgICAgICBwYXJ0aWNsZUluZGV4ICsgalxyXG4gICAgICAgICkubW9iaWxpdHkgPSBqc29uLmdldFBhcnRpY2xlTW9iaWxpdHkoaSwgaik7XHJcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5wYXJ0aWNsZXMuYXQoXHJcbiAgICAgICAgICBwYXJ0aWNsZUluZGV4ICsgalxyXG4gICAgICAgICkuZGVsYXkgPSBqc29uLmdldFBhcnRpY2xlRGVsYXkoaSwgaik7XHJcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5wYXJ0aWNsZXMuYXQoXHJcbiAgICAgICAgICBwYXJ0aWNsZUluZGV4ICsgalxyXG4gICAgICAgICkuYWNjZWxlcmF0aW9uID0ganNvbi5nZXRQYXJ0aWNsZUFjY2VsZXJhdGlvbihpLCBqKTtcclxuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLnBhcnRpY2xlcy5hdChcclxuICAgICAgICAgIHBhcnRpY2xlSW5kZXggKyBqXHJcbiAgICAgICAgKS5yYWRpdXMgPSBqc29uLmdldFBhcnRpY2xlUmFkaXVzKGksIGopO1xyXG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcucGFydGljbGVzLmF0KFxyXG4gICAgICAgICAgcGFydGljbGVJbmRleCArIGpcclxuICAgICAgICApLnBvc2l0aW9uID0ganNvbi5nZXRQYXJ0aWNsZVBvc2l0aW9uKGksIGopO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBwYXJ0aWNsZUluZGV4ICs9IHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkucGFydGljbGVDb3VudDtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmluaXRpYWxpemUoKTtcclxuXHJcbiAgICBqc29uLnJlbGVhc2UoKTtcclxuICAgIGpzb24gPSB2b2lkIDA7XHJcbiAgICBqc29uID0gbnVsbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWIneacn+WMluOBmeOCi1xyXG4gICAqL1xyXG4gIHB1YmxpYyBpbml0aWFsaXplKCk6IHZvaWQge1xyXG4gICAgbGV0IHN0cmFuZDogQ3ViaXNtUGh5c2ljc1BhcnRpY2xlW107XHJcbiAgICBsZXQgY3VycmVudFNldHRpbmc6IEN1YmlzbVBoeXNpY3NTdWJSaWc7XHJcbiAgICBsZXQgcmFkaXVzOiBDdWJpc21WZWN0b3IyO1xyXG5cclxuICAgIGZvciAoXHJcbiAgICAgIGxldCBzZXR0aW5nSW5kZXggPSAwO1xyXG4gICAgICBzZXR0aW5nSW5kZXggPCB0aGlzLl9waHlzaWNzUmlnLnN1YlJpZ0NvdW50O1xyXG4gICAgICArK3NldHRpbmdJbmRleFxyXG4gICAgKSB7XHJcbiAgICAgIGN1cnJlbnRTZXR0aW5nID0gdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChzZXR0aW5nSW5kZXgpO1xyXG4gICAgICBzdHJhbmQgPSB0aGlzLl9waHlzaWNzUmlnLnBhcnRpY2xlcy5nZXQoY3VycmVudFNldHRpbmcuYmFzZVBhcnRpY2xlSW5kZXgpO1xyXG5cclxuICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgdG9wIG9mIHBhcnRpY2xlLlxyXG4gICAgICBzdHJhbmRbMF0uaW5pdGlhbFBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xyXG4gICAgICBzdHJhbmRbMF0ubGFzdFBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoXHJcbiAgICAgICAgc3RyYW5kWzBdLmluaXRpYWxQb3NpdGlvbi54LFxyXG4gICAgICAgIHN0cmFuZFswXS5pbml0aWFsUG9zaXRpb24ueVxyXG4gICAgICApO1xyXG4gICAgICBzdHJhbmRbMF0ubGFzdEdyYXZpdHkgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIC0xLjApO1xyXG4gICAgICBzdHJhbmRbMF0ubGFzdEdyYXZpdHkueSAqPSAtMS4wO1xyXG4gICAgICBzdHJhbmRbMF0udmVsb2NpdHkgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XHJcbiAgICAgIHN0cmFuZFswXS5mb3JjZSA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcclxuXHJcbiAgICAgIC8vIEluaXRpYWxpemUgcGFyaXRjbGVzLlxyXG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGN1cnJlbnRTZXR0aW5nLnBhcnRpY2xlQ291bnQ7ICsraSkge1xyXG4gICAgICAgIHJhZGl1cyA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcclxuICAgICAgICByYWRpdXMueSA9IHN0cmFuZFtpXS5yYWRpdXM7XHJcbiAgICAgICAgc3RyYW5kW2ldLmluaXRpYWxQb3NpdGlvbiA9IG5ldyBDdWJpc21WZWN0b3IyKFxyXG4gICAgICAgICAgc3RyYW5kW2kgLSAxXS5pbml0aWFsUG9zaXRpb24ueCArIHJhZGl1cy54LFxyXG4gICAgICAgICAgc3RyYW5kW2kgLSAxXS5pbml0aWFsUG9zaXRpb24ueSArIHJhZGl1cy55XHJcbiAgICAgICAgKTtcclxuICAgICAgICBzdHJhbmRbaV0ucG9zaXRpb24gPSBuZXcgQ3ViaXNtVmVjdG9yMihcclxuICAgICAgICAgIHN0cmFuZFtpXS5pbml0aWFsUG9zaXRpb24ueCxcclxuICAgICAgICAgIHN0cmFuZFtpXS5pbml0aWFsUG9zaXRpb24ueVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgc3RyYW5kW2ldLmxhc3RQb3NpdGlvbiA9IG5ldyBDdWJpc21WZWN0b3IyKFxyXG4gICAgICAgICAgc3RyYW5kW2ldLmluaXRpYWxQb3NpdGlvbi54LFxyXG4gICAgICAgICAgc3RyYW5kW2ldLmluaXRpYWxQb3NpdGlvbi55XHJcbiAgICAgICAgKTtcclxuICAgICAgICBzdHJhbmRbaV0ubGFzdEdyYXZpdHkgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIC0xLjApO1xyXG4gICAgICAgIHN0cmFuZFtpXS5sYXN0R3Jhdml0eS55ICo9IC0xLjA7XHJcbiAgICAgICAgc3RyYW5kW2ldLnZlbG9jaXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xyXG4gICAgICAgIHN0cmFuZFtpXS5mb3JjZSA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX3BoeXNpY3NSaWc6IEN1YmlzbVBoeXNpY3NSaWc7IC8vIOeJqeeQhua8lOeul+OBruODh+ODvOOCv1xyXG4gIF9vcHRpb25zOiBPcHRpb25zOyAvLyDjgqrjg5fjgrfjg6fjg7NcclxufVxyXG5cclxuLyoqXHJcbiAqIOeJqeeQhua8lOeul+OBruOCquODl+OCt+ODp+ODs1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE9wdGlvbnMge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5ncmF2aXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XHJcbiAgICB0aGlzLndpbmQgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcclxuICB9XHJcblxyXG4gIGdyYXZpdHk6IEN1YmlzbVZlY3RvcjI7IC8vIOmHjeWKm+aWueWQkVxyXG4gIHdpbmQ6IEN1YmlzbVZlY3RvcjI7IC8vIOmiqOOBruaWueWQkVxyXG59XHJcblxyXG4vKipcclxuICogR2V0cyBzaWduLlxyXG4gKlxyXG4gKiBAcGFyYW0gdmFsdWUgRXZhbHVhdGlvbiB0YXJnZXQgdmFsdWUuXHJcbiAqXHJcbiAqIEByZXR1cm4gU2lnbiBvZiB2YWx1ZS5cclxuICovXHJcbmZ1bmN0aW9uIHNpZ24odmFsdWU6IG51bWJlcik6IG51bWJlciB7XHJcbiAgbGV0IHJldCA9IDA7XHJcblxyXG4gIGlmICh2YWx1ZSA+IDAuMCkge1xyXG4gICAgcmV0ID0gMTtcclxuICB9IGVsc2UgaWYgKHZhbHVlIDwgMC4wKSB7XHJcbiAgICByZXQgPSAtMTtcclxuICB9XHJcblxyXG4gIHJldHVybiByZXQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldElucHV0VHJhbnNsYXRpb25YRnJvbU5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZShcclxuICB0YXJnZXRUcmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMixcclxuICB0YXJnZXRBbmdsZTogeyBhbmdsZTogbnVtYmVyIH0sXHJcbiAgdmFsdWU6IG51bWJlcixcclxuICBwYXJhbWV0ZXJNaW5pbXVtVmFsdWU6IG51bWJlcixcclxuICBwYXJhbWV0ZXJNYXhpbXVtVmFsdWU6IG51bWJlcixcclxuICBwYXJhbWV0ZXJEZWZhdWx0VmFsdWU6IG51bWJlcixcclxuICBub3JtYWxpemF0aW9uUG9zaXRpb246IEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uLFxyXG4gIG5vcm1hbGl6YXRpb25BbmdsZTogQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24sXHJcbiAgaXNJbnZlcnRlZDogYm9vbGVhbixcclxuICB3ZWlnaHQ6IG51bWJlclxyXG4pOiB2b2lkIHtcclxuICB0YXJnZXRUcmFuc2xhdGlvbi54ICs9XHJcbiAgICBub3JtYWxpemVQYXJhbWV0ZXJWYWx1ZShcclxuICAgICAgdmFsdWUsXHJcbiAgICAgIHBhcmFtZXRlck1pbmltdW1WYWx1ZSxcclxuICAgICAgcGFyYW1ldGVyTWF4aW11bVZhbHVlLFxyXG4gICAgICBwYXJhbWV0ZXJEZWZhdWx0VmFsdWUsXHJcbiAgICAgIG5vcm1hbGl6YXRpb25Qb3NpdGlvbi5taW5pbXVtLFxyXG4gICAgICBub3JtYWxpemF0aW9uUG9zaXRpb24ubWF4aW11bSxcclxuICAgICAgbm9ybWFsaXphdGlvblBvc2l0aW9uLmRlZmFsdXQsXHJcbiAgICAgIGlzSW52ZXJ0ZWRcclxuICAgICkgKiB3ZWlnaHQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldElucHV0VHJhbnNsYXRpb25ZRnJvbU5vcm1hbGl6ZWRQYXJhbXRlclZhbHVlKFxyXG4gIHRhcmdldFRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyLFxyXG4gIHRhcmdldEFuZ2xlOiB7IGFuZ2xlOiBudW1iZXIgfSxcclxuICB2YWx1ZTogbnVtYmVyLFxyXG4gIHBhcmFtZXRlck1pbmltdW1WYWx1ZTogbnVtYmVyLFxyXG4gIHBhcmFtZXRlck1heGltdW1WYWx1ZTogbnVtYmVyLFxyXG4gIHBhcmFtZXRlckRlZmF1bHRWYWx1ZTogbnVtYmVyLFxyXG4gIG5vcm1hbGl6YXRpb25Qb3NpdGlvbjogQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24sXHJcbiAgbm9ybWFsaXphdGlvbkFuZ2xlOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbixcclxuICBpc0ludmVydGVkOiBib29sZWFuLFxyXG4gIHdlaWdodDogbnVtYmVyXHJcbik6IHZvaWQge1xyXG4gIHRhcmdldFRyYW5zbGF0aW9uLnkgKz1cclxuICAgIG5vcm1hbGl6ZVBhcmFtZXRlclZhbHVlKFxyXG4gICAgICB2YWx1ZSxcclxuICAgICAgcGFyYW1ldGVyTWluaW11bVZhbHVlLFxyXG4gICAgICBwYXJhbWV0ZXJNYXhpbXVtVmFsdWUsXHJcbiAgICAgIHBhcmFtZXRlckRlZmF1bHRWYWx1ZSxcclxuICAgICAgbm9ybWFsaXphdGlvblBvc2l0aW9uLm1pbmltdW0sXHJcbiAgICAgIG5vcm1hbGl6YXRpb25Qb3NpdGlvbi5tYXhpbXVtLFxyXG4gICAgICBub3JtYWxpemF0aW9uUG9zaXRpb24uZGVmYWx1dCxcclxuICAgICAgaXNJbnZlcnRlZFxyXG4gICAgKSAqIHdlaWdodDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0SW5wdXRBbmdsZUZyb21Ob3JtYWxpemVkUGFyYW1ldGVyVmFsdWUoXHJcbiAgdGFyZ2V0VHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIsXHJcbiAgdGFyZ2V0QW5nbGU6IHsgYW5nbGU6IG51bWJlciB9LFxyXG4gIHZhbHVlOiBudW1iZXIsXHJcbiAgcGFyYW1ldGVyTWluaW11bVZhbHVlOiBudW1iZXIsXHJcbiAgcGFyYW1ldGVyTWF4aW11bVZhbHVlOiBudW1iZXIsXHJcbiAgcGFyYW1ldGVyRGVmYXVsdFZhbHVlOiBudW1iZXIsXHJcbiAgbm9ybWFsaXphaXRpb25Qb3NpdGlvbjogQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24sXHJcbiAgbm9ybWFsaXphdGlvbkFuZ2xlOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbixcclxuICBpc0ludmVydGVkOiBib29sZWFuLFxyXG4gIHdlaWdodDogbnVtYmVyXHJcbik6IHZvaWQge1xyXG4gIHRhcmdldEFuZ2xlLmFuZ2xlICs9XHJcbiAgICBub3JtYWxpemVQYXJhbWV0ZXJWYWx1ZShcclxuICAgICAgdmFsdWUsXHJcbiAgICAgIHBhcmFtZXRlck1pbmltdW1WYWx1ZSxcclxuICAgICAgcGFyYW1ldGVyTWF4aW11bVZhbHVlLFxyXG4gICAgICBwYXJhbWV0ZXJEZWZhdWx0VmFsdWUsXHJcbiAgICAgIG5vcm1hbGl6YXRpb25BbmdsZS5taW5pbXVtLFxyXG4gICAgICBub3JtYWxpemF0aW9uQW5nbGUubWF4aW11bSxcclxuICAgICAgbm9ybWFsaXphdGlvbkFuZ2xlLmRlZmFsdXQsXHJcbiAgICAgIGlzSW52ZXJ0ZWRcclxuICAgICkgKiB3ZWlnaHQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldE91dHB1dFRyYW5zbGF0aW9uWChcclxuICB0cmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMixcclxuICBwYXJ0aWNsZXM6IEN1YmlzbVBoeXNpY3NQYXJ0aWNsZVtdLFxyXG4gIHBhcnRpY2xlSW5kZXg6IG51bWJlcixcclxuICBpc0ludmVydGVkOiBib29sZWFuLFxyXG4gIHBhcmVudEdyYXZpdHk6IEN1YmlzbVZlY3RvcjJcclxuKTogbnVtYmVyIHtcclxuICBsZXQgb3V0cHV0VmFsdWU6IG51bWJlciA9IHRyYW5zbGF0aW9uLng7XHJcblxyXG4gIGlmIChpc0ludmVydGVkKSB7XHJcbiAgICBvdXRwdXRWYWx1ZSAqPSAtMS4wO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG91dHB1dFZhbHVlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRPdXRwdXRUcmFuc2xhdGlvblkoXHJcbiAgdHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIsXHJcbiAgcGFydGljbGVzOiBDdWJpc21QaHlzaWNzUGFydGljbGVbXSxcclxuICBwYXJ0aWNsZUluZGV4OiBudW1iZXIsXHJcbiAgaXNJbnZlcnRlZDogYm9vbGVhbixcclxuICBwYXJlbnRHcmF2aXR5OiBDdWJpc21WZWN0b3IyXHJcbik6IG51bWJlciB7XHJcbiAgbGV0IG91dHB1dFZhbHVlOiBudW1iZXIgPSB0cmFuc2xhdGlvbi55O1xyXG5cclxuICBpZiAoaXNJbnZlcnRlZCkge1xyXG4gICAgb3V0cHV0VmFsdWUgKj0gLTEuMDtcclxuICB9XHJcbiAgcmV0dXJuIG91dHB1dFZhbHVlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRPdXRwdXRBbmdsZShcclxuICB0cmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMixcclxuICBwYXJ0aWNsZXM6IEN1YmlzbVBoeXNpY3NQYXJ0aWNsZVtdLFxyXG4gIHBhcnRpY2xlSW5kZXg6IG51bWJlcixcclxuICBpc0ludmVydGVkOiBib29sZWFuLFxyXG4gIHBhcmVudEdyYXZpdHk6IEN1YmlzbVZlY3RvcjJcclxuKTogbnVtYmVyIHtcclxuICBsZXQgb3V0cHV0VmFsdWU6IG51bWJlcjtcclxuXHJcbiAgaWYgKHBhcnRpY2xlSW5kZXggPj0gMikge1xyXG4gICAgcGFyZW50R3Jhdml0eSA9IHBhcnRpY2xlc1twYXJ0aWNsZUluZGV4IC0gMV0ucG9zaXRpb24uc3Vic3RyYWN0KFxyXG4gICAgICBwYXJ0aWNsZXNbcGFydGljbGVJbmRleCAtIDJdLnBvc2l0aW9uXHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBwYXJlbnRHcmF2aXR5ID0gcGFyZW50R3Jhdml0eS5tdWx0aXBseUJ5U2NhbGVyKC0xLjApO1xyXG4gIH1cclxuXHJcbiAgb3V0cHV0VmFsdWUgPSBDdWJpc21NYXRoLmRpcmVjdGlvblRvUmFkaWFuKHBhcmVudEdyYXZpdHksIHRyYW5zbGF0aW9uKTtcclxuXHJcbiAgaWYgKGlzSW52ZXJ0ZWQpIHtcclxuICAgIG91dHB1dFZhbHVlICo9IC0xLjA7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gb3V0cHV0VmFsdWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFJhbmdlVmFsdWUobWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyIHtcclxuICBjb25zdCBtYXhWYWx1ZTogbnVtYmVyID0gQ3ViaXNtTWF0aC5tYXgobWluLCBtYXgpO1xyXG4gIGNvbnN0IG1pblZhbHVlOiBudW1iZXIgPSBDdWJpc21NYXRoLm1pbihtaW4sIG1heCk7XHJcblxyXG4gIHJldHVybiBDdWJpc21NYXRoLmFicyhtYXhWYWx1ZSAtIG1pblZhbHVlKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0RGVmYXVsdFZhbHVlKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciB7XHJcbiAgY29uc3QgbWluVmFsdWU6IG51bWJlciA9IEN1YmlzbU1hdGgubWluKG1pbiwgbWF4KTtcclxuICByZXR1cm4gbWluVmFsdWUgKyBnZXRSYW5nZVZhbHVlKG1pbiwgbWF4KSAvIDIuMDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0T3V0cHV0U2NhbGVUcmFuc2xhdGlvblgoXHJcbiAgdHJhbnNsYXRpb25TY2FsZTogQ3ViaXNtVmVjdG9yMixcclxuICBhbmdsZVNjYWxlOiBudW1iZXJcclxuKTogbnVtYmVyIHtcclxuICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0cmFuc2xhdGlvblNjYWxlLngpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0T3V0cHV0U2NhbGVUcmFuc2xhdGlvblkoXHJcbiAgdHJhbnNsYXRpb25TY2FsZTogQ3ViaXNtVmVjdG9yMixcclxuICBhbmdsZVNjYWxlOiBudW1iZXJcclxuKTogbnVtYmVyIHtcclxuICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0cmFuc2xhdGlvblNjYWxlLnkpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0T3V0cHV0U2NhbGVBbmdsZShcclxuICB0cmFuc2xhdGlvblNjYWxlOiBDdWJpc21WZWN0b3IyLFxyXG4gIGFuZ2xlU2NhbGU6IG51bWJlclxyXG4pOiBudW1iZXIge1xyXG4gIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGFuZ2xlU2NhbGUpKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFVwZGF0ZXMgcGFydGljbGVzLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyYW5kICAgICAgICAgICAgICAgIFRhcmdldCBhcnJheSBvZiBwYXJ0aWNsZS5cclxuICogQHBhcmFtIHN0cmFuZENvdW50ICAgICAgICAgICBDb3VudCBvZiBwYXJ0aWNsZS5cclxuICogQHBhcmFtIHRvdGFsVHJhbnNsYXRpb24gICAgICBUb3RhbCB0cmFuc2xhdGlvbiB2YWx1ZS5cclxuICogQHBhcmFtIHRvdGFsQW5nbGUgICAgICAgICAgICBUb3RhbCBhbmdsZS5cclxuICogQHBhcmFtIHdpbmREaXJlY3Rpb24gICAgICAgICBEaXJlY3Rpb24gb2YgV2luZC5cclxuICogQHBhcmFtIHRocmVzaG9sZFZhbHVlICAgICAgICBUaHJlc2hvbGQgb2YgbW92ZW1lbnQuXHJcbiAqIEBwYXJhbSBkZWx0YVRpbWVTZWNvbmRzICAgICAgRGVsdGEgdGltZS5cclxuICogQHBhcmFtIGFpclJlc2lzdGFuY2UgICAgICAgICBBaXIgcmVzaXN0YW5jZS5cclxuICovXHJcbmZ1bmN0aW9uIHVwZGF0ZVBhcnRpY2xlcyhcclxuICBzdHJhbmQ6IEN1YmlzbVBoeXNpY3NQYXJ0aWNsZVtdLFxyXG4gIHN0cmFuZENvdW50OiBudW1iZXIsXHJcbiAgdG90YWxUcmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMixcclxuICB0b3RhbEFuZ2xlOiBudW1iZXIsXHJcbiAgd2luZERpcmVjdGlvbjogQ3ViaXNtVmVjdG9yMixcclxuICB0aHJlc2hvbGRWYWx1ZTogbnVtYmVyLFxyXG4gIGRlbHRhVGltZVNlY29uZHM6IG51bWJlcixcclxuICBhaXJSZXNpc3RhbmNlOiBudW1iZXJcclxuKSB7XHJcbiAgbGV0IHRvdGFsUmFkaWFuOiBudW1iZXI7XHJcbiAgbGV0IGRlbGF5OiBudW1iZXI7XHJcbiAgbGV0IHJhZGlhbjogbnVtYmVyO1xyXG4gIGxldCBjdXJyZW50R3Jhdml0eTogQ3ViaXNtVmVjdG9yMjtcclxuICBsZXQgZGlyZWN0aW9uOiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xyXG4gIGxldCB2ZWxvY2l0eTogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcclxuICBsZXQgZm9yY2U6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XHJcbiAgbGV0IG5ld0RpcmVjdGlvbjogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcclxuXHJcbiAgc3RyYW5kWzBdLnBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoXHJcbiAgICB0b3RhbFRyYW5zbGF0aW9uLngsXHJcbiAgICB0b3RhbFRyYW5zbGF0aW9uLnlcclxuICApO1xyXG5cclxuICB0b3RhbFJhZGlhbiA9IEN1YmlzbU1hdGguZGVncmVlc1RvUmFkaWFuKHRvdGFsQW5nbGUpO1xyXG4gIGN1cnJlbnRHcmF2aXR5ID0gQ3ViaXNtTWF0aC5yYWRpYW5Ub0RpcmVjdGlvbih0b3RhbFJhZGlhbik7XHJcbiAgY3VycmVudEdyYXZpdHkubm9ybWFsaXplKCk7XHJcblxyXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgc3RyYW5kQ291bnQ7ICsraSkge1xyXG4gICAgc3RyYW5kW2ldLmZvcmNlID0gY3VycmVudEdyYXZpdHlcclxuICAgICAgLm11bHRpcGx5QnlTY2FsZXIoc3RyYW5kW2ldLmFjY2VsZXJhdGlvbilcclxuICAgICAgLmFkZCh3aW5kRGlyZWN0aW9uKTtcclxuXHJcbiAgICBzdHJhbmRbaV0ubGFzdFBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoXHJcbiAgICAgIHN0cmFuZFtpXS5wb3NpdGlvbi54LFxyXG4gICAgICBzdHJhbmRbaV0ucG9zaXRpb24ueVxyXG4gICAgKTtcclxuXHJcbiAgICBkZWxheSA9IHN0cmFuZFtpXS5kZWxheSAqIGRlbHRhVGltZVNlY29uZHMgKiAzMC4wO1xyXG5cclxuICAgIGRpcmVjdGlvbiA9IHN0cmFuZFtpXS5wb3NpdGlvbi5zdWJzdHJhY3Qoc3RyYW5kW2kgLSAxXS5wb3NpdGlvbik7XHJcblxyXG4gICAgcmFkaWFuID1cclxuICAgICAgQ3ViaXNtTWF0aC5kaXJlY3Rpb25Ub1JhZGlhbihzdHJhbmRbaV0ubGFzdEdyYXZpdHksIGN1cnJlbnRHcmF2aXR5KSAvXHJcbiAgICAgIGFpclJlc2lzdGFuY2U7XHJcblxyXG4gICAgZGlyZWN0aW9uLnggPVxyXG4gICAgICBDdWJpc21NYXRoLmNvcyhyYWRpYW4pICogZGlyZWN0aW9uLnggLVxyXG4gICAgICBkaXJlY3Rpb24ueSAqIEN1YmlzbU1hdGguc2luKHJhZGlhbik7XHJcbiAgICBkaXJlY3Rpb24ueSA9XHJcbiAgICAgIEN1YmlzbU1hdGguc2luKHJhZGlhbikgKiBkaXJlY3Rpb24ueCArXHJcbiAgICAgIGRpcmVjdGlvbi55ICogQ3ViaXNtTWF0aC5jb3MocmFkaWFuKTtcclxuXHJcbiAgICBzdHJhbmRbaV0ucG9zaXRpb24gPSBzdHJhbmRbaSAtIDFdLnBvc2l0aW9uLmFkZChkaXJlY3Rpb24pO1xyXG5cclxuICAgIHZlbG9jaXR5ID0gc3RyYW5kW2ldLnZlbG9jaXR5Lm11bHRpcGx5QnlTY2FsZXIoZGVsYXkpO1xyXG4gICAgZm9yY2UgPSBzdHJhbmRbaV0uZm9yY2UubXVsdGlwbHlCeVNjYWxlcihkZWxheSkubXVsdGlwbHlCeVNjYWxlcihkZWxheSk7XHJcblxyXG4gICAgc3RyYW5kW2ldLnBvc2l0aW9uID0gc3RyYW5kW2ldLnBvc2l0aW9uLmFkZCh2ZWxvY2l0eSkuYWRkKGZvcmNlKTtcclxuXHJcbiAgICBuZXdEaXJlY3Rpb24gPSBzdHJhbmRbaV0ucG9zaXRpb24uc3Vic3RyYWN0KHN0cmFuZFtpIC0gMV0ucG9zaXRpb24pO1xyXG4gICAgbmV3RGlyZWN0aW9uLm5vcm1hbGl6ZSgpO1xyXG5cclxuICAgIHN0cmFuZFtpXS5wb3NpdGlvbiA9IHN0cmFuZFtpIC0gMV0ucG9zaXRpb24uYWRkKFxyXG4gICAgICBuZXdEaXJlY3Rpb24ubXVsdGlwbHlCeVNjYWxlcihzdHJhbmRbaV0ucmFkaXVzKVxyXG4gICAgKTtcclxuXHJcbiAgICBpZiAoQ3ViaXNtTWF0aC5hYnMoc3RyYW5kW2ldLnBvc2l0aW9uLngpIDwgdGhyZXNob2xkVmFsdWUpIHtcclxuICAgICAgc3RyYW5kW2ldLnBvc2l0aW9uLnggPSAwLjA7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGRlbGF5ICE9IDAuMCkge1xyXG4gICAgICBzdHJhbmRbaV0udmVsb2NpdHkgPSBzdHJhbmRbaV0ucG9zaXRpb24uc3Vic3RyYWN0KHN0cmFuZFtpXS5sYXN0UG9zaXRpb24pO1xyXG4gICAgICBzdHJhbmRbaV0udmVsb2NpdHkgPSBzdHJhbmRbaV0udmVsb2NpdHkuZGl2aXNpb25CeVNjYWxhcihkZWxheSk7XHJcbiAgICAgIHN0cmFuZFtpXS52ZWxvY2l0eSA9IHN0cmFuZFtpXS52ZWxvY2l0eS5tdWx0aXBseUJ5U2NhbGVyKFxyXG4gICAgICAgIHN0cmFuZFtpXS5tb2JpbGl0eVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHN0cmFuZFtpXS5mb3JjZSA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcclxuICAgIHN0cmFuZFtpXS5sYXN0R3Jhdml0eSA9IG5ldyBDdWJpc21WZWN0b3IyKFxyXG4gICAgICBjdXJyZW50R3Jhdml0eS54LFxyXG4gICAgICBjdXJyZW50R3Jhdml0eS55XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFVwZGF0ZXMgb3V0cHV0IHBhcmFtZXRlciB2YWx1ZS5cclxuICogQHBhcmFtIHBhcmFtZXRlclZhbHVlICAgICAgICAgICAgVGFyZ2V0IHBhcmFtZXRlciB2YWx1ZS5cclxuICogQHBhcmFtIHBhcmFtZXRlclZhbHVlTWluaW11bSAgICAgTWluaW11bSBvZiBwYXJhbWV0ZXIgdmFsdWUuXHJcbiAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZU1heGltdW0gICAgIE1heGltdW0gb2YgcGFyYW1ldGVyIHZhbHVlLlxyXG4gKiBAcGFyYW0gdHJhbnNsYXRpb24gICAgICAgICAgICAgICBUcmFuc2xhdGlvbiB2YWx1ZS5cclxuICovXHJcbmZ1bmN0aW9uIHVwZGF0ZU91dHB1dFBhcmFtZXRlclZhbHVlKFxyXG4gIHBhcmFtZXRlclZhbHVlOiBGbG9hdDMyQXJyYXksXHJcbiAgcGFyYW1ldGVyVmFsdWVNaW5pbXVtOiBudW1iZXIsXHJcbiAgcGFyYW1ldGVyVmFsdWVNYXhpbXVtOiBudW1iZXIsXHJcbiAgdHJhbnNsYXRpb246IG51bWJlcixcclxuICBvdXRwdXQ6IEN1YmlzbVBoeXNpY3NPdXRwdXRcclxuKTogdm9pZCB7XHJcbiAgbGV0IG91dHB1dFNjYWxlOiBudW1iZXI7XHJcbiAgbGV0IHZhbHVlOiBudW1iZXI7XHJcbiAgbGV0IHdlaWdodDogbnVtYmVyO1xyXG5cclxuICBvdXRwdXRTY2FsZSA9IG91dHB1dC5nZXRTY2FsZShvdXRwdXQudHJhbnNsYXRpb25TY2FsZSwgb3V0cHV0LmFuZ2xlU2NhbGUpO1xyXG5cclxuICB2YWx1ZSA9IHRyYW5zbGF0aW9uICogb3V0cHV0U2NhbGU7XHJcblxyXG4gIGlmICh2YWx1ZSA8IHBhcmFtZXRlclZhbHVlTWluaW11bSkge1xyXG4gICAgaWYgKHZhbHVlIDwgb3V0cHV0LnZhbHVlQmVsb3dNaW5pbXVtKSB7XHJcbiAgICAgIG91dHB1dC52YWx1ZUJlbG93TWluaW11bSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHZhbHVlID0gcGFyYW1ldGVyVmFsdWVNaW5pbXVtO1xyXG4gIH0gZWxzZSBpZiAodmFsdWUgPiBwYXJhbWV0ZXJWYWx1ZU1heGltdW0pIHtcclxuICAgIGlmICh2YWx1ZSA+IG91dHB1dC52YWx1ZUV4Y2VlZGVkTWF4aW11bSkge1xyXG4gICAgICBvdXRwdXQudmFsdWVFeGNlZWRlZE1heGltdW0gPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICB2YWx1ZSA9IHBhcmFtZXRlclZhbHVlTWF4aW11bTtcclxuICB9XHJcblxyXG4gIHdlaWdodCA9IG91dHB1dC53ZWlnaHQgLyBNYXhpbXVtV2VpZ2h0O1xyXG5cclxuICBpZiAod2VpZ2h0ID49IDEuMCkge1xyXG4gICAgcGFyYW1ldGVyVmFsdWVbMF0gPSB2YWx1ZTtcclxuICB9IGVsc2Uge1xyXG4gICAgdmFsdWUgPSBwYXJhbWV0ZXJWYWx1ZVswXSAqICgxLjAgLSB3ZWlnaHQpICsgdmFsdWUgKiB3ZWlnaHQ7XHJcbiAgICBwYXJhbWV0ZXJWYWx1ZVswXSA9IHZhbHVlO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gbm9ybWFsaXplUGFyYW1ldGVyVmFsdWUoXHJcbiAgdmFsdWU6IG51bWJlcixcclxuICBwYXJhbWV0ZXJNaW5pbXVtOiBudW1iZXIsXHJcbiAgcGFyYW1ldGVyTWF4aW11bTogbnVtYmVyLFxyXG4gIHBhcmFtZXRlckRlZmF1bHQ6IG51bWJlcixcclxuICBub3JtYWxpemVkTWluaW11bTogbnVtYmVyLFxyXG4gIG5vcm1hbGl6ZWRNYXhpbXVtOiBudW1iZXIsXHJcbiAgbm9ybWFsaXplZERlZmF1bHQ6IG51bWJlcixcclxuICBpc0ludmVydGVkOiBib29sZWFuXHJcbikge1xyXG4gIGxldCByZXN1bHQgPSAwLjA7XHJcblxyXG4gIGNvbnN0IG1heFZhbHVlOiBudW1iZXIgPSBDdWJpc21NYXRoLm1heChwYXJhbWV0ZXJNYXhpbXVtLCBwYXJhbWV0ZXJNaW5pbXVtKTtcclxuXHJcbiAgaWYgKG1heFZhbHVlIDwgdmFsdWUpIHtcclxuICAgIHZhbHVlID0gbWF4VmFsdWU7XHJcbiAgfVxyXG5cclxuICBjb25zdCBtaW5WYWx1ZTogbnVtYmVyID0gQ3ViaXNtTWF0aC5taW4ocGFyYW1ldGVyTWF4aW11bSwgcGFyYW1ldGVyTWluaW11bSk7XHJcblxyXG4gIGlmIChtaW5WYWx1ZSA+IHZhbHVlKSB7XHJcbiAgICB2YWx1ZSA9IG1pblZhbHVlO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgbWluTm9ybVZhbHVlOiBudW1iZXIgPSBDdWJpc21NYXRoLm1pbihcclxuICAgIG5vcm1hbGl6ZWRNaW5pbXVtLFxyXG4gICAgbm9ybWFsaXplZE1heGltdW1cclxuICApO1xyXG4gIGNvbnN0IG1heE5vcm1WYWx1ZTogbnVtYmVyID0gQ3ViaXNtTWF0aC5tYXgoXHJcbiAgICBub3JtYWxpemVkTWluaW11bSxcclxuICAgIG5vcm1hbGl6ZWRNYXhpbXVtXHJcbiAgKTtcclxuICBjb25zdCBtaWRkbGVOb3JtVmFsdWU6IG51bWJlciA9IG5vcm1hbGl6ZWREZWZhdWx0O1xyXG5cclxuICBjb25zdCBtaWRkbGVWYWx1ZTogbnVtYmVyID0gZ2V0RGVmYXVsdFZhbHVlKG1pblZhbHVlLCBtYXhWYWx1ZSk7XHJcbiAgY29uc3QgcGFyYW1WYWx1ZTogbnVtYmVyID0gdmFsdWUgLSBtaWRkbGVWYWx1ZTtcclxuXHJcbiAgc3dpdGNoIChzaWduKHBhcmFtVmFsdWUpKSB7XHJcbiAgICBjYXNlIDE6IHtcclxuICAgICAgY29uc3Qgbkxlbmd0aDogbnVtYmVyID0gbWF4Tm9ybVZhbHVlIC0gbWlkZGxlTm9ybVZhbHVlO1xyXG4gICAgICBjb25zdCBwTGVuZ3RoOiBudW1iZXIgPSBtYXhWYWx1ZSAtIG1pZGRsZVZhbHVlO1xyXG5cclxuICAgICAgaWYgKHBMZW5ndGggIT0gMC4wKSB7XHJcbiAgICAgICAgcmVzdWx0ID0gcGFyYW1WYWx1ZSAqIChuTGVuZ3RoIC8gcExlbmd0aCk7XHJcbiAgICAgICAgcmVzdWx0ICs9IG1pZGRsZU5vcm1WYWx1ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICBjYXNlIC0xOiB7XHJcbiAgICAgIGNvbnN0IG5MZW5ndGg6IG51bWJlciA9IG1pbk5vcm1WYWx1ZSAtIG1pZGRsZU5vcm1WYWx1ZTtcclxuICAgICAgY29uc3QgcExlbmd0aDogbnVtYmVyID0gbWluVmFsdWUgLSBtaWRkbGVWYWx1ZTtcclxuXHJcbiAgICAgIGlmIChwTGVuZ3RoICE9IDAuMCkge1xyXG4gICAgICAgIHJlc3VsdCA9IHBhcmFtVmFsdWUgKiAobkxlbmd0aCAvIHBMZW5ndGgpO1xyXG4gICAgICAgIHJlc3VsdCArPSBtaWRkbGVOb3JtVmFsdWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgY2FzZSAwOiB7XHJcbiAgICAgIHJlc3VsdCA9IG1pZGRsZU5vcm1WYWx1ZTtcclxuXHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgZGVmYXVsdDoge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBpc0ludmVydGVkID8gcmVzdWx0IDogcmVzdWx0ICogLTEuMDtcclxufVxyXG5cclxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXHJcbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21waHlzaWNzJztcclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xyXG4gIGV4cG9ydCBjb25zdCBDdWJpc21QaHlzaWNzID0gJC5DdWJpc21QaHlzaWNzO1xyXG4gIGV4cG9ydCB0eXBlIEN1YmlzbVBoeXNpY3MgPSAkLkN1YmlzbVBoeXNpY3M7XHJcbiAgZXhwb3J0IGNvbnN0IE9wdGlvbnMgPSAkLk9wdGlvbnM7XHJcbiAgZXhwb3J0IHR5cGUgT3B0aW9ucyA9ICQuT3B0aW9ucztcclxufVxyXG4iLCIvKipcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xyXG5pbXBvcnQgeyBDdWJpc21WZWN0b3IyIH0gZnJvbSAnLi4vbWF0aC9jdWJpc212ZWN0b3IyJztcclxuaW1wb3J0IHsgY3NtVmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xyXG5cclxuLyoqXHJcbiAqIOeJqeeQhua8lOeul+OBrumBqeeUqOWFiOOBrueorumhnlxyXG4gKi9cclxuZXhwb3J0IGVudW0gQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGUge1xyXG4gIEN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlX1BhcmFtZXRlciAvLyDjg5Hjg6njg6Hjg7zjgr/jgavlr77jgZfjgabpgannlKhcclxufVxyXG5cclxuLyoqXHJcbiAqIOeJqeeQhua8lOeul+OBruWFpeWKm+OBrueorumhnlxyXG4gKi9cclxuZXhwb3J0IGVudW0gQ3ViaXNtUGh5c2ljc1NvdXJjZSB7XHJcbiAgQ3ViaXNtUGh5c2ljc1NvdXJjZV9YLCAvLyBY6Lu444Gu5L2N572u44GL44KJXHJcbiAgQ3ViaXNtUGh5c2ljc1NvdXJjZV9ZLCAvLyBZ6Lu444Gu5L2N572u44GL44KJXHJcbiAgQ3ViaXNtUGh5c2ljc1NvdXJjZV9BbmdsZSAvLyDop5LluqbjgYvjgolcclxufVxyXG5cclxuLyoqXHJcbiAqIEBicmllZiDniannkIbmvJTnrpfjgafkvb/nlKjjgZnjgovlpJbpg6jjga7liptcclxuICpcclxuICog54mp55CG5ryU566X44Gn5L2/55So44GZ44KL5aSW6YOo44Gu5Yqb44CCXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUGh5c2ljc0pzb25FZmZlY3RpdmVGb3JjZXMge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5ncmF2aXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XHJcbiAgICB0aGlzLndpbmQgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcclxuICB9XHJcbiAgZ3Jhdml0eTogQ3ViaXNtVmVjdG9yMjsgLy8g6YeN5YqbXHJcbiAgd2luZDogQ3ViaXNtVmVjdG9yMjsgLy8g6aKoXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDniannkIbmvJTnrpfjga7jg5Hjg6njg6Hjg7zjgr/mg4XloLFcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDdWJpc21QaHlzaWNzUGFyYW1ldGVyIHtcclxuICBpZDogQ3ViaXNtSWRIYW5kbGU7IC8vIOODkeODqeODoeODvOOCv1xyXG4gIHRhcmdldFR5cGU6IEN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlOyAvLyDpgannlKjlhYjjga7nqK7poZ5cclxufVxyXG5cclxuLyoqXHJcbiAqIOeJqeeQhua8lOeul+OBruato+imj+WMluaDheWgsVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uIHtcclxuICBtaW5pbXVtOiBudW1iZXI7IC8vIOacgOWkp+WApFxyXG4gIG1heGltdW06IG51bWJlcjsgLy8g5pyA5bCP5YCkXHJcbiAgZGVmYWx1dDogbnVtYmVyOyAvLyDjg4fjg5Xjgqnjg6vjg4jlgKRcclxufVxyXG5cclxuLyoqXHJcbiAqIOeJqeeQhua8lOeul+OBrua8lOeul+WnlOS9v+eUqOOBmeOCi+eJqeeQhueCueOBruaDheWgsVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NQYXJ0aWNsZSB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmluaXRpYWxQb3NpdGlvbiA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xyXG4gICAgdGhpcy5wb3NpdGlvbiA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xyXG4gICAgdGhpcy5sYXN0UG9zaXRpb24gPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcclxuICAgIHRoaXMubGFzdEdyYXZpdHkgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcclxuICAgIHRoaXMuZm9yY2UgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcclxuICAgIHRoaXMudmVsb2NpdHkgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcclxuICB9XHJcblxyXG4gIGluaXRpYWxQb3NpdGlvbjogQ3ViaXNtVmVjdG9yMjsgLy8g5Yid5pyf5L2N572uXHJcbiAgbW9iaWxpdHk6IG51bWJlcjsgLy8g5YuV44GN44KE44GZ44GVXHJcbiAgZGVsYXk6IG51bWJlcjsgLy8g6YGF44KMXHJcbiAgYWNjZWxlcmF0aW9uOiBudW1iZXI7IC8vIOWKoOmAn+W6plxyXG4gIHJhZGl1czogbnVtYmVyOyAvLyDot53pm6JcclxuICBwb3NpdGlvbjogQ3ViaXNtVmVjdG9yMjsgLy8g54++5Zyo44Gu5L2N572uXHJcbiAgbGFzdFBvc2l0aW9uOiBDdWJpc21WZWN0b3IyOyAvLyDmnIDlvozjga7kvY3nva5cclxuICBsYXN0R3Jhdml0eTogQ3ViaXNtVmVjdG9yMjsgLy8g5pyA5b6M44Gu6YeN5YqbXHJcbiAgZm9yY2U6IEN1YmlzbVZlY3RvcjI7IC8vIOePvuWcqOOBi+OBi+OBo+OBpuOBhOOCi+WKm1xyXG4gIHZlbG9jaXR5OiBDdWJpc21WZWN0b3IyOyAvLyDnj77lnKjjga7pgJ/luqZcclxufVxyXG5cclxuLyoqXHJcbiAqIOeJqeeQhua8lOeul+OBrueJqeeQhueCueOBrueuoeeQhlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NTdWJSaWcge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5ub3JtYWxpemF0aW9uUG9zaXRpb24gPSBuZXcgQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24oKTtcclxuICAgIHRoaXMubm9ybWFsaXphdGlvbkFuZ2xlID0gbmV3IEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uKCk7XHJcbiAgfVxyXG4gIGlucHV0Q291bnQ6IG51bWJlcjsgLy8g5YWl5Yqb44Gu5YCL5pWwXHJcbiAgb3V0cHV0Q291bnQ6IG51bWJlcjsgLy8g5Ye65Yqb44Gu5YCL5pWwXHJcbiAgcGFydGljbGVDb3VudDogbnVtYmVyOyAvLyDniannkIbngrnjga7lgIvmlbBcclxuICBiYXNlSW5wdXRJbmRleDogbnVtYmVyOyAvLyDlhaXlipvjga7mnIDliJ3jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICBiYXNlT3V0cHV0SW5kZXg6IG51bWJlcjsgLy8g5Ye65Yqb44Gu5pyA5Yid44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgYmFzZVBhcnRpY2xlSW5kZXg6IG51bWJlcjsgLy8g54mp55CG54K544Gu5pyA5Yid44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgbm9ybWFsaXphdGlvblBvc2l0aW9uOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbjsgLy8g5q2j6KaP5YyW44GV44KM44Gf5L2N572uXHJcbiAgbm9ybWFsaXphdGlvbkFuZ2xlOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbjsgLy8g5q2j6KaP5YyW44GV44KM44Gf6KeS5bqmXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDmraPopo/ljJbjgZXjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7lj5blvpfplqLmlbDjga7lrqPoqIBcclxuICogQHBhcmFtIHRhcmdldFRyYW5zbGF0aW9uICAgICAvLyDmvJTnrpfntZDmnpzjga7np7vli5XlgKRcclxuICogQHBhcmFtIHRhcmdldEFuZ2xlICAgICAgICAgICAvLyDmvJTnrpfntZDmnpzjga7op5LluqZcclxuICogQHBhcmFtIHZhbHVlICAgICAgICAgICAgICAgICAvLyDjg5Hjg6njg6Hjg7zjgr/jga7lgKRcclxuICogQHBhcmFtIHBhcmFtZXRlck1pbmltdW5WYWx1ZSAvLyDjg5Hjg6njg6Hjg7zjgr/jga7mnIDlsI/lgKRcclxuICogQHBhcmFtIHBhcmFtZXRlck1heGltdW1WYWx1ZSAvLyDjg5Hjg6njg6Hjg7zjgr/jga7mnIDlpKflgKRcclxuICogQHBhcmFtIHBhcmFtZXRlckRlZmF1bHRWYWx1ZSAvLyDjg5Hjg6njg6Hjg7zjgr/jga7jg4fjg5Xjgqnjg6vjg4jlgKRcclxuICogQHBhcmFtIG5vcm1hbGl6YXRpb25Qb3NpdGlvbiAvLyDmraPopo/ljJbjgZXjgozjgZ/kvY3nva5cclxuICogQHBhcmFtIG5vcm1hbGl6YXRpb25BbmdsZSAgICAvLyDmraPopo/ljJbjgZXjgozjgZ/op5LluqZcclxuICogQHBhcmFtIGlzSW52ZXJ0ZWQgICAgICAgICAgICAvLyDlgKTjgYzlj43ou6LjgZXjgozjgabjgYTjgovjgYvvvJ9cclxuICogQHBhcmFtIHdlaWdodCAgICAgICAgICAgICAgICAvLyDph43jgb9cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2Ugbm9ybWFsaXplZFBoeXNpY3NQYXJhbWV0ZXJWYWx1ZUdldHRlciB7XHJcbiAgKFxyXG4gICAgdGFyZ2V0VHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIsXHJcbiAgICB0YXJnZXRBbmdsZTogeyBhbmdsZTogbnVtYmVyIH0sXHJcbiAgICB2YWx1ZTogbnVtYmVyLFxyXG4gICAgcGFyYW1ldGVyTWluaW11blZhbHVlOiBudW1iZXIsXHJcbiAgICBwYXJhbWV0ZXJNYXhpbXVtVmFsdWU6IG51bWJlcixcclxuICAgIHBhcmFtZXRlckRlZmF1bHRWYWx1ZTogbnVtYmVyLFxyXG4gICAgbm9ybWFsaXphdGlvblBvc2l0aW9uOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbixcclxuICAgIG5vcm1hbGl6YXRpb25BbmdsZTogQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24sXHJcbiAgICBpc0ludmVydGVkOiBib29sZWFuLFxyXG4gICAgd2VpZ2h0OiBudW1iZXJcclxuICApOiB2b2lkO1xyXG59XHJcblxyXG4vKipcclxuICog54mp55CG5ryU566X44Gu5YCk44Gu5Y+W5b6X6Zai5pWw44Gu5a6j6KiAXHJcbiAqIEBwYXJhbSB0cmFuc2xhdGlvbiDnp7vli5XlgKRcclxuICogQHBhcmFtIHBhcnRpY2xlcyDniannkIbngrnjga7jg6rjgrnjg4hcclxuICogQHBhcmFtIGlzSW52ZXJ0ZWQg5YCk44GM5Y+N5pig44GV44KM44Gm44GE44KL44GLXHJcbiAqIEBwYXJhbSBwYXJlbnRHcmF2aXR5IOmHjeWKm1xyXG4gKiBAcmV0dXJuIOWApFxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBwaHlzaWNzVmFsdWVHZXR0ZXIge1xyXG4gIChcclxuICAgIHRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyLFxyXG4gICAgcGFydGljbGVzOiBDdWJpc21QaHlzaWNzUGFydGljbGVbXSxcclxuICAgIHBhcnRpY2xlSW5kZXg6IG51bWJlcixcclxuICAgIGlzSW52ZXJ0ZWQ6IGJvb2xlYW4sXHJcbiAgICBwYXJlbnRHcmF2aXR5OiBDdWJpc21WZWN0b3IyXHJcbiAgKTogbnVtYmVyO1xyXG59XHJcblxyXG4vKipcclxuICog54mp55CG5ryU566X44Gu44K544Kx44O844Or44Gu5Y+W5b6X6Zai5pWw44Gu5a6j6KiAXHJcbiAqIEBwYXJhbSB0cmFuc2xhdGlvblNjYWxlIOenu+WLleWApOOBruOCueOCseODvOODq1xyXG4gKiBAcGFyYW0gYW5nbGVTY2FsZSAgICDop5Lluqbjga7jgrnjgrHjg7zjg6tcclxuICogQHJldHVybiDjgrnjgrHjg7zjg6vlgKRcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgcGh5c2ljc1NjYWxlR2V0dGVyIHtcclxuICAodHJhbnNsYXRpb25TY2FsZTogQ3ViaXNtVmVjdG9yMiwgYW5nbGVTY2FsZTogbnVtYmVyKTogbnVtYmVyO1xyXG59XHJcblxyXG4vKipcclxuICog54mp55CG5ryU566X44Gu5YWl5Yqb5oOF5aCxXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ3ViaXNtUGh5c2ljc0lucHV0IHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuc291cmNlID0gbmV3IEN1YmlzbVBoeXNpY3NQYXJhbWV0ZXIoKTtcclxuICB9XHJcbiAgc291cmNlOiBDdWJpc21QaHlzaWNzUGFyYW1ldGVyOyAvLyDlhaXlipvlhYPjga7jg5Hjg6njg6Hjg7zjgr9cclxuICBzb3VyY2VQYXJhbWV0ZXJJbmRleDogbnVtYmVyOyAvLyDlhaXlipvlhYPjga7jg5Hjg6njg6Hjg7zjgr/jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICB3ZWlnaHQ6IG51bWJlcjsgLy8g6YeN44G/XHJcbiAgdHlwZTogbnVtYmVyOyAvLyDlhaXlipvjga7nqK7poZ5cclxuICByZWZsZWN0OiBib29sZWFuOyAvLyDlgKTjgYzlj43ou6LjgZXjgozjgabjgYTjgovjgYvjganjgYbjgYtcclxuICBnZXROb3JtYWxpemVkUGFyYW1ldGVyVmFsdWU6IG5vcm1hbGl6ZWRQaHlzaWNzUGFyYW1ldGVyVmFsdWVHZXR0ZXI7IC8vIOato+imj+WMluOBleOCjOOBn+ODkeODqeODoeODvOOCv+WApOOBruWPluW+l+mWouaVsFxyXG59XHJcblxyXG4vKipcclxuICogQGJyaWVmIOeJqeeQhua8lOeul+OBruWHuuWKm+aDheWgsVxyXG4gKlxyXG4gKiDniannkIbmvJTnrpfjga7lh7rlipvmg4XloLHjgIJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDdWJpc21QaHlzaWNzT3V0cHV0IHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuZGVzdGluYXRpb24gPSBuZXcgQ3ViaXNtUGh5c2ljc1BhcmFtZXRlcigpO1xyXG4gICAgdGhpcy50cmFuc2xhdGlvblNjYWxlID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XHJcbiAgfVxyXG5cclxuICBkZXN0aW5hdGlvbjogQ3ViaXNtUGh5c2ljc1BhcmFtZXRlcjsgLy8g5Ye65Yqb5YWI44Gu44OR44Op44Oh44O844K/XHJcbiAgZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleDogbnVtYmVyOyAvLyDlh7rlipvlhYjjga7jg5Hjg6njg6Hjg7zjgr/jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICB2ZXJ0ZXhJbmRleDogbnVtYmVyOyAvLyDmjK/jgorlrZDjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICB0cmFuc2xhdGlvblNjYWxlOiBDdWJpc21WZWN0b3IyOyAvLyDnp7vli5XlgKTjga7jgrnjgrHjg7zjg6tcclxuICBhbmdsZVNjYWxlOiBudW1iZXI7IC8vIOinkuW6puOBruOCueOCseODvOODq1xyXG4gIHdlaWdodDogbnVtYmVyOyAvLyDph43jgb9cclxuICB0eXBlOiBDdWJpc21QaHlzaWNzU291cmNlOyAvLyDlh7rlipvjga7nqK7poZ5cclxuICByZWZsZWN0OiBib29sZWFuOyAvLyDlgKTjgYzlj43ou6LjgZXjgozjgabjgYTjgovjgYvjganjgYbjgYtcclxuICB2YWx1ZUJlbG93TWluaW11bTogbnVtYmVyOyAvLyDmnIDlsI/lgKTjgpLkuIvlm57jgaPjgZ/mmYLjga7lgKRcclxuICB2YWx1ZUV4Y2VlZGVkTWF4aW11bTogbnVtYmVyOyAvLyDmnIDlpKflgKTjgpLjgZPjgYjjgZ/mmYLjga7lgKRcclxuICBnZXRWYWx1ZTogcGh5c2ljc1ZhbHVlR2V0dGVyOyAvLyDniannkIbmvJTnrpfjga7lgKTjga7lj5blvpfplqLmlbBcclxuICBnZXRTY2FsZTogcGh5c2ljc1NjYWxlR2V0dGVyOyAvLyDniannkIbmvJTnrpfjga7jgrnjgrHjg7zjg6vlgKTjga7lj5blvpfplqLmlbBcclxufVxyXG5cclxuLyoqXHJcbiAqIEBicmllZiDniannkIbmvJTnrpfjga7jg4fjg7zjgr9cclxuICpcclxuICog54mp55CG5ryU566X44Gu44OH44O844K/44CCXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ3ViaXNtUGh5c2ljc1JpZyB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnNldHRpbmdzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21QaHlzaWNzU3ViUmlnPigpO1xyXG4gICAgdGhpcy5pbnB1dHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NJbnB1dD4oKTtcclxuICAgIHRoaXMub3V0cHV0cyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtUGh5c2ljc091dHB1dD4oKTtcclxuICAgIHRoaXMucGFydGljbGVzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21QaHlzaWNzUGFydGljbGU+KCk7XHJcbiAgICB0aGlzLmdyYXZpdHkgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcclxuICAgIHRoaXMud2luZCA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xyXG4gIH1cclxuXHJcbiAgc3ViUmlnQ291bnQ6IG51bWJlcjsgLy8g54mp55CG5ryU566X44Gu54mp55CG54K544Gu5YCL5pWwXHJcbiAgc2V0dGluZ3M6IGNzbVZlY3RvcjxDdWJpc21QaHlzaWNzU3ViUmlnPjsgLy8g54mp55CG5ryU566X44Gu54mp55CG54K544Gu566h55CG44Gu44Oq44K544OIXHJcbiAgaW5wdXRzOiBjc21WZWN0b3I8Q3ViaXNtUGh5c2ljc0lucHV0PjsgLy8g54mp55CG5ryU566X44Gu5YWl5Yqb44Gu44Oq44K544OIXHJcbiAgb3V0cHV0czogY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NPdXRwdXQ+OyAvLyDniannkIbmvJTnrpfjga7lh7rlipvjga7jg6rjgrnjg4hcclxuICBwYXJ0aWNsZXM6IGNzbVZlY3RvcjxDdWJpc21QaHlzaWNzUGFydGljbGU+OyAvLyDniannkIbmvJTnrpfjga7niannkIbngrnjga7jg6rjgrnjg4hcclxuICBncmF2aXR5OiBDdWJpc21WZWN0b3IyOyAvLyDph43liptcclxuICB3aW5kOiBDdWJpc21WZWN0b3IyOyAvLyDpoqhcclxufVxyXG5cclxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXHJcbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21waHlzaWNzaW50ZXJuYWwnO1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVBoeXNpY3NJbnB1dCA9ICQuQ3ViaXNtUGh5c2ljc0lucHV0O1xyXG4gIGV4cG9ydCB0eXBlIEN1YmlzbVBoeXNpY3NJbnB1dCA9ICQuQ3ViaXNtUGh5c2ljc0lucHV0O1xyXG4gIGV4cG9ydCBjb25zdCBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbiA9ICQuQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb247XHJcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24gPSAkLkN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uO1xyXG4gIGV4cG9ydCBjb25zdCBDdWJpc21QaHlzaWNzT3V0cHV0ID0gJC5DdWJpc21QaHlzaWNzT3V0cHV0O1xyXG4gIGV4cG9ydCB0eXBlIEN1YmlzbVBoeXNpY3NPdXRwdXQgPSAkLkN1YmlzbVBoeXNpY3NPdXRwdXQ7XHJcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVBoeXNpY3NQYXJhbWV0ZXIgPSAkLkN1YmlzbVBoeXNpY3NQYXJhbWV0ZXI7XHJcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtUGh5c2ljc1BhcmFtZXRlciA9ICQuQ3ViaXNtUGh5c2ljc1BhcmFtZXRlcjtcclxuICBleHBvcnQgY29uc3QgQ3ViaXNtUGh5c2ljc1BhcnRpY2xlID0gJC5DdWJpc21QaHlzaWNzUGFydGljbGU7XHJcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtUGh5c2ljc1BhcnRpY2xlID0gJC5DdWJpc21QaHlzaWNzUGFydGljbGU7XHJcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVBoeXNpY3NSaWcgPSAkLkN1YmlzbVBoeXNpY3NSaWc7XHJcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtUGh5c2ljc1JpZyA9ICQuQ3ViaXNtUGh5c2ljc1JpZztcclxuICBleHBvcnQgY29uc3QgQ3ViaXNtUGh5c2ljc1NvdXJjZSA9ICQuQ3ViaXNtUGh5c2ljc1NvdXJjZTtcclxuICBleHBvcnQgdHlwZSBDdWJpc21QaHlzaWNzU291cmNlID0gJC5DdWJpc21QaHlzaWNzU291cmNlO1xyXG4gIGV4cG9ydCBjb25zdCBDdWJpc21QaHlzaWNzU3ViUmlnID0gJC5DdWJpc21QaHlzaWNzU3ViUmlnO1xyXG4gIGV4cG9ydCB0eXBlIEN1YmlzbVBoeXNpY3NTdWJSaWcgPSAkLkN1YmlzbVBoeXNpY3NTdWJSaWc7XHJcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlID0gJC5DdWJpc21QaHlzaWNzVGFyZ2V0VHlwZTtcclxuICBleHBvcnQgdHlwZSBDdWJpc21QaHlzaWNzVGFyZ2V0VHlwZSA9ICQuQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGU7XHJcbiAgZXhwb3J0IGNvbnN0IFBoeXNpY3NKc29uRWZmZWN0aXZlRm9yY2VzID0gJC5QaHlzaWNzSnNvbkVmZmVjdGl2ZUZvcmNlcztcclxuICBleHBvcnQgdHlwZSBQaHlzaWNzSnNvbkVmZmVjdGl2ZUZvcmNlcyA9ICQuUGh5c2ljc0pzb25FZmZlY3RpdmVGb3JjZXM7XHJcbiAgZXhwb3J0IHR5cGUgbm9ybWFsaXplZFBoeXNpY3NQYXJhbWV0ZXJWYWx1ZUdldHRlciA9ICQubm9ybWFsaXplZFBoeXNpY3NQYXJhbWV0ZXJWYWx1ZUdldHRlcjtcclxuICBleHBvcnQgdHlwZSBwaHlzaWNzU2NhbGVHZXR0ZXIgPSAkLnBoeXNpY3NTY2FsZUdldHRlcjtcclxuICBleHBvcnQgdHlwZSBwaHlzaWNzVmFsdWVHZXR0ZXIgPSAkLnBoeXNpY3NWYWx1ZUdldHRlcjtcclxufVxyXG4iLCIvKipcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xyXG5pbXBvcnQgeyBDdWJpc21GcmFtZXdvcmsgfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xyXG5pbXBvcnQgeyBDdWJpc21WZWN0b3IyIH0gZnJvbSAnLi4vbWF0aC9jdWJpc212ZWN0b3IyJztcclxuaW1wb3J0IHsgQ3ViaXNtSnNvbiB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWpzb24nO1xyXG5cclxuLy8gSlNPTiBrZXlzXHJcbmNvbnN0IFBvc2l0aW9uID0gJ1Bvc2l0aW9uJztcclxuY29uc3QgWCA9ICdYJztcclxuY29uc3QgWSA9ICdZJztcclxuY29uc3QgQW5nbGUgPSAnQW5nbGUnO1xyXG5jb25zdCBUeXBlID0gJ1R5cGUnO1xyXG5jb25zdCBJZCA9ICdJZCc7XHJcblxyXG4vLyBNZXRhXHJcbmNvbnN0IE1ldGEgPSAnTWV0YSc7XHJcbmNvbnN0IEVmZmVjdGl2ZUZvcmNlcyA9ICdFZmZlY3RpdmVGb3JjZXMnO1xyXG5jb25zdCBUb3RhbElucHV0Q291bnQgPSAnVG90YWxJbnB1dENvdW50JztcclxuY29uc3QgVG90YWxPdXRwdXRDb3VudCA9ICdUb3RhbE91dHB1dENvdW50JztcclxuY29uc3QgUGh5c2ljc1NldHRpbmdDb3VudCA9ICdQaHlzaWNzU2V0dGluZ0NvdW50JztcclxuY29uc3QgR3Jhdml0eSA9ICdHcmF2aXR5JztcclxuY29uc3QgV2luZCA9ICdXaW5kJztcclxuY29uc3QgVmVydGV4Q291bnQgPSAnVmVydGV4Q291bnQnO1xyXG5cclxuLy8gUGh5c2ljc1NldHRpbmdzXHJcbmNvbnN0IFBoeXNpY3NTZXR0aW5ncyA9ICdQaHlzaWNzU2V0dGluZ3MnO1xyXG5jb25zdCBOb3JtYWxpemF0aW9uID0gJ05vcm1hbGl6YXRpb24nO1xyXG5jb25zdCBNaW5pbXVtID0gJ01pbmltdW0nO1xyXG5jb25zdCBNYXhpbXVtID0gJ01heGltdW0nO1xyXG5jb25zdCBEZWZhdWx0ID0gJ0RlZmF1bHQnO1xyXG5jb25zdCBSZWZsZWN0ID0gJ1JlZmxlY3QnO1xyXG5jb25zdCBXZWlnaHQgPSAnV2VpZ2h0JztcclxuXHJcbi8vIElucHV0XHJcbmNvbnN0IElucHV0ID0gJ0lucHV0JztcclxuY29uc3QgU291cmNlID0gJ1NvdXJjZSc7XHJcblxyXG4vLyBPdXRwdXRcclxuY29uc3QgT3V0cHV0ID0gJ091dHB1dCc7XHJcbmNvbnN0IFNjYWxlID0gJ1NjYWxlJztcclxuY29uc3QgVmVydGV4SW5kZXggPSAnVmVydGV4SW5kZXgnO1xyXG5jb25zdCBEZXN0aW5hdGlvbiA9ICdEZXN0aW5hdGlvbic7XHJcblxyXG4vLyBQYXJ0aWNsZVxyXG5jb25zdCBWZXJ0aWNlcyA9ICdWZXJ0aWNlcyc7XHJcbmNvbnN0IE1vYmlsaXR5ID0gJ01vYmlsaXR5JztcclxuY29uc3QgRGVsYXkgPSAnRGVsYXknO1xyXG5jb25zdCBSYWRpdXMgPSAnUmFkaXVzJztcclxuY29uc3QgQWNjZWxlcmF0aW9uID0gJ0FjY2VsZXJhdGlvbic7XHJcblxyXG4vKipcclxuICogcGh5c2ljczMuanNvbuOBruOCs+ODs+ODhuODiuOAglxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NKc29uIHtcclxuICAvKipcclxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgKiBAcGFyYW0gYnVmZmVyIHBoeXNpY3MzLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcclxuICAgKiBAcGFyYW0gc2l6ZSDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKSB7XHJcbiAgICB0aGlzLl9qc29uID0gQ3ViaXNtSnNvbi5jcmVhdGUoYnVmZmVyLCBzaXplKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xyXG4gICAgQ3ViaXNtSnNvbi5kZWxldGUodGhpcy5fanNvbik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDph43lipvjga7lj5blvpdcclxuICAgKiBAcmV0dXJuIOmHjeWKm1xyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRHcmF2aXR5KCk6IEN1YmlzbVZlY3RvcjIge1xyXG4gICAgY29uc3QgcmV0OiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XHJcbiAgICByZXQueCA9IHRoaXMuX2pzb25cclxuICAgICAgLmdldFJvb3QoKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhFZmZlY3RpdmVGb3JjZXMpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEdyYXZpdHkpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFgpXHJcbiAgICAgIC50b0Zsb2F0KCk7XHJcbiAgICByZXQueSA9IHRoaXMuX2pzb25cclxuICAgICAgLmdldFJvb3QoKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhFZmZlY3RpdmVGb3JjZXMpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEdyYXZpdHkpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFkpXHJcbiAgICAgIC50b0Zsb2F0KCk7XHJcbiAgICByZXR1cm4gcmV0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6aKo44Gu5Y+W5b6XXHJcbiAgICogQHJldHVybiDpoqhcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0V2luZCgpOiBDdWJpc21WZWN0b3IyIHtcclxuICAgIGNvbnN0IHJldDogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xyXG4gICAgcmV0LnggPSB0aGlzLl9qc29uXHJcbiAgICAgIC5nZXRSb290KClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRWZmZWN0aXZlRm9yY2VzKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhXaW5kKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhYKVxyXG4gICAgICAudG9GbG9hdCgpO1xyXG4gICAgcmV0LnkgPSB0aGlzLl9qc29uXHJcbiAgICAgIC5nZXRSb290KClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRWZmZWN0aXZlRm9yY2VzKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhXaW5kKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhZKVxyXG4gICAgICAudG9GbG9hdCgpO1xyXG4gICAgcmV0dXJuIHJldDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOeJqeeQhuW6l+OBrueuoeeQhuOBruWAi+aVsOOBruWPluW+l1xyXG4gICAqIEByZXR1cm4g54mp55CG5bqX44Gu566h55CG44Gu5YCL5pWwXHJcbiAgICovXHJcbiAgcHVibGljIGdldFN1YlJpZ0NvdW50KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fanNvblxyXG4gICAgICAuZ2V0Um9vdCgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5nQ291bnQpXHJcbiAgICAgIC50b0ludCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5YWl5Yqb44Gu57eP5ZCI6KiI44Gu5Y+W5b6XXHJcbiAgICogQHJldHVybiDlhaXlipvjga7nt4/lkIjoqIhcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0VG90YWxJbnB1dENvdW50KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fanNvblxyXG4gICAgICAuZ2V0Um9vdCgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFRvdGFsSW5wdXRDb3VudClcclxuICAgICAgLnRvSW50KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlh7rlipvjga7nt4/lkIjoqIjjga7lj5blvpdcclxuICAgKiBAcmV0dXJuIOWHuuWKm+OBrue3j+WQiOioiFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRUb3RhbE91dHB1dENvdW50KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fanNvblxyXG4gICAgICAuZ2V0Um9vdCgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFRvdGFsT3V0cHV0Q291bnQpXHJcbiAgICAgIC50b0ludCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog54mp55CG54K544Gu5YCL5pWw44Gu5Y+W5b6XXHJcbiAgICogQHJldHVybiDniannkIbngrnjga7lgIvmlbBcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0VmVydGV4Q291bnQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9qc29uXHJcbiAgICAgIC5nZXRSb290KClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmVydGV4Q291bnQpXHJcbiAgICAgIC50b0ludCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5q2j6KaP5YyW44GV44KM44Gf5L2N572u44Gu5pyA5bCP5YCk44Gu5Y+W5b6XXHJcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICogQHJldHVybiDmraPopo/ljJbjgZXjgozjgZ/kvY3nva7jga7mnIDlsI/lgKRcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uTWluaW11bVZhbHVlKFxyXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyXHJcbiAgKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9qc29uXHJcbiAgICAgIC5nZXRSb290KClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxyXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE5vcm1hbGl6YXRpb24pXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBvc2l0aW9uKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNaW5pbXVtKVxyXG4gICAgICAudG9GbG9hdCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5q2j6KaP5YyW44GV44KM44Gf5L2N572u44Gu5pyA5aSn5YCk44Gu5Y+W5b6XXHJcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICogQHJldHVybiDmraPopo/ljJbjgZXjgozjgZ/kvY3nva7jga7mnIDlpKflgKRcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uTWF4aW11bVZhbHVlKFxyXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyXHJcbiAgKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9qc29uXHJcbiAgICAgIC5nZXRSb290KClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxyXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE5vcm1hbGl6YXRpb24pXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBvc2l0aW9uKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNYXhpbXVtKVxyXG4gICAgICAudG9GbG9hdCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5q2j6KaP5YyW44GV44KM44Gf5L2N572u44Gu44OH44OV44Kp44Or44OI5YCk44Gu5Y+W5b6XXHJcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICogQHJldHVybiDmraPopo/ljJbjgZXjgozjgZ/kvY3nva7jga7jg4fjg5Xjgqnjg6vjg4jlgKRcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uRGVmYXVsdFZhbHVlKFxyXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyXHJcbiAgKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9qc29uXHJcbiAgICAgIC5nZXRSb290KClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxyXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE5vcm1hbGl6YXRpb24pXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBvc2l0aW9uKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhEZWZhdWx0KVxyXG4gICAgICAudG9GbG9hdCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5q2j6KaP5YyW44GV44KM44Gf6KeS5bqm44Gu5pyA5bCP5YCk44Gu5Y+W5b6XXHJcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICogQHJldHVybiDmraPopo/ljJbjgZXjgozjgZ/op5Lluqbjga7mnIDlsI/lgKRcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Tm9ybWFsaXphdGlvbkFuZ2xlTWluaW11bVZhbHVlKFxyXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyXHJcbiAgKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9qc29uXHJcbiAgICAgIC5nZXRSb290KClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxyXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE5vcm1hbGl6YXRpb24pXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEFuZ2xlKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNaW5pbXVtKVxyXG4gICAgICAudG9GbG9hdCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5q2j6KaP5YyW44GV44KM44Gf6KeS5bqm44Gu5pyA5aSn5YCk44Gu5Y+W5b6XXHJcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXhcclxuICAgKiBAcmV0dXJuIOato+imj+WMluOBleOCjOOBn+inkuW6puOBruacgOWkp+WApFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXROb3JtYWxpemF0aW9uQW5nbGVNYXhpbXVtVmFsdWUoXHJcbiAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXJcclxuICApOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2pzb25cclxuICAgICAgLmdldFJvb3QoKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTm9ybWFsaXphdGlvbilcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQW5nbGUpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1heGltdW0pXHJcbiAgICAgIC50b0Zsb2F0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmraPopo/ljJbjgZXjgozjgZ/op5Lluqbjga7jg4fjg5Xjgqnjg6vjg4jlgKTjga7lj5blvpdcclxuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgKiBAcmV0dXJuIOato+imj+WMluOBleOCjOOBn+inkuW6puOBruODh+ODleOCqeODq+ODiOWApFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXROb3JtYWxpemF0aW9uQW5nbGVEZWZhdWx0VmFsdWUoXHJcbiAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXJcclxuICApOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2pzb25cclxuICAgICAgLmdldFJvb3QoKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTm9ybWFsaXphdGlvbilcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQW5nbGUpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKERlZmF1bHQpXHJcbiAgICAgIC50b0Zsb2F0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlhaXlipvjga7lgIvmlbDjga7lj5blvpdcclxuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgKiBAcmV0dXJuIOWFpeWKm+OBruWAi+aVsFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRJbnB1dENvdW50KHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fanNvblxyXG4gICAgICAuZ2V0Um9vdCgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcclxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJbnB1dClcclxuICAgICAgLmdldFZlY3RvcigpXHJcbiAgICAgIC5nZXRTaXplKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlhaXlipvjga7ph43jgb/jga7lj5blvpdcclxuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgKiBAcGFyYW0gaW5wdXRJbmRleCDlhaXlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgKiBAcmV0dXJuIOWFpeWKm+OBrumHjeOBv1xyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRJbnB1dFdlaWdodChcclxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcixcclxuICAgIGlucHV0SW5kZXg6IG51bWJlclxyXG4gICk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fanNvblxyXG4gICAgICAuZ2V0Um9vdCgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcclxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJbnB1dClcclxuICAgICAgLmdldFZhbHVlQnlJbmRleChpbnB1dEluZGV4KVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhXZWlnaHQpXHJcbiAgICAgIC50b0Zsb2F0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlhaXlipvjga7lj43ou6Ljga7lj5blvpdcclxuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgKiBAcGFyYW0gaW5wdXRJbmRleCDlhaXlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgKiBAcmV0dXJuIOWFpeWKm+OBruWPjei7olxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRJbnB1dFJlZmxlY3QoXHJcbiAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsXHJcbiAgICBpbnB1dEluZGV4OiBudW1iZXJcclxuICApOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9qc29uXHJcbiAgICAgIC5nZXRSb290KClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxyXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElucHV0KVxyXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGlucHV0SW5kZXgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFJlZmxlY3QpXHJcbiAgICAgIC50b0Jvb2xlYW4oKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWFpeWKm+OBrueorumhnuOBruWPluW+l1xyXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAqIEBwYXJhbSBpbnB1dEluZGV4IOWFpeWKm+OBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAqIEByZXR1cm4g5YWl5Yqb44Gu56iu6aGeXHJcbiAgICovXHJcbiAgcHVibGljIGdldElucHV0VHlwZShwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsIGlucHV0SW5kZXg6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fanNvblxyXG4gICAgICAuZ2V0Um9vdCgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcclxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJbnB1dClcclxuICAgICAgLmdldFZhbHVlQnlJbmRleChpbnB1dEluZGV4KVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhUeXBlKVxyXG4gICAgICAuZ2V0UmF3U3RyaW5nKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlhaXlipvlhYPjga5JROOBruWPluW+l1xyXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAqIEBwYXJhbSBpbnB1dEluZGV4IOWFpeWKm+OBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAqIEByZXR1cm4g5YWl5Yqb5YWD44GuSURcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0SW5wdXRTb3VyY2VJZChcclxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcixcclxuICAgIGlucHV0SW5kZXg6IG51bWJlclxyXG4gICk6IEN1YmlzbUlkSGFuZGxlIHtcclxuICAgIHJldHVybiBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXHJcbiAgICAgIHRoaXMuX2pzb25cclxuICAgICAgICAuZ2V0Um9vdCgpXHJcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxyXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcclxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJbnB1dClcclxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGlucHV0SW5kZXgpXHJcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoU291cmNlKVxyXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElkKVxyXG4gICAgICAgIC5nZXRSYXdTdHJpbmcoKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWHuuWKm+OBruWAi+aVsOOBruWPluW+l1xyXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAqIEByZXR1cm4g5Ye65Yqb44Gu5YCL5pWwXHJcbiAgICovXHJcbiAgcHVibGljIGdldE91dHB1dENvdW50KHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fanNvblxyXG4gICAgICAuZ2V0Um9vdCgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcclxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhPdXRwdXQpXHJcbiAgICAgIC5nZXRWZWN0b3IoKVxyXG4gICAgICAuZ2V0U2l6ZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Ye65Yqb44Gu54mp55CG54K544Gu44Kk44Oz44OH44OD44Kv44K544Gu5Y+W5b6XXHJcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICogQHBhcmFtIG91dHB1dEluZGV4IOWHuuWKm+OBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAqIEByZXR1cm4g5Ye65Yqb44Gu54mp55CG54K544Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICovXHJcbiAgcHVibGljIGdldE91dHB1dFZlcnRleEluZGV4KFxyXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxyXG4gICAgb3V0cHV0SW5kZXg6IG51bWJlclxyXG4gICk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fanNvblxyXG4gICAgICAuZ2V0Um9vdCgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcclxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhPdXRwdXQpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgob3V0cHV0SW5kZXgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFZlcnRleEluZGV4KVxyXG4gICAgICAudG9JbnQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWHuuWKm+OBruinkuW6puOBruOCueOCseODvOODq+OCkuWPluW+l+OBmeOCi1xyXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAqIEBwYXJhbSBvdXRwdXRJbmRleCDlh7rlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgKiBAcmV0dXJuIOWHuuWKm+OBruinkuW6puOBruOCueOCseODvOODq1xyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRPdXRwdXRBbmdsZVNjYWxlKFxyXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxyXG4gICAgb3V0cHV0SW5kZXg6IG51bWJlclxyXG4gICk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fanNvblxyXG4gICAgICAuZ2V0Um9vdCgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcclxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhPdXRwdXQpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgob3V0cHV0SW5kZXgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFNjYWxlKVxyXG4gICAgICAudG9GbG9hdCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Ye65Yqb44Gu6YeN44G/44Gu5Y+W5b6XXHJcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICogQHBhcmFtIG91dHB1dEluZGV4IOWHuuWKm+OBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAqIEByZXR1cm4g5Ye65Yqb44Gu6YeN44G/XHJcbiAgICovXHJcbiAgcHVibGljIGdldE91dHB1dFdlaWdodChcclxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcixcclxuICAgIG91dHB1dEluZGV4OiBudW1iZXJcclxuICApOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2pzb25cclxuICAgICAgLmdldFJvb3QoKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoT3V0cHV0KVxyXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KG91dHB1dEluZGV4KVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhXZWlnaHQpXHJcbiAgICAgIC50b0Zsb2F0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlh7rlipvlhYjjga5JROOBruWPluW+l1xyXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAqIEBwYXJhbSBvdXRwdXRJbmRleCDlh7rlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgKiBAcmV0dXJuIOWHuuWKm+WFiOOBrklEXHJcbiAgICovXHJcbiAgcHVibGljIGdldE91dHB1dERlc3RpbmF0aW9uSWQoXHJcbiAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsXHJcbiAgICBvdXRwdXRJbmRleDogbnVtYmVyXHJcbiAgKTogQ3ViaXNtSWRIYW5kbGUge1xyXG4gICAgcmV0dXJuIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcclxuICAgICAgdGhpcy5fanNvblxyXG4gICAgICAgIC5nZXRSb290KClcclxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXHJcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxyXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE91dHB1dClcclxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KG91dHB1dEluZGV4KVxyXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKERlc3RpbmF0aW9uKVxyXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElkKVxyXG4gICAgICAgIC5nZXRSYXdTdHJpbmcoKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWHuuWKm+OBrueorumhnuOBruWPluW+l1xyXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAqIEBwYXJhbSBvdXRwdXRJbmRleCDlh7rlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgKiBAcmV0dXJuIOWHuuWKm+OBrueorumhnlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRPdXRwdXRUeXBlKFxyXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxyXG4gICAgb3V0cHV0SW5kZXg6IG51bWJlclxyXG4gICk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fanNvblxyXG4gICAgICAuZ2V0Um9vdCgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcclxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhPdXRwdXQpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgob3V0cHV0SW5kZXgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFR5cGUpXHJcbiAgICAgIC5nZXRSYXdTdHJpbmcoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWHuuWKm+OBruWPjei7ouOBruWPluW+l1xyXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAqIEBwYXJhbSBvdXRwdXRJbmRleCDlh7rlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgKiBAcmV0dXJuIOWHuuWKm+OBruWPjei7olxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRPdXRwdXRSZWZsZWN0KFxyXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxyXG4gICAgb3V0cHV0SW5kZXg6IG51bWJlclxyXG4gICk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2pzb25cclxuICAgICAgLmdldFJvb3QoKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoT3V0cHV0KVxyXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KG91dHB1dEluZGV4KVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhSZWZsZWN0KVxyXG4gICAgICAudG9Cb29sZWFuKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDniannkIbngrnjga7lgIvmlbDjga7lj5blvpdcclxuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfnlLfoqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgKiBAcmV0dXJuIOeJqeeQhueCueOBruWAi+aVsFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRQYXJ0aWNsZUNvdW50KHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fanNvblxyXG4gICAgICAuZ2V0Um9vdCgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcclxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhWZXJ0aWNlcylcclxuICAgICAgLmdldFZlY3RvcigpXHJcbiAgICAgIC5nZXRTaXplKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDniannkIbngrnjga7li5XjgY3jgoTjgZnjgZXjga7lj5blvpdcclxuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgKiBAcGFyYW0gdmVydGV4SW5kZXgg54mp55CG54K544Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICogQHJldHVybiDniannkIbngrnjga7li5XjgY3jgoTjgZnjgZVcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0UGFydGljbGVNb2JpbGl0eShcclxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcixcclxuICAgIHZlcnRleEluZGV4OiBudW1iZXJcclxuICApOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2pzb25cclxuICAgICAgLmdldFJvb3QoKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmVydGljZXMpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgodmVydGV4SW5kZXgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1vYmlsaXR5KVxyXG4gICAgICAudG9GbG9hdCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog54mp55CG54K544Gu6YGF44KM44Gu5Y+W5b6XXHJcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICogQHBhcmFtIHZlcnRleEluZGV4IOeJqeeQhueCueOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAqIEByZXR1cm4g54mp55CG54K544Gu6YGF44KMXHJcbiAgICovXHJcbiAgcHVibGljIGdldFBhcnRpY2xlRGVsYXkoXHJcbiAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsXHJcbiAgICB2ZXJ0ZXhJbmRleDogbnVtYmVyXHJcbiAgKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9qc29uXHJcbiAgICAgIC5nZXRSb290KClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxyXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFZlcnRpY2VzKVxyXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHZlcnRleEluZGV4KVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhEZWxheSlcclxuICAgICAgLnRvRmxvYXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOeJqeeQhueCueOBruWKoOmAn+W6puOBruWPluW+l1xyXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumlxyXG4gICAqIEBwYXJhbSB2ZXJ0ZXhJbmRleCDniannkIbngrnjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgKiBAcmV0dXJuIOeJqeeQhueCueOBruWKoOmAn+W6plxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRQYXJ0aWNsZUFjY2VsZXJhdGlvbihcclxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcixcclxuICAgIHZlcnRleEluZGV4OiBudW1iZXJcclxuICApOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2pzb25cclxuICAgICAgLmdldFJvb3QoKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmVydGljZXMpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgodmVydGV4SW5kZXgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEFjY2VsZXJhdGlvbilcclxuICAgICAgLnRvRmxvYXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOeJqeeQhueCueOBrui3nembouOBruWPluW+l1xyXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAqIEBwYXJhbSB2ZXJ0ZXhJbmRleCDniannkIbngrnjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgKiBAcmV0dXJuIOeJqeeQhueCueOBrui3nembolxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRQYXJ0aWNsZVJhZGl1cyhcclxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcixcclxuICAgIHZlcnRleEluZGV4OiBudW1iZXJcclxuICApOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2pzb25cclxuICAgICAgLmdldFJvb3QoKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmVydGljZXMpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgodmVydGV4SW5kZXgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFJhZGl1cylcclxuICAgICAgLnRvRmxvYXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOeJqeeQhueCueOBruS9jee9ruOBruWPluW+l1xyXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAqIEBwYXJhbSB2ZXJ0ZXhJbmRlIOeJqeeQhueCueOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAqIEByZXR1cm4g54mp55CG54K544Gu5L2N572uXHJcbiAgICovXHJcbiAgcHVibGljIGdldFBhcnRpY2xlUG9zaXRpb24oXHJcbiAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsXHJcbiAgICB2ZXJ0ZXhJbmRleDogbnVtYmVyXHJcbiAgKTogQ3ViaXNtVmVjdG9yMiB7XHJcbiAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcclxuICAgIHJldC54ID0gdGhpcy5fanNvblxyXG4gICAgICAuZ2V0Um9vdCgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcclxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhWZXJ0aWNlcylcclxuICAgICAgLmdldFZhbHVlQnlJbmRleCh2ZXJ0ZXhJbmRleClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUG9zaXRpb24pXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFgpXHJcbiAgICAgIC50b0Zsb2F0KCk7XHJcbiAgICByZXQueSA9IHRoaXMuX2pzb25cclxuICAgICAgLmdldFJvb3QoKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcclxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmVydGljZXMpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgodmVydGV4SW5kZXgpXHJcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBvc2l0aW9uKVxyXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhZKVxyXG4gICAgICAudG9GbG9hdCgpO1xyXG4gICAgcmV0dXJuIHJldDtcclxuICB9XHJcblxyXG4gIF9qc29uOiBDdWJpc21Kc29uOyAvLyBwaHlzaWNzMy5qc29u44OH44O844K/XHJcbn1cclxuXHJcbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxyXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtcGh5c2ljc2pzb24nO1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVBoeXNpY3NKc29uID0gJC5DdWJpc21QaHlzaWNzSnNvbjtcclxuICBleHBvcnQgdHlwZSBDdWJpc21QaHlzaWNzSnNvbiA9ICQuQ3ViaXNtUGh5c2ljc0pzb247XHJcbn1cclxuIiwiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQgeyBDdWJpc21NYXRyaXg0NCB9IGZyb20gJy4uL21hdGgvY3ViaXNtbWF0cml4NDQnO1xyXG5pbXBvcnQgeyBDdWJpc21Nb2RlbCB9IGZyb20gJy4uL21vZGVsL2N1YmlzbW1vZGVsJztcclxuXHJcbi8qKlxyXG4gKiDjg6Ljg4fjg6vmj4/nlLvjgpLlh6bnkIbjgZnjgovjg6zjg7Pjg4Djg6lcclxuICpcclxuICog44K144OW44Kv44Op44K544Gr55Kw5aKD5L6d5a2Y44Gu5o+P55S75ZG95Luk44KS6KiY6L+w44GZ44KL44CCXHJcbiAqL1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ3ViaXNtUmVuZGVyZXIge1xyXG4gIC8qKlxyXG4gICAqIOODrOODs+ODgOODqeOBruOCpOODs+OCueOCv+ODs+OCueOCkueUn+aIkOOBl+OBpuWPluW+l+OBmeOCi1xyXG4gICAqXHJcbiAgICogQHJldHVybiDjg6zjg7Pjg4Djg6njga7jgqTjg7Pjgrnjgr/jg7PjgrlcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpOiBDdWJpc21SZW5kZXJlciB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODrOODs+ODgOODqeOBruOCpOODs+OCueOCv+ODs+OCueOCkuino+aUvuOBmeOCi1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZGVsZXRlKHJlbmRlcmVyOiBDdWJpc21SZW5kZXJlcik6IHZvaWQge1xyXG4gICAgcmVuZGVyZXIgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Os44Oz44OA44Op44Gu5Yid5pyf5YyW5Yem55CG44KS5a6f6KGM44GZ44KLXHJcbiAgICog5byV5pWw44Gr5rih44GX44Gf44Oi44OH44Or44GL44KJ44Os44Oz44OA44Op44Gu5Yid5pyf5YyW5Yem55CG44Gr5b+F6KaB44Gq5oOF5aCx44KS5Y+W44KK5Ye644GZ44GT44Go44GM44Gn44GN44KLXHJcbiAgICogQHBhcmFtIG1vZGVsIOODouODh+ODq+OBruOCpOODs+OCueOCv+ODs+OCuVxyXG4gICAqL1xyXG4gIHB1YmxpYyBpbml0aWFsaXplKG1vZGVsOiBDdWJpc21Nb2RlbCk6IHZvaWQge1xyXG4gICAgdGhpcy5fbW9kZWwgPSBtb2RlbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODh+ODq+OCkuaPj+eUu+OBmeOCi1xyXG4gICAqL1xyXG4gIHB1YmxpYyBkcmF3TW9kZWwoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5nZXRNb2RlbCgpID09IG51bGwpIHJldHVybjtcclxuXHJcbiAgICB0aGlzLmRvRHJhd01vZGVsKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNb2RlbC1WaWV3LVByb2plY3Rpb24g6KGM5YiX44KS44K744OD44OI44GZ44KLXHJcbiAgICog6YWN5YiX44Gv6KSH6KO944GV44KM44KL44Gu44Gn44CB5YWD44Gu6YWN5YiX44Gv5aSW44Gn56C05qOE44GX44Gm6Imv44GEXHJcbiAgICogQHBhcmFtIG1hdHJpeDQ0IE1vZGVsLVZpZXctUHJvamVjdGlvbiDooYzliJdcclxuICAgKi9cclxuICBwdWJsaWMgc2V0TXZwTWF0cml4KG1hdHJpeDQ0OiBDdWJpc21NYXRyaXg0NCk6IHZvaWQge1xyXG4gICAgdGhpcy5fbXZwTWF0cml4NHg0LnNldE1hdHJpeChtYXRyaXg0NC5nZXRBcnJheSgpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE1vZGVsLVZpZXctUHJvamVjdGlvbiDooYzliJfjgpLlj5blvpfjgZnjgotcclxuICAgKiBAcmV0dXJuIE1vZGVsLVZpZXctUHJvamVjdGlvbiDooYzliJdcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0TXZwTWF0cml4KCk6IEN1YmlzbU1hdHJpeDQ0IHtcclxuICAgIHJldHVybiB0aGlzLl9tdnBNYXRyaXg0eDQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6Ljg4fjg6vjga7oibLjgpLjgrvjg4Pjg4jjgZnjgotcclxuICAgKiDlkIToibIwLjB+MS4w44Gu6ZaT44Gn5oyH5a6a44GZ44KL77yIMS4w44GM5qiZ5rqW44Gu54q25oWL77yJXHJcbiAgICogQHBhcmFtIHJlZCDotaTjg4Hjg6Pjg7Pjg43jg6vjga7lgKRcclxuICAgKiBAcGFyYW0gZ3JlZW4g57eR44OB44Oj44Oz44ON44Or44Gu5YCkXHJcbiAgICogQHBhcmFtIGJsdWUg6Z2S44OB44Oj44Oz44ON44Or44Gu5YCkXHJcbiAgICogQHBhcmFtIGFscGhhIM6x44OB44Oj44Oz44ON44Or44Gu5YCkXHJcbiAgICovXHJcbiAgcHVibGljIHNldE1vZGVsQ29sb3IoXHJcbiAgICByZWQ6IG51bWJlcixcclxuICAgIGdyZWVuOiBudW1iZXIsXHJcbiAgICBibHVlOiBudW1iZXIsXHJcbiAgICBhbHBoYTogbnVtYmVyXHJcbiAgKTogdm9pZCB7XHJcbiAgICBpZiAocmVkIDwgMC4wKSB7XHJcbiAgICAgIHJlZCA9IDAuMDtcclxuICAgIH0gZWxzZSBpZiAocmVkID4gMS4wKSB7XHJcbiAgICAgIHJlZCA9IDEuMDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZ3JlZW4gPCAwLjApIHtcclxuICAgICAgZ3JlZW4gPSAwLjA7XHJcbiAgICB9IGVsc2UgaWYgKGdyZWVuID4gMS4wKSB7XHJcbiAgICAgIGdyZWVuID0gMS4wO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChibHVlIDwgMC4wKSB7XHJcbiAgICAgIGJsdWUgPSAwLjA7XHJcbiAgICB9IGVsc2UgaWYgKGJsdWUgPiAxLjApIHtcclxuICAgICAgYmx1ZSA9IDEuMDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYWxwaGEgPCAwLjApIHtcclxuICAgICAgYWxwaGEgPSAwLjA7XHJcbiAgICB9IGVsc2UgaWYgKGFscGhhID4gMS4wKSB7XHJcbiAgICAgIGFscGhhID0gMS4wO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX21vZGVsQ29sb3IuUiA9IHJlZDtcclxuICAgIHRoaXMuX21vZGVsQ29sb3IuRyA9IGdyZWVuO1xyXG4gICAgdGhpcy5fbW9kZWxDb2xvci5CID0gYmx1ZTtcclxuICAgIHRoaXMuX21vZGVsQ29sb3IuQSA9IGFscGhhO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44OH44Or44Gu6Imy44KS5Y+W5b6X44GZ44KLXHJcbiAgICog5ZCE6ImyMC4wfjEuMOOBrumWk+OBp+aMh+WumuOBmeOCiygxLjDjgYzmqJnmupbjga7nirbmhYspXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIFJHQkHjga7jgqvjg6njg7zmg4XloLFcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0TW9kZWxDb2xvcigpOiBDdWJpc21UZXh0dXJlQ29sb3Ige1xyXG4gICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5fbW9kZWxDb2xvcikpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5LmX566X5riI44G/zrHjga7mnInlirnjg7vnhKHlirnjgpLjgrvjg4Pjg4jjgZnjgotcclxuICAgKiDmnInlirnjgavjgZnjgovjgarjgol0cnVl44CB54Sh5Yq544Gr44GZ44KL44Gq44KJZmFsc2XjgpLjgrvjg4Pjg4jjgZnjgotcclxuICAgKi9cclxuICBwdWJsaWMgc2V0SXNQcmVtdWx0aXBsaWVkQWxwaGEoZW5hYmxlOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICB0aGlzLl9pc1ByZW11bHRpcGxpZWRBbHBoYSA9IGVuYWJsZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOS5l+eul+a4iOOBv86x44Gu5pyJ5Yq544O754Sh5Yq544KS5Y+W5b6X44GZ44KLXHJcbiAgICogQHJldHVybiB0cnVlIOS5l+eul+a4iOOBv+OBrs6x5pyJ5Yq5XHJcbiAgICogQHJldHVybiBmYWxzZSDkuZfnrpfmuIjjgb/jga7OseeEoeWKuVxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc1ByZW11bHRpcGxpZWRBbHBoYSgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9pc1ByZW11bHRpcGxpZWRBbHBoYTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCq+ODquODs+OCsO+8iOeJh+mdouaPj+eUu++8ieOBruacieWKueODu+eEoeWKueOCkuOCu+ODg+ODiOOBmeOCi+OAglxyXG4gICAqIOacieWKueOBq+OBmeOCi+OBquOCiXRydWXjgIHnhKHlirnjgavjgZnjgovjgarjgolmYWxzZeOCkuOCu+ODg+ODiOOBmeOCi1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRJc0N1bGxpbmcoY3VsbGluZzogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgdGhpcy5faXNDdWxsaW5nID0gY3VsbGluZztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCq+ODquODs+OCsO+8iOeJh+mdouaPj+eUu++8ieOBruacieWKueODu+eEoeWKueOCkuWPluW+l+OBmeOCi+OAglxyXG4gICAqIEByZXR1cm4gdHJ1ZSDjgqvjg6rjg7PjgrDmnInlirlcclxuICAgKiBAcmV0dXJuIGZhbHNlIOOCq+ODquODs+OCsOeEoeWKuVxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc0N1bGxpbmcoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5faXNDdWxsaW5nO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OG44Kv44K544OB44Oj44Gu55Ww5pa55oCn44OV44Kj44Or44K/44Oq44Oz44Kw44Gu44OR44Op44Oh44O844K/44KS44K744OD44OI44GZ44KLXHJcbiAgICog44OR44Op44Oh44O844K/5YCk44Gu5b2x6Z+/5bqm44Gv44Os44Oz44OA44Op44Gu5a6f6KOF44Gr5L6d5a2Y44GZ44KLXHJcbiAgICogQHBhcmFtIG4g44OR44Op44Oh44O844K/44Gu5YCkXHJcbiAgICovXHJcbiAgcHVibGljIHNldEFuaXNvdHJvcHkobjogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLl9hbmlzb3J0b3B5ID0gbjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODhuOCr+OCueODgeODo+OBrueVsOaWueaAp+ODleOCo+ODq+OCv+ODquODs+OCsOOBruODkeODqeODoeODvOOCv+OCkuOCu+ODg+ODiOOBmeOCi1xyXG4gICAqIEByZXR1cm4g55Ww5pa55oCn44OV44Kj44Or44K/44Oq44Oz44Kw44Gu44OR44Op44Oh44O844K/XHJcbiAgICovXHJcbiAgcHVibGljIGdldEFuaXNvdHJvcHkoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9hbmlzb3J0b3B5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Os44Oz44OA44Oq44Oz44Kw44GZ44KL44Oi44OH44Or44KS5Y+W5b6X44GZ44KLXHJcbiAgICogQHJldHVybiDjg6zjg7Pjg4Djg6rjg7PjgrDjgZnjgovjg6Ljg4fjg6tcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0TW9kZWwoKTogQ3ViaXNtTW9kZWwge1xyXG4gICAgcmV0dXJuIHRoaXMuX21vZGVsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5faXNDdWxsaW5nID0gZmFsc2U7XHJcbiAgICB0aGlzLl9pc1ByZW11bHRpcGxpZWRBbHBoYSA9IGZhbHNlO1xyXG4gICAgdGhpcy5fYW5pc29ydG9weSA9IDAuMDtcclxuICAgIHRoaXMuX21vZGVsID0gbnVsbDtcclxuICAgIHRoaXMuX21vZGVsQ29sb3IgPSBuZXcgQ3ViaXNtVGV4dHVyZUNvbG9yKCk7XHJcblxyXG4gICAgLy8g5Y2Y5L2N6KGM5YiX44Gr5Yid5pyf5YyWXHJcbiAgICB0aGlzLl9tdnBNYXRyaXg0eDQgPSBuZXcgQ3ViaXNtTWF0cml4NDQoKTtcclxuICAgIHRoaXMuX212cE1hdHJpeDR4NC5sb2FkSWRlbnRpdHkoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODh+ODq+aPj+eUu+OBruWun+ijhVxyXG4gICAqL1xyXG4gIHB1YmxpYyBhYnN0cmFjdCBkb0RyYXdNb2RlbCgpOiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jvvIjjgqLjg7zjg4jjg6Hjg4Pjgrfjg6XvvInjgpLmj4/nlLvjgZnjgotcclxuICAgKiDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjgajjg4bjgq/jgrnjg4Hjg6Pnlarlj7fjgpLjgrvjg4Pjg4jjgafmuKHjgZnjgIJcclxuICAgKiBAcGFyYW0gdGV4dHVyZU5vIOaPj+eUu+OBmeOCi+ODhuOCr+OCueODgeODo+eVquWPt1xyXG4gICAqIEBwYXJhbSBpbmRleENvdW50IOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruOCpOODs+ODh+ODg+OCr+OCueWApFxyXG4gICAqIEBwYXJhbSB2ZXJ0ZXhDb3VudCDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjga7poILngrnmlbBcclxuICAgKiBAcGFyYW0gaW5kZXhBcnJheSDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6XpoILngrnjga7jgqTjg7Pjg4fjg4Pjgq/jgrnphY3liJdcclxuICAgKiBAcGFyYW0gdmVydGV4QXJyYXkg44Od44Oq44K044Oz44Oh44OD44K344Ol44Gu6aCC54K56YWN5YiXXHJcbiAgICogQHBhcmFtIHV2QXJyYXkgdXbphY3liJdcclxuICAgKiBAcGFyYW0gb3BhY2l0eSDkuI3pgI/mmI7luqZcclxuICAgKiBAcGFyYW0gY29sb3JCbGVuZE1vZGUg44Kr44Op44O844OW44Os44Oz44OH44Kj44Oz44Kw44Gu44K/44Kk44OXXHJcbiAgICogQHBhcmFtIGludmVydGVkTWFzayDjg57jgrnjgq/kvb/nlKjmmYLjga7jg57jgrnjgq/jga7lj43ou6Lkvb/nlKhcclxuICAgKi9cclxuICBwdWJsaWMgYWJzdHJhY3QgZHJhd01lc2goXHJcbiAgICB0ZXh0dXJlTm86IG51bWJlcixcclxuICAgIGluZGV4Q291bnQ6IG51bWJlcixcclxuICAgIHZlcnRleENvdW50OiBudW1iZXIsXHJcbiAgICBpbmRleEFycmF5OiBVaW50MTZBcnJheSxcclxuICAgIHZlcnRleEFycmF5OiBGbG9hdDMyQXJyYXksXHJcbiAgICB1dkFycmF5OiBGbG9hdDMyQXJyYXksXHJcbiAgICBvcGFjaXR5OiBudW1iZXIsXHJcbiAgICBjb2xvckJsZW5kTW9kZTogQ3ViaXNtQmxlbmRNb2RlLFxyXG4gICAgaW52ZXJ0ZWRNYXNrOiBib29sZWFuXHJcbiAgKTogdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICog44Os44Oz44OA44Op44GM5L+d5oyB44GZ44KL6Z2Z55qE44Gq44Oq44K944O844K544KS6ZaL5pS+44GZ44KLXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBzdGF0aWNSZWxlYXNlOiBGdW5jdGlvbjtcclxuXHJcbiAgcHJvdGVjdGVkIF9tdnBNYXRyaXg0eDQ6IEN1YmlzbU1hdHJpeDQ0OyAvLyBNb2RlbC1WaWV3LVByb2plY3Rpb24g6KGM5YiXXHJcbiAgcHJvdGVjdGVkIF9tb2RlbENvbG9yOiBDdWJpc21UZXh0dXJlQ29sb3I7IC8vIOODouODh+ODq+iHquS9k+OBruOCq+ODqeODvO+8iFJHQkHvvIlcclxuICBwcm90ZWN0ZWQgX2lzQ3VsbGluZzogYm9vbGVhbjsgLy8g44Kr44Oq44Oz44Kw44GM5pyJ5Yq544Gq44KJdHJ1ZVxyXG4gIHByb3RlY3RlZCBfaXNQcmVtdWx0aXBsaWVkQWxwaGE6IGJvb2xlYW47IC8vIOS5l+eul+a4iOOBv86x44Gq44KJdHJ1ZVxyXG4gIHByb3RlY3RlZCBfYW5pc29ydG9weTogYW55OyAvLyDjg4bjgq/jgrnjg4Hjg6Pjga7nlbDmlrnmgKfjg5XjgqPjg6vjgr/jg6rjg7PjgrDjga7jg5Hjg6njg6Hjg7zjgr9cclxuICBwcm90ZWN0ZWQgX21vZGVsOiBDdWJpc21Nb2RlbDsgLy8g44Os44Oz44OA44Oq44Oz44Kw5a++6LGh44Gu44Oi44OH44OrXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIEN1YmlzbUJsZW5kTW9kZSB7XHJcbiAgQ3ViaXNtQmxlbmRNb2RlX05vcm1hbCA9IDAsIC8vIOmAmuW4uFxyXG4gIEN1YmlzbUJsZW5kTW9kZV9BZGRpdGl2ZSA9IDEsIC8vIOWKoOeul1xyXG4gIEN1YmlzbUJsZW5kTW9kZV9NdWx0aXBsaWNhdGl2ZSA9IDIgLy8g5LmX566XXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDjg4bjgq/jgrnjg4Hjg6Pjga7oibLjgpJSR0JB44Gn5omx44GG44Gf44KB44Gu44Kv44Op44K5XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ3ViaXNtVGV4dHVyZUNvbG9yIHtcclxuICAvKipcclxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuUiA9IDEuMDtcclxuICAgIHRoaXMuRyA9IDEuMDtcclxuICAgIHRoaXMuQiA9IDEuMDtcclxuICAgIHRoaXMuQSA9IDEuMDtcclxuICB9XHJcblxyXG4gIFI6IG51bWJlcjsgLy8g6LWk44OB44Oj44Oz44ON44OrXHJcbiAgRzogbnVtYmVyOyAvLyDnt5Hjg4Hjg6Pjg7Pjg43jg6tcclxuICBCOiBudW1iZXI7IC8vIOmdkuODgeODo+ODs+ODjeODq1xyXG4gIEE6IG51bWJlcjsgLy8gzrHjg4Hjg6Pjg7Pjg43jg6tcclxufVxyXG5cclxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXHJcbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21yZW5kZXJlcic7XHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcclxuICBleHBvcnQgY29uc3QgQ3ViaXNtQmxlbmRNb2RlID0gJC5DdWJpc21CbGVuZE1vZGU7XHJcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtQmxlbmRNb2RlID0gJC5DdWJpc21CbGVuZE1vZGU7XHJcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVJlbmRlcmVyID0gJC5DdWJpc21SZW5kZXJlcjtcclxuICBleHBvcnQgdHlwZSBDdWJpc21SZW5kZXJlciA9ICQuQ3ViaXNtUmVuZGVyZXI7XHJcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVRleHR1cmVDb2xvciA9ICQuQ3ViaXNtVGV4dHVyZUNvbG9yO1xyXG4gIGV4cG9ydCB0eXBlIEN1YmlzbVRleHR1cmVDb2xvciA9ICQuQ3ViaXNtVGV4dHVyZUNvbG9yO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQ29uc3RhbnQgfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xyXG5pbXBvcnQgeyBDdWJpc21NYXRyaXg0NCB9IGZyb20gJy4uL21hdGgvY3ViaXNtbWF0cml4NDQnO1xyXG5pbXBvcnQgeyBDdWJpc21Nb2RlbCB9IGZyb20gJy4uL21vZGVsL2N1YmlzbW1vZGVsJztcclxuaW1wb3J0IHsgY3NtTWFwIH0gZnJvbSAnLi4vdHlwZS9jc21tYXAnO1xyXG5pbXBvcnQgeyBjc21SZWN0IH0gZnJvbSAnLi4vdHlwZS9jc21yZWN0Zic7XHJcbmltcG9ydCB7IGNzbVZlY3RvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcclxuaW1wb3J0IHsgQ3ViaXNtTG9nRXJyb3IgfSBmcm9tICcuLi91dGlscy9jdWJpc21kZWJ1Zyc7XHJcbmltcG9ydCB7XHJcbiAgQ3ViaXNtQmxlbmRNb2RlLFxyXG4gIEN1YmlzbVJlbmRlcmVyLFxyXG4gIEN1YmlzbVRleHR1cmVDb2xvclxyXG59IGZyb20gJy4vY3ViaXNtcmVuZGVyZXInO1xyXG5cclxuY29uc3QgQ29sb3JDaGFubmVsQ291bnQgPSA0OyAvLyDlrp/pqJPmmYLjgasx44OB44Oj44Oz44ON44Or44Gu5aC05ZCI44GvMeOAgVJHQuOBoOOBkeOBruWgtOWQiOOBrzPjgIHjgqLjg6vjg5XjgqHjgoLlkKvjgoHjgovloLTlkIjjga80XHJcblxyXG5jb25zdCBzaGFkZXJDb3VudCA9IDEwOyAvLyDjgrfjgqfjg7zjg4Djg7zjga7mlbAgPSDjg57jgrnjgq/nlJ/miJDnlKggKyAo6YCa5bi455SoICsg5Yqg566XICsg5LmX566XKSAqICjjg57jgrnjgq/nhKHjga7kuZfnrpfmuIjjgqLjg6vjg5XjgqHlr77lv5zniYggKyDjg57jgrnjgq/mnInjga7kuZfnrpfmuIjjgqLjg6vjg5XjgqHlr77lv5zniYggKyDjg57jgrnjgq/mnInlj43ou6Ljga7kuZfnrpfmuIjjgqLjg6vjg5XjgqHlr77lv5zniYgpXHJcbmxldCBzX2luc3RhbmNlOiBDdWJpc21TaGFkZXJfV2ViR0w7XHJcbmxldCBzX3ZpZXdwb3J0OiBudW1iZXJbXTtcclxubGV0IHNfZmJvOiBXZWJHTEZyYW1lYnVmZmVyO1xyXG5cclxuLyoqXHJcbiAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBruWHpueQhuOCkuWun+ihjOOBmeOCi+OCr+ODqeOCuVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTCB7XHJcbiAgLyoqXHJcbiAgICog44Kr44Op44O844OB44Oj44Oz44ON44Or77yIUkdCQe+8ieOBruODleODqeOCsOOCkuWPluW+l+OBmeOCi1xyXG4gICAqIEBwYXJhbSBjaGFubmVsTm8g44Kr44Op44O844OB44Oj44Oz44ON44Or77yIUkdCQe+8ieOBrueVquWPt++8iDA6UiwgMTpHLCAyOkIsIDM6Qe+8iVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRDaGFubmVsRmxhZ0FzQ29sb3IoY2hhbm5lbE5vOiBudW1iZXIpOiBDdWJpc21UZXh0dXJlQ29sb3Ige1xyXG4gICAgcmV0dXJuIHRoaXMuX2NoYW5uZWxDb2xvcnMuYXQoY2hhbm5lbE5vKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODhuODs+ODneODqeODquOBruODrOODs+ODgOODvOODhuOCr+OCueODgeODo+OBruOCouODieODrOOCueOCkuWPluW+l+OBmeOCi1xyXG4gICAqIEZyYW1lQnVmZmVyT2JqZWN044GM5a2Y5Zyo44GX44Gq44GE5aC05ZCI44CB5paw44GX44GP55Sf5oiQ44GZ44KLXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIOODrOODs+ODgOODvOODhuOCr+OCueODgeODo+OBruOCouODieODrOOCuVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRNYXNrUmVuZGVyVGV4dHVyZSgpOiBXZWJHTEZyYW1lYnVmZmVyIHtcclxuICAgIGxldCByZXQ6IFdlYkdMRnJhbWVidWZmZXIgPSAwO1xyXG5cclxuICAgIC8vIOODhuODs+ODneODqeODquOBrlJlbmRlclRleHR1cmXjgpLlj5blvpfjgZnjgotcclxuICAgIGlmICh0aGlzLl9tYXNrVGV4dHVyZSAmJiB0aGlzLl9tYXNrVGV4dHVyZS50ZXh0dXJlICE9IDApIHtcclxuICAgICAgLy8g5YmN5Zue5L2/44Gj44Gf44KC44Gu44KS6L+U44GZXHJcbiAgICAgIHRoaXMuX21hc2tUZXh0dXJlLmZyYW1lTm8gPSB0aGlzLl9jdXJyZW50RnJhbWVObztcclxuICAgICAgcmV0ID0gdGhpcy5fbWFza1RleHR1cmUudGV4dHVyZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocmV0ID09IDApIHtcclxuICAgICAgLy8gRnJhbWVCdWZmZXJPYmplY3TjgYzlrZjlnKjjgZfjgarjgYTloLTlkIjjgIHmlrDjgZfjgY/nlJ/miJDjgZnjgotcclxuXHJcbiAgICAgIC8vIOOCr+ODquODg+ODlOODs+OCsOODkOODg+ODleOCoeOCteOCpOOCuuOCkuWPluW+l1xyXG4gICAgICBjb25zdCBzaXplOiBudW1iZXIgPSB0aGlzLl9jbGlwcGluZ01hc2tCdWZmZXJTaXplO1xyXG5cclxuICAgICAgdGhpcy5fY29sb3JCdWZmZXIgPSB0aGlzLmdsLmNyZWF0ZVRleHR1cmUoKTtcclxuICAgICAgdGhpcy5nbC5iaW5kVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkVfMkQsIHRoaXMuX2NvbG9yQnVmZmVyKTtcclxuICAgICAgdGhpcy5nbC50ZXhJbWFnZTJEKFxyXG4gICAgICAgIHRoaXMuZ2wuVEVYVFVSRV8yRCxcclxuICAgICAgICAwLFxyXG4gICAgICAgIHRoaXMuZ2wuUkdCQSxcclxuICAgICAgICBzaXplLFxyXG4gICAgICAgIHNpemUsXHJcbiAgICAgICAgMCxcclxuICAgICAgICB0aGlzLmdsLlJHQkEsXHJcbiAgICAgICAgdGhpcy5nbC5VTlNJR05FRF9CWVRFLFxyXG4gICAgICAgIG51bGxcclxuICAgICAgKTtcclxuICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKFxyXG4gICAgICAgIHRoaXMuZ2wuVEVYVFVSRV8yRCxcclxuICAgICAgICB0aGlzLmdsLlRFWFRVUkVfV1JBUF9TLFxyXG4gICAgICAgIHRoaXMuZ2wuQ0xBTVBfVE9fRURHRVxyXG4gICAgICApO1xyXG4gICAgICB0aGlzLmdsLnRleFBhcmFtZXRlcmkoXHJcbiAgICAgICAgdGhpcy5nbC5URVhUVVJFXzJELFxyXG4gICAgICAgIHRoaXMuZ2wuVEVYVFVSRV9XUkFQX1QsXHJcbiAgICAgICAgdGhpcy5nbC5DTEFNUF9UT19FREdFXHJcbiAgICAgICk7XHJcbiAgICAgIHRoaXMuZ2wudGV4UGFyYW1ldGVyaShcclxuICAgICAgICB0aGlzLmdsLlRFWFRVUkVfMkQsXHJcbiAgICAgICAgdGhpcy5nbC5URVhUVVJFX01JTl9GSUxURVIsXHJcbiAgICAgICAgdGhpcy5nbC5MSU5FQVJcclxuICAgICAgKTtcclxuICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKFxyXG4gICAgICAgIHRoaXMuZ2wuVEVYVFVSRV8yRCxcclxuICAgICAgICB0aGlzLmdsLlRFWFRVUkVfTUFHX0ZJTFRFUixcclxuICAgICAgICB0aGlzLmdsLkxJTkVBUlxyXG4gICAgICApO1xyXG4gICAgICB0aGlzLmdsLmJpbmRUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRV8yRCwgbnVsbCk7XHJcblxyXG4gICAgICByZXQgPSB0aGlzLmdsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XHJcbiAgICAgIHRoaXMuZ2wuYmluZEZyYW1lYnVmZmVyKHRoaXMuZ2wuRlJBTUVCVUZGRVIsIHJldCk7XHJcbiAgICAgIHRoaXMuZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoXHJcbiAgICAgICAgdGhpcy5nbC5GUkFNRUJVRkZFUixcclxuICAgICAgICB0aGlzLmdsLkNPTE9SX0FUVEFDSE1FTlQwLFxyXG4gICAgICAgIHRoaXMuZ2wuVEVYVFVSRV8yRCxcclxuICAgICAgICB0aGlzLl9jb2xvckJ1ZmZlcixcclxuICAgICAgICAwXHJcbiAgICAgICk7XHJcbiAgICAgIHRoaXMuZ2wuYmluZEZyYW1lYnVmZmVyKHRoaXMuZ2wuRlJBTUVCVUZGRVIsIHNfZmJvKTtcclxuXHJcbiAgICAgIHRoaXMuX21hc2tUZXh0dXJlID0gbmV3IEN1YmlzbVJlbmRlclRleHR1cmVSZXNvdXJjZShcclxuICAgICAgICB0aGlzLl9jdXJyZW50RnJhbWVObyxcclxuICAgICAgICByZXRcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmV0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogV2ViR0zjg6zjg7Pjg4Djg6rjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4jjgpLoqK3lrprjgZnjgotcclxuICAgKiBAcGFyYW0gZ2wgV2ViR0zjg6zjg7Pjg4Djg6rjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4hcclxuICAgKi9cclxuICBwdWJsaWMgc2V0R0woZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCk6IHZvaWQge1xyXG4gICAgdGhpcy5nbCA9IGdsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oe44K544Kv44GV44KM44KL5o+P55S744Kq44OW44K444Kn44Kv44OI576k5YWo5L2T44KS5Zuy44KA55+p5b2i77yI44Oi44OH44Or5bqn5qiZ57O777yJ44KS6KiI566X44GZ44KLXHJcbiAgICogQHBhcmFtIG1vZGVsIOODouODh+ODq+OBruOCpOODs+OCueOCv+ODs+OCuVxyXG4gICAqIEBwYXJhbSBjbGlwcGluZ0NvbnRleHQg44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu44Kz44Oz44OG44Kt44K544OIXHJcbiAgICovXHJcbiAgcHVibGljIGNhbGNDbGlwcGVkRHJhd1RvdGFsQm91bmRzKFxyXG4gICAgbW9kZWw6IEN1YmlzbU1vZGVsLFxyXG4gICAgY2xpcHBpbmdDb250ZXh0OiBDdWJpc21DbGlwcGluZ0NvbnRleHRcclxuICApOiB2b2lkIHtcclxuICAgIC8vIOiiq+OCr+ODquODg+ODlOODs+OCsOODnuOCueOCr++8iOODnuOCueOCr+OBleOCjOOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiO+8ieOBruWFqOS9k+OBruefqeW9olxyXG4gICAgbGV0IGNsaXBwZWREcmF3VG90YWxNaW5YOiBudW1iZXIgPSBOdW1iZXIuTUFYX1ZBTFVFO1xyXG4gICAgbGV0IGNsaXBwZWREcmF3VG90YWxNaW5ZOiBudW1iZXIgPSBOdW1iZXIuTUFYX1ZBTFVFO1xyXG4gICAgbGV0IGNsaXBwZWREcmF3VG90YWxNYXhYOiBudW1iZXIgPSBOdW1iZXIuTUlOX1ZBTFVFO1xyXG4gICAgbGV0IGNsaXBwZWREcmF3VG90YWxNYXhZOiBudW1iZXIgPSBOdW1iZXIuTUlOX1ZBTFVFO1xyXG5cclxuICAgIC8vIOOBk+OBruODnuOCueOCr+OBjOWun+mam+OBq+W/heimgeOBi+WIpOWumuOBmeOCi1xyXG4gICAgLy8g44GT44Gu44Kv44Oq44OD44OU44Oz44Kw44KS5Yip55So44GZ44KL44CM5o+P55S744Kq44OW44K444Kn44Kv44OI44CN44GM44Gy44Go44Gk44Gn44KC5L2/55So5Y+v6IO944Gn44GC44KM44Gw44Oe44K544Kv44KS55Sf5oiQ44GZ44KL5b+F6KaB44GM44GC44KLXHJcbiAgICBjb25zdCBjbGlwcGVkRHJhd0NvdW50OiBudW1iZXIgPVxyXG4gICAgICBjbGlwcGluZ0NvbnRleHQuX2NsaXBwZWREcmF3YWJsZUluZGV4TGlzdC5sZW5ndGg7XHJcblxyXG4gICAgZm9yIChcclxuICAgICAgbGV0IGNsaXBwZWREcmF3YWJsZUluZGV4ID0gMDtcclxuICAgICAgY2xpcHBlZERyYXdhYmxlSW5kZXggPCBjbGlwcGVkRHJhd0NvdW50O1xyXG4gICAgICBjbGlwcGVkRHJhd2FibGVJbmRleCsrXHJcbiAgICApIHtcclxuICAgICAgLy8g44Oe44K544Kv44KS5L2/55So44GZ44KL5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu5o+P55S744GV44KM44KL55+p5b2i44KS5rGC44KB44KLXHJcbiAgICAgIGNvbnN0IGRyYXdhYmxlSW5kZXg6IG51bWJlciA9XHJcbiAgICAgICAgY2xpcHBpbmdDb250ZXh0Ll9jbGlwcGVkRHJhd2FibGVJbmRleExpc3RbY2xpcHBlZERyYXdhYmxlSW5kZXhdO1xyXG5cclxuICAgICAgY29uc3QgZHJhd2FibGVWZXJ0ZXhDb3VudDogbnVtYmVyID0gbW9kZWwuZ2V0RHJhd2FibGVWZXJ0ZXhDb3VudChcclxuICAgICAgICBkcmF3YWJsZUluZGV4XHJcbiAgICAgICk7XHJcbiAgICAgIGNvbnN0IGRyYXdhYmxlVmVydGV4ZXM6IEZsb2F0MzJBcnJheSA9IG1vZGVsLmdldERyYXdhYmxlVmVydGljZXMoXHJcbiAgICAgICAgZHJhd2FibGVJbmRleFxyXG4gICAgICApO1xyXG5cclxuICAgICAgbGV0IG1pblg6IG51bWJlciA9IE51bWJlci5NQVhfVkFMVUU7XHJcbiAgICAgIGxldCBtaW5ZOiBudW1iZXIgPSBOdW1iZXIuTUFYX1ZBTFVFO1xyXG4gICAgICBsZXQgbWF4WDogbnVtYmVyID0gTnVtYmVyLk1JTl9WQUxVRTtcclxuICAgICAgbGV0IG1heFk6IG51bWJlciA9IE51bWJlci5NSU5fVkFMVUU7XHJcblxyXG4gICAgICBjb25zdCBsb29wOiBudW1iZXIgPSBkcmF3YWJsZVZlcnRleENvdW50ICogQ29uc3RhbnQudmVydGV4U3RlcDtcclxuICAgICAgZm9yIChcclxuICAgICAgICBsZXQgcGk6IG51bWJlciA9IENvbnN0YW50LnZlcnRleE9mZnNldDtcclxuICAgICAgICBwaSA8IGxvb3A7XHJcbiAgICAgICAgcGkgKz0gQ29uc3RhbnQudmVydGV4U3RlcFxyXG4gICAgICApIHtcclxuICAgICAgICBjb25zdCB4OiBudW1iZXIgPSBkcmF3YWJsZVZlcnRleGVzW3BpXTtcclxuICAgICAgICBjb25zdCB5OiBudW1iZXIgPSBkcmF3YWJsZVZlcnRleGVzW3BpICsgMV07XHJcblxyXG4gICAgICAgIGlmICh4IDwgbWluWCkge1xyXG4gICAgICAgICAgbWluWCA9IHg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh4ID4gbWF4WCkge1xyXG4gICAgICAgICAgbWF4WCA9IHg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh5IDwgbWluWSkge1xyXG4gICAgICAgICAgbWluWSA9IHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh5ID4gbWF4WSkge1xyXG4gICAgICAgICAgbWF4WSA9IHk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyDmnInlirnjgarngrnjgYzkuIDjgaTjgoLlj5bjgozjgarjgYvjgaPjgZ/jga7jgafjgrnjgq3jg4Pjg5dcclxuICAgICAgaWYgKG1pblggPT0gTnVtYmVyLk1BWF9WQUxVRSkge1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyDlhajkvZPjga7nn6nlvaLjgavlj43mmKBcclxuICAgICAgaWYgKG1pblggPCBjbGlwcGVkRHJhd1RvdGFsTWluWCkge1xyXG4gICAgICAgIGNsaXBwZWREcmF3VG90YWxNaW5YID0gbWluWDtcclxuICAgICAgfVxyXG4gICAgICBpZiAobWluWSA8IGNsaXBwZWREcmF3VG90YWxNaW5ZKSB7XHJcbiAgICAgICAgY2xpcHBlZERyYXdUb3RhbE1pblkgPSBtaW5ZO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChtYXhYID4gY2xpcHBlZERyYXdUb3RhbE1heFgpIHtcclxuICAgICAgICBjbGlwcGVkRHJhd1RvdGFsTWF4WCA9IG1heFg7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKG1heFkgPiBjbGlwcGVkRHJhd1RvdGFsTWF4WSkge1xyXG4gICAgICAgIGNsaXBwZWREcmF3VG90YWxNYXhZID0gbWF4WTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGNsaXBwZWREcmF3VG90YWxNaW5YID09IE51bWJlci5NQVhfVkFMVUUpIHtcclxuICAgICAgICBjbGlwcGluZ0NvbnRleHQuX2FsbENsaXBwZWREcmF3UmVjdC54ID0gMC4wO1xyXG4gICAgICAgIGNsaXBwaW5nQ29udGV4dC5fYWxsQ2xpcHBlZERyYXdSZWN0LnkgPSAwLjA7XHJcbiAgICAgICAgY2xpcHBpbmdDb250ZXh0Ll9hbGxDbGlwcGVkRHJhd1JlY3Qud2lkdGggPSAwLjA7XHJcbiAgICAgICAgY2xpcHBpbmdDb250ZXh0Ll9hbGxDbGlwcGVkRHJhd1JlY3QuaGVpZ2h0ID0gMC4wO1xyXG4gICAgICAgIGNsaXBwaW5nQ29udGV4dC5faXNVc2luZyA9IGZhbHNlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNsaXBwaW5nQ29udGV4dC5faXNVc2luZyA9IHRydWU7XHJcbiAgICAgICAgY29uc3QgdzogbnVtYmVyID0gY2xpcHBlZERyYXdUb3RhbE1heFggLSBjbGlwcGVkRHJhd1RvdGFsTWluWDtcclxuICAgICAgICBjb25zdCBoOiBudW1iZXIgPSBjbGlwcGVkRHJhd1RvdGFsTWF4WSAtIGNsaXBwZWREcmF3VG90YWxNaW5ZO1xyXG4gICAgICAgIGNsaXBwaW5nQ29udGV4dC5fYWxsQ2xpcHBlZERyYXdSZWN0LnggPSBjbGlwcGVkRHJhd1RvdGFsTWluWDtcclxuICAgICAgICBjbGlwcGluZ0NvbnRleHQuX2FsbENsaXBwZWREcmF3UmVjdC55ID0gY2xpcHBlZERyYXdUb3RhbE1pblk7XHJcbiAgICAgICAgY2xpcHBpbmdDb250ZXh0Ll9hbGxDbGlwcGVkRHJhd1JlY3Qud2lkdGggPSB3O1xyXG4gICAgICAgIGNsaXBwaW5nQ29udGV4dC5fYWxsQ2xpcHBlZERyYXdSZWN0LmhlaWdodCA9IGg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuX21hc2tSZW5kZXJUZXh0dXJlID0gbnVsbDtcclxuICAgIHRoaXMuX2NvbG9yQnVmZmVyID0gbnVsbDtcclxuICAgIHRoaXMuX2N1cnJlbnRGcmFtZU5vID0gMDtcclxuICAgIHRoaXMuX2NsaXBwaW5nTWFza0J1ZmZlclNpemUgPSAyNTY7XHJcbiAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzayA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtQ2xpcHBpbmdDb250ZXh0PigpO1xyXG4gICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvckRyYXcgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbUNsaXBwaW5nQ29udGV4dD4oKTtcclxuICAgIHRoaXMuX2NoYW5uZWxDb2xvcnMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbVRleHR1cmVDb2xvcj4oKTtcclxuICAgIHRoaXMuX3RtcEJvdW5kc09uTW9kZWwgPSBuZXcgY3NtUmVjdCgpO1xyXG4gICAgdGhpcy5fdG1wTWF0cml4ID0gbmV3IEN1YmlzbU1hdHJpeDQ0KCk7XHJcbiAgICB0aGlzLl90bXBNYXRyaXhGb3JNYXNrID0gbmV3IEN1YmlzbU1hdHJpeDQ0KCk7XHJcbiAgICB0aGlzLl90bXBNYXRyaXhGb3JEcmF3ID0gbmV3IEN1YmlzbU1hdHJpeDQ0KCk7XHJcbiAgICB0aGlzLl9tYXNrVGV4dHVyZSA9IG51bGw7XHJcblxyXG4gICAgbGV0IHRtcDogQ3ViaXNtVGV4dHVyZUNvbG9yID0gbmV3IEN1YmlzbVRleHR1cmVDb2xvcigpO1xyXG4gICAgdG1wLlIgPSAxLjA7XHJcbiAgICB0bXAuRyA9IDAuMDtcclxuICAgIHRtcC5CID0gMC4wO1xyXG4gICAgdG1wLkEgPSAwLjA7XHJcbiAgICB0aGlzLl9jaGFubmVsQ29sb3JzLnB1c2hCYWNrKHRtcCk7XHJcblxyXG4gICAgdG1wID0gbmV3IEN1YmlzbVRleHR1cmVDb2xvcigpO1xyXG4gICAgdG1wLlIgPSAwLjA7XHJcbiAgICB0bXAuRyA9IDEuMDtcclxuICAgIHRtcC5CID0gMC4wO1xyXG4gICAgdG1wLkEgPSAwLjA7XHJcbiAgICB0aGlzLl9jaGFubmVsQ29sb3JzLnB1c2hCYWNrKHRtcCk7XHJcblxyXG4gICAgdG1wID0gbmV3IEN1YmlzbVRleHR1cmVDb2xvcigpO1xyXG4gICAgdG1wLlIgPSAwLjA7XHJcbiAgICB0bXAuRyA9IDAuMDtcclxuICAgIHRtcC5CID0gMS4wO1xyXG4gICAgdG1wLkEgPSAwLjA7XHJcbiAgICB0aGlzLl9jaGFubmVsQ29sb3JzLnB1c2hCYWNrKHRtcCk7XHJcblxyXG4gICAgdG1wID0gbmV3IEN1YmlzbVRleHR1cmVDb2xvcigpO1xyXG4gICAgdG1wLlIgPSAwLjA7XHJcbiAgICB0bXAuRyA9IDAuMDtcclxuICAgIHRtcC5CID0gMC4wO1xyXG4gICAgdG1wLkEgPSAxLjA7XHJcbiAgICB0aGlzLl9jaGFubmVsQ29sb3JzLnB1c2hCYWNrKHRtcCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcclxuICAgKi9cclxuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suZ2V0U2l6ZSgpOyBpKyspIHtcclxuICAgICAgaWYgKHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmF0KGkpKSB7XHJcbiAgICAgICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suYXQoaSkucmVsZWFzZSgpO1xyXG4gICAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLnNldChpLCB2b2lkIDApO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLnNldChpLCBudWxsKTtcclxuICAgIH1cclxuICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrID0gbnVsbDtcclxuXHJcbiAgICAvLyBfY2xpcHBpbmdDb250ZXh0TGlzdEZvckRyYXfjga9fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2vjgavjgYLjgovjgqTjg7Pjgrnjgr/jg7PjgrnjgpLmjIfjgZfjgabjgYTjgovjgILkuIroqJjjga7lh6bnkIbjgavjgojjgoropoHntKDjgZTjgajjga5ERUxFVEXjga/kuI3opoHjgIJcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvckRyYXcuZ2V0U2l6ZSgpOyBpKyspIHtcclxuICAgICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvckRyYXcuc2V0KGksIG51bGwpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvckRyYXcgPSBudWxsO1xyXG5cclxuICAgIGlmICh0aGlzLl9tYXNrVGV4dHVyZSkge1xyXG4gICAgICB0aGlzLmdsLmRlbGV0ZUZyYW1lYnVmZmVyKHRoaXMuX21hc2tUZXh0dXJlLnRleHR1cmUpO1xyXG4gICAgICB0aGlzLl9tYXNrVGV4dHVyZSA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9jaGFubmVsQ29sb3JzLmdldFNpemUoKTsgaSsrKSB7XHJcbiAgICAgIHRoaXMuX2NoYW5uZWxDb2xvcnMuc2V0KGksIG51bGwpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2NoYW5uZWxDb2xvcnMgPSBudWxsO1xyXG5cclxuICAgIC8vIOODhuOCr+OCueODgeODo+ino+aUvlxyXG4gICAgdGhpcy5nbC5kZWxldGVUZXh0dXJlKHRoaXMuX2NvbG9yQnVmZmVyKTtcclxuICAgIHRoaXMuX2NvbG9yQnVmZmVyID0gbnVsbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODnuODjeODvOOCuOODo+OBruWIneacn+WMluWHpueQhlxyXG4gICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OCkuS9v+OBhuaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBrueZu+mMsuOCkuihjOOBhlxyXG4gICAqIEBwYXJhbSBtb2RlbCDjg6Ljg4fjg6vjga7jgqTjg7Pjgrnjgr/jg7PjgrlcclxuICAgKiBAcGFyYW0gZHJhd2FibGVDb3VudCDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7mlbBcclxuICAgKiBAcGFyYW0gZHJhd2FibGVNYXNrcyDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjgpLjg57jgrnjgq/jgZnjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7jgqTjg7Pjg4fjg4Pjgq/jgrnjga7jg6rjgrnjg4hcclxuICAgKiBAcGFyYW0gZHJhd2FibGVDb3VudHMg5o+P55S744Kq44OW44K444Kn44Kv44OI44KS44Oe44K544Kv44GZ44KL5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu5pWwXHJcbiAgICovXHJcbiAgcHVibGljIGluaXRpYWxpemUoXHJcbiAgICBtb2RlbDogQ3ViaXNtTW9kZWwsXHJcbiAgICBkcmF3YWJsZUNvdW50OiBudW1iZXIsXHJcbiAgICBkcmF3YWJsZU1hc2tzOiBJbnQzMkFycmF5W10sXHJcbiAgICBkcmF3YWJsZU1hc2tDb3VudHM6IEludDMyQXJyYXlcclxuICApOiB2b2lkIHtcclxuICAgIC8vIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OCkuS9v+OBhuaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOCkuOBmeOBueOBpueZu+mMsuOBmeOCi1xyXG4gICAgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gv44CB6YCa5bi45pWw5YCL56iL5bqm44Gr6ZmQ5a6a44GX44Gm5L2/44GG44KC44Gu44Go44GZ44KLXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRyYXdhYmxlQ291bnQ7IGkrKykge1xyXG4gICAgICBpZiAoZHJhd2FibGVNYXNrQ291bnRzW2ldIDw9IDApIHtcclxuICAgICAgICAvLyDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jgYzkvb/nlKjjgZXjgozjgabjgYTjgarjgYTjgqLjg7zjg4jjg6Hjg4Pjgrfjg6XvvIjlpJrjgY/jga7loLTlkIjkvb/nlKjjgZfjgarjgYTvvIlcclxuICAgICAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdy5wdXNoQmFjayhudWxsKTtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8g5pei44Gr44GC44KLQ2xpcENvbnRleHTjgajlkIzjgZjjgYvjg4Hjgqfjg4Pjgq/jgZnjgotcclxuICAgICAgbGV0IGNsaXBwaW5nQ29udGV4dDogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0ID0gdGhpcy5maW5kU2FtZUNsaXAoXHJcbiAgICAgICAgZHJhd2FibGVNYXNrc1tpXSxcclxuICAgICAgICBkcmF3YWJsZU1hc2tDb3VudHNbaV1cclxuICAgICAgKTtcclxuICAgICAgaWYgKGNsaXBwaW5nQ29udGV4dCA9PSBudWxsKSB7XHJcbiAgICAgICAgLy8g5ZCM5LiA44Gu44Oe44K544Kv44GM5a2Y5Zyo44GX44Gm44GE44Gq44GE5aC05ZCI44Gv55Sf5oiQ44GZ44KLXHJcbiAgICAgICAgY2xpcHBpbmdDb250ZXh0ID0gbmV3IEN1YmlzbUNsaXBwaW5nQ29udGV4dChcclxuICAgICAgICAgIHRoaXMsXHJcbiAgICAgICAgICBkcmF3YWJsZU1hc2tzW2ldLFxyXG4gICAgICAgICAgZHJhd2FibGVNYXNrQ291bnRzW2ldXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5wdXNoQmFjayhjbGlwcGluZ0NvbnRleHQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjbGlwcGluZ0NvbnRleHQuYWRkQ2xpcHBlZERyYXdhYmxlKGkpO1xyXG5cclxuICAgICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvckRyYXcucHVzaEJhY2soY2xpcHBpbmdDb250ZXh0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiOOCkuS9nOaIkOOBmeOCi+OAguODouODh+ODq+aPj+eUu+aZguOBq+Wun+ihjOOBmeOCi+OAglxyXG4gICAqIEBwYXJhbSBtb2RlbCDjg6Ljg4fjg6vjga7jgqTjg7Pjgrnjgr/jg7PjgrlcclxuICAgKiBAcGFyYW0gcmVuZGVyZXIg44Os44Oz44OA44Op44Gu44Kk44Oz44K544K/44Oz44K5XHJcbiAgICovXHJcbiAgcHVibGljIHNldHVwQ2xpcHBpbmdDb250ZXh0KFxyXG4gICAgbW9kZWw6IEN1YmlzbU1vZGVsLFxyXG4gICAgcmVuZGVyZXI6IEN1YmlzbVJlbmRlcmVyX1dlYkdMXHJcbiAgKTogdm9pZCB7XHJcbiAgICB0aGlzLl9jdXJyZW50RnJhbWVObysrO1xyXG5cclxuICAgIC8vIOWFqOOBpuOBruOCr+ODquODg+ODlOODs+OCsOOCkueUqOaEj+OBmeOCi1xyXG4gICAgLy8g5ZCM44GY44Kv44Oq44OD44OX77yI6KSH5pWw44Gu5aC05ZCI44Gv44G+44Go44KB44Gm5LiA44Gk44Gu44Kv44Oq44OD44OX77yJ44KS5L2/44GG5aC05ZCI44GvMeW6puOBoOOBkeioreWumuOBmeOCi1xyXG4gICAgbGV0IHVzaW5nQ2xpcENvdW50ID0gMDtcclxuICAgIGZvciAoXHJcbiAgICAgIGxldCBjbGlwSW5kZXggPSAwO1xyXG4gICAgICBjbGlwSW5kZXggPCB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5nZXRTaXplKCk7XHJcbiAgICAgIGNsaXBJbmRleCsrXHJcbiAgICApIHtcclxuICAgICAgLy8gMeOBpOOBruOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBq+mWouOBl+OBplxyXG4gICAgICBjb25zdCBjYzogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0ID0gdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suYXQoXHJcbiAgICAgICAgY2xpcEluZGV4XHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvLyDjgZPjga7jgq/jg6rjg4Pjg5fjgpLliKnnlKjjgZnjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jnvqTlhajkvZPjgpLlm7LjgoDnn6nlvaLjgpLoqIjnrpdcclxuICAgICAgdGhpcy5jYWxjQ2xpcHBlZERyYXdUb3RhbEJvdW5kcyhtb2RlbCwgY2MpO1xyXG5cclxuICAgICAgaWYgKGNjLl9pc1VzaW5nKSB7XHJcbiAgICAgICAgdXNpbmdDbGlwQ291bnQrKzsgLy8g5L2/55So5Lit44Go44GX44Gm44Kr44Km44Oz44OIXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyDjg57jgrnjgq/kvZzmiJDlh6bnkIZcclxuICAgIGlmICh1c2luZ0NsaXBDb3VudCA+IDApIHtcclxuICAgICAgLy8g55Sf5oiQ44GX44GfRnJhbWVCdWZmZXLjgajlkIzjgZjjgrXjgqTjgrrjgafjg5Pjg6Xjg7zjg53jg7zjg4jjgpLoqK3lrppcclxuICAgICAgdGhpcy5nbC52aWV3cG9ydChcclxuICAgICAgICAwLFxyXG4gICAgICAgIDAsXHJcbiAgICAgICAgdGhpcy5fY2xpcHBpbmdNYXNrQnVmZmVyU2l6ZSxcclxuICAgICAgICB0aGlzLl9jbGlwcGluZ01hc2tCdWZmZXJTaXplXHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvLyDjg57jgrnjgq/jgpJhY3RpdmXjgavjgZnjgotcclxuICAgICAgdGhpcy5fbWFza1JlbmRlclRleHR1cmUgPSB0aGlzLmdldE1hc2tSZW5kZXJUZXh0dXJlKCk7XHJcblxyXG4gICAgICAvLyDjg6Ljg4fjg6vmj4/nlLvmmYLjgatEcmF3TWVzaE5vd+OBq+a4oeOBleOCjOOCi+WkieaPmyjjg6Ljg4fjg6t0b+ODr+ODvOODq+ODieW6p+aomeWkieaPmylcclxuICAgICAgY29uc3QgbW9kZWxUb1dvcmxkRjogQ3ViaXNtTWF0cml4NDQgPSByZW5kZXJlci5nZXRNdnBNYXRyaXgoKTtcclxuXHJcbiAgICAgIHJlbmRlcmVyLnByZURyYXcoKTsgLy8g44OQ44OD44OV44Kh44KS44Kv44Oq44Ki44GZ44KLXHJcblxyXG4gICAgICAvLyDlkITjg57jgrnjgq/jga7jg6zjgqTjgqLjgqbjg4jjgpLmsbrlrprjgZfjgabjgYTjgY9cclxuICAgICAgdGhpcy5zZXR1cExheW91dEJvdW5kcyh1c2luZ0NsaXBDb3VudCk7XHJcblxyXG4gICAgICAvLyAtLS0tLS0tLS0tIOODnuOCueOCr+aPj+eUu+WHpueQhiAtLS0tLS0tLS0tXHJcbiAgICAgIC8vIOODnuOCueOCr+eUqFJlbmRlclRleHR1cmXjgpJhY3RpdmXjgavjgrvjg4Pjg4hcclxuICAgICAgdGhpcy5nbC5iaW5kRnJhbWVidWZmZXIodGhpcy5nbC5GUkFNRUJVRkZFUiwgdGhpcy5fbWFza1JlbmRlclRleHR1cmUpO1xyXG5cclxuICAgICAgLy8g44Oe44K544Kv44KS44Kv44Oq44Ki44GZ44KLXHJcbiAgICAgIC8vICjku67ku5Xmp5gpIDHjgYznhKHlirnvvIjmj4/jgYvjgozjgarjgYTvvInpoJjln5/jgIEw44GM5pyJ5Yq577yI5o+P44GL44KM44KL77yJ6aCY5Z+f44CC77yI44K344Kn44O844OA44O8Q2QqQ3Pjgacw44Gr6L+R44GE5YCk44KS44GL44GR44Gm44Oe44K544Kv44KS5L2c44KL44CCMeOCkuOBi+OBkeOCi+OBqOS9leOCgui1t+OBk+OCieOBquOBhO+8iVxyXG4gICAgICB0aGlzLmdsLmNsZWFyQ29sb3IoMS4wLCAxLjAsIDEuMCwgMS4wKTtcclxuICAgICAgdGhpcy5nbC5jbGVhcih0aGlzLmdsLkNPTE9SX0JVRkZFUl9CSVQpO1xyXG5cclxuICAgICAgLy8g5a6f6Zqb44Gr44Oe44K544Kv44KS55Sf5oiQ44GZ44KLXHJcbiAgICAgIC8vIOWFqOOBpuOBruODnuOCueOCr+OCkuOBqeOBruOCiOOBhuOBq+ODrOOCpOOCouOCpuODiOOBl+OBpuaPj+OBj+OBi+OCkuaxuuWumuOBl+OAgUNsaXBDb250ZXh0LCBDbGlwcGVkRHJhd0NvbnRleHTjgavoqJjmhrbjgZnjgotcclxuICAgICAgZm9yIChcclxuICAgICAgICBsZXQgY2xpcEluZGV4ID0gMDtcclxuICAgICAgICBjbGlwSW5kZXggPCB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5nZXRTaXplKCk7XHJcbiAgICAgICAgY2xpcEluZGV4KytcclxuICAgICAgKSB7XHJcbiAgICAgICAgLy8gLS0tIOWun+mam+OBqzHjgaTjga7jg57jgrnjgq/jgpLmj4/jgY8gLS0tXHJcbiAgICAgICAgY29uc3QgY2xpcENvbnRleHQ6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCA9IHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmF0KFxyXG4gICAgICAgICAgY2xpcEluZGV4XHJcbiAgICAgICAgKTtcclxuICAgICAgICBjb25zdCBhbGxDbGlwZWREcmF3UmVjdDogY3NtUmVjdCA9IGNsaXBDb250ZXh0Ll9hbGxDbGlwcGVkRHJhd1JlY3Q7IC8vIOOBk+OBruODnuOCueOCr+OCkuS9v+OBhuOAgeOBmeOBueOBpuOBruaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruirlueQhuW6p+aomeS4iuOBruWbsuOBv+efqeW9olxyXG4gICAgICAgIGNvbnN0IGxheW91dEJvdW5kc09uVGV4MDE6IGNzbVJlY3QgPSBjbGlwQ29udGV4dC5fbGF5b3V0Qm91bmRzOyAvLyDjgZPjga7kuK3jgavjg57jgrnjgq/jgpLlj47jgoHjgotcclxuXHJcbiAgICAgICAgLy8g44Oi44OH44Or5bqn5qiZ5LiK44Gu55+p5b2i44KS44CB6YGp5a6c44Oe44O844K444Oz44KS5LuY44GR44Gm5L2/44GGXHJcbiAgICAgICAgY29uc3QgTUFSR0lOID0gMC4wNTtcclxuICAgICAgICB0aGlzLl90bXBCb3VuZHNPbk1vZGVsLnNldFJlY3QoYWxsQ2xpcGVkRHJhd1JlY3QpO1xyXG4gICAgICAgIHRoaXMuX3RtcEJvdW5kc09uTW9kZWwuZXhwYW5kKFxyXG4gICAgICAgICAgYWxsQ2xpcGVkRHJhd1JlY3Qud2lkdGggKiBNQVJHSU4sXHJcbiAgICAgICAgICBhbGxDbGlwZWREcmF3UmVjdC5oZWlnaHQgKiBNQVJHSU5cclxuICAgICAgICApO1xyXG4gICAgICAgIC8vIyMjIyMjIyMjIyDmnKzmnaXjga/libLjgorlvZPjgabjgonjgozjgZ/poJjln5/jga7lhajkvZPjgpLkvb/jgo/jgZrlv4XopoHmnIDkvY7pmZDjga7jgrXjgqTjgrrjgYzjgojjgYRcclxuXHJcbiAgICAgICAgLy8g44K344Kn44O844OA55So44Gu6KiI566X5byP44KS5rGC44KB44KL44CC5Zue6Lui44KS6ICD5oWu44GX44Gq44GE5aC05ZCI44Gv5Lul5LiL44Gu44Go44GK44KKXHJcbiAgICAgICAgLy8gbW92ZVBlcmlvZCcgPSBtb3ZlUGVyaW9kICogc2NhbGVYICsgb2ZmWFx0XHQgIFtbIG1vdmVQZXJpb2QnID0gKG1vdmVQZXJpb2QgLSB0bXBCb3VuZHNPbk1vZGVsLm1vdmVQZXJpb2QpKnNjYWxlICsgbGF5b3V0Qm91bmRzT25UZXgwMS5tb3ZlUGVyaW9kIF1dXHJcbiAgICAgICAgY29uc3Qgc2NhbGVYOiBudW1iZXIgPVxyXG4gICAgICAgICAgbGF5b3V0Qm91bmRzT25UZXgwMS53aWR0aCAvIHRoaXMuX3RtcEJvdW5kc09uTW9kZWwud2lkdGg7XHJcbiAgICAgICAgY29uc3Qgc2NhbGVZOiBudW1iZXIgPVxyXG4gICAgICAgICAgbGF5b3V0Qm91bmRzT25UZXgwMS5oZWlnaHQgLyB0aGlzLl90bXBCb3VuZHNPbk1vZGVsLmhlaWdodDtcclxuXHJcbiAgICAgICAgLy8g44Oe44K544Kv55Sf5oiQ5pmC44Gr5L2/44GG6KGM5YiX44KS5rGC44KB44KLXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgLy8g44K344Kn44O844OA44Gr5rih44GZ6KGM5YiX44KS5rGC44KB44KLIDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCDopoHmnIDpganljJbvvIjpgIbpoIbjgavoqIjnrpfjgZnjgozjgbDjgrfjg7Pjg5fjg6vjgavjgafjgY3jgovvvIlcclxuICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC5sb2FkSWRlbnRpdHkoKTtcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgLy8gbGF5b3V0MC4uMSDjgpIgLTEuLjHjgavlpInmj5tcclxuICAgICAgICAgICAgdGhpcy5fdG1wTWF0cml4LnRyYW5zbGF0ZVJlbGF0aXZlKC0xLjAsIC0xLjApO1xyXG4gICAgICAgICAgICB0aGlzLl90bXBNYXRyaXguc2NhbGVSZWxhdGl2ZSgyLjAsIDIuMCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIHZpZXcgdG8gbGF5b3V0MC4uMVxyXG4gICAgICAgICAgICB0aGlzLl90bXBNYXRyaXgudHJhbnNsYXRlUmVsYXRpdmUoXHJcbiAgICAgICAgICAgICAgbGF5b3V0Qm91bmRzT25UZXgwMS54LFxyXG4gICAgICAgICAgICAgIGxheW91dEJvdW5kc09uVGV4MDEueVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLl90bXBNYXRyaXguc2NhbGVSZWxhdGl2ZShzY2FsZVgsIHNjYWxlWSk7IC8vIG5ldyA9IFt0cmFuc2xhdGVdW3NjYWxlXVxyXG4gICAgICAgICAgICB0aGlzLl90bXBNYXRyaXgudHJhbnNsYXRlUmVsYXRpdmUoXHJcbiAgICAgICAgICAgICAgLXRoaXMuX3RtcEJvdW5kc09uTW9kZWwueCxcclxuICAgICAgICAgICAgICAtdGhpcy5fdG1wQm91bmRzT25Nb2RlbC55XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIC8vIG5ldyA9IFt0cmFuc2xhdGVdW3NjYWxlXVt0cmFuc2xhdGVdXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyB0bXBNYXRyaXhGb3JNYXNr44GM6KiI566X57WQ5p6cXHJcbiAgICAgICAgICB0aGlzLl90bXBNYXRyaXhGb3JNYXNrLnNldE1hdHJpeCh0aGlzLl90bXBNYXRyaXguZ2V0QXJyYXkoKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy0tLS0tLS0tLSBkcmF35pmC44GuIG1hc2sg5Y+C54Wn55So6KGM5YiX44KS6KiI566XXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgLy8g44K344Kn44O844OA44Gr5rih44GZ6KGM5YiX44KS5rGC44KB44KLIDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCDopoHmnIDpganljJbvvIjpgIbpoIbjgavoqIjnrpfjgZnjgozjgbDjgrfjg7Pjg5fjg6vjgavjgafjgY3jgovvvIlcclxuICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC5sb2FkSWRlbnRpdHkoKTtcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fdG1wTWF0cml4LnRyYW5zbGF0ZVJlbGF0aXZlKFxyXG4gICAgICAgICAgICAgIGxheW91dEJvdW5kc09uVGV4MDEueCxcclxuICAgICAgICAgICAgICBsYXlvdXRCb3VuZHNPblRleDAxLnlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy5fdG1wTWF0cml4LnNjYWxlUmVsYXRpdmUoc2NhbGVYLCBzY2FsZVkpOyAvLyBuZXcgPSBbdHJhbnNsYXRlXVtzY2FsZV1cclxuICAgICAgICAgICAgdGhpcy5fdG1wTWF0cml4LnRyYW5zbGF0ZVJlbGF0aXZlKFxyXG4gICAgICAgICAgICAgIC10aGlzLl90bXBCb3VuZHNPbk1vZGVsLngsXHJcbiAgICAgICAgICAgICAgLXRoaXMuX3RtcEJvdW5kc09uTW9kZWwueVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAvLyBuZXcgPSBbdHJhbnNsYXRlXVtzY2FsZV1bdHJhbnNsYXRlXVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdGhpcy5fdG1wTWF0cml4Rm9yRHJhdy5zZXRNYXRyaXgodGhpcy5fdG1wTWF0cml4LmdldEFycmF5KCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjbGlwQ29udGV4dC5fbWF0cml4Rm9yTWFzay5zZXRNYXRyaXgodGhpcy5fdG1wTWF0cml4Rm9yTWFzay5nZXRBcnJheSgpKTtcclxuICAgICAgICBjbGlwQ29udGV4dC5fbWF0cml4Rm9yRHJhdy5zZXRNYXRyaXgodGhpcy5fdG1wTWF0cml4Rm9yRHJhdy5nZXRBcnJheSgpKTtcclxuXHJcbiAgICAgICAgY29uc3QgY2xpcERyYXdDb3VudDogbnVtYmVyID0gY2xpcENvbnRleHQuX2NsaXBwaW5nSWRDb3VudDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNsaXBEcmF3Q291bnQ7IGkrKykge1xyXG4gICAgICAgICAgY29uc3QgY2xpcERyYXdJbmRleDogbnVtYmVyID0gY2xpcENvbnRleHQuX2NsaXBwaW5nSWRMaXN0W2ldO1xyXG5cclxuICAgICAgICAgIC8vIOmggueCueaDheWgseOBjOabtOaWsOOBleOCjOOBpuOBiuOCieOBmuOAgeS/oemgvOaAp+OBjOOBquOBhOWgtOWQiOOBr+aPj+eUu+OCkuODkeOCueOBmeOCi1xyXG4gICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAhbW9kZWwuZ2V0RHJhd2FibGVEeW5hbWljRmxhZ1ZlcnRleFBvc2l0aW9uc0RpZENoYW5nZShjbGlwRHJhd0luZGV4KVxyXG4gICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHJlbmRlcmVyLnNldElzQ3VsbGluZyhcclxuICAgICAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVDdWxsaW5nKGNsaXBEcmF3SW5kZXgpICE9IGZhbHNlXHJcbiAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgIC8vIOS7iuWbnuWwgueUqOOBruWkieaPm+OCkumBqeeUqOOBl+OBpuaPj+OBj1xyXG4gICAgICAgICAgLy8g44OB44Oj44Oz44ON44Or44KC5YiH44KK5pu/44GI44KL5b+F6KaB44GM44GC44KLKEEsUixHLEIpXHJcbiAgICAgICAgICByZW5kZXJlci5zZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrKGNsaXBDb250ZXh0KTtcclxuICAgICAgICAgIHJlbmRlcmVyLmRyYXdNZXNoKFxyXG4gICAgICAgICAgICBtb2RlbC5nZXREcmF3YWJsZVRleHR1cmVJbmRpY2VzKGNsaXBEcmF3SW5kZXgpLFxyXG4gICAgICAgICAgICBtb2RlbC5nZXREcmF3YWJsZVZlcnRleEluZGV4Q291bnQoY2xpcERyYXdJbmRleCksXHJcbiAgICAgICAgICAgIG1vZGVsLmdldERyYXdhYmxlVmVydGV4Q291bnQoY2xpcERyYXdJbmRleCksXHJcbiAgICAgICAgICAgIG1vZGVsLmdldERyYXdhYmxlVmVydGV4SW5kaWNlcyhjbGlwRHJhd0luZGV4KSxcclxuICAgICAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVWZXJ0aWNlcyhjbGlwRHJhd0luZGV4KSxcclxuICAgICAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVWZXJ0ZXhVdnMoY2xpcERyYXdJbmRleCksXHJcbiAgICAgICAgICAgIG1vZGVsLmdldERyYXdhYmxlT3BhY2l0eShjbGlwRHJhd0luZGV4KSxcclxuICAgICAgICAgICAgQ3ViaXNtQmxlbmRNb2RlLkN1YmlzbUJsZW5kTW9kZV9Ob3JtYWwsIC8vIOOCr+ODquODg+ODlOODs+OCsOOBr+mAmuW4uOaPj+eUu+OCkuW8t+WItlxyXG4gICAgICAgICAgICBmYWxzZSAvLyDjg57jgrnjgq/nlJ/miJDmmYLjga/jgq/jg6rjg4Pjg5Tjg7PjgrDjga7lj43ou6Lkvb/nlKjjga/lhajjgY/plqLkv4LjgYzjgarjgYRcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyAtLS0g5b6M5Yem55CGIC0tLVxyXG4gICAgICB0aGlzLmdsLmJpbmRGcmFtZWJ1ZmZlcih0aGlzLmdsLkZSQU1FQlVGRkVSLCBzX2Zibyk7IC8vIOaPj+eUu+WvvuixoeOCkuaIu+OBmVxyXG4gICAgICByZW5kZXJlci5zZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrKG51bGwpO1xyXG5cclxuICAgICAgdGhpcy5nbC52aWV3cG9ydChcclxuICAgICAgICBzX3ZpZXdwb3J0WzBdLFxyXG4gICAgICAgIHNfdmlld3BvcnRbMV0sXHJcbiAgICAgICAgc192aWV3cG9ydFsyXSxcclxuICAgICAgICBzX3ZpZXdwb3J0WzNdXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDml6Ljgavjg57jgrnjgq/jgpLkvZzjgaPjgabjgYTjgovjgYvjgpLnorroqo1cclxuICAgKiDkvZzjgaPjgabjgYTjgovmp5jjgafjgYLjgozjgbDoqbLlvZPjgZnjgovjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLov5TjgZlcclxuICAgKiDkvZzjgaPjgabjgYTjgarjgZHjgozjgbBOVUxM44KS6L+U44GZXHJcbiAgICogQHBhcmFtIGRyYXdhYmxlTWFza3Mg5o+P55S744Kq44OW44K444Kn44Kv44OI44KS44Oe44K544Kv44GZ44KL5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu44Oq44K544OIXHJcbiAgICogQHBhcmFtIGRyYXdhYmxlTWFza0NvdW50cyDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjgpLjg57jgrnjgq/jgZnjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7mlbBcclxuICAgKiBAcmV0dXJuIOipsuW9k+OBmeOCi+OCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBjOWtmOWcqOOBmeOCjOOBsOOCpOODs+OCueOCv+ODs+OCueOCkui/lOOBl+OAgeOBquOBkeOCjOOBsE5VTEzjgpLov5TjgZlcclxuICAgKi9cclxuICBwdWJsaWMgZmluZFNhbWVDbGlwKFxyXG4gICAgZHJhd2FibGVNYXNrczogSW50MzJBcnJheSxcclxuICAgIGRyYXdhYmxlTWFza0NvdW50czogbnVtYmVyXHJcbiAgKTogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0IHtcclxuICAgIC8vIOS9nOaIkOa4iOOBv0NsaXBwaW5nQ29udGV4dOOBqOS4gOiHtOOBmeOCi+OBi+eiuuiqjVxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5nZXRTaXplKCk7IGkrKykge1xyXG4gICAgICBjb25zdCBjbGlwcGluZ0NvbnRleHQ6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCA9IHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmF0KFxyXG4gICAgICAgIGlcclxuICAgICAgKTtcclxuICAgICAgY29uc3QgY291bnQ6IG51bWJlciA9IGNsaXBwaW5nQ29udGV4dC5fY2xpcHBpbmdJZENvdW50O1xyXG5cclxuICAgICAgLy8g5YCL5pWw44GM6YGV44GG5aC05ZCI44Gv5Yil54mpXHJcbiAgICAgIGlmIChjb3VudCAhPSBkcmF3YWJsZU1hc2tDb3VudHMpIHtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IHNhbWVDb3VudCA9IDA7XHJcblxyXG4gICAgICAvLyDlkIzjgZhJROOCkuaMgeOBpOOBi+eiuuiqjeOAgumFjeWIl+OBruaVsOOBjOWQjOOBmOOBquOBruOBp+OAgeS4gOiHtOOBl+OBn+WAi+aVsOOBjOWQjOOBmOOBquOCieWQjOOBmOeJqeOCkuaMgeOBpOOBqOOBmeOCi1xyXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvdW50OyBqKyspIHtcclxuICAgICAgICBjb25zdCBjbGlwSWQ6IG51bWJlciA9IGNsaXBwaW5nQ29udGV4dC5fY2xpcHBpbmdJZExpc3Rbal07XHJcblxyXG4gICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgY291bnQ7IGsrKykge1xyXG4gICAgICAgICAgaWYgKGRyYXdhYmxlTWFza3Nba10gPT0gY2xpcElkKSB7XHJcbiAgICAgICAgICAgIHNhbWVDb3VudCsrO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChzYW1lQ291bnQgPT0gY291bnQpIHtcclxuICAgICAgICByZXR1cm4gY2xpcHBpbmdDb250ZXh0O1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG51bGw7IC8vIOimi+OBpOOBi+OCieOBquOBi+OBo+OBn1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OI44KS6YWN572u44GZ44KL44Os44Kk44Ki44Km44OIXHJcbiAgICog5LiA44Gk44Gu44Os44Oz44OA44O844OG44Kv44K544OB44Oj44KS5qW15Yqb44GE44Gj44Gx44GE44Gr5L2/44Gj44Gm44Oe44K544Kv44KS44Os44Kk44Ki44Km44OI44GZ44KLXHJcbiAgICog44Oe44K544Kv44Kw44Or44O844OX44Gu5pWw44GMNOS7peS4i+OBquOCiVJHQkHlkITjg4Hjg6Pjg7Pjg43jg6vjgavkuIDjgaTjgZrjgaTjg57jgrnjgq/jgpLphY3nva7jgZfjgIE15Lul5LiKNuS7peS4i+OBquOCiVJHQkHjgpIyLDIsMSwx44Go6YWN572u44GZ44KL44CCXHJcbiAgICpcclxuICAgKiBAcGFyYW0gdXNpbmdDbGlwQ291bnQg6YWN572u44GZ44KL44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OI44Gu5pWwXHJcbiAgICovXHJcbiAgcHVibGljIHNldHVwTGF5b3V0Qm91bmRzKHVzaW5nQ2xpcENvdW50OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIC8vIOOBsuOBqOOBpOOBrlJlbmRlclRleHR1cmXjgpLmpbXlipvjgYTjgaPjgbHjgYTjgavkvb/jgaPjgabjg57jgrnjgq/jgpLjg6zjgqTjgqLjgqbjg4jjgZnjgotcclxuICAgIC8vIOODnuOCueOCr+OCsOODq+ODvOODl+OBruaVsOOBjDTku6XkuIvjgarjgolSR0JB5ZCE44OB44Oj44Oz44ON44Or44GrMeOBpOOBmuOBpOODnuOCueOCr+OCkumFjee9ruOBl+OAgTXku6XkuIo25Lul5LiL44Gq44KJUkdCQeOCkjIsMiwxLDHjgajphY3nva7jgZnjgotcclxuXHJcbiAgICAvLyBSR0JB44KS6aCG55Wq44Gr5L2/44Gj44Gm44GE44GPXHJcbiAgICBsZXQgZGl2OiBudW1iZXIgPSB1c2luZ0NsaXBDb3VudCAvIENvbG9yQ2hhbm5lbENvdW50OyAvLyAx44OB44Oj44Oz44ON44Or44Gr6YWN572u44GZ44KL5Z+65pys44Gu44Oe44K544KvXHJcbiAgICBsZXQgbW9kOiBudW1iZXIgPSB1c2luZ0NsaXBDb3VudCAlIENvbG9yQ2hhbm5lbENvdW50OyAvLyDkvZnjgorjgIHjgZPjga7nlarlj7fjga7jg4Hjg6Pjg7Pjg43jg6vjgb7jgafjgavkuIDjgaTjgZrjgaTphY3liIbjgZnjgotcclxuXHJcbiAgICAvLyDlsI/mlbDngrnjga/liIfjgormjajjgabjgotcclxuICAgIGRpdiA9IH5+ZGl2O1xyXG4gICAgbW9kID0gfn5tb2Q7XHJcblxyXG4gICAgLy8gUkdCQeOBneOCjOOBnuOCjOOBruODgeODo+ODs+ODjeODq+OCkueUqOaEj+OBl+OBpuOBhOOBj++8iDA6UiwgMTpHLCAyOkIsIDM6Qe+8iVxyXG4gICAgbGV0IGN1ckNsaXBJbmRleCA9IDA7IC8vIOmghueVquOBq+ioreWumuOBl+OBpuOBhOOBj1xyXG5cclxuICAgIGZvciAobGV0IGNoYW5uZWxObyA9IDA7IGNoYW5uZWxObyA8IENvbG9yQ2hhbm5lbENvdW50OyBjaGFubmVsTm8rKykge1xyXG4gICAgICAvLyDjgZPjga7jg4Hjg6Pjg7Pjg43jg6vjgavjg6zjgqTjgqLjgqbjg4jjgZnjgovmlbBcclxuICAgICAgY29uc3QgbGF5b3V0Q291bnQ6IG51bWJlciA9IGRpdiArIChjaGFubmVsTm8gPCBtb2QgPyAxIDogMCk7XHJcblxyXG4gICAgICAvLyDliIblibLmlrnms5XjgpLmsbrlrprjgZnjgotcclxuICAgICAgaWYgKGxheW91dENvdW50ID09IDApIHtcclxuICAgICAgICAvLyDkvZXjgoLjgZfjgarjgYRcclxuICAgICAgfSBlbHNlIGlmIChsYXlvdXRDb3VudCA9PSAxKSB7XHJcbiAgICAgICAgLy8g5YWo44Gm44KS44Gd44Gu44G+44G+5L2/44GGXHJcbiAgICAgICAgY29uc3QgY2xpcENvbnRleHQ6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCA9IHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmF0KFxyXG4gICAgICAgICAgY3VyQ2xpcEluZGV4KytcclxuICAgICAgICApO1xyXG4gICAgICAgIGNsaXBDb250ZXh0Ll9sYXlvdXRDaGFubmVsTm8gPSBjaGFubmVsTm87XHJcbiAgICAgICAgY2xpcENvbnRleHQuX2xheW91dEJvdW5kcy54ID0gMC4wO1xyXG4gICAgICAgIGNsaXBDb250ZXh0Ll9sYXlvdXRCb3VuZHMueSA9IDAuMDtcclxuICAgICAgICBjbGlwQ29udGV4dC5fbGF5b3V0Qm91bmRzLndpZHRoID0gMS4wO1xyXG4gICAgICAgIGNsaXBDb250ZXh0Ll9sYXlvdXRCb3VuZHMuaGVpZ2h0ID0gMS4wO1xyXG4gICAgICB9IGVsc2UgaWYgKGxheW91dENvdW50ID09IDIpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxheW91dENvdW50OyBpKyspIHtcclxuICAgICAgICAgIGxldCB4cG9zOiBudW1iZXIgPSBpICUgMjtcclxuXHJcbiAgICAgICAgICAvLyDlsI/mlbDngrnjga/liIfjgormjajjgabjgotcclxuICAgICAgICAgIHhwb3MgPSB+fnhwb3M7XHJcblxyXG4gICAgICAgICAgY29uc3QgY2M6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCA9IHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmF0KFxyXG4gICAgICAgICAgICBjdXJDbGlwSW5kZXgrK1xyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIGNjLl9sYXlvdXRDaGFubmVsTm8gPSBjaGFubmVsTm87XHJcblxyXG4gICAgICAgICAgY2MuX2xheW91dEJvdW5kcy54ID0geHBvcyAqIDAuNTtcclxuICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMueSA9IDAuMDtcclxuICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMud2lkdGggPSAwLjU7XHJcbiAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLmhlaWdodCA9IDEuMDtcclxuICAgICAgICAgIC8vIFVW44KSMuOBpOOBq+WIhuino+OBl+OBpuS9v+OBhlxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmIChsYXlvdXRDb3VudCA8PSA0KSB7XHJcbiAgICAgICAgLy8gNOWIhuWJsuOBl+OBpuS9v+OBhlxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGF5b3V0Q291bnQ7IGkrKykge1xyXG4gICAgICAgICAgbGV0IHhwb3M6IG51bWJlciA9IGkgJSAyO1xyXG4gICAgICAgICAgbGV0IHlwb3M6IG51bWJlciA9IGkgLyAyO1xyXG5cclxuICAgICAgICAgIC8vIOWwj+aVsOeCueOBr+WIh+OCiuaNqOOBpuOCi1xyXG4gICAgICAgICAgeHBvcyA9IH5+eHBvcztcclxuICAgICAgICAgIHlwb3MgPSB+fnlwb3M7XHJcblxyXG4gICAgICAgICAgY29uc3QgY2MgPSB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5hdChjdXJDbGlwSW5kZXgrKyk7XHJcbiAgICAgICAgICBjYy5fbGF5b3V0Q2hhbm5lbE5vID0gY2hhbm5lbE5vO1xyXG5cclxuICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMueCA9IHhwb3MgKiAwLjU7XHJcbiAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLnkgPSB5cG9zICogMC41O1xyXG4gICAgICAgICAgY2MuX2xheW91dEJvdW5kcy53aWR0aCA9IDAuNTtcclxuICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMuaGVpZ2h0ID0gMC41O1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmIChsYXlvdXRDb3VudCA8PSA5KSB7XHJcbiAgICAgICAgLy8gOeWIhuWJsuOBl+OBpuS9v+OBhlxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGF5b3V0Q291bnQ7IGkrKykge1xyXG4gICAgICAgICAgbGV0IHhwb3MgPSBpICUgMztcclxuICAgICAgICAgIGxldCB5cG9zID0gaSAvIDM7XHJcblxyXG4gICAgICAgICAgLy8g5bCP5pWw54K544Gv5YiH44KK5o2o44Gm44KLXHJcbiAgICAgICAgICB4cG9zID0gfn54cG9zO1xyXG4gICAgICAgICAgeXBvcyA9IH5+eXBvcztcclxuXHJcbiAgICAgICAgICBjb25zdCBjYzogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0ID0gdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suYXQoXHJcbiAgICAgICAgICAgIGN1ckNsaXBJbmRleCsrXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgY2MuX2xheW91dENoYW5uZWxObyA9IGNoYW5uZWxObztcclxuXHJcbiAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLnggPSB4cG9zIC8gMy4wO1xyXG4gICAgICAgICAgY2MuX2xheW91dEJvdW5kcy55ID0geXBvcyAvIDMuMDtcclxuICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMud2lkdGggPSAxLjAgLyAzLjA7XHJcbiAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLmhlaWdodCA9IDEuMCAvIDMuMDtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgQ3ViaXNtTG9nRXJyb3IoJ25vdCBzdXBwb3J0ZWQgbWFzayBjb3VudCA6IHswfScsIGxheW91dENvdW50KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Kr44Op44O844OQ44OD44OV44Kh44KS5Y+W5b6X44GZ44KLXHJcbiAgICogQHJldHVybiDjgqvjg6njg7zjg5Djg4Pjg5XjgqFcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Q29sb3JCdWZmZXIoKTogV2ViR0xUZXh0dXJlIHtcclxuICAgIHJldHVybiB0aGlzLl9jb2xvckJ1ZmZlcjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOeUu+mdouaPj+eUu+OBq+S9v+eUqOOBmeOCi+OCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBruODquOCueODiOOCkuWPluW+l+OBmeOCi1xyXG4gICAqIEByZXR1cm4g55S76Z2i5o+P55S744Gr5L2/55So44GZ44KL44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu44Oq44K544OIXHJcbiAgICovXHJcbiAgcHVibGljIGdldENsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3KCk6IGNzbVZlY3RvcjxDdWJpc21DbGlwcGluZ0NvbnRleHQ+IHtcclxuICAgIHJldHVybiB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODkOODg+ODleOCoeOBruOCteOCpOOCuuOCkuioreWumuOBmeOCi1xyXG4gICAqIEBwYXJhbSBzaXplIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODkOODg+ODleOCoeOBruOCteOCpOOCulxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRDbGlwcGluZ01hc2tCdWZmZXJTaXplKHNpemU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5fY2xpcHBpbmdNYXNrQnVmZmVyU2l6ZSA9IHNpemU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrrjgpLlj5blvpfjgZnjgotcclxuICAgKiBAcmV0dXJuIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODkOODg+ODleOCoeOBruOCteOCpOOCulxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRDbGlwcGluZ01hc2tCdWZmZXJTaXplKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fY2xpcHBpbmdNYXNrQnVmZmVyU2l6ZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBfbWFza1JlbmRlclRleHR1cmU6IFdlYkdMRnJhbWVidWZmZXI7IC8vIOODnuOCueOCr+eUqOODrOODs+ODgOODvOODhuOCr+OCueODgeODo+OBruOCouODieODrOOCuVxyXG4gIHB1YmxpYyBfY29sb3JCdWZmZXI6IFdlYkdMVGV4dHVyZTsgLy8g44Oe44K544Kv55So44Kr44Op44O844OQ44OD44OV44Kh44O844Gu44Ki44OJ44Os44K5XHJcbiAgcHVibGljIF9jdXJyZW50RnJhbWVObzogbnVtYmVyOyAvLyDjg57jgrnjgq/jg4bjgq/jgrnjg4Hjg6PjgavkuI7jgYjjgovjg5Xjg6zjg7zjg6Dnlarlj7dcclxuXHJcbiAgcHVibGljIF9jaGFubmVsQ29sb3JzOiBjc21WZWN0b3I8Q3ViaXNtVGV4dHVyZUNvbG9yPjtcclxuICBwdWJsaWMgX21hc2tUZXh0dXJlOiBDdWJpc21SZW5kZXJUZXh0dXJlUmVzb3VyY2U7IC8vIOODnuOCueOCr+eUqOOBruODhuOCr+OCueODgeODo+ODquOCveODvOOCueOBruODquOCueODiFxyXG4gIHB1YmxpYyBfY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2s6IGNzbVZlY3RvcjxDdWJpc21DbGlwcGluZ0NvbnRleHQ+OyAvLyDjg57jgrnjgq/nlKjjgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4jjga7jg6rjgrnjg4hcclxuICBwdWJsaWMgX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3OiBjc21WZWN0b3I8Q3ViaXNtQ2xpcHBpbmdDb250ZXh0PjsgLy8g5o+P55S755So44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OI44Gu44Oq44K544OIXHJcbiAgcHVibGljIF9jbGlwcGluZ01hc2tCdWZmZXJTaXplOiBudW1iZXI7IC8vIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBruODkOODg+ODleOCoeOCteOCpOOCuu+8iOWIneacn+WApDoyNTbvvIlcclxuXHJcbiAgcHJpdmF0ZSBfdG1wTWF0cml4OiBDdWJpc21NYXRyaXg0NDsgLy8g44Oe44K544Kv6KiI566X55So44Gu6KGM5YiXXHJcbiAgcHJpdmF0ZSBfdG1wTWF0cml4Rm9yTWFzazogQ3ViaXNtTWF0cml4NDQ7IC8vIOODnuOCueOCr+ioiOeul+eUqOOBruihjOWIl1xyXG4gIHByaXZhdGUgX3RtcE1hdHJpeEZvckRyYXc6IEN1YmlzbU1hdHJpeDQ0OyAvLyDjg57jgrnjgq/oqIjnrpfnlKjjga7ooYzliJdcclxuICBwcml2YXRlIF90bXBCb3VuZHNPbk1vZGVsOiBjc21SZWN0OyAvLyDjg57jgrnjgq/phY3nva7oqIjnrpfnlKjjga7nn6nlvaJcclxuXHJcbiAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dDsgLy8gV2ViR0zjg6zjg7Pjg4Djg6rjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4hcclxufVxyXG5cclxuLyoqXHJcbiAqIOODrOODs+ODgOODvOODhuOCr+OCueODgeODo+OBruODquOCveODvOOCueOCkuWumue+qeOBmeOCi+ani+mAoOS9k1xyXG4gKiDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jgafkvb/nlKjjgZnjgotcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDdWJpc21SZW5kZXJUZXh0dXJlUmVzb3VyY2Uge1xyXG4gIC8qKlxyXG4gICAqIOW8leaVsOS7mOOBjeOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAqIEBwYXJhbSBmcmFtZU5vIOODrOODs+ODgOODqeODvOOBruODleODrOODvOODoOeVquWPt1xyXG4gICAqIEBwYXJhbSB0ZXh0dXJlIOODhuOCr+OCueODgeODo+OBruOCouODieODrOOCuVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihmcmFtZU5vOiBudW1iZXIsIHRleHR1cmU6IFdlYkdMRnJhbWVidWZmZXIpIHtcclxuICAgIHRoaXMuZnJhbWVObyA9IGZyYW1lTm87XHJcbiAgICB0aGlzLnRleHR1cmUgPSB0ZXh0dXJlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGZyYW1lTm86IG51bWJlcjsgLy8g44Os44Oz44OA44Op44Gu44OV44Os44O844Og55Wq5Y+3XHJcbiAgcHVibGljIHRleHR1cmU6IFdlYkdMRnJhbWVidWZmZXI7IC8vIOODhuOCr+OCueODgeODo+OBruOCouODieODrOOCuVxyXG59XHJcblxyXG4vKipcclxuICog44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu44Kz44Oz44OG44Kt44K544OIXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ3ViaXNtQ2xpcHBpbmdDb250ZXh0IHtcclxuICAvKipcclxuICAgKiDlvJXmlbDku5jjgY3jgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoXHJcbiAgICBtYW5hZ2VyOiBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0wsXHJcbiAgICBjbGlwcGluZ0RyYXdhYmxlSW5kaWNlczogSW50MzJBcnJheSxcclxuICAgIGNsaXBDb3VudDogbnVtYmVyXHJcbiAgKSB7XHJcbiAgICB0aGlzLl9vd25lciA9IG1hbmFnZXI7XHJcblxyXG4gICAgLy8g44Kv44Oq44OD44OX44GX44Gm44GE44KL77yI77yd44Oe44K544Kv55So44Gu77yJRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrnjg6rjgrnjg4hcclxuICAgIHRoaXMuX2NsaXBwaW5nSWRMaXN0ID0gY2xpcHBpbmdEcmF3YWJsZUluZGljZXM7XHJcblxyXG4gICAgLy8g44Oe44K544Kv44Gu5pWwXHJcbiAgICB0aGlzLl9jbGlwcGluZ0lkQ291bnQgPSBjbGlwQ291bnQ7XHJcblxyXG4gICAgdGhpcy5fYWxsQ2xpcHBlZERyYXdSZWN0ID0gbmV3IGNzbVJlY3QoKTtcclxuICAgIHRoaXMuX2xheW91dEJvdW5kcyA9IG5ldyBjc21SZWN0KCk7XHJcblxyXG4gICAgdGhpcy5fY2xpcHBlZERyYXdhYmxlSW5kZXhMaXN0ID0gW107XHJcblxyXG4gICAgdGhpcy5fbWF0cml4Rm9yTWFzayA9IG5ldyBDdWJpc21NYXRyaXg0NCgpO1xyXG4gICAgdGhpcy5fbWF0cml4Rm9yRHJhdyA9IG5ldyBDdWJpc21NYXRyaXg0NCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXHJcbiAgICovXHJcbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5fbGF5b3V0Qm91bmRzICE9IG51bGwpIHtcclxuICAgICAgdGhpcy5fbGF5b3V0Qm91bmRzID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5fYWxsQ2xpcHBlZERyYXdSZWN0ICE9IG51bGwpIHtcclxuICAgICAgdGhpcy5fYWxsQ2xpcHBlZERyYXdSZWN0ID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5fY2xpcHBlZERyYXdhYmxlSW5kZXhMaXN0ICE9IG51bGwpIHtcclxuICAgICAgdGhpcy5fY2xpcHBlZERyYXdhYmxlSW5kZXhMaXN0ID0gbnVsbDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOBk+OBruODnuOCueOCr+OBq+OCr+ODquODg+ODl+OBleOCjOOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiOOCkui/veWKoOOBmeOCi1xyXG4gICAqXHJcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXgg44Kv44Oq44OD44OU44Oz44Kw5a++6LGh44Gr6L+95Yqg44GZ44KL5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICovXHJcbiAgcHVibGljIGFkZENsaXBwZWREcmF3YWJsZShkcmF3YWJsZUluZGV4OiBudW1iZXIpIHtcclxuICAgIHRoaXMuX2NsaXBwZWREcmF3YWJsZUluZGV4TGlzdC5wdXNoKGRyYXdhYmxlSW5kZXgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44GT44Gu44Oe44K544Kv44KS566h55CG44GZ44KL44Oe44ON44O844K444Oj44Gu44Kk44Oz44K544K/44Oz44K544KS5Y+W5b6X44GZ44KLXHJcbiAgICogQHJldHVybiDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jg43jg7zjgrjjg6Pjga7jgqTjg7Pjgrnjgr/jg7PjgrlcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Q2xpcHBpbmdNYW5hZ2VyKCk6IEN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTCB7XHJcbiAgICByZXR1cm4gdGhpcy5fb3duZXI7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0R2woZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCk6IHZvaWQge1xyXG4gICAgdGhpcy5fb3duZXIuc2V0R0woZ2wpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIF9pc1VzaW5nOiBib29sZWFuOyAvLyDnj77lnKjjga7mj4/nlLvnirbmhYvjgafjg57jgrnjgq/jga7mupblgpnjgYzlv4XopoHjgarjgol0cnVlXHJcbiAgcHVibGljIHJlYWRvbmx5IF9jbGlwcGluZ0lkTGlzdDogSW50MzJBcnJheTsgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44GuSUTjg6rjgrnjg4hcclxuICBwdWJsaWMgX2NsaXBwaW5nSWRDb3VudDogbnVtYmVyOyAvLyDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7mlbBcclxuICBwdWJsaWMgX2xheW91dENoYW5uZWxObzogbnVtYmVyOyAvLyBSR0JB44Gu44GE44Ga44KM44Gu44OB44Oj44Oz44ON44Or44Gr44GT44Gu44Kv44Oq44OD44OX44KS6YWN572u44GZ44KL44GL77yIMDpSLCAxOkcsIDI6QiwgMzpB77yJXHJcbiAgcHVibGljIF9sYXlvdXRCb3VuZHM6IGNzbVJlY3Q7IC8vIOODnuOCueOCr+eUqOODgeODo+ODs+ODjeODq+OBruOBqeOBrumgmOWfn+OBq+ODnuOCueOCr+OCkuWFpeOCjOOCi+OBi++8iFZpZXfluqfmqJktMX4xLCBVVuOBrzB+MeOBq+ebtOOBme+8iVxyXG4gIHB1YmxpYyBfYWxsQ2xpcHBlZERyYXdSZWN0OiBjc21SZWN0OyAvLyDjgZPjga7jgq/jg6rjg4Pjg5Tjg7PjgrDjgafjgIHjgq/jg6rjg4Pjg5Tjg7PjgrDjgZXjgozjgovjgZnjgbnjgabjga7mj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7lm7Ljgb/nn6nlvaLvvIjmr47lm57mm7TmlrDvvIlcclxuICBwdWJsaWMgX21hdHJpeEZvck1hc2s6IEN1YmlzbU1hdHJpeDQ0OyAvLyDjg57jgrnjgq/jga7kvY3nva7oqIjnrpfntZDmnpzjgpLkv53mjIHjgZnjgovooYzliJdcclxuICBwdWJsaWMgX21hdHJpeEZvckRyYXc6IEN1YmlzbU1hdHJpeDQ0OyAvLyDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7kvY3nva7oqIjnrpfntZDmnpzjgpLkv53mjIHjgZnjgovooYzliJdcclxuICBwdWJsaWMgX2NsaXBwZWREcmF3YWJsZUluZGV4TGlzdDogbnVtYmVyW107IC8vIOOBk+OBruODnuOCueOCr+OBq+OCr+ODquODg+ODl+OBleOCjOOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruODquOCueODiFxyXG5cclxuICBwcml2YXRlIF9vd25lcjogQ3ViaXNtQ2xpcHBpbmdNYW5hZ2VyX1dlYkdMOyAvLyDjgZPjga7jg57jgrnjgq/jgpLnrqHnkIbjgZfjgabjgYTjgovjg57jg43jg7zjgrjjg6Pjga7jgqTjg7Pjgrnjgr/jg7PjgrlcclxufVxyXG5cclxuLyoqXHJcbiAqIFdlYkdM55So44Gu44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44KS55Sf5oiQ44O756C05qOE44GZ44KL44Kv44Op44K5XHJcbiAqIOOCt+ODs+OCsOODq+ODiOODs+OBquOCr+ODqeOCueOBp+OBguOCiuOAgUN1YmlzbVNoYWRlcl9XZWJHTC5nZXRJbnN0YW5jZeOBi+OCieOCouOCr+OCu+OCueOBmeOCi+OAglxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEN1YmlzbVNoYWRlcl9XZWJHTCB7XHJcbiAgLyoqXHJcbiAgICog44Kk44Oz44K544K/44Oz44K544KS5Y+W5b6X44GZ44KL77yI44K344Oz44Kw44Or44OI44Oz77yJXHJcbiAgICogQHJldHVybiDjgqTjg7Pjgrnjgr/jg7PjgrlcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCk6IEN1YmlzbVNoYWRlcl9XZWJHTCB7XHJcbiAgICBpZiAoc19pbnN0YW5jZSA9PSBudWxsKSB7XHJcbiAgICAgIHNfaW5zdGFuY2UgPSBuZXcgQ3ViaXNtU2hhZGVyX1dlYkdMKCk7XHJcblxyXG4gICAgICByZXR1cm4gc19pbnN0YW5jZTtcclxuICAgIH1cclxuICAgIHJldHVybiBzX2luc3RhbmNlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Kk44Oz44K544K/44Oz44K544KS6ZaL5pS+44GZ44KL77yI44K344Oz44Kw44Or44OI44Oz77yJXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBkZWxldGVJbnN0YW5jZSgpOiB2b2lkIHtcclxuICAgIGlmIChzX2luc3RhbmNlKSB7XHJcbiAgICAgIHNfaW5zdGFuY2UucmVsZWFzZSgpO1xyXG4gICAgICBzX2luc3RhbmNlID0gbnVsbDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIHByaXZhdGXjgarjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgKi9cclxuICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5fc2hhZGVyU2V0cyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtU2hhZGVyU2V0PigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXHJcbiAgICovXHJcbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLnJlbGVhc2VTaGFkZXJQcm9ncmFtKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6Djga7kuIDpgKPjga7jgrvjg4Pjg4jjgqLjg4Pjg5fjgpLlrp/ooYzjgZnjgotcclxuICAgKiBAcGFyYW0gcmVuZGVyZXIg44Os44Oz44OA44Op44Gu44Kk44Oz44K544K/44Oz44K5XHJcbiAgICogQHBhcmFtIHRleHR1cmVJZCBHUFXjga7jg4bjgq/jgrnjg4Hjg6NJRFxyXG4gICAqIEBwYXJhbSB2ZXJ0ZXhDb3VudCDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjga7poILngrnmlbBcclxuICAgKiBAcGFyYW0gdmVydGV4QXJyYXkg44Od44Oq44K044Oz44Oh44OD44K344Ol44Gu6aCC54K56YWN5YiXXHJcbiAgICogQHBhcmFtIGluZGV4QXJyYXkg44Kk44Oz44OH44OD44Kv44K544OQ44OD44OV44Kh44Gu6aCC54K56YWN5YiXXHJcbiAgICogQHBhcmFtIHV2QXJyYXkgdXbphY3liJdcclxuICAgKiBAcGFyYW0gb3BhY2l0eSDkuI3pgI/mmI7luqZcclxuICAgKiBAcGFyYW0gY29sb3JCbGVuZE1vZGUg44Kr44Op44O844OW44Os44Oz44OH44Kj44Oz44Kw44Gu44K/44Kk44OXXHJcbiAgICogQHBhcmFtIGJhc2VDb2xvciDjg5njg7zjgrnjgqvjg6njg7xcclxuICAgKiBAcGFyYW0gaXNQcmVtdWx0aXBsaWVkQWxwaGEg5LmX566X5riI44G/44Ki44Or44OV44Kh44GL44Gp44GG44GLXHJcbiAgICogQHBhcmFtIG1hdHJpeDR4NCBNb2RlbC1WaWV3LVByb2plY3Rpb27ooYzliJdcclxuICAgKiBAcGFyYW0gaW52ZXJ0ZWRNYXNrIOODnuOCueOCr+OCkuWPjei7ouOBl+OBpuS9v+eUqOOBmeOCi+ODleODqeOCsFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXR1cFNoYWRlclByb2dyYW0oXHJcbiAgICByZW5kZXJlcjogQ3ViaXNtUmVuZGVyZXJfV2ViR0wsXHJcbiAgICB0ZXh0dXJlSWQ6IFdlYkdMVGV4dHVyZSxcclxuICAgIHZlcnRleENvdW50OiBudW1iZXIsXHJcbiAgICB2ZXJ0ZXhBcnJheTogRmxvYXQzMkFycmF5LFxyXG4gICAgaW5kZXhBcnJheTogVWludDE2QXJyYXksXHJcbiAgICB1dkFycmF5OiBGbG9hdDMyQXJyYXksXHJcbiAgICBidWZmZXJEYXRhOiB7XHJcbiAgICAgIHZlcnRleDogV2ViR0xCdWZmZXI7XHJcbiAgICAgIHV2OiBXZWJHTEJ1ZmZlcjtcclxuICAgICAgaW5kZXg6IFdlYkdMQnVmZmVyO1xyXG4gICAgfSxcclxuICAgIG9wYWNpdHk6IG51bWJlcixcclxuICAgIGNvbG9yQmxlbmRNb2RlOiBDdWJpc21CbGVuZE1vZGUsXHJcbiAgICBiYXNlQ29sb3I6IEN1YmlzbVRleHR1cmVDb2xvcixcclxuICAgIGlzUHJlbXVsdGlwbGllZEFscGhhOiBib29sZWFuLFxyXG4gICAgbWF0cml4NHg0OiBDdWJpc21NYXRyaXg0NCxcclxuICAgIGludmVydGVkTWFzazogYm9vbGVhblxyXG4gICk6IHZvaWQge1xyXG4gICAgaWYgKCFpc1ByZW11bHRpcGxpZWRBbHBoYSkge1xyXG4gICAgICBDdWJpc21Mb2dFcnJvcignTm9QcmVtdWx0aXBsaWVkQWxwaGEgaXMgbm90IGFsbG93ZWQnKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5fc2hhZGVyU2V0cy5nZXRTaXplKCkgPT0gMCkge1xyXG4gICAgICB0aGlzLmdlbmVyYXRlU2hhZGVycygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEJsZW5kaW5nXHJcbiAgICBsZXQgU1JDX0NPTE9SOiBudW1iZXI7XHJcbiAgICBsZXQgRFNUX0NPTE9SOiBudW1iZXI7XHJcbiAgICBsZXQgU1JDX0FMUEhBOiBudW1iZXI7XHJcbiAgICBsZXQgRFNUX0FMUEhBOiBudW1iZXI7XHJcblxyXG4gICAgaWYgKHJlbmRlcmVyLmdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2soKSAhPSBudWxsKSB7XHJcbiAgICAgIC8vIOODnuOCueOCr+eUn+aIkOaZglxyXG4gICAgICBjb25zdCBzaGFkZXJTZXQ6IEN1YmlzbVNoYWRlclNldCA9IHRoaXMuX3NoYWRlclNldHMuYXQoXHJcbiAgICAgICAgU2hhZGVyTmFtZXMuU2hhZGVyTmFtZXNfU2V0dXBNYXNrXHJcbiAgICAgICk7XHJcbiAgICAgIHRoaXMuZ2wudXNlUHJvZ3JhbShzaGFkZXJTZXQuc2hhZGVyUHJvZ3JhbSk7XHJcblxyXG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6PoqK3lrppcclxuICAgICAgdGhpcy5nbC5hY3RpdmVUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRTApO1xyXG4gICAgICB0aGlzLmdsLmJpbmRUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZUlkKTtcclxuICAgICAgdGhpcy5nbC51bmlmb3JtMWkoc2hhZGVyU2V0LnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uLCAwKTtcclxuXHJcbiAgICAgIC8vIOmggueCuemFjeWIl+OBruioreWumihWQk8pXHJcbiAgICAgIGlmIChidWZmZXJEYXRhLnZlcnRleCA9PSBudWxsKSB7XHJcbiAgICAgICAgYnVmZmVyRGF0YS52ZXJ0ZXggPSB0aGlzLmdsLmNyZWF0ZUJ1ZmZlcigpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyRGF0YS52ZXJ0ZXgpO1xyXG4gICAgICB0aGlzLmdsLmJ1ZmZlckRhdGEoXHJcbiAgICAgICAgdGhpcy5nbC5BUlJBWV9CVUZGRVIsXHJcbiAgICAgICAgdmVydGV4QXJyYXksXHJcbiAgICAgICAgdGhpcy5nbC5EWU5BTUlDX0RSQVdcclxuICAgICAgKTtcclxuICAgICAgdGhpcy5nbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShzaGFkZXJTZXQuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbik7XHJcbiAgICAgIHRoaXMuZ2wudmVydGV4QXR0cmliUG9pbnRlcihcclxuICAgICAgICBzaGFkZXJTZXQuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbixcclxuICAgICAgICAyLFxyXG4gICAgICAgIHRoaXMuZ2wuRkxPQVQsXHJcbiAgICAgICAgZmFsc2UsXHJcbiAgICAgICAgMCxcclxuICAgICAgICAwXHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6PpoILngrnjga7oqK3lrppcclxuICAgICAgaWYgKGJ1ZmZlckRhdGEudXYgPT0gbnVsbCkge1xyXG4gICAgICAgIGJ1ZmZlckRhdGEudXYgPSB0aGlzLmdsLmNyZWF0ZUJ1ZmZlcigpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyRGF0YS51dik7XHJcbiAgICAgIHRoaXMuZ2wuYnVmZmVyRGF0YSh0aGlzLmdsLkFSUkFZX0JVRkZFUiwgdXZBcnJheSwgdGhpcy5nbC5EWU5BTUlDX0RSQVcpO1xyXG4gICAgICB0aGlzLmdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHNoYWRlclNldC5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uKTtcclxuICAgICAgdGhpcy5nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKFxyXG4gICAgICAgIHNoYWRlclNldC5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uLFxyXG4gICAgICAgIDIsXHJcbiAgICAgICAgdGhpcy5nbC5GTE9BVCxcclxuICAgICAgICBmYWxzZSxcclxuICAgICAgICAwLFxyXG4gICAgICAgIDBcclxuICAgICAgKTtcclxuXHJcbiAgICAgIC8vIOODgeODo+ODs+ODjeODq1xyXG4gICAgICBjb25zdCBjaGFubmVsTm86IG51bWJlciA9IHJlbmRlcmVyLmdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2soKVxyXG4gICAgICAgIC5fbGF5b3V0Q2hhbm5lbE5vO1xyXG4gICAgICBjb25zdCBjb2xvckNoYW5uZWw6IEN1YmlzbVRleHR1cmVDb2xvciA9IHJlbmRlcmVyXHJcbiAgICAgICAgLmdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2soKVxyXG4gICAgICAgIC5nZXRDbGlwcGluZ01hbmFnZXIoKVxyXG4gICAgICAgIC5nZXRDaGFubmVsRmxhZ0FzQ29sb3IoY2hhbm5lbE5vKTtcclxuICAgICAgdGhpcy5nbC51bmlmb3JtNGYoXHJcbiAgICAgICAgc2hhZGVyU2V0LnVuaWZvcm1DaGFubmVsRmxhZ0xvY2F0aW9uLFxyXG4gICAgICAgIGNvbG9yQ2hhbm5lbC5SLFxyXG4gICAgICAgIGNvbG9yQ2hhbm5lbC5HLFxyXG4gICAgICAgIGNvbG9yQ2hhbm5lbC5CLFxyXG4gICAgICAgIGNvbG9yQ2hhbm5lbC5BXHJcbiAgICAgICk7XHJcblxyXG4gICAgICB0aGlzLmdsLnVuaWZvcm1NYXRyaXg0ZnYoXHJcbiAgICAgICAgc2hhZGVyU2V0LnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24sXHJcbiAgICAgICAgZmFsc2UsXHJcbiAgICAgICAgcmVuZGVyZXIuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzaygpLl9tYXRyaXhGb3JNYXNrLmdldEFycmF5KClcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGNvbnN0IHJlY3Q6IGNzbVJlY3QgPSByZW5kZXJlci5nZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrKClcclxuICAgICAgICAuX2xheW91dEJvdW5kcztcclxuXHJcbiAgICAgIHRoaXMuZ2wudW5pZm9ybTRmKFxyXG4gICAgICAgIHNoYWRlclNldC51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24sXHJcbiAgICAgICAgcmVjdC54ICogMi4wIC0gMS4wLFxyXG4gICAgICAgIHJlY3QueSAqIDIuMCAtIDEuMCxcclxuICAgICAgICByZWN0LmdldFJpZ2h0KCkgKiAyLjAgLSAxLjAsXHJcbiAgICAgICAgcmVjdC5nZXRCb3R0b20oKSAqIDIuMCAtIDEuMFxyXG4gICAgICApO1xyXG5cclxuICAgICAgU1JDX0NPTE9SID0gdGhpcy5nbC5aRVJPO1xyXG4gICAgICBEU1RfQ09MT1IgPSB0aGlzLmdsLk9ORV9NSU5VU19TUkNfQ09MT1I7XHJcbiAgICAgIFNSQ19BTFBIQSA9IHRoaXMuZ2wuWkVSTztcclxuICAgICAgRFNUX0FMUEhBID0gdGhpcy5nbC5PTkVfTUlOVVNfU1JDX0FMUEhBO1xyXG4gICAgfSAvLyDjg57jgrnjgq/nlJ/miJDku6XlpJbjga7loLTlkIhcclxuICAgIGVsc2Uge1xyXG4gICAgICBjb25zdCBtYXNrZWQ6IGJvb2xlYW4gPVxyXG4gICAgICAgIHJlbmRlcmVyLmdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXcoKSAhPSBudWxsOyAvLyDjgZPjga7mj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga/jg57jgrnjgq/lr77osaHjgYtcclxuICAgICAgY29uc3Qgb2Zmc2V0OiBudW1iZXIgPSBtYXNrZWQgPyAoaW52ZXJ0ZWRNYXNrID8gMiA6IDEpIDogMDtcclxuXHJcbiAgICAgIGxldCBzaGFkZXJTZXQ6IEN1YmlzbVNoYWRlclNldCA9IG5ldyBDdWJpc21TaGFkZXJTZXQoKTtcclxuXHJcbiAgICAgIHN3aXRjaCAoY29sb3JCbGVuZE1vZGUpIHtcclxuICAgICAgICBjYXNlIEN1YmlzbUJsZW5kTW9kZS5DdWJpc21CbGVuZE1vZGVfTm9ybWFsOlxyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICBzaGFkZXJTZXQgPSB0aGlzLl9zaGFkZXJTZXRzLmF0KFxyXG4gICAgICAgICAgICBTaGFkZXJOYW1lcy5TaGFkZXJOYW1lc19Ob3JtYWxQcmVtdWx0aXBsaWVkQWxwaGEgKyBvZmZzZXRcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBTUkNfQ09MT1IgPSB0aGlzLmdsLk9ORTtcclxuICAgICAgICAgIERTVF9DT0xPUiA9IHRoaXMuZ2wuT05FX01JTlVTX1NSQ19BTFBIQTtcclxuICAgICAgICAgIFNSQ19BTFBIQSA9IHRoaXMuZ2wuT05FO1xyXG4gICAgICAgICAgRFNUX0FMUEhBID0gdGhpcy5nbC5PTkVfTUlOVVNfU1JDX0FMUEhBO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgQ3ViaXNtQmxlbmRNb2RlLkN1YmlzbUJsZW5kTW9kZV9BZGRpdGl2ZTpcclxuICAgICAgICAgIHNoYWRlclNldCA9IHRoaXMuX3NoYWRlclNldHMuYXQoXHJcbiAgICAgICAgICAgIFNoYWRlck5hbWVzLlNoYWRlck5hbWVzX0FkZFByZW11bHRpcGxpZWRBbHBoYSArIG9mZnNldFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIFNSQ19DT0xPUiA9IHRoaXMuZ2wuT05FO1xyXG4gICAgICAgICAgRFNUX0NPTE9SID0gdGhpcy5nbC5PTkU7XHJcbiAgICAgICAgICBTUkNfQUxQSEEgPSB0aGlzLmdsLlpFUk87XHJcbiAgICAgICAgICBEU1RfQUxQSEEgPSB0aGlzLmdsLk9ORTtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlIEN1YmlzbUJsZW5kTW9kZS5DdWJpc21CbGVuZE1vZGVfTXVsdGlwbGljYXRpdmU6XHJcbiAgICAgICAgICBzaGFkZXJTZXQgPSB0aGlzLl9zaGFkZXJTZXRzLmF0KFxyXG4gICAgICAgICAgICBTaGFkZXJOYW1lcy5TaGFkZXJOYW1lc19NdWx0UHJlbXVsdGlwbGllZEFscGhhICsgb2Zmc2V0XHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgU1JDX0NPTE9SID0gdGhpcy5nbC5EU1RfQ09MT1I7XHJcbiAgICAgICAgICBEU1RfQ09MT1IgPSB0aGlzLmdsLk9ORV9NSU5VU19TUkNfQUxQSEE7XHJcbiAgICAgICAgICBTUkNfQUxQSEEgPSB0aGlzLmdsLlpFUk87XHJcbiAgICAgICAgICBEU1RfQUxQSEEgPSB0aGlzLmdsLk9ORTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmdsLnVzZVByb2dyYW0oc2hhZGVyU2V0LnNoYWRlclByb2dyYW0pO1xyXG5cclxuICAgICAgLy8g6aCC54K56YWN5YiX44Gu6Kit5a6aXHJcbiAgICAgIGlmIChidWZmZXJEYXRhLnZlcnRleCA9PSBudWxsKSB7XHJcbiAgICAgICAgYnVmZmVyRGF0YS52ZXJ0ZXggPSB0aGlzLmdsLmNyZWF0ZUJ1ZmZlcigpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyRGF0YS52ZXJ0ZXgpO1xyXG4gICAgICB0aGlzLmdsLmJ1ZmZlckRhdGEoXHJcbiAgICAgICAgdGhpcy5nbC5BUlJBWV9CVUZGRVIsXHJcbiAgICAgICAgdmVydGV4QXJyYXksXHJcbiAgICAgICAgdGhpcy5nbC5EWU5BTUlDX0RSQVdcclxuICAgICAgKTtcclxuICAgICAgdGhpcy5nbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShzaGFkZXJTZXQuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbik7XHJcbiAgICAgIHRoaXMuZ2wudmVydGV4QXR0cmliUG9pbnRlcihcclxuICAgICAgICBzaGFkZXJTZXQuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbixcclxuICAgICAgICAyLFxyXG4gICAgICAgIHRoaXMuZ2wuRkxPQVQsXHJcbiAgICAgICAgZmFsc2UsXHJcbiAgICAgICAgMCxcclxuICAgICAgICAwXHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6PpoILngrnjga7oqK3lrppcclxuICAgICAgaWYgKGJ1ZmZlckRhdGEudXYgPT0gbnVsbCkge1xyXG4gICAgICAgIGJ1ZmZlckRhdGEudXYgPSB0aGlzLmdsLmNyZWF0ZUJ1ZmZlcigpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyRGF0YS51dik7XHJcbiAgICAgIHRoaXMuZ2wuYnVmZmVyRGF0YSh0aGlzLmdsLkFSUkFZX0JVRkZFUiwgdXZBcnJheSwgdGhpcy5nbC5EWU5BTUlDX0RSQVcpO1xyXG4gICAgICB0aGlzLmdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHNoYWRlclNldC5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uKTtcclxuICAgICAgdGhpcy5nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKFxyXG4gICAgICAgIHNoYWRlclNldC5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uLFxyXG4gICAgICAgIDIsXHJcbiAgICAgICAgdGhpcy5nbC5GTE9BVCxcclxuICAgICAgICBmYWxzZSxcclxuICAgICAgICAwLFxyXG4gICAgICAgIDBcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGlmIChtYXNrZWQpIHtcclxuICAgICAgICB0aGlzLmdsLmFjdGl2ZVRleHR1cmUodGhpcy5nbC5URVhUVVJFMSk7XHJcbiAgICAgICAgY29uc3QgdGV4OiBXZWJHTFRleHR1cmUgPSByZW5kZXJlclxyXG4gICAgICAgICAgLmdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXcoKVxyXG4gICAgICAgICAgLmdldENsaXBwaW5nTWFuYWdlcigpXHJcbiAgICAgICAgICAuZ2V0Q29sb3JCdWZmZXIoKTtcclxuICAgICAgICB0aGlzLmdsLmJpbmRUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRV8yRCwgdGV4KTtcclxuICAgICAgICB0aGlzLmdsLnVuaWZvcm0xaShzaGFkZXJTZXQuc2FtcGxlclRleHR1cmUxTG9jYXRpb24sIDEpO1xyXG5cclxuICAgICAgICAvLyB2aWV35bqn5qiZ44KSQ2xpcHBpbmdDb250ZXh044Gu5bqn5qiZ44Gr5aSJ5o+b44GZ44KL44Gf44KB44Gu6KGM5YiX44KS6Kit5a6aXHJcbiAgICAgICAgdGhpcy5nbC51bmlmb3JtTWF0cml4NGZ2KFxyXG4gICAgICAgICAgc2hhZGVyU2V0LnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24sXHJcbiAgICAgICAgICBmYWxzZSxcclxuICAgICAgICAgIHJlbmRlcmVyLmdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXcoKS5fbWF0cml4Rm9yRHJhdy5nZXRBcnJheSgpXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8g5L2/55So44GZ44KL44Kr44Op44O844OB44Oj44Oz44ON44Or44KS6Kit5a6aXHJcbiAgICAgICAgY29uc3QgY2hhbm5lbE5vOiBudW1iZXIgPSByZW5kZXJlci5nZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3KClcclxuICAgICAgICAgIC5fbGF5b3V0Q2hhbm5lbE5vO1xyXG4gICAgICAgIGNvbnN0IGNvbG9yQ2hhbm5lbDogQ3ViaXNtVGV4dHVyZUNvbG9yID0gcmVuZGVyZXJcclxuICAgICAgICAgIC5nZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3KClcclxuICAgICAgICAgIC5nZXRDbGlwcGluZ01hbmFnZXIoKVxyXG4gICAgICAgICAgLmdldENoYW5uZWxGbGFnQXNDb2xvcihjaGFubmVsTm8pO1xyXG4gICAgICAgIHRoaXMuZ2wudW5pZm9ybTRmKFxyXG4gICAgICAgICAgc2hhZGVyU2V0LnVuaWZvcm1DaGFubmVsRmxhZ0xvY2F0aW9uLFxyXG4gICAgICAgICAgY29sb3JDaGFubmVsLlIsXHJcbiAgICAgICAgICBjb2xvckNoYW5uZWwuRyxcclxuICAgICAgICAgIGNvbG9yQ2hhbm5lbC5CLFxyXG4gICAgICAgICAgY29sb3JDaGFubmVsLkFcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6PoqK3lrppcclxuICAgICAgdGhpcy5nbC5hY3RpdmVUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRTApO1xyXG4gICAgICB0aGlzLmdsLmJpbmRUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZUlkKTtcclxuICAgICAgdGhpcy5nbC51bmlmb3JtMWkoc2hhZGVyU2V0LnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uLCAwKTtcclxuXHJcbiAgICAgIC8vIOW6p+aomeWkieaPm1xyXG4gICAgICB0aGlzLmdsLnVuaWZvcm1NYXRyaXg0ZnYoXHJcbiAgICAgICAgc2hhZGVyU2V0LnVuaWZvcm1NYXRyaXhMb2NhdGlvbixcclxuICAgICAgICBmYWxzZSxcclxuICAgICAgICBtYXRyaXg0eDQuZ2V0QXJyYXkoKVxyXG4gICAgICApO1xyXG5cclxuICAgICAgdGhpcy5nbC51bmlmb3JtNGYoXHJcbiAgICAgICAgc2hhZGVyU2V0LnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbixcclxuICAgICAgICBiYXNlQ29sb3IuUixcclxuICAgICAgICBiYXNlQ29sb3IuRyxcclxuICAgICAgICBiYXNlQ29sb3IuQixcclxuICAgICAgICBiYXNlQ29sb3IuQVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIElCT+OCkuS9nOaIkOOBl+OAgeODh+ODvOOCv+OCkui7oumAgVxyXG4gICAgaWYgKGJ1ZmZlckRhdGEuaW5kZXggPT0gbnVsbCkge1xyXG4gICAgICBidWZmZXJEYXRhLmluZGV4ID0gdGhpcy5nbC5jcmVhdGVCdWZmZXIoKTtcclxuICAgIH1cclxuICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBidWZmZXJEYXRhLmluZGV4KTtcclxuICAgIHRoaXMuZ2wuYnVmZmVyRGF0YShcclxuICAgICAgdGhpcy5nbC5FTEVNRU5UX0FSUkFZX0JVRkZFUixcclxuICAgICAgaW5kZXhBcnJheSxcclxuICAgICAgdGhpcy5nbC5EWU5BTUlDX0RSQVdcclxuICAgICk7XHJcbiAgICB0aGlzLmdsLmJsZW5kRnVuY1NlcGFyYXRlKFNSQ19DT0xPUiwgRFNUX0NPTE9SLCBTUkNfQUxQSEEsIERTVF9BTFBIQSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgpLop6PmlL7jgZnjgotcclxuICAgKi9cclxuICBwdWJsaWMgcmVsZWFzZVNoYWRlclByb2dyYW0oKTogdm9pZCB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3NoYWRlclNldHMuZ2V0U2l6ZSgpOyBpKyspIHtcclxuICAgICAgdGhpcy5nbC5kZWxldGVQcm9ncmFtKHRoaXMuX3NoYWRlclNldHMuYXQoaSkuc2hhZGVyUHJvZ3JhbSk7XHJcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoaSkuc2hhZGVyUHJvZ3JhbSA9IDA7XHJcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuc2V0KGksIHZvaWQgMCk7XHJcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuc2V0KGksIG51bGwpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44KS5Yid5pyf5YyW44GZ44KLXHJcbiAgICogQHBhcmFtIHZlcnRTaGFkZXJTcmMg6aCC54K544K344Kn44O844OA44Gu44K944O844K5XHJcbiAgICogQHBhcmFtIGZyYWdTaGFkZXJTcmMg44OV44Op44Kw44Oh44Oz44OI44K344Kn44O844OA44Gu44K944O844K5XHJcbiAgICovXHJcbiAgcHVibGljIGdlbmVyYXRlU2hhZGVycygpOiB2b2lkIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hhZGVyQ291bnQ7IGkrKykge1xyXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLnB1c2hCYWNrKG5ldyBDdWJpc21TaGFkZXJTZXQoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS5zaGFkZXJQcm9ncmFtID0gdGhpcy5sb2FkU2hhZGVyUHJvZ3JhbShcclxuICAgICAgdmVydGV4U2hhZGVyU3JjU2V0dXBNYXNrLFxyXG4gICAgICBmcmFnbWVudFNoYWRlclNyY3NldHVwTWFza1xyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnNoYWRlclByb2dyYW0gPSB0aGlzLmxvYWRTaGFkZXJQcm9ncmFtKFxyXG4gICAgICB2ZXJ0ZXhTaGFkZXJTcmMsXHJcbiAgICAgIGZyYWdtZW50U2hhZGVyU3JjUHJlbXVsdGlwbGllZEFscGhhXHJcbiAgICApO1xyXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtID0gdGhpcy5sb2FkU2hhZGVyUHJvZ3JhbShcclxuICAgICAgdmVydGV4U2hhZGVyU3JjTWFza2VkLFxyXG4gICAgICBmcmFnbWVudFNoYWRlclNyY01hc2tQcmVtdWx0aXBsaWVkQWxwaGFcclxuICAgICk7XHJcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnNoYWRlclByb2dyYW0gPSB0aGlzLmxvYWRTaGFkZXJQcm9ncmFtKFxyXG4gICAgICB2ZXJ0ZXhTaGFkZXJTcmNNYXNrZWQsXHJcbiAgICAgIGZyYWdtZW50U2hhZGVyU3JjTWFza0ludmVydGVkUHJlbXVsdGlwbGllZEFscGhhXHJcbiAgICApO1xyXG5cclxuICAgIC8vIOWKoOeul+OCgumAmuW4uOOBqOWQjOOBmOOCt+OCp+ODvOODgOODvOOCkuWIqeeUqOOBmeOCi1xyXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg0KS5zaGFkZXJQcm9ncmFtID0gdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS5zaGFkZXJQcm9ncmFtO1xyXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5zaGFkZXJQcm9ncmFtID0gdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtO1xyXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtID0gdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtO1xyXG5cclxuICAgIC8vIOS5l+eul+OCgumAmuW4uOOBqOWQjOOBmOOCt+OCp+ODvOODgOODvOOCkuWIqeeUqOOBmeOCi1xyXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg3KS5zaGFkZXJQcm9ncmFtID0gdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS5zaGFkZXJQcm9ncmFtO1xyXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS5zaGFkZXJQcm9ncmFtID0gdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtO1xyXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS5zaGFkZXJQcm9ncmFtID0gdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtO1xyXG5cclxuICAgIC8vIFNldHVwTWFza1xyXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcclxuICAgICAgMFxyXG4gICAgKS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcclxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS5zaGFkZXJQcm9ncmFtLFxyXG4gICAgICAnYV9wb3NpdGlvbidcclxuICAgICk7XHJcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxyXG4gICAgICAwXHJcbiAgICApLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxyXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnNoYWRlclByb2dyYW0sXHJcbiAgICAgICdhX3RleENvb3JkJ1xyXG4gICAgKTtcclxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMCkuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcclxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS5zaGFkZXJQcm9ncmFtLFxyXG4gICAgICAnc190ZXh0dXJlMCdcclxuICAgICk7XHJcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxyXG4gICAgICAwXHJcbiAgICApLnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcclxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS5zaGFkZXJQcm9ncmFtLFxyXG4gICAgICAndV9jbGlwTWF0cml4J1xyXG4gICAgKTtcclxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXHJcbiAgICAgIDBcclxuICAgICkudW5pZm9ybUNoYW5uZWxGbGFnTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcclxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS5zaGFkZXJQcm9ncmFtLFxyXG4gICAgICAndV9jaGFubmVsRmxhZydcclxuICAgICk7XHJcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxyXG4gICAgICAwXHJcbiAgICApLnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxyXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnNoYWRlclByb2dyYW0sXHJcbiAgICAgICd1X2Jhc2VDb2xvcidcclxuICAgICk7XHJcblxyXG4gICAgLy8g6YCa5bi477yIUHJlbXVsdGlwbGllZEFscGhh77yJXHJcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxyXG4gICAgICAxXHJcbiAgICApLmF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxyXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnNoYWRlclByb2dyYW0sXHJcbiAgICAgICdhX3Bvc2l0aW9uJ1xyXG4gICAgKTtcclxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXHJcbiAgICAgIDFcclxuICAgICkuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXHJcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMSkuc2hhZGVyUHJvZ3JhbSxcclxuICAgICAgJ2FfdGV4Q29vcmQnXHJcbiAgICApO1xyXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS5zYW1wbGVyVGV4dHVyZTBMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxyXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnNoYWRlclByb2dyYW0sXHJcbiAgICAgICdzX3RleHR1cmUwJ1xyXG4gICAgKTtcclxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMSkudW5pZm9ybU1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXHJcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMSkuc2hhZGVyUHJvZ3JhbSxcclxuICAgICAgJ3VfbWF0cml4J1xyXG4gICAgKTtcclxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXHJcbiAgICAgIDFcclxuICAgICkudW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXHJcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMSkuc2hhZGVyUHJvZ3JhbSxcclxuICAgICAgJ3VfYmFzZUNvbG9yJ1xyXG4gICAgKTtcclxuXHJcbiAgICAvLyDpgJrluLjvvIjjgq/jg6rjg4Pjg5Tjg7PjgrDjgIFQcmVtdWx0aXBsaWVkQWxwaGHvvIlcclxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXHJcbiAgICAgIDJcclxuICAgICkuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXHJcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbSxcclxuICAgICAgJ2FfcG9zaXRpb24nXHJcbiAgICApO1xyXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcclxuICAgICAgMlxyXG4gICAgKS5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcclxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtLFxyXG4gICAgICAnYV90ZXhDb29yZCdcclxuICAgICk7XHJcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXHJcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbSxcclxuICAgICAgJ3NfdGV4dHVyZTAnXHJcbiAgICApO1xyXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zYW1wbGVyVGV4dHVyZTFMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxyXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnNoYWRlclByb2dyYW0sXHJcbiAgICAgICdzX3RleHR1cmUxJ1xyXG4gICAgKTtcclxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikudW5pZm9ybU1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXHJcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbSxcclxuICAgICAgJ3VfbWF0cml4J1xyXG4gICAgKTtcclxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXHJcbiAgICAgIDJcclxuICAgICkudW5pZm9ybUNsaXBNYXRyaXhMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxyXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnNoYWRlclByb2dyYW0sXHJcbiAgICAgICd1X2NsaXBNYXRyaXgnXHJcbiAgICApO1xyXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcclxuICAgICAgMlxyXG4gICAgKS51bmlmb3JtQ2hhbm5lbEZsYWdMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxyXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnNoYWRlclByb2dyYW0sXHJcbiAgICAgICd1X2NoYW5uZWxGbGFnJ1xyXG4gICAgKTtcclxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXHJcbiAgICAgIDJcclxuICAgICkudW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXHJcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbSxcclxuICAgICAgJ3VfYmFzZUNvbG9yJ1xyXG4gICAgKTtcclxuXHJcbiAgICAvLyDpgJrluLjvvIjjgq/jg6rjg4Pjg5Tjg7PjgrDjg7vlj43ou6IsIFByZW11bHRpcGxpZWRBbHBoYe+8iVxyXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcclxuICAgICAgM1xyXG4gICAgKS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcclxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtLFxyXG4gICAgICAnYV9wb3NpdGlvbidcclxuICAgICk7XHJcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxyXG4gICAgICAzXHJcbiAgICApLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxyXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnNoYWRlclByb2dyYW0sXHJcbiAgICAgICdhX3RleENvb3JkJ1xyXG4gICAgKTtcclxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcclxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtLFxyXG4gICAgICAnc190ZXh0dXJlMCdcclxuICAgICk7XHJcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnNhbXBsZXJUZXh0dXJlMUxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXHJcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2hhZGVyUHJvZ3JhbSxcclxuICAgICAgJ3NfdGV4dHVyZTEnXHJcbiAgICApO1xyXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS51bmlmb3JtTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcclxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtLFxyXG4gICAgICAndV9tYXRyaXgnXHJcbiAgICApO1xyXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcclxuICAgICAgM1xyXG4gICAgKS51bmlmb3JtQ2xpcE1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXHJcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2hhZGVyUHJvZ3JhbSxcclxuICAgICAgJ3VfY2xpcE1hdHJpeCdcclxuICAgICk7XHJcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxyXG4gICAgICAzXHJcbiAgICApLnVuaWZvcm1DaGFubmVsRmxhZ0xvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXHJcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2hhZGVyUHJvZ3JhbSxcclxuICAgICAgJ3VfY2hhbm5lbEZsYWcnXHJcbiAgICApO1xyXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcclxuICAgICAgM1xyXG4gICAgKS51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcclxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtLFxyXG4gICAgICAndV9iYXNlQ29sb3InXHJcbiAgICApO1xyXG5cclxuICAgIC8vIOWKoOeul++8iFByZW11bHRpcGxpZWRBbHBoYe+8iVxyXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcclxuICAgICAgNFxyXG4gICAgKS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcclxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg0KS5zaGFkZXJQcm9ncmFtLFxyXG4gICAgICAnYV9wb3NpdGlvbidcclxuICAgICk7XHJcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxyXG4gICAgICA0XHJcbiAgICApLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxyXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDQpLnNoYWRlclByb2dyYW0sXHJcbiAgICAgICdhX3RleENvb3JkJ1xyXG4gICAgKTtcclxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcclxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg0KS5zaGFkZXJQcm9ncmFtLFxyXG4gICAgICAnc190ZXh0dXJlMCdcclxuICAgICk7XHJcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDQpLnVuaWZvcm1NYXRyaXhMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxyXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDQpLnNoYWRlclByb2dyYW0sXHJcbiAgICAgICd1X21hdHJpeCdcclxuICAgICk7XHJcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxyXG4gICAgICA0XHJcbiAgICApLnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxyXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDQpLnNoYWRlclByb2dyYW0sXHJcbiAgICAgICd1X2Jhc2VDb2xvcidcclxuICAgICk7XHJcblxyXG4gICAgLy8g5Yqg566X77yI44Kv44Oq44OD44OU44Oz44Kw44CBUHJlbXVsdGlwbGllZEFscGhh77yJXHJcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxyXG4gICAgICA1XHJcbiAgICApLmF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxyXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNoYWRlclByb2dyYW0sXHJcbiAgICAgICdhX3Bvc2l0aW9uJ1xyXG4gICAgKTtcclxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXHJcbiAgICAgIDVcclxuICAgICkuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXHJcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2hhZGVyUHJvZ3JhbSxcclxuICAgICAgJ2FfdGV4Q29vcmQnXHJcbiAgICApO1xyXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5zYW1wbGVyVGV4dHVyZTBMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxyXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNoYWRlclByb2dyYW0sXHJcbiAgICAgICdzX3RleHR1cmUwJ1xyXG4gICAgKTtcclxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2FtcGxlclRleHR1cmUxTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcclxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5zaGFkZXJQcm9ncmFtLFxyXG4gICAgICAnc190ZXh0dXJlMSdcclxuICAgICk7XHJcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnVuaWZvcm1NYXRyaXhMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxyXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNoYWRlclByb2dyYW0sXHJcbiAgICAgICd1X21hdHJpeCdcclxuICAgICk7XHJcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxyXG4gICAgICA1XHJcbiAgICApLnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcclxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5zaGFkZXJQcm9ncmFtLFxyXG4gICAgICAndV9jbGlwTWF0cml4J1xyXG4gICAgKTtcclxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXHJcbiAgICAgIDVcclxuICAgICkudW5pZm9ybUNoYW5uZWxGbGFnTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcclxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5zaGFkZXJQcm9ncmFtLFxyXG4gICAgICAndV9jaGFubmVsRmxhZydcclxuICAgICk7XHJcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxyXG4gICAgICA1XHJcbiAgICApLnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxyXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNoYWRlclByb2dyYW0sXHJcbiAgICAgICd1X2Jhc2VDb2xvcidcclxuICAgICk7XHJcblxyXG4gICAgLy8g5Yqg566X77yI44Kv44Oq44OD44OU44Oz44Kw44O75Y+N6Lui44CBUHJlbXVsdGlwbGllZEFscGhh77yJXHJcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxyXG4gICAgICA2XHJcbiAgICApLmF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxyXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0sXHJcbiAgICAgICdhX3Bvc2l0aW9uJ1xyXG4gICAgKTtcclxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXHJcbiAgICAgIDZcclxuICAgICkuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXHJcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNikuc2hhZGVyUHJvZ3JhbSxcclxuICAgICAgJ2FfdGV4Q29vcmQnXHJcbiAgICApO1xyXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zYW1wbGVyVGV4dHVyZTBMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxyXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0sXHJcbiAgICAgICdzX3RleHR1cmUwJ1xyXG4gICAgKTtcclxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNikuc2FtcGxlclRleHR1cmUxTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcclxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtLFxyXG4gICAgICAnc190ZXh0dXJlMSdcclxuICAgICk7XHJcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnVuaWZvcm1NYXRyaXhMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxyXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0sXHJcbiAgICAgICd1X21hdHJpeCdcclxuICAgICk7XHJcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxyXG4gICAgICA2XHJcbiAgICApLnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcclxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtLFxyXG4gICAgICAndV9jbGlwTWF0cml4J1xyXG4gICAgKTtcclxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXHJcbiAgICAgIDZcclxuICAgICkudW5pZm9ybUNoYW5uZWxGbGFnTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcclxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtLFxyXG4gICAgICAndV9jaGFubmVsRmxhZydcclxuICAgICk7XHJcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxyXG4gICAgICA2XHJcbiAgICApLnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxyXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0sXHJcbiAgICAgICd1X2Jhc2VDb2xvcidcclxuICAgICk7XHJcblxyXG4gICAgLy8g5LmX566X77yIUHJlbXVsdGlwbGllZEFscGhh77yJXHJcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxyXG4gICAgICA3XHJcbiAgICApLmF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxyXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLnNoYWRlclByb2dyYW0sXHJcbiAgICAgICdhX3Bvc2l0aW9uJ1xyXG4gICAgKTtcclxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXHJcbiAgICAgIDdcclxuICAgICkuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXHJcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNykuc2hhZGVyUHJvZ3JhbSxcclxuICAgICAgJ2FfdGV4Q29vcmQnXHJcbiAgICApO1xyXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg3KS5zYW1wbGVyVGV4dHVyZTBMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxyXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLnNoYWRlclByb2dyYW0sXHJcbiAgICAgICdzX3RleHR1cmUwJ1xyXG4gICAgKTtcclxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNykudW5pZm9ybU1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXHJcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNykuc2hhZGVyUHJvZ3JhbSxcclxuICAgICAgJ3VfbWF0cml4J1xyXG4gICAgKTtcclxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXHJcbiAgICAgIDdcclxuICAgICkudW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXHJcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNykuc2hhZGVyUHJvZ3JhbSxcclxuICAgICAgJ3VfYmFzZUNvbG9yJ1xyXG4gICAgKTtcclxuXHJcbiAgICAvLyDkuZfnrpfvvIjjgq/jg6rjg4Pjg5Tjg7PjgrDjgIFQcmVtdWx0aXBsaWVkQWxwaGHvvIlcclxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXHJcbiAgICAgIDhcclxuICAgICkuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXHJcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuc2hhZGVyUHJvZ3JhbSxcclxuICAgICAgJ2FfcG9zaXRpb24nXHJcbiAgICApO1xyXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcclxuICAgICAgOFxyXG4gICAgKS5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcclxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS5zaGFkZXJQcm9ncmFtLFxyXG4gICAgICAnYV90ZXhDb29yZCdcclxuICAgICk7XHJcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXHJcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuc2hhZGVyUHJvZ3JhbSxcclxuICAgICAgJ3NfdGV4dHVyZTAnXHJcbiAgICApO1xyXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS5zYW1wbGVyVGV4dHVyZTFMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxyXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnNoYWRlclByb2dyYW0sXHJcbiAgICAgICdzX3RleHR1cmUxJ1xyXG4gICAgKTtcclxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkudW5pZm9ybU1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXHJcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuc2hhZGVyUHJvZ3JhbSxcclxuICAgICAgJ3VfbWF0cml4J1xyXG4gICAgKTtcclxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXHJcbiAgICAgIDhcclxuICAgICkudW5pZm9ybUNsaXBNYXRyaXhMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxyXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnNoYWRlclByb2dyYW0sXHJcbiAgICAgICd1X2NsaXBNYXRyaXgnXHJcbiAgICApO1xyXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcclxuICAgICAgOFxyXG4gICAgKS51bmlmb3JtQ2hhbm5lbEZsYWdMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxyXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnNoYWRlclByb2dyYW0sXHJcbiAgICAgICd1X2NoYW5uZWxGbGFnJ1xyXG4gICAgKTtcclxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXHJcbiAgICAgIDhcclxuICAgICkudW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXHJcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuc2hhZGVyUHJvZ3JhbSxcclxuICAgICAgJ3VfYmFzZUNvbG9yJ1xyXG4gICAgKTtcclxuXHJcbiAgICAvLyDkuZfnrpfvvIjjgq/jg6rjg4Pjg5Tjg7PjgrDjg7vlj43ou6LjgIFQcmVtdWx0aXBsaWVkQWxwaGHvvIlcclxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXHJcbiAgICAgIDlcclxuICAgICkuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXHJcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuc2hhZGVyUHJvZ3JhbSxcclxuICAgICAgJ2FfcG9zaXRpb24nXHJcbiAgICApO1xyXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcclxuICAgICAgOVxyXG4gICAgKS5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcclxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS5zaGFkZXJQcm9ncmFtLFxyXG4gICAgICAnYV90ZXhDb29yZCdcclxuICAgICk7XHJcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXHJcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuc2hhZGVyUHJvZ3JhbSxcclxuICAgICAgJ3NfdGV4dHVyZTAnXHJcbiAgICApO1xyXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS5zYW1wbGVyVGV4dHVyZTFMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxyXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnNoYWRlclByb2dyYW0sXHJcbiAgICAgICdzX3RleHR1cmUxJ1xyXG4gICAgKTtcclxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkudW5pZm9ybU1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXHJcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuc2hhZGVyUHJvZ3JhbSxcclxuICAgICAgJ3VfbWF0cml4J1xyXG4gICAgKTtcclxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXHJcbiAgICAgIDlcclxuICAgICkudW5pZm9ybUNsaXBNYXRyaXhMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxyXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnNoYWRlclByb2dyYW0sXHJcbiAgICAgICd1X2NsaXBNYXRyaXgnXHJcbiAgICApO1xyXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcclxuICAgICAgOVxyXG4gICAgKS51bmlmb3JtQ2hhbm5lbEZsYWdMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxyXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnNoYWRlclByb2dyYW0sXHJcbiAgICAgICd1X2NoYW5uZWxGbGFnJ1xyXG4gICAgKTtcclxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXHJcbiAgICAgIDlcclxuICAgICkudW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXHJcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuc2hhZGVyUHJvZ3JhbSxcclxuICAgICAgJ3VfYmFzZUNvbG9yJ1xyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCt+OCp+ODvOODgOODl+ODreOCsOODqeODoOOCkuODreODvOODieOBl+OBpuOCouODieODrOOCueOCkui/lOOBmVxyXG4gICAqIEBwYXJhbSB2ZXJ0ZXhTaGFkZXJTb3VyY2UgICAg6aCC54K544K344Kn44O844OA44Gu44K944O844K5XHJcbiAgICogQHBhcmFtIGZyYWdtZW50U2hhZGVyU291cmNlICDjg5Xjg6njgrDjg6Hjg7Pjg4jjgrfjgqfjg7zjg4Djga7jgr3jg7zjgrlcclxuICAgKiBAcmV0dXJuIOOCt+OCp+ODvOODgOODl+ODreOCsOODqeODoOOBruOCouODieODrOOCuVxyXG4gICAqL1xyXG4gIHB1YmxpYyBsb2FkU2hhZGVyUHJvZ3JhbShcclxuICAgIHZlcnRleFNoYWRlclNvdXJjZTogc3RyaW5nLFxyXG4gICAgZnJhZ21lbnRTaGFkZXJTb3VyY2U6IHN0cmluZ1xyXG4gICk6IFdlYkdMUHJvZ3JhbSB7XHJcbiAgICAvLyBDcmVhdGUgU2hhZGVyIFByb2dyYW1cclxuICAgIGxldCBzaGFkZXJQcm9ncmFtOiBXZWJHTFByb2dyYW0gPSB0aGlzLmdsLmNyZWF0ZVByb2dyYW0oKTtcclxuXHJcbiAgICBsZXQgdmVydFNoYWRlciA9IHRoaXMuY29tcGlsZVNoYWRlclNvdXJjZShcclxuICAgICAgdGhpcy5nbC5WRVJURVhfU0hBREVSLFxyXG4gICAgICB2ZXJ0ZXhTaGFkZXJTb3VyY2VcclxuICAgICk7XHJcblxyXG4gICAgaWYgKCF2ZXJ0U2hhZGVyKSB7XHJcbiAgICAgIEN1YmlzbUxvZ0Vycm9yKCdWZXJ0ZXggc2hhZGVyIGNvbXBpbGUgZXJyb3IhJyk7XHJcbiAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBmcmFnU2hhZGVyID0gdGhpcy5jb21waWxlU2hhZGVyU291cmNlKFxyXG4gICAgICB0aGlzLmdsLkZSQUdNRU5UX1NIQURFUixcclxuICAgICAgZnJhZ21lbnRTaGFkZXJTb3VyY2VcclxuICAgICk7XHJcbiAgICBpZiAoIWZyYWdTaGFkZXIpIHtcclxuICAgICAgQ3ViaXNtTG9nRXJyb3IoJ1ZlcnRleCBzaGFkZXIgY29tcGlsZSBlcnJvciEnKTtcclxuICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQXR0YWNoIHZlcnRleCBzaGFkZXIgdG8gcHJvZ3JhbVxyXG4gICAgdGhpcy5nbC5hdHRhY2hTaGFkZXIoc2hhZGVyUHJvZ3JhbSwgdmVydFNoYWRlcik7XHJcblxyXG4gICAgLy8gQXR0YWNoIGZyYWdtZW50IHNoYWRlciB0byBwcm9ncmFtXHJcbiAgICB0aGlzLmdsLmF0dGFjaFNoYWRlcihzaGFkZXJQcm9ncmFtLCBmcmFnU2hhZGVyKTtcclxuXHJcbiAgICAvLyBsaW5rIHByb2dyYW1cclxuICAgIHRoaXMuZ2wubGlua1Byb2dyYW0oc2hhZGVyUHJvZ3JhbSk7XHJcbiAgICBjb25zdCBsaW5rU3RhdHVzID0gdGhpcy5nbC5nZXRQcm9ncmFtUGFyYW1ldGVyKFxyXG4gICAgICBzaGFkZXJQcm9ncmFtLFxyXG4gICAgICB0aGlzLmdsLkxJTktfU1RBVFVTXHJcbiAgICApO1xyXG5cclxuICAgIC8vIOODquODs+OCr+OBq+WkseaVl+OBl+OBn+OCieOCt+OCp+ODvOODgOODvOOCkuWJiumZpFxyXG4gICAgaWYgKCFsaW5rU3RhdHVzKSB7XHJcbiAgICAgIEN1YmlzbUxvZ0Vycm9yKCdGYWlsZWQgdG8gbGluayBwcm9ncmFtOiB7MH0nLCBzaGFkZXJQcm9ncmFtKTtcclxuXHJcbiAgICAgIHRoaXMuZ2wuZGVsZXRlU2hhZGVyKHZlcnRTaGFkZXIpO1xyXG4gICAgICB2ZXJ0U2hhZGVyID0gMDtcclxuXHJcbiAgICAgIHRoaXMuZ2wuZGVsZXRlU2hhZGVyKGZyYWdTaGFkZXIpO1xyXG4gICAgICBmcmFnU2hhZGVyID0gMDtcclxuXHJcbiAgICAgIGlmIChzaGFkZXJQcm9ncmFtKSB7XHJcbiAgICAgICAgdGhpcy5nbC5kZWxldGVQcm9ncmFtKHNoYWRlclByb2dyYW0pO1xyXG4gICAgICAgIHNoYWRlclByb2dyYW0gPSAwO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZWxlYXNlIHZlcnRleCBhbmQgZnJhZ21lbnQgc2hhZGVycy5cclxuICAgIHRoaXMuZ2wuZGVsZXRlU2hhZGVyKHZlcnRTaGFkZXIpO1xyXG4gICAgdGhpcy5nbC5kZWxldGVTaGFkZXIoZnJhZ1NoYWRlcik7XHJcblxyXG4gICAgcmV0dXJuIHNoYWRlclByb2dyYW07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgpLjgrPjg7Pjg5HjgqTjg6vjgZnjgotcclxuICAgKiBAcGFyYW0gc2hhZGVyVHlwZSDjgrfjgqfjg7zjg4Djgr/jgqTjg5coVmVydGV4L0ZyYWdtZW50KVxyXG4gICAqIEBwYXJhbSBzaGFkZXJTb3VyY2Ug44K344Kn44O844OA44K944O844K544Kz44O844OJXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIOOCs+ODs+ODkeOCpOODq+OBleOCjOOBn+OCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoFxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb21waWxlU2hhZGVyU291cmNlKFxyXG4gICAgc2hhZGVyVHlwZTogR0xlbnVtLFxyXG4gICAgc2hhZGVyU291cmNlOiBzdHJpbmdcclxuICApOiBXZWJHTFByb2dyYW0ge1xyXG4gICAgY29uc3Qgc291cmNlOiBzdHJpbmcgPSBzaGFkZXJTb3VyY2U7XHJcblxyXG4gICAgY29uc3Qgc2hhZGVyOiBXZWJHTFByb2dyYW0gPSB0aGlzLmdsLmNyZWF0ZVNoYWRlcihzaGFkZXJUeXBlKTtcclxuICAgIHRoaXMuZ2wuc2hhZGVyU291cmNlKHNoYWRlciwgc291cmNlKTtcclxuICAgIHRoaXMuZ2wuY29tcGlsZVNoYWRlcihzaGFkZXIpO1xyXG5cclxuICAgIGlmICghc2hhZGVyKSB7XHJcbiAgICAgIGNvbnN0IGxvZzogc3RyaW5nID0gdGhpcy5nbC5nZXRTaGFkZXJJbmZvTG9nKHNoYWRlcik7XHJcbiAgICAgIEN1YmlzbUxvZ0Vycm9yKCdTaGFkZXIgY29tcGlsZSBsb2c6IHswfSAnLCBsb2cpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHN0YXR1czogYW55ID0gdGhpcy5nbC5nZXRTaGFkZXJQYXJhbWV0ZXIoXHJcbiAgICAgIHNoYWRlcixcclxuICAgICAgdGhpcy5nbC5DT01QSUxFX1NUQVRVU1xyXG4gICAgKTtcclxuICAgIGlmICghc3RhdHVzKSB7XHJcbiAgICAgIHRoaXMuZ2wuZGVsZXRlU2hhZGVyKHNoYWRlcik7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzaGFkZXI7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0R2woZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCk6IHZvaWQge1xyXG4gICAgdGhpcy5nbCA9IGdsO1xyXG4gIH1cclxuXHJcbiAgX3NoYWRlclNldHM6IGNzbVZlY3RvcjxDdWJpc21TaGFkZXJTZXQ+OyAvLyDjg63jg7zjg4njgZfjgZ/jgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgpLkv53mjIHjgZnjgovlpInmlbBcclxuICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0OyAvLyB3ZWJnbOOCs+ODs+ODhuOCreOCueODiFxyXG59XHJcblxyXG4vKipcclxuICogQ3ViaXNtU2hhZGVyX1dlYkdM44Gu44Kk44Oz44OK44O844Kv44Op44K5XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ3ViaXNtU2hhZGVyU2V0IHtcclxuICBzaGFkZXJQcm9ncmFtOiBXZWJHTFByb2dyYW07IC8vIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOBruOCouODieODrOOCuVxyXG4gIGF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb246IEdMdWludDsgLy8g44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44Gr5rih44GZ5aSJ5pWw44Gu44Ki44OJ44Os44K577yIUG9zaXRpb27vvIlcclxuICBhdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uOiBHTHVpbnQ7IC8vIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOBq+a4oeOBmeWkieaVsOOBruOCouODieODrOOCue+8iFRleENvb3Jk77yJXHJcbiAgdW5pZm9ybU1hdHJpeExvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjsgLy8g44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44Gr5rih44GZ5aSJ5pWw44Gu44Ki44OJ44Os44K577yITWF0cml477yJXHJcbiAgdW5pZm9ybUNsaXBNYXRyaXhMb2NhdGlvbjogV2ViR0xVbmlmb3JtTG9jYXRpb247IC8vIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOBq+a4oeOBmeWkieaVsOOBruOCouODieODrOOCue+8iENsaXBNYXRyaXjvvIlcclxuICBzYW1wbGVyVGV4dHVyZTBMb2NhdGlvbjogV2ViR0xVbmlmb3JtTG9jYXRpb247IC8vIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOBq+a4oeOBmeWkieaVsOOBruOCouODieODrOOCue+8iFRleHR1cmUw77yJXHJcbiAgc2FtcGxlclRleHR1cmUxTG9jYXRpb246IFdlYkdMVW5pZm9ybUxvY2F0aW9uOyAvLyDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgavmuKHjgZnlpInmlbDjga7jgqLjg4njg6zjgrnvvIhUZXh0dXJlMe+8iVxyXG4gIHVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbjogV2ViR0xVbmlmb3JtTG9jYXRpb247IC8vIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOBq+a4oeOBmeWkieaVsOOBruOCouODieODrOOCue+8iEJhc2VDb2xvcu+8iVxyXG4gIHVuaWZvcm1DaGFubmVsRmxhZ0xvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjsgLy8g44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44Gr5rih44GZ5aSJ5pWw44Gu44Ki44OJ44Os44K577yIQ2hhbm5lbEZsYWfvvIlcclxufVxyXG5cclxuZXhwb3J0IGVudW0gU2hhZGVyTmFtZXMge1xyXG4gIC8vIFNldHVwTWFza1xyXG4gIFNoYWRlck5hbWVzX1NldHVwTWFzayxcclxuXHJcbiAgLy8gTm9ybWFsXHJcbiAgU2hhZGVyTmFtZXNfTm9ybWFsUHJlbXVsdGlwbGllZEFscGhhLFxyXG4gIFNoYWRlck5hbWVzX05vcm1hbE1hc2tlZFByZW11bHRpcGxpZWRBbHBoYSxcclxuICBTaGFkZXJOYW1lc19Ob21yYWxNYXNrZWRJbnZlcnRlZFByZW11bHRpcGxpZWRBbHBoYSxcclxuXHJcbiAgLy8gQWRkXHJcbiAgU2hhZGVyTmFtZXNfQWRkUHJlbXVsdGlwbGllZEFscGhhLFxyXG4gIFNoYWRlck5hbWVzX0FkZE1hc2tlZFByZW11bHRpcGxpZWRBbHBoYSxcclxuICBTaGFkZXJOYW1lc19BZGRNYXNrZWRQcmVtdWx0aXBsaWVkQWxwaGFJbnZlcnRlZCxcclxuXHJcbiAgLy8gTXVsdFxyXG4gIFNoYWRlck5hbWVzX011bHRQcmVtdWx0aXBsaWVkQWxwaGEsXHJcbiAgU2hhZGVyTmFtZXNfTXVsdE1hc2tlZFByZW11bHRpcGxpZWRBbHBoYSxcclxuICBTaGFkZXJOYW1lc19NdWx0TWFza2VkUHJlbXVsdGlwbGllZEFscGhhSW52ZXJ0ZWRcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHZlcnRleFNoYWRlclNyY1NldHVwTWFzayA9XHJcbiAgJ2F0dHJpYnV0ZSB2ZWM0ICAgICBhX3Bvc2l0aW9uOycgK1xyXG4gICdhdHRyaWJ1dGUgdmVjMiAgICAgYV90ZXhDb29yZDsnICtcclxuICAndmFyeWluZyB2ZWMyICAgICAgIHZfdGV4Q29vcmQ7JyArXHJcbiAgJ3ZhcnlpbmcgdmVjNCAgICAgICB2X215UG9zOycgK1xyXG4gICd1bmlmb3JtIG1hdDQgICAgICAgdV9jbGlwTWF0cml4OycgK1xyXG4gICd2b2lkIG1haW4oKScgK1xyXG4gICd7JyArXHJcbiAgJyAgIGdsX1Bvc2l0aW9uID0gdV9jbGlwTWF0cml4ICogYV9wb3NpdGlvbjsnICtcclxuICAnICAgdl9teVBvcyA9IHVfY2xpcE1hdHJpeCAqIGFfcG9zaXRpb247JyArXHJcbiAgJyAgIHZfdGV4Q29vcmQgPSBhX3RleENvb3JkOycgK1xyXG4gICcgICB2X3RleENvb3JkLnkgPSAxLjAgLSB2X3RleENvb3JkLnk7JyArXHJcbiAgJ30nO1xyXG5leHBvcnQgY29uc3QgZnJhZ21lbnRTaGFkZXJTcmNzZXR1cE1hc2sgPVxyXG4gICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnICtcclxuICAndmFyeWluZyB2ZWMyICAgICAgIHZfdGV4Q29vcmQ7JyArXHJcbiAgJ3ZhcnlpbmcgdmVjNCAgICAgICB2X215UG9zOycgK1xyXG4gICd1bmlmb3JtIHZlYzQgICAgICAgdV9iYXNlQ29sb3I7JyArXHJcbiAgJ3VuaWZvcm0gdmVjNCAgICAgICB1X2NoYW5uZWxGbGFnOycgK1xyXG4gICd1bmlmb3JtIHNhbXBsZXIyRCAgc190ZXh0dXJlMDsnICtcclxuICAndm9pZCBtYWluKCknICtcclxuICAneycgK1xyXG4gICcgICBmbG9hdCBpc0luc2lkZSA9ICcgK1xyXG4gICcgICAgICAgc3RlcCh1X2Jhc2VDb2xvci54LCB2X215UG9zLngvdl9teVBvcy53KScgK1xyXG4gICcgICAgICAgKiBzdGVwKHVfYmFzZUNvbG9yLnksIHZfbXlQb3MueS92X215UG9zLncpJyArXHJcbiAgJyAgICAgICAqIHN0ZXAodl9teVBvcy54L3ZfbXlQb3MudywgdV9iYXNlQ29sb3IueiknICtcclxuICAnICAgICAgICogc3RlcCh2X215UG9zLnkvdl9teVBvcy53LCB1X2Jhc2VDb2xvci53KTsnICtcclxuICAnICAgZ2xfRnJhZ0NvbG9yID0gdV9jaGFubmVsRmxhZyAqIHRleHR1cmUyRChzX3RleHR1cmUwLCB2X3RleENvb3JkKS5hICogaXNJbnNpZGU7JyArXHJcbiAgJ30nO1xyXG5cclxuLy8tLS0tLSDjg5Djg7zjg4bjg4Pjgq/jgrnjgrfjgqfjg7zjg4Djg5fjg63jgrDjg6njg6AgLS0tLS1cclxuLy8gTm9ybWFsICYgQWRkICYgTXVsdCDlhbHpgJpcclxuZXhwb3J0IGNvbnN0IHZlcnRleFNoYWRlclNyYyA9XHJcbiAgJ2F0dHJpYnV0ZSB2ZWM0ICAgICBhX3Bvc2l0aW9uOycgKyAvL3YudmVydGV4XHJcbiAgJ2F0dHJpYnV0ZSB2ZWMyICAgICBhX3RleENvb3JkOycgKyAvL3YudGV4Y29vcmRcclxuICAndmFyeWluZyB2ZWMyICAgICAgIHZfdGV4Q29vcmQ7JyArIC8vdjJmLnRleGNvb3JkXHJcbiAgJ3VuaWZvcm0gbWF0NCAgICAgICB1X21hdHJpeDsnICtcclxuICAndm9pZCBtYWluKCknICtcclxuICAneycgK1xyXG4gICcgICBnbF9Qb3NpdGlvbiA9IHVfbWF0cml4ICogYV9wb3NpdGlvbjsnICtcclxuICAnICAgdl90ZXhDb29yZCA9IGFfdGV4Q29vcmQ7JyArXHJcbiAgJyAgIHZfdGV4Q29vcmQueSA9IDEuMCAtIHZfdGV4Q29vcmQueTsnICtcclxuICAnfSc7XHJcblxyXG4vLyBOb3JtYWwgJiBBZGQgJiBNdWx0IOWFsemAmu+8iOOCr+ODquODg+ODlOODs+OCsOOBleOCjOOBn+OCguOBruOBruaPj+eUu+eUqO+8iVxyXG5leHBvcnQgY29uc3QgdmVydGV4U2hhZGVyU3JjTWFza2VkID1cclxuICAnYXR0cmlidXRlIHZlYzQgICAgIGFfcG9zaXRpb247JyArXHJcbiAgJ2F0dHJpYnV0ZSB2ZWMyICAgICBhX3RleENvb3JkOycgK1xyXG4gICd2YXJ5aW5nIHZlYzIgICAgICAgdl90ZXhDb29yZDsnICtcclxuICAndmFyeWluZyB2ZWM0ICAgICAgIHZfY2xpcFBvczsnICtcclxuICAndW5pZm9ybSBtYXQ0ICAgICAgIHVfbWF0cml4OycgK1xyXG4gICd1bmlmb3JtIG1hdDQgICAgICAgdV9jbGlwTWF0cml4OycgK1xyXG4gICd2b2lkIG1haW4oKScgK1xyXG4gICd7JyArXHJcbiAgJyAgIGdsX1Bvc2l0aW9uID0gdV9tYXRyaXggKiBhX3Bvc2l0aW9uOycgK1xyXG4gICcgICB2X2NsaXBQb3MgPSB1X2NsaXBNYXRyaXggKiBhX3Bvc2l0aW9uOycgK1xyXG4gICcgICB2X3RleENvb3JkID0gYV90ZXhDb29yZDsnICtcclxuICAnICAgdl90ZXhDb29yZC55ID0gMS4wIC0gdl90ZXhDb29yZC55OycgK1xyXG4gICd9JztcclxuXHJcbi8vLS0tLS0g44OV44Op44Kw44Oh44Oz44OI44K344Kn44O844OA44OX44Ot44Kw44Op44OgIC0tLS0tXHJcbi8vIE5vcm1hbCAmIEFkZCAmIE11bHQg5YWx6YCaIO+8iFByZW11bHRpcGxpZWRBbHBoYe+8iVxyXG5leHBvcnQgY29uc3QgZnJhZ21lbnRTaGFkZXJTcmNQcmVtdWx0aXBsaWVkQWxwaGEgPVxyXG4gICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnICtcclxuICAndmFyeWluZyB2ZWMyICAgICAgIHZfdGV4Q29vcmQ7JyArIC8vdjJmLnRleGNvb3JkXHJcbiAgJ3VuaWZvcm0gdmVjNCAgICAgICB1X2Jhc2VDb2xvcjsnICtcclxuICAndW5pZm9ybSBzYW1wbGVyMkQgIHNfdGV4dHVyZTA7JyArIC8vX01haW5UZXhcclxuICAndm9pZCBtYWluKCknICtcclxuICAneycgK1xyXG4gICcgICBnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQoc190ZXh0dXJlMCAsIHZfdGV4Q29vcmQpICogdV9iYXNlQ29sb3I7JyArXHJcbiAgJ30nO1xyXG5cclxuLy8gTm9ybWFsIO+8iOOCr+ODquODg+ODlOODs+OCsOOBleOCjOOBn+OCguOBruOBruaPj+eUu+eUqOOAgVByZW11bHRpcGxpZWRBbHBoYeWFvOeUqO+8iVxyXG5leHBvcnQgY29uc3QgZnJhZ21lbnRTaGFkZXJTcmNNYXNrUHJlbXVsdGlwbGllZEFscGhhID1cclxuICAncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7JyArXHJcbiAgJ3ZhcnlpbmcgdmVjMiAgICAgICB2X3RleENvb3JkOycgK1xyXG4gICd2YXJ5aW5nIHZlYzQgICAgICAgdl9jbGlwUG9zOycgK1xyXG4gICd1bmlmb3JtIHZlYzQgICAgICAgdV9iYXNlQ29sb3I7JyArXHJcbiAgJ3VuaWZvcm0gdmVjNCAgICAgICB1X2NoYW5uZWxGbGFnOycgK1xyXG4gICd1bmlmb3JtIHNhbXBsZXIyRCAgc190ZXh0dXJlMDsnICtcclxuICAndW5pZm9ybSBzYW1wbGVyMkQgIHNfdGV4dHVyZTE7JyArXHJcbiAgJ3ZvaWQgbWFpbigpJyArXHJcbiAgJ3snICtcclxuICAnICAgdmVjNCBjb2xfZm9ybWFzayA9IHRleHR1cmUyRChzX3RleHR1cmUwICwgdl90ZXhDb29yZCkgKiB1X2Jhc2VDb2xvcjsnICtcclxuICAnICAgdmVjNCBjbGlwTWFzayA9ICgxLjAgLSB0ZXh0dXJlMkQoc190ZXh0dXJlMSwgdl9jbGlwUG9zLnh5IC8gdl9jbGlwUG9zLncpKSAqIHVfY2hhbm5lbEZsYWc7JyArXHJcbiAgJyAgIGZsb2F0IG1hc2tWYWwgPSBjbGlwTWFzay5yICsgY2xpcE1hc2suZyArIGNsaXBNYXNrLmIgKyBjbGlwTWFzay5hOycgK1xyXG4gICcgICBjb2xfZm9ybWFzayA9IGNvbF9mb3JtYXNrICogbWFza1ZhbDsnICtcclxuICAnICAgZ2xfRnJhZ0NvbG9yID0gY29sX2Zvcm1hc2s7JyArXHJcbiAgJ30nO1xyXG5cclxuLy8gTm9ybWFsICYgQWRkICYgTXVsdCDlhbHpgJrvvIjjgq/jg6rjg4Pjg5Tjg7PjgrDjgZXjgozjgablj43ou6Lkvb/nlKjjga7mj4/nlLvnlKjjgIFQcmVtdWx0aXBsaWVkQWxwaGHjga7loLTlkIjvvIlcclxuZXhwb3J0IGNvbnN0IGZyYWdtZW50U2hhZGVyU3JjTWFza0ludmVydGVkUHJlbXVsdGlwbGllZEFscGhhID1cclxuICAncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7JyArXHJcbiAgJ3ZhcnlpbmcgdmVjMiB2X3RleENvb3JkOycgK1xyXG4gICd2YXJ5aW5nIHZlYzQgdl9jbGlwUG9zOycgK1xyXG4gICd1bmlmb3JtIHNhbXBsZXIyRCBzX3RleHR1cmUwOycgK1xyXG4gICd1bmlmb3JtIHNhbXBsZXIyRCBzX3RleHR1cmUxOycgK1xyXG4gICd1bmlmb3JtIHZlYzQgdV9jaGFubmVsRmxhZzsnICtcclxuICAndW5pZm9ybSB2ZWM0IHVfYmFzZUNvbG9yOycgK1xyXG4gICd2b2lkIG1haW4oKScgK1xyXG4gICd7JyArXHJcbiAgJ3ZlYzQgY29sX2Zvcm1hc2sgPSB0ZXh0dXJlMkQoc190ZXh0dXJlMCwgdl90ZXhDb29yZCkgKiB1X2Jhc2VDb2xvcjsnICtcclxuICAndmVjNCBjbGlwTWFzayA9ICgxLjAgLSB0ZXh0dXJlMkQoc190ZXh0dXJlMSwgdl9jbGlwUG9zLnh5IC8gdl9jbGlwUG9zLncpKSAqIHVfY2hhbm5lbEZsYWc7JyArXHJcbiAgJ2Zsb2F0IG1hc2tWYWwgPSBjbGlwTWFzay5yICsgY2xpcE1hc2suZyArIGNsaXBNYXNrLmIgKyBjbGlwTWFzay5hOycgK1xyXG4gICdjb2xfZm9ybWFzayA9IGNvbF9mb3JtYXNrICogKDEuMCAtIG1hc2tWYWwpOycgK1xyXG4gICdnbF9GcmFnQ29sb3IgPSBjb2xfZm9ybWFzazsnICtcclxuICAnfSc7XHJcblxyXG4vKipcclxuICogV2ViR0znlKjjga7mj4/nlLvlkb3ku6TjgpLlrp/oo4XjgZfjgZ/jgq/jg6njgrlcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDdWJpc21SZW5kZXJlcl9XZWJHTCBleHRlbmRzIEN1YmlzbVJlbmRlcmVyIHtcclxuICAvKipcclxuICAgKiDjg6zjg7Pjg4Djg6njga7liJ3mnJ/ljJblh6bnkIbjgpLlrp/ooYzjgZnjgotcclxuICAgKiDlvJXmlbDjgavmuKHjgZfjgZ/jg6Ljg4fjg6vjgYvjgonjg6zjg7Pjg4Djg6njga7liJ3mnJ/ljJblh6bnkIbjgavlv4XopoHjgarmg4XloLHjgpLlj5bjgorlh7rjgZnjgZPjgajjgYzjgafjgY3jgotcclxuICAgKlxyXG4gICAqIEBwYXJhbSBtb2RlbCDjg6Ljg4fjg6vjga7jgqTjg7Pjgrnjgr/jg7PjgrlcclxuICAgKi9cclxuICBwdWJsaWMgaW5pdGlhbGl6ZShtb2RlbDogQ3ViaXNtTW9kZWwpOiB2b2lkIHtcclxuICAgIGlmIChtb2RlbC5pc1VzaW5nTWFza2luZygpKSB7XHJcbiAgICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlciA9IG5ldyBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0woKTsgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44O744OQ44OD44OV44Kh5YmN5Yem55CG5pa55byP44KS5Yid5pyf5YyWXHJcbiAgICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlci5pbml0aWFsaXplKFxyXG4gICAgICAgIG1vZGVsLFxyXG4gICAgICAgIG1vZGVsLmdldERyYXdhYmxlQ291bnQoKSxcclxuICAgICAgICBtb2RlbC5nZXREcmF3YWJsZU1hc2tzKCksXHJcbiAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVNYXNrQ291bnRzKClcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9zb3J0ZWREcmF3YWJsZUluZGV4TGlzdC5yZXNpemUobW9kZWwuZ2V0RHJhd2FibGVDb3VudCgpLCAwKTtcclxuXHJcbiAgICBzdXBlci5pbml0aWFsaXplKG1vZGVsKTsgLy8g6Kaq44Kv44Op44K544Gu5Yem55CG44KS5ZG844G2XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBXZWJHTOODhuOCr+OCueODgeODo+OBruODkOOCpOODs+ODieWHpueQhlxyXG4gICAqIEN1YmlzbVJlbmRlcmVy44Gr44OG44Kv44K544OB44Oj44KS6Kit5a6a44GX44CBQ3ViaXNtUmVuZGVyZXLlhoXjgafjgZ3jga7nlLvlg4/jgpLlj4LnhafjgZnjgovjgZ/jgoHjga5JbmRleOWApOOCkuaIu+OCiuWApOOBqOOBmeOCi1xyXG4gICAqIEBwYXJhbSBtb2RlbFRleHR1cmVObyDjgrvjg4Pjg4jjgZnjgovjg6Ljg4fjg6vjg4bjgq/jgrnjg4Hjg6Pjga7nlarlj7dcclxuICAgKiBAcGFyYW0gZ2xUZXh0dXJlTm8gV2ViR0zjg4bjgq/jgrnjg4Hjg6Pjga7nlarlj7dcclxuICAgKi9cclxuICBwdWJsaWMgYmluZFRleHR1cmUobW9kZWxUZXh0dXJlTm86IG51bWJlciwgZ2xUZXh0dXJlOiBXZWJHTFRleHR1cmUpOiB2b2lkIHtcclxuICAgIHRoaXMuX3RleHR1cmVzLnNldFZhbHVlKG1vZGVsVGV4dHVyZU5vLCBnbFRleHR1cmUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogV2ViR0zjgavjg5DjgqTjg7Pjg4njgZXjgozjgZ/jg4bjgq/jgrnjg4Hjg6Pjga7jg6rjgrnjg4jjgpLlj5blvpfjgZnjgotcclxuICAgKiBAcmV0dXJuIOODhuOCr+OCueODgeODo+OBruODquOCueODiFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRCaW5kZWRUZXh0dXJlcygpOiBjc21NYXA8bnVtYmVyLCBXZWJHTFRleHR1cmU+IHtcclxuICAgIHJldHVybiB0aGlzLl90ZXh0dXJlcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODkOODg+ODleOCoeOBruOCteOCpOOCuuOCkuioreWumuOBmeOCi1xyXG4gICAqIOODnuOCueOCr+eUqOOBrkZyYW1lQnVmZmVy44KS56C05qOE44CB5YaN5L2c5oiQ44GZ44KL54K65Yem55CG44Kz44K544OI44Gv6auY44GEXHJcbiAgICogQHBhcmFtIHNpemUg44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44OQ44OD44OV44Kh44Gu44K144Kk44K6XHJcbiAgICovXHJcbiAgcHVibGljIHNldENsaXBwaW5nTWFza0J1ZmZlclNpemUoc2l6ZTogbnVtYmVyKSB7XHJcbiAgICAvLyBGcmFtZUJ1ZmZlcuOBruOCteOCpOOCuuOCkuWkieabtOOBmeOCi+OBn+OCgeOBq+OCpOODs+OCueOCv+ODs+OCueOCkuegtOajhOODu+WGjeS9nOaIkOOBmeOCi1xyXG4gICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyLnJlbGVhc2UoKTtcclxuICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlciA9IHZvaWQgMDtcclxuICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlciA9IG51bGw7XHJcblxyXG4gICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyID0gbmV3IEN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTCgpO1xyXG5cclxuICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlci5zZXRDbGlwcGluZ01hc2tCdWZmZXJTaXplKHNpemUpO1xyXG5cclxuICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlci5pbml0aWFsaXplKFxyXG4gICAgICB0aGlzLmdldE1vZGVsKCksXHJcbiAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZUNvdW50KCksXHJcbiAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZU1hc2tzKCksXHJcbiAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZU1hc2tDb3VudHMoKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODkOODg+ODleOCoeOBruOCteOCpOOCuuOCkuWPluW+l+OBmeOCi1xyXG4gICAqIEByZXR1cm4g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44OQ44OD44OV44Kh44Gu44K144Kk44K6XHJcbiAgICovXHJcbiAgcHVibGljIGdldENsaXBwaW5nTWFza0J1ZmZlclNpemUoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9jbGlwcGluZ01hbmFnZXIuZ2V0Q2xpcHBpbmdNYXNrQnVmZmVyU2l6ZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2sgPSBudWxsO1xyXG4gICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdyA9IG51bGw7XHJcbiAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIgPSBuZXcgQ3ViaXNtQ2xpcHBpbmdNYW5hZ2VyX1dlYkdMKCk7XHJcbiAgICB0aGlzLmZpcnN0RHJhdyA9IHRydWU7XHJcbiAgICB0aGlzLl90ZXh0dXJlcyA9IG5ldyBjc21NYXA8bnVtYmVyLCBudW1iZXI+KCk7XHJcbiAgICB0aGlzLl9zb3J0ZWREcmF3YWJsZUluZGV4TGlzdCA9IG5ldyBjc21WZWN0b3I8bnVtYmVyPigpO1xyXG4gICAgdGhpcy5fYnVmZmVyRGF0YSA9IHtcclxuICAgICAgdmVydGV4OiBXZWJHTEJ1ZmZlciA9IG51bGwsXHJcbiAgICAgIHV2OiBXZWJHTEJ1ZmZlciA9IG51bGwsXHJcbiAgICAgIGluZGV4OiBXZWJHTEJ1ZmZlciA9IG51bGxcclxuICAgIH07XHJcblxyXG4gICAgLy8g44OG44Kv44K544OB44Oj5a++5b+c44Oe44OD44OX44Gu5a656YeP44KS56K65L+d44GX44Gm44GK44GPXHJcbiAgICB0aGlzLl90ZXh0dXJlcy5wcmVwYXJlQ2FwYWNpdHkoMzIsIHRydWUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXHJcbiAgICovXHJcbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIucmVsZWFzZSgpO1xyXG4gICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyID0gdm9pZCAwO1xyXG4gICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyID0gbnVsbDtcclxuXHJcbiAgICB0aGlzLmdsLmRlbGV0ZUJ1ZmZlcih0aGlzLl9idWZmZXJEYXRhLnZlcnRleCk7XHJcbiAgICB0aGlzLl9idWZmZXJEYXRhLnZlcnRleCA9IG51bGw7XHJcbiAgICB0aGlzLmdsLmRlbGV0ZUJ1ZmZlcih0aGlzLl9idWZmZXJEYXRhLnV2KTtcclxuICAgIHRoaXMuX2J1ZmZlckRhdGEudXYgPSBudWxsO1xyXG4gICAgdGhpcy5nbC5kZWxldGVCdWZmZXIodGhpcy5fYnVmZmVyRGF0YS5pbmRleCk7XHJcbiAgICB0aGlzLl9idWZmZXJEYXRhLmluZGV4ID0gbnVsbDtcclxuICAgIHRoaXMuX2J1ZmZlckRhdGEgPSBudWxsO1xyXG5cclxuICAgIHRoaXMuX3RleHR1cmVzID0gbnVsbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODh+ODq+OCkuaPj+eUu+OBmeOCi+Wun+mam+OBruWHpueQhlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkb0RyYXdNb2RlbCgpOiB2b2lkIHtcclxuICAgIC8vLS0tLS0tLS0tLS0tIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODu+ODkOODg+ODleOCoeWJjeWHpueQhuaWueW8j+OBruWgtOWQiCAtLS0tLS0tLS0tLS1cclxuICAgIGlmICh0aGlzLl9jbGlwcGluZ01hbmFnZXIgIT0gbnVsbCkge1xyXG4gICAgICB0aGlzLnByZURyYXcoKTtcclxuICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyLnNldHVwQ2xpcHBpbmdDb250ZXh0KHRoaXMuZ2V0TW9kZWwoKSwgdGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5LiK6KiY44Kv44Oq44OD44OU44Oz44Kw5Yem55CG5YaF44Gn44KC5LiA5bqmUHJlRHJhd+OCkuWRvOOBtuOBruOBp+azqOaEjyEhXHJcbiAgICB0aGlzLnByZURyYXcoKTtcclxuXHJcbiAgICBjb25zdCBkcmF3YWJsZUNvdW50OiBudW1iZXIgPSB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVDb3VudCgpO1xyXG4gICAgY29uc3QgcmVuZGVyT3JkZXI6IEludDMyQXJyYXkgPSB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVSZW5kZXJPcmRlcnMoKTtcclxuXHJcbiAgICAvLyDjgqTjg7Pjg4fjg4Pjgq/jgrnjgpLmj4/nlLvpoIbjgafjgr3jg7zjg4hcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZHJhd2FibGVDb3VudDsgKytpKSB7XHJcbiAgICAgIGNvbnN0IG9yZGVyOiBudW1iZXIgPSByZW5kZXJPcmRlcltpXTtcclxuICAgICAgdGhpcy5fc29ydGVkRHJhd2FibGVJbmRleExpc3Quc2V0KG9yZGVyLCBpKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDmj4/nlLtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZHJhd2FibGVDb3VudDsgKytpKSB7XHJcbiAgICAgIGNvbnN0IGRyYXdhYmxlSW5kZXg6IG51bWJlciA9IHRoaXMuX3NvcnRlZERyYXdhYmxlSW5kZXhMaXN0LmF0KGkpO1xyXG5cclxuICAgICAgLy8gRHJhd2FibGXjgYzooajnpLrnirbmhYvjgafjgarjgZHjgozjgbDlh6bnkIbjgpLjg5HjgrnjgZnjgotcclxuICAgICAgaWYgKCF0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVEeW5hbWljRmxhZ0lzVmlzaWJsZShkcmF3YWJsZUluZGV4KSkge1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jgpLjgrvjg4Pjg4jjgZnjgotcclxuICAgICAgdGhpcy5zZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3KFxyXG4gICAgICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlciAhPSBudWxsXHJcbiAgICAgICAgICA/IHRoaXMuX2NsaXBwaW5nTWFuYWdlclxyXG4gICAgICAgICAgICAgIC5nZXRDbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdygpXHJcbiAgICAgICAgICAgICAgLmF0KGRyYXdhYmxlSW5kZXgpXHJcbiAgICAgICAgICA6IG51bGxcclxuICAgICAgKTtcclxuXHJcbiAgICAgIHRoaXMuc2V0SXNDdWxsaW5nKHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZUN1bGxpbmcoZHJhd2FibGVJbmRleCkpO1xyXG5cclxuICAgICAgdGhpcy5kcmF3TWVzaChcclxuICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVUZXh0dXJlSW5kaWNlcyhkcmF3YWJsZUluZGV4KSxcclxuICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVWZXJ0ZXhJbmRleENvdW50KGRyYXdhYmxlSW5kZXgpLFxyXG4gICAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZVZlcnRleENvdW50KGRyYXdhYmxlSW5kZXgpLFxyXG4gICAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZVZlcnRleEluZGljZXMoZHJhd2FibGVJbmRleCksXHJcbiAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlVmVydGljZXMoZHJhd2FibGVJbmRleCksXHJcbiAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlVmVydGV4VXZzKGRyYXdhYmxlSW5kZXgpLFxyXG4gICAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZU9wYWNpdHkoZHJhd2FibGVJbmRleCksXHJcbiAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlQmxlbmRNb2RlKGRyYXdhYmxlSW5kZXgpLFxyXG4gICAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZUludmVydGVkTWFza0JpdChkcmF3YWJsZUluZGV4KVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogW+OCquODvOODkOODvOODqeOCpOODiV1cclxuICAgKiDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jvvIjjgqLjg7zjg4jjg6Hjg4Pjgrfjg6XvvInjgpLmj4/nlLvjgZnjgovjgIJcclxuICAgKiDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjgajjg4bjgq/jgrnjg4Hjg6Pnlarlj7fjgpLjgrvjg4Pjg4jjgafmuKHjgZnjgIJcclxuICAgKiBAcGFyYW0gdGV4dHVyZU5vIOaPj+eUu+OBmeOCi+ODhuOCr+OCueODgeODo+eVquWPt1xyXG4gICAqIEBwYXJhbSBpbmRleENvdW50IOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruOCpOODs+ODh+ODg+OCr+OCueWApFxyXG4gICAqIEBwYXJhbSB2ZXJ0ZXhDb3VudCDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjga7poILngrnmlbBcclxuICAgKiBAcGFyYW0gaW5kZXhBcnJheSDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjga7jgqTjg7Pjg4fjg4Pjgq/jgrnphY3liJdcclxuICAgKiBAcGFyYW0gdmVydGV4QXJyYXkg44Od44Oq44K044Oz44Oh44OD44K344Ol44Gu6aCC54K56YWN5YiXXHJcbiAgICogQHBhcmFtIHV2QXJyYXkgdXbphY3liJdcclxuICAgKiBAcGFyYW0gb3BhY2l0eSDkuI3pgI/mmI7luqZcclxuICAgKiBAcGFyYW0gY29sb3JCbGVuZE1vZGUg44Kr44Op44O85ZCI5oiQ44K/44Kk44OXXHJcbiAgICogQHBhcmFtIGludmVydGVkTWFzayDjg57jgrnjgq/kvb/nlKjmmYLjga7jg57jgrnjgq/jga7lj43ou6Lkvb/nlKhcclxuICAgKi9cclxuICBwdWJsaWMgZHJhd01lc2goXHJcbiAgICB0ZXh0dXJlTm86IG51bWJlcixcclxuICAgIGluZGV4Q291bnQ6IG51bWJlcixcclxuICAgIHZlcnRleENvdW50OiBudW1iZXIsXHJcbiAgICBpbmRleEFycmF5OiBVaW50MTZBcnJheSxcclxuICAgIHZlcnRleEFycmF5OiBGbG9hdDMyQXJyYXksXHJcbiAgICB1dkFycmF5OiBGbG9hdDMyQXJyYXksXHJcbiAgICBvcGFjaXR5OiBudW1iZXIsXHJcbiAgICBjb2xvckJsZW5kTW9kZTogQ3ViaXNtQmxlbmRNb2RlLFxyXG4gICAgaW52ZXJ0ZWRNYXNrOiBib29sZWFuXHJcbiAgKTogdm9pZCB7XHJcbiAgICAvLyDoo4/pnaLmj4/nlLvjga7mnInlirnjg7vnhKHlirlcclxuICAgIGlmICh0aGlzLmlzQ3VsbGluZygpKSB7XHJcbiAgICAgIHRoaXMuZ2wuZW5hYmxlKHRoaXMuZ2wuQ1VMTF9GQUNFKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZ2wuZGlzYWJsZSh0aGlzLmdsLkNVTExfRkFDRSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5nbC5mcm9udEZhY2UodGhpcy5nbC5DQ1cpOyAvLyBDdWJpc20gU0RLIE9wZW5HTOOBr+ODnuOCueOCr+ODu+OCouODvOODiOODoeODg+OCt+ODpeWFseOBq0NDV+OBjOihqOmdolxyXG5cclxuICAgIGNvbnN0IG1vZGVsQ29sb3JSR0JBOiBDdWJpc21UZXh0dXJlQ29sb3IgPSB0aGlzLmdldE1vZGVsQ29sb3IoKTtcclxuXHJcbiAgICBpZiAodGhpcy5nZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrKCkgPT0gbnVsbCkge1xyXG4gICAgICAvLyDjg57jgrnjgq/nlJ/miJDmmYLku6XlpJZcclxuICAgICAgbW9kZWxDb2xvclJHQkEuQSAqPSBvcGFjaXR5O1xyXG4gICAgICBpZiAodGhpcy5pc1ByZW11bHRpcGxpZWRBbHBoYSgpKSB7XHJcbiAgICAgICAgbW9kZWxDb2xvclJHQkEuUiAqPSBtb2RlbENvbG9yUkdCQS5BO1xyXG4gICAgICAgIG1vZGVsQ29sb3JSR0JBLkcgKj0gbW9kZWxDb2xvclJHQkEuQTtcclxuICAgICAgICBtb2RlbENvbG9yUkdCQS5CICo9IG1vZGVsQ29sb3JSR0JBLkE7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBsZXQgZHJhd3RleHR1cmU6IFdlYkdMVGV4dHVyZTsgLy8g44K344Kn44O844OA44Gr5rih44GZ44OG44Kv44K544OB44OjXHJcblxyXG4gICAgLy8g44OG44Kv44K544OB44Oj44Oe44OD44OX44GL44KJ44OQ44Kk44Oz44OJ5riI44G/44OG44Kv44K544OB44Oj77yp77yk44KS5Y+W5b6XXHJcbiAgICAvLyDjg5DjgqTjg7Pjg4njgZXjgozjgabjgYTjgarjgZHjgozjgbDjg4Djg5/jg7zjga7jg4bjgq/jgrnjg4Hjg6NJROOCkuOCu+ODg+ODiOOBmeOCi1xyXG4gICAgaWYgKHRoaXMuX3RleHR1cmVzLmdldFZhbHVlKHRleHR1cmVObykgIT0gbnVsbCkge1xyXG4gICAgICBkcmF3dGV4dHVyZSA9IHRoaXMuX3RleHR1cmVzLmdldFZhbHVlKHRleHR1cmVObyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBkcmF3dGV4dHVyZSA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgQ3ViaXNtU2hhZGVyX1dlYkdMLmdldEluc3RhbmNlKCkuc2V0dXBTaGFkZXJQcm9ncmFtKFxyXG4gICAgICB0aGlzLFxyXG4gICAgICBkcmF3dGV4dHVyZSxcclxuICAgICAgdmVydGV4Q291bnQsXHJcbiAgICAgIHZlcnRleEFycmF5LFxyXG4gICAgICBpbmRleEFycmF5LFxyXG4gICAgICB1dkFycmF5LFxyXG4gICAgICB0aGlzLl9idWZmZXJEYXRhLFxyXG4gICAgICBvcGFjaXR5LFxyXG4gICAgICBjb2xvckJsZW5kTW9kZSxcclxuICAgICAgbW9kZWxDb2xvclJHQkEsXHJcbiAgICAgIHRoaXMuaXNQcmVtdWx0aXBsaWVkQWxwaGEoKSxcclxuICAgICAgdGhpcy5nZXRNdnBNYXRyaXgoKSxcclxuICAgICAgaW52ZXJ0ZWRNYXNrXHJcbiAgICApO1xyXG5cclxuICAgIC8vIOODneODquOCtOODs+ODoeODg+OCt+ODpeOCkuaPj+eUu+OBmeOCi1xyXG4gICAgdGhpcy5nbC5kcmF3RWxlbWVudHMoXHJcbiAgICAgIHRoaXMuZ2wuVFJJQU5HTEVTLFxyXG4gICAgICBpbmRleENvdW50LFxyXG4gICAgICB0aGlzLmdsLlVOU0lHTkVEX1NIT1JULFxyXG4gICAgICAwXHJcbiAgICApO1xyXG5cclxuICAgIC8vIOW+jOWHpueQhlxyXG4gICAgdGhpcy5nbC51c2VQcm9ncmFtKG51bGwpO1xyXG4gICAgdGhpcy5zZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3KG51bGwpO1xyXG4gICAgdGhpcy5zZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrKG51bGwpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Os44Oz44OA44Op44GM5L+d5oyB44GZ44KL6Z2Z55qE44Gq44Oq44K944O844K544KS6Kej5pS+44GZ44KLXHJcbiAgICogV2ViR0zjga7pnZnnmoTjgarjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgpLop6PmlL7jgZnjgotcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGRvU3RhdGljUmVsZWFzZSgpOiB2b2lkIHtcclxuICAgIEN1YmlzbVNoYWRlcl9XZWJHTC5kZWxldGVJbnN0YW5jZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Os44Oz44OA44O844K544OG44O844OI44KS6Kit5a6a44GZ44KLXHJcbiAgICogQHBhcmFtIGZibyDjgqLjg5fjg6rjgrHjg7zjgrfjg6fjg7PlgbTjgafmjIflrprjgZfjgabjgYTjgovjg5Xjg6zjg7zjg6Djg5Djg4Pjg5XjgqFcclxuICAgKiBAcGFyYW0gdmlld3BvcnQg44OT44Ol44O844Od44O844OIXHJcbiAgICovXHJcbiAgcHVibGljIHNldFJlbmRlclN0YXRlKGZibzogV2ViR0xGcmFtZWJ1ZmZlciwgdmlld3BvcnQ6IG51bWJlcltdKTogdm9pZCB7XHJcbiAgICBzX2ZibyA9IGZibztcclxuICAgIHNfdmlld3BvcnQgPSB2aWV3cG9ydDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaPj+eUu+mWi+Wni+aZguOBrui/veWKoOWHpueQhlxyXG4gICAqIOODouODh+ODq+OCkuaPj+eUu+OBmeOCi+WJjeOBq+OCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBq+W/heimgeOBquWHpueQhuOCkuWun+ijheOBl+OBpuOBhOOCi1xyXG4gICAqL1xyXG4gIHB1YmxpYyBwcmVEcmF3KCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuZmlyc3REcmF3KSB7XHJcbiAgICAgIHRoaXMuZmlyc3REcmF3ID0gZmFsc2U7XHJcblxyXG4gICAgICAvLyDmi6HlvLXmqZ/og73jgpLmnInlirnjgavjgZnjgotcclxuICAgICAgdGhpcy5fYW5pc29ydG9weSA9XHJcbiAgICAgICAgdGhpcy5nbC5nZXRFeHRlbnNpb24oJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycpIHx8XHJcbiAgICAgICAgdGhpcy5nbC5nZXRFeHRlbnNpb24oJ1dFQktJVF9FWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnKSB8fFxyXG4gICAgICAgIHRoaXMuZ2wuZ2V0RXh0ZW5zaW9uKCdNT1pfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5nbC5kaXNhYmxlKHRoaXMuZ2wuU0NJU1NPUl9URVNUKTtcclxuICAgIHRoaXMuZ2wuZGlzYWJsZSh0aGlzLmdsLlNURU5DSUxfVEVTVCk7XHJcbiAgICB0aGlzLmdsLmRpc2FibGUodGhpcy5nbC5ERVBUSF9URVNUKTtcclxuXHJcbiAgICAvLyDjgqvjg6rjg7PjgrDvvIgxLjBiZXRhM++8iVxyXG4gICAgdGhpcy5nbC5mcm9udEZhY2UodGhpcy5nbC5DVyk7XHJcblxyXG4gICAgdGhpcy5nbC5lbmFibGUodGhpcy5nbC5CTEVORCk7XHJcbiAgICB0aGlzLmdsLmNvbG9yTWFzayh0cnVlLCB0cnVlLCB0cnVlLCB0cnVlKTtcclxuXHJcbiAgICB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5BUlJBWV9CVUZGRVIsIG51bGwpOyAvLyDliY3jgavjg5Djg4Pjg5XjgqHjgYzjg5DjgqTjg7Pjg4njgZXjgozjgabjgYTjgZ/jgonnoLTmo4TjgZnjgovlv4XopoHjgYzjgYLjgotcclxuICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBudWxsKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODnuOCueOCr+ODhuOCr+OCueODgeODo+OBq+aPj+eUu+OBmeOCi+OCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiOOCkuOCu+ODg+ODiOOBmeOCi1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrKGNsaXA6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCkge1xyXG4gICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzayA9IGNsaXA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg57jgrnjgq/jg4bjgq/jgrnjg4Hjg6Pjgavmj4/nlLvjgZnjgovjgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4jjgpLlj5blvpfjgZnjgotcclxuICAgKiBAcmV0dXJuIOODnuOCueOCr+ODhuOCr+OCueODgeODo+OBq+aPj+eUu+OBmeOCi+OCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrKCk6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCB7XHJcbiAgICByZXR1cm4gdGhpcy5fY2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzaztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOeUu+mdouS4iuOBq+aPj+eUu+OBmeOCi+OCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiOOCkuOCu+ODg+ODiOOBmeOCi1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3KGNsaXA6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCk6IHZvaWQge1xyXG4gICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdyA9IGNsaXA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDnlLvpnaLkuIrjgavmj4/nlLvjgZnjgovjgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4jjgpLlj5blvpfjgZnjgotcclxuICAgKiBAcmV0dXJuIOeUu+mdouS4iuOBq+aPj+eUu+OBmeOCi+OCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3KCk6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCB7XHJcbiAgICByZXR1cm4gdGhpcy5fY2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGds44Gu6Kit5a6aXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXJ0VXAoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCk6IHZvaWQge1xyXG4gICAgdGhpcy5nbCA9IGdsO1xyXG4gICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyLnNldEdMKGdsKTtcclxuICAgIEN1YmlzbVNoYWRlcl9XZWJHTC5nZXRJbnN0YW5jZSgpLnNldEdsKGdsKTtcclxuICB9XHJcblxyXG4gIF90ZXh0dXJlczogY3NtTWFwPG51bWJlciwgV2ViR0xUZXh0dXJlPjsgLy8g44Oi44OH44Or44GM5Y+C54Wn44GZ44KL44OG44Kv44K544OB44Oj44Go44Os44Oz44OA44Op44Gn44OQ44Kk44Oz44OJ44GX44Gm44GE44KL44OG44Kv44K544OB44Oj44Go44Gu44Oe44OD44OXXHJcbiAgX3NvcnRlZERyYXdhYmxlSW5kZXhMaXN0OiBjc21WZWN0b3I8bnVtYmVyPjsgLy8g5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu44Kk44Oz44OH44OD44Kv44K544KS5o+P55S76aCG44Gr5Lim44G544Gf44Oq44K544OIXHJcbiAgX2NsaXBwaW5nTWFuYWdlcjogQ3ViaXNtQ2xpcHBpbmdNYW5hZ2VyX1dlYkdMOyAvLyDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/nrqHnkIbjgqrjg5bjgrjjgqfjgq/jg4hcclxuICBfY2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzazogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0OyAvLyDjg57jgrnjgq/jg4bjgq/jgrnjg4Hjg6Pjgavmj4/nlLvjgZnjgovjgZ/jgoHjga7jgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4hcclxuICBfY2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdzogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0OyAvLyDnlLvpnaLkuIrmj4/nlLvjgZnjgovjgZ/jgoHjga7jgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4hcclxuICBmaXJzdERyYXc6IGJvb2xlYW47XHJcbiAgX2J1ZmZlckRhdGE6IHtcclxuICAgIHZlcnRleDogV2ViR0xCdWZmZXI7XHJcbiAgICB1djogV2ViR0xCdWZmZXI7XHJcbiAgICBpbmRleDogV2ViR0xCdWZmZXI7XHJcbiAgfTsgLy8g6aCC54K544OQ44OD44OV44Kh44OH44O844K/XHJcbiAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dDsgLy8gd2ViZ2zjgrPjg7Pjg4bjgq3jgrnjg4hcclxufVxyXG5cclxuLyoqXHJcbiAqIOODrOODs+ODgOODqeOBjOS/neaMgeOBmeOCi+mdmeeahOOBquODquOCveODvOOCueOCkumWi+aUvuOBmeOCi1xyXG4gKi9cclxuQ3ViaXNtUmVuZGVyZXIuc3RhdGljUmVsZWFzZSA9ICgpOiB2b2lkID0+IHtcclxuICBDdWJpc21SZW5kZXJlcl9XZWJHTC5kb1N0YXRpY1JlbGVhc2UoKTtcclxufTtcclxuXHJcbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxyXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtcmVuZGVyZXJfd2ViZ2wnO1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbUNsaXBwaW5nQ29udGV4dCA9ICQuQ3ViaXNtQ2xpcHBpbmdDb250ZXh0O1xyXG4gIGV4cG9ydCB0eXBlIEN1YmlzbUNsaXBwaW5nQ29udGV4dCA9ICQuQ3ViaXNtQ2xpcHBpbmdDb250ZXh0O1xyXG4gIGV4cG9ydCBjb25zdCBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0wgPSAkLkN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTDtcclxuICBleHBvcnQgdHlwZSBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0wgPSAkLkN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTDtcclxuICBleHBvcnQgY29uc3QgQ3ViaXNtUmVuZGVyVGV4dHVyZVJlc291cmNlID0gJC5DdWJpc21SZW5kZXJUZXh0dXJlUmVzb3VyY2U7XHJcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtUmVuZGVyVGV4dHVyZVJlc291cmNlID0gJC5DdWJpc21SZW5kZXJUZXh0dXJlUmVzb3VyY2U7XHJcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVJlbmRlcmVyX1dlYkdMID0gJC5DdWJpc21SZW5kZXJlcl9XZWJHTDtcclxuICBleHBvcnQgdHlwZSBDdWJpc21SZW5kZXJlcl9XZWJHTCA9ICQuQ3ViaXNtUmVuZGVyZXJfV2ViR0w7XHJcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVNoYWRlclNldCA9ICQuQ3ViaXNtU2hhZGVyU2V0O1xyXG4gIGV4cG9ydCB0eXBlIEN1YmlzbVNoYWRlclNldCA9ICQuQ3ViaXNtU2hhZGVyU2V0O1xyXG4gIGV4cG9ydCBjb25zdCBDdWJpc21TaGFkZXJfV2ViR0wgPSAkLkN1YmlzbVNoYWRlcl9XZWJHTDtcclxuICBleHBvcnQgdHlwZSBDdWJpc21TaGFkZXJfV2ViR0wgPSAkLkN1YmlzbVNoYWRlcl9XZWJHTDtcclxuICBleHBvcnQgY29uc3QgU2hhZGVyTmFtZXMgPSAkLlNoYWRlck5hbWVzO1xyXG4gIGV4cG9ydCB0eXBlIFNoYWRlck5hbWVzID0gJC5TaGFkZXJOYW1lcztcclxufVxyXG4iLCIvKipcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEN1YmlzbUxvZ0RlYnVnIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtZGVidWcnO1xyXG5cclxuLyoqXHJcbiAqIEtleS1WYWx1ZeOBruODmuOCouOCkuWumue+qeOBmeOCi+OCr+ODqeOCuVxyXG4gKiBjc21NYXDjgq/jg6njgrnjga7lhoXpg6jjg4fjg7zjgr/jgafkvb/nlKjjgZnjgovjgIJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBjc21QYWlyPF9LZXlULCBfVmFsVD4ge1xyXG4gIC8qKlxyXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAqIEBwYXJhbSBrZXkgS2V544Go44GX44Gm44K744OD44OI44GZ44KL5YCkXHJcbiAgICogQHBhcmFtIHZhbHVlIFZhbHVl44Go44GX44Gm44K744OD44OI44GZ44KL5YCkXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKGtleT86IF9LZXlULCB2YWx1ZT86IF9WYWxUKSB7XHJcbiAgICB0aGlzLmZpcnN0ID0ga2V5ID09IHVuZGVmaW5lZCA/IG51bGwgOiBrZXk7XHJcblxyXG4gICAgdGhpcy5zZWNvbmQgPSB2YWx1ZSA9PSB1bmRlZmluZWQgPyBudWxsIDogdmFsdWU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZmlyc3Q6IF9LZXlUOyAvLyBrZXnjgajjgZfjgabnlKjjgYTjgovlpInmlbBcclxuICBwdWJsaWMgc2Vjb25kOiBfVmFsVDsgLy8gdmFsdWXjgajjgZfjgabnlKjjgYTjgovlpInmlbBcclxufVxyXG5cclxuLyoqXHJcbiAqIOODnuODg+ODl+Wei1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIGNzbU1hcDxfS2V5VCwgX1ZhbFQ+IHtcclxuICAvKipcclxuICAgKiDlvJXmlbDku5jjgY3jgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgKiBAcGFyYW0gc2l6ZSDliJ3mnJ/ljJbmmYLngrnjgafnorrkv53jgZnjgovjgrXjgqTjgrpcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3Ioc2l6ZT86IG51bWJlcikge1xyXG4gICAgaWYgKHNpemUgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIGlmIChzaXplIDwgMSkge1xyXG4gICAgICAgIHRoaXMuX2tleVZhbHVlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuX2R1bW15VmFsdWUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX3NpemUgPSAwO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuX2tleVZhbHVlcyA9IG5ldyBBcnJheShzaXplKTtcclxuICAgICAgICB0aGlzLl9zaXplID0gc2l6ZTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fa2V5VmFsdWVzID0gW107XHJcbiAgICAgIHRoaXMuX2R1bW15VmFsdWUgPSBudWxsO1xyXG4gICAgICB0aGlzLl9zaXplID0gMDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODh+OCueODiOODqeOCr+OCv1xyXG4gICAqL1xyXG4gIHB1YmxpYyByZWxlYXNlKCkge1xyXG4gICAgdGhpcy5jbGVhcigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Kt44O844KS6L+95Yqg44GZ44KLXHJcbiAgICogQHBhcmFtIGtleSDmlrDjgZ/jgavov73liqDjgZnjgovjgq3jg7xcclxuICAgKi9cclxuICBwdWJsaWMgYXBwZW5kS2V5KGtleTogX0tleVQpOiB2b2lkIHtcclxuICAgIC8vIOaWsOOBl+OBj0tleS9WYWx1ZeOBruODmuOCouOCkuS9nOOCi1xyXG4gICAgdGhpcy5wcmVwYXJlQ2FwYWNpdHkodGhpcy5fc2l6ZSArIDEsIGZhbHNlKTsgLy8gMeOBpOS7peS4iuWFpeOCi+mamemWk+OCkuS9nOOCi1xyXG4gICAgLy8g5paw44GX44GEa2V5L3ZhbHVl44Gu44Kk44Oz44OH44OD44Kv44K544GvX3NpemVcclxuXHJcbiAgICB0aGlzLl9rZXlWYWx1ZXNbdGhpcy5fc2l6ZV0gPSBuZXcgY3NtUGFpcjxfS2V5VCwgX1ZhbFQ+KGtleSk7XHJcbiAgICB0aGlzLl9zaXplICs9IDE7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmt7vlrZfmvJTnrpflrZBba2V5XeOBruOCquODvOODkOODvOODreODvOODiShnZXQpXHJcbiAgICogQHBhcmFtIGtleSDmt7vlrZfjgYvjgonnibnlrprjgZXjgozjgotWYWx1ZeWApFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRWYWx1ZShrZXk6IF9LZXlUKTogX1ZhbFQge1xyXG4gICAgbGV0IGZvdW5kID0gLTE7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9zaXplOyBpKyspIHtcclxuICAgICAgaWYgKHRoaXMuX2tleVZhbHVlc1tpXS5maXJzdCA9PSBrZXkpIHtcclxuICAgICAgICBmb3VuZCA9IGk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoZm91bmQgPj0gMCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5fa2V5VmFsdWVzW2ZvdW5kXS5zZWNvbmQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmFwcGVuZEtleShrZXkpOyAvLyDmlrDopo/jgq3jg7zjgpLov73liqBcclxuICAgICAgcmV0dXJuIHRoaXMuX2tleVZhbHVlc1t0aGlzLl9zaXplIC0gMV0uc2Vjb25kO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5re75a2X5ryU566X5a2QW2tleV3jga7jgqrjg7zjg5Djg7zjg63jg7zjg4koc2V0KVxyXG4gICAqIEBwYXJhbSBrZXkg5re75a2X44GL44KJ54m55a6a44GV44KM44KLVmFsdWXlgKRcclxuICAgKiBAcGFyYW0gdmFsdWUg5Luj5YWl44GZ44KLVmFsdWXlgKRcclxuICAgKi9cclxuICBwdWJsaWMgc2V0VmFsdWUoa2V5OiBfS2V5VCwgdmFsdWU6IF9WYWxUKTogdm9pZCB7XHJcbiAgICBsZXQgZm91bmQgPSAtMTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3NpemU7IGkrKykge1xyXG4gICAgICBpZiAodGhpcy5fa2V5VmFsdWVzW2ldLmZpcnN0ID09IGtleSkge1xyXG4gICAgICAgIGZvdW5kID0gaTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChmb3VuZCA+PSAwKSB7XHJcbiAgICAgIHRoaXMuX2tleVZhbHVlc1tmb3VuZF0uc2Vjb25kID0gdmFsdWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmFwcGVuZEtleShrZXkpOyAvLyDmlrDopo/jgq3jg7zjgpLov73liqBcclxuICAgICAgdGhpcy5fa2V5VmFsdWVzW3RoaXMuX3NpemUgLSAxXS5zZWNvbmQgPSB2YWx1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOW8leaVsOOBp+a4oeOBl+OBn0tleeOCkuaMgeOBpOimgee0oOOBjOWtmOWcqOOBmeOCi+OBi1xyXG4gICAqIEBwYXJhbSBrZXkg5a2Y5Zyo44KS56K66KqN44GZ44KLa2V5XHJcbiAgICogQHJldHVybiB0cnVlIOW8leaVsOOBp+a4oeOBl+OBn2tleeOCkuaMgeOBpOimgee0oOOBjOWtmOWcqOOBmeOCi1xyXG4gICAqIEByZXR1cm4gZmFsc2Ug5byV5pWw44Gn5rih44GX44Gfa2V544KS5oyB44Gk6KaB57Sg44GM5a2Y5Zyo44GX44Gq44GEXHJcbiAgICovXHJcbiAgcHVibGljIGlzRXhpc3Qoa2V5OiBfS2V5VCk6IGJvb2xlYW4ge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9zaXplOyBpKyspIHtcclxuICAgICAgaWYgKHRoaXMuX2tleVZhbHVlc1tpXS5maXJzdCA9PSBrZXkpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICoga2V5VmFsdWXjga7jg53jgqTjg7Pjgr/jgpLlhajjgabop6PmlL7jgZnjgotcclxuICAgKi9cclxuICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7XHJcbiAgICB0aGlzLl9rZXlWYWx1ZXMgPSB2b2lkIDA7XHJcbiAgICB0aGlzLl9rZXlWYWx1ZXMgPSBudWxsO1xyXG4gICAgdGhpcy5fa2V5VmFsdWVzID0gW107XHJcblxyXG4gICAgdGhpcy5fc2l6ZSA9IDA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjgrPjg7Pjg4bjg4rjga7jgrXjgqTjgrrjgpLlj5blvpfjgZnjgotcclxuICAgKlxyXG4gICAqIEByZXR1cm4g44Kz44Oz44OG44OK44Gu44K144Kk44K6XHJcbiAgICovXHJcbiAgcHVibGljIGdldFNpemUoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9zaXplO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Kz44Oz44OG44OK44Gu44Kt44Oj44OR44K344OG44Kj44KS56K65L+d44GZ44KLXHJcbiAgICogQHBhcmFtIG5ld1NpemUg5paw44Gf44Gq44Kt44Oj44OR44K344OG44Kj44CC5byV5pWw44Gu5YCk44GM54++5Zyo44Gu44K144Kk44K65pyq5rqA44Gu5aC05ZCI44Gv5L2V44KC44GX44Gq44GE44CCXHJcbiAgICogQHBhcmFtIGZpdFRvU2l6ZSB0cnVl44Gq44KJ5oyH5a6a44GX44Gf44K144Kk44K644Gr5ZCI44KP44Gb44KL44CCZmFsc2XjgarjgonjgrXjgqTjgrrjgpIy5YCN56K65L+d44GX44Gm44GK44GP44CCXHJcbiAgICovXHJcbiAgcHVibGljIHByZXBhcmVDYXBhY2l0eShuZXdTaXplOiBudW1iZXIsIGZpdFRvU2l6ZTogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgaWYgKG5ld1NpemUgPiB0aGlzLl9rZXlWYWx1ZXMubGVuZ3RoKSB7XHJcbiAgICAgIGlmICh0aGlzLl9rZXlWYWx1ZXMubGVuZ3RoID09IDApIHtcclxuICAgICAgICBpZiAoIWZpdFRvU2l6ZSAmJiBuZXdTaXplIDwgY3NtTWFwLkRlZmF1bHRTaXplKVxyXG4gICAgICAgICAgbmV3U2l6ZSA9IGNzbU1hcC5EZWZhdWx0U2l6ZTtcclxuICAgICAgICB0aGlzLl9rZXlWYWx1ZXMubGVuZ3RoID0gbmV3U2l6ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoIWZpdFRvU2l6ZSAmJiBuZXdTaXplIDwgdGhpcy5fa2V5VmFsdWVzLmxlbmd0aCAqIDIpXHJcbiAgICAgICAgICBuZXdTaXplID0gdGhpcy5fa2V5VmFsdWVzLmxlbmd0aCAqIDI7XHJcbiAgICAgICAgdGhpcy5fa2V5VmFsdWVzLmxlbmd0aCA9IG5ld1NpemU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCs+ODs+ODhuODiuOBruWFiOmgreimgee0oOOCkui/lOOBmVxyXG4gICAqL1xyXG4gIHB1YmxpYyBiZWdpbigpOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+IHtcclxuICAgIGNvbnN0IGl0ZTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPiA9IG5ldyBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+KHRoaXMsIDApO1xyXG4gICAgcmV0dXJuIGl0ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCs+ODs+ODhuODiuOBrue1guerr+imgee0oOOCkui/lOOBmVxyXG4gICAqL1xyXG4gIHB1YmxpYyBlbmQoKTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPiB7XHJcbiAgICBjb25zdCBpdGU6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4gPSBuZXcgaXRlcmF0b3I8X0tleVQsIF9WYWxUPihcclxuICAgICAgdGhpcyxcclxuICAgICAgdGhpcy5fc2l6ZVxyXG4gICAgKTsgLy8g57WC5LqGXHJcbiAgICByZXR1cm4gaXRlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Kz44Oz44OG44OK44GL44KJ6KaB57Sg44KS5YmK6Zmk44GZ44KLXHJcbiAgICpcclxuICAgKiBAcGFyYW0gaXRlIOWJiumZpOOBmeOCi+imgee0oFxyXG4gICAqL1xyXG4gIHB1YmxpYyBlcmFzZShpdGU6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4pOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+IHtcclxuICAgIGNvbnN0IGluZGV4OiBudW1iZXIgPSBpdGUuX2luZGV4O1xyXG4gICAgaWYgKGluZGV4IDwgMCB8fCB0aGlzLl9zaXplIDw9IGluZGV4KSB7XHJcbiAgICAgIHJldHVybiBpdGU7IC8vIOWJiumZpOevhOWbsuWkllxyXG4gICAgfVxyXG5cclxuICAgIC8vIOWJiumZpFxyXG4gICAgdGhpcy5fa2V5VmFsdWVzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAtLXRoaXMuX3NpemU7XHJcblxyXG4gICAgY29uc3QgaXRlMjogaXRlcmF0b3I8X0tleVQsIF9WYWxUPiA9IG5ldyBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+KFxyXG4gICAgICB0aGlzLFxyXG4gICAgICBpbmRleFxyXG4gICAgKTsgLy8g57WC5LqGXHJcbiAgICByZXR1cm4gaXRlMjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCs+ODs+ODhuODiuOBruWApOOCkjMy44OT44OD44OI56ym5Y+35LuY44GN5pW05pWw5Z6L44Gn44OA44Oz44OX44GZ44KLXHJcbiAgICovXHJcbiAgcHVibGljIGR1bXBBc0ludCgpIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fc2l6ZTsgaSsrKSB7XHJcbiAgICAgIEN1YmlzbUxvZ0RlYnVnKCd7MH0gLCcsIHRoaXMuX2tleVZhbHVlc1tpXSk7XHJcbiAgICAgIEN1YmlzbUxvZ0RlYnVnKCdcXG4nKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgRGVmYXVsdFNpemUgPSAxMDsgLy8g44Kz44Oz44OG44OK44Gu5Yid5pyf5YyW44Gu44OH44OV44Kp44Or44OI44K144Kk44K6XHJcbiAgcHVibGljIF9rZXlWYWx1ZXM6IGNzbVBhaXI8X0tleVQsIF9WYWxUPltdOyAvLyBrZXktdmFsdWXjg5rjgqLjga7phY3liJdcclxuICBwdWJsaWMgX2R1bW15VmFsdWU6IF9WYWxUOyAvLyDnqbrjga7lgKTjgpLov5TjgZnngrrjga7jg4Djg5/jg7xcclxuICBwdWJsaWMgX3NpemU6IG51bWJlcjsgLy8g44Kz44Oz44OG44OK44Gu6KaB57Sg5pWwXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBjc21NYXA8VD7jga7jgqTjg4bjg6zjg7zjgr9cclxuICovXHJcbmV4cG9ydCBjbGFzcyBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+IHtcclxuICAvKipcclxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcih2PzogY3NtTWFwPF9LZXlULCBfVmFsVD4sIGlkeD86IG51bWJlcikge1xyXG4gICAgdGhpcy5fbWFwID0gdiAhPSB1bmRlZmluZWQgPyB2IDogbmV3IGNzbU1hcDxfS2V5VCwgX1ZhbFQ+KCk7XHJcblxyXG4gICAgdGhpcy5faW5kZXggPSBpZHggIT0gdW5kZWZpbmVkID8gaWR4IDogMDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqID3mvJTnrpflrZDjga7jgqrjg7zjg5Djg7zjg63jg7zjg4lcclxuICAgKi9cclxuICBwdWJsaWMgc2V0KGl0ZTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPik6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4ge1xyXG4gICAgdGhpcy5faW5kZXggPSBpdGUuX2luZGV4O1xyXG4gICAgdGhpcy5fbWFwID0gaXRlLl9tYXA7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWJjee9ruOBjSsr5ryU566X5a2Q44Gu44Kq44O844OQ44O844Ot44O844OJXHJcbiAgICovXHJcbiAgcHVibGljIHByZUluY3JlbWVudCgpOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+IHtcclxuICAgICsrdGhpcy5faW5kZXg7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWJjee9ruOBjS0t5ryU566X5a2Q44Gu44Kq44O844OQ44O844Ot44O844OJXHJcbiAgICovXHJcbiAgcHVibGljIHByZURlY3JlbWVudCgpOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+IHtcclxuICAgIC0tdGhpcy5faW5kZXg7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOW+jOe9ruOBjSsr5ryU566X5a2Q44Gu44Kq44O844OQ44O844Ot44O844OJXHJcbiAgICovXHJcbiAgcHVibGljIGluY3JlbWVudCgpOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+IHtcclxuICAgIGNvbnN0IGl0ZW9sZCA9IG5ldyBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+KHRoaXMuX21hcCwgdGhpcy5faW5kZXgrKyk7IC8vIOWPpOOBhOWApOOCkuS/neWtmFxyXG4gICAgcmV0dXJuIGl0ZW9sZDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOW+jOe9ruOBjS0t5ryU566X5a2Q44Gu44Kq44O844OQ44O844Ot44O844OJXHJcbiAgICovXHJcbiAgcHVibGljIGRlY3JlbWVudCgpOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+IHtcclxuICAgIGNvbnN0IGl0ZW9sZCA9IG5ldyBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+KHRoaXMuX21hcCwgdGhpcy5faW5kZXgpOyAvLyDlj6TjgYTlgKTjgpLkv53lrZhcclxuICAgIHRoaXMuX21hcCA9IGl0ZW9sZC5fbWFwO1xyXG4gICAgdGhpcy5faW5kZXggPSBpdGVvbGQuX2luZGV4O1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiAq5ryU566X5a2Q44Gu44Kq44O844OQ44O844Ot44O844OJXHJcbiAgICovXHJcbiAgcHVibGljIHB0cigpOiBjc21QYWlyPF9LZXlULCBfVmFsVD4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX21hcC5fa2V5VmFsdWVzW3RoaXMuX2luZGV4XTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqICE95ryU566XXHJcbiAgICovXHJcbiAgcHVibGljIG5vdEVxdWFsKGl0ZTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2luZGV4ICE9IGl0ZS5faW5kZXggfHwgdGhpcy5fbWFwICE9IGl0ZS5fbWFwO1xyXG4gIH1cclxuXHJcbiAgX2luZGV4OiBudW1iZXI7IC8vIOOCs+ODs+ODhuODiuOBruOCpOODs+ODh+ODg+OCr+OCueWApFxyXG4gIF9tYXA6IGNzbU1hcDxfS2V5VCwgX1ZhbFQ+OyAvLyDjgrPjg7Pjg4bjg4pcclxufVxyXG5cclxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXHJcbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jc21tYXAnO1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgZXhwb3J0IGNvbnN0IGNzbU1hcCA9ICQuY3NtTWFwO1xyXG4gIGV4cG9ydCB0eXBlIGNzbU1hcDxLLCBWPiA9ICQuY3NtTWFwPEssIFY+O1xyXG4gIGV4cG9ydCBjb25zdCBjc21QYWlyID0gJC5jc21QYWlyO1xyXG4gIGV4cG9ydCB0eXBlIGNzbVBhaXI8SywgVj4gPSAkLmNzbVBhaXI8SywgVj47XHJcbiAgZXhwb3J0IGNvbnN0IGl0ZXJhdG9yID0gJC5pdGVyYXRvcjtcclxuICBleHBvcnQgdHlwZSBpdGVyYXRvcjxLLCBWPiA9ICQuaXRlcmF0b3I8SywgVj47XHJcbn1cclxuIiwiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG4vKipcclxuICog55+p5b2i5b2i54q277yI5bqn5qiZ44O76ZW344GV44GvZmxvYXTlgKTvvInjgpLlrprnvqnjgZnjgovjgq/jg6njgrlcclxuICovXHJcbmV4cG9ydCBjbGFzcyBjc21SZWN0IHtcclxuICAvKipcclxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgKiBAcGFyYW0geCDlt6bnq69Y5bqn5qiZXHJcbiAgICogQHBhcmFtIHkg5LiK56uvWeW6p+aomVxyXG4gICAqIEBwYXJhbSB3IOW5hVxyXG4gICAqIEBwYXJhbSBoIOmrmOOBlVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih4PzogbnVtYmVyLCB5PzogbnVtYmVyLCB3PzogbnVtYmVyLCBoPzogbnVtYmVyKSB7XHJcbiAgICB0aGlzLnggPSB4O1xyXG4gICAgdGhpcy55ID0geTtcclxuICAgIHRoaXMud2lkdGggPSB3O1xyXG4gICAgdGhpcy5oZWlnaHQgPSBoO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog55+p5b2i5Lit5aSu44GuWOW6p+aomeOCkuWPluW+l+OBmeOCi1xyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRDZW50ZXJYKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy54ICsgMC41ICogdGhpcy53aWR0aDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOefqeW9ouS4reWkruOBrlnluqfmqJnjgpLlj5blvpfjgZnjgotcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Q2VudGVyWSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMueSArIDAuNSAqIHRoaXMuaGVpZ2h0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Y+z5YG044GuWOW6p+aomeOCkuWPluW+l+OBmeOCi1xyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRSaWdodCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMueCArIHRoaXMud2lkdGg7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDkuIvnq6/jga5Z5bqn5qiZ44KS5Y+W5b6X44GZ44KLXHJcbiAgICovXHJcbiAgcHVibGljIGdldEJvdHRvbSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMueSArIHRoaXMuaGVpZ2h0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog55+p5b2i44Gr5YCk44KS44K744OD44OI44GZ44KLXHJcbiAgICogQHBhcmFtIHIg55+p5b2i44Gu44Kk44Oz44K544K/44Oz44K5XHJcbiAgICovXHJcbiAgcHVibGljIHNldFJlY3QocjogY3NtUmVjdCk6IHZvaWQge1xyXG4gICAgdGhpcy54ID0gci54O1xyXG4gICAgdGhpcy55ID0gci55O1xyXG4gICAgdGhpcy53aWR0aCA9IHIud2lkdGg7XHJcbiAgICB0aGlzLmhlaWdodCA9IHIuaGVpZ2h0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog55+p5b2i5Lit5aSu44KS6Lu444Gr44GX44Gm57im5qiq44KS5ouh57iu44GZ44KLXHJcbiAgICogQHBhcmFtIHcg5bmF5pa55ZCR44Gr5ouh57iu44GZ44KL6YePXHJcbiAgICogQHBhcmFtIGgg6auY44GV5pa55ZCR44Gr5ouh57iu44GZ44KL6YePXHJcbiAgICovXHJcbiAgcHVibGljIGV4cGFuZCh3OiBudW1iZXIsIGg6IG51bWJlcikge1xyXG4gICAgdGhpcy54IC09IHc7XHJcbiAgICB0aGlzLnkgLT0gaDtcclxuICAgIHRoaXMud2lkdGggKz0gdyAqIDIuMDtcclxuICAgIHRoaXMuaGVpZ2h0ICs9IGggKiAyLjA7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgeDogbnVtYmVyOyAvLyDlt6bnq69Y5bqn5qiZXHJcbiAgcHVibGljIHk6IG51bWJlcjsgLy8g5LiK56uvWeW6p+aomVxyXG4gIHB1YmxpYyB3aWR0aDogbnVtYmVyOyAvLyDluYVcclxuICBwdWJsaWMgaGVpZ2h0OiBudW1iZXI7IC8vIOmrmOOBlVxyXG59XHJcblxyXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cclxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2NzbXJlY3RmJztcclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xyXG4gIGV4cG9ydCBjb25zdCBjc21SZWN0ID0gJC5jc21SZWN0O1xyXG4gIGV4cG9ydCB0eXBlIGNzbVJlY3QgPSAkLmNzbVJlY3Q7XHJcbn1cclxuIiwiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG4vKipcclxuICog5paH5a2X5YiX44Kv44Op44K544CCXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgY3NtU3RyaW5nIHtcclxuICAvKipcclxuICAgKiDmloflrZfliJfjgpLlvozmlrnjgavov73liqDjgZnjgotcclxuICAgKlxyXG4gICAqIEBwYXJhbSBjIOi/veWKoOOBmeOCi+aWh+Wtl+WIl1xyXG4gICAqIEByZXR1cm4g5pu05paw44GV44KM44Gf5paH5a2X5YiXXHJcbiAgICovXHJcbiAgcHVibGljIGFwcGVuZChjOiBzdHJpbmcsIGxlbmd0aD86IG51bWJlcik6IGNzbVN0cmluZyB7XHJcbiAgICB0aGlzLnMgKz0gbGVuZ3RoICE9PSB1bmRlZmluZWQgPyBjLnN1YnN0cigwLCBsZW5ndGgpIDogYztcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaWh+Wtl+OCteOCpOOCuuOCkuaLoeW8teOBl+OBpuaWh+Wtl+OCkuWfi+OCgeOCi1xyXG4gICAqIEBwYXJhbSBsZW5ndGggICAg5ouh5by144GZ44KL5paH5a2X5pWwXHJcbiAgICogQHBhcmFtIHYgICAgICAgICDln4vjgoHjgovmloflrZdcclxuICAgKiBAcmV0dXJuIOabtOaWsOOBleOCjOOBn+aWh+Wtl+WIl1xyXG4gICAqL1xyXG4gIHB1YmxpYyBleHBhbnNpb24obGVuZ3RoOiBudW1iZXIsIHY6IHN0cmluZyk6IGNzbVN0cmluZyB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHRoaXMuYXBwZW5kKHYpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5paH5a2X5YiX44Gu6ZW344GV44KS44OQ44Kk44OI5pWw44Gn5Y+W5b6X44GZ44KLXHJcbiAgICovXHJcbiAgcHVibGljIGdldEJ5dGVzKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMucykucmVwbGFjZSgvJS4uL2csICd4JykubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5paH5a2X5YiX44Gu6ZW344GV44KS6L+U44GZXHJcbiAgICovXHJcbiAgcHVibGljIGdldExlbmd0aCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMucy5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmloflrZfliJfmr5TovIMgPFxyXG4gICAqIEBwYXJhbSBzIOavlOi8g+OBmeOCi+aWh+Wtl+WIl1xyXG4gICAqIEByZXR1cm4gdHJ1ZTogICAg5q+U6LyD44GZ44KL5paH5a2X5YiX44KI44KK5bCP44GV44GEXHJcbiAgICogQHJldHVybiBmYWxzZTogICDmr5TovIPjgZnjgovmloflrZfliJfjgojjgorlpKfjgY3jgYRcclxuICAgKi9cclxuICBwdWJsaWMgaXNMZXNzKHM6IGNzbVN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMucyA8IHMucztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaWh+Wtl+WIl+avlOi8gyA+XHJcbiAgICogQHBhcmFtIHMg5q+U6LyD44GZ44KL5paH5a2X5YiXXHJcbiAgICogQHJldHVybiB0cnVlOiAgICDmr5TovIPjgZnjgovmloflrZfliJfjgojjgorlpKfjgY3jgYRcclxuICAgKiBAcmV0dXJuIGZhbHNlOiAgIOavlOi8g+OBmeOCi+aWh+Wtl+WIl+OCiOOCiuWwj+OBleOBhFxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc0dyZWF0KHM6IGNzbVN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMucyA+IHMucztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaWh+Wtl+WIl+avlOi8gyA9PVxyXG4gICAqIEBwYXJhbSBzIOavlOi8g+OBmeOCi+aWh+Wtl+WIl1xyXG4gICAqIEByZXR1cm4gdHJ1ZTogICAg5q+U6LyD44GZ44KL5paH5a2X5YiX44Go562J44GX44GEXHJcbiAgICogQHJldHVybiBmYWxzZTogICDmr5TovIPjgZnjgovmloflrZfliJfjgajnlbDjgarjgotcclxuICAgKi9cclxuICBwdWJsaWMgaXNFcXVhbChzOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLnMgPT0gcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaWh+Wtl+WIl+OBjOepuuOBi+OBqeOBhuOBi1xyXG4gICAqIEByZXR1cm4gdHJ1ZTog56m644Gu5paH5a2X5YiXXHJcbiAgICogQHJldHVybiBmYWxzZTog5YCk44GM6Kit5a6a44GV44KM44Gm44GE44KLXHJcbiAgICovXHJcbiAgcHVibGljIGlzRW1wdHkoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5zLmxlbmd0aCA9PSAwO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5byV5pWw5LuY44GN44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKHM6IHN0cmluZykge1xyXG4gICAgdGhpcy5zID0gcztcclxuICB9XHJcblxyXG4gIHM6IHN0cmluZztcclxufVxyXG5cclxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXHJcbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jc21zdHJpbmcnO1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgZXhwb3J0IGNvbnN0IGNzbVN0cmluZyA9ICQuY3NtU3RyaW5nO1xyXG4gIGV4cG9ydCB0eXBlIGNzbVN0cmluZyA9ICQuY3NtU3RyaW5nO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIOODmeOCr+OCv+ODvOWei++8iOWPr+WkiemFjeWIl+Wei++8iVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIGNzbVZlY3RvcjxUPiB7XHJcbiAgLyoqXHJcbiAgICog5byV5pWw5LuY44GN44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICogQHBhcmFtIGluaWl0YWxDYXBhY2l0eSDliJ3mnJ/ljJblvozjga7jgq3jg6Pjg5Hjgrfjg4bjgqPjgILjg4fjg7zjgr/jgrXjgqTjgrrjga9fY2FwYWNpdHkgKiBzaXplb2YoVClcclxuICAgKiBAcGFyYW0gemVyb0NsZWFyIHRydWXjgarjgonliJ3mnJ/ljJbmmYLjgavnorrkv53jgZfjgZ/poJjln5/jgpIw44Gn5Z+L44KB44KLXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoaW5pdGlhbENhcGFjaXR5ID0gMCkge1xyXG4gICAgaWYgKGluaXRpYWxDYXBhY2l0eSA8IDEpIHtcclxuICAgICAgdGhpcy5fcHRyID0gW107XHJcbiAgICAgIHRoaXMuX2NhcGFjaXR5ID0gMDtcclxuICAgICAgdGhpcy5fc2l6ZSA9IDA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9wdHIgPSBuZXcgQXJyYXkoaW5pdGlhbENhcGFjaXR5KTtcclxuICAgICAgdGhpcy5fY2FwYWNpdHkgPSBpbml0aWFsQ2FwYWNpdHk7XHJcbiAgICAgIHRoaXMuX3NpemUgPSAwO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Kk44Oz44OH44OD44Kv44K544Gn5oyH5a6a44GX44Gf6KaB57Sg44KS6L+U44GZXHJcbiAgICovXHJcbiAgcHVibGljIGF0KGluZGV4OiBudW1iZXIpOiBUIHtcclxuICAgIHJldHVybiB0aGlzLl9wdHJbaW5kZXhdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6KaB57Sg44KS44K744OD44OIXHJcbiAgICogQHBhcmFtIGluZGV4IOimgee0oOOCkuOCu+ODg+ODiOOBmeOCi+OCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAqIEBwYXJhbSB2YWx1ZSDjgrvjg4Pjg4jjgZnjgovopoHntKBcclxuICAgKi9cclxuICBwdWJsaWMgc2V0KGluZGV4OiBudW1iZXIsIHZhbHVlOiBUKTogdm9pZCB7XHJcbiAgICB0aGlzLl9wdHJbaW5kZXhdID0gdmFsdWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjgrPjg7Pjg4bjg4rjgpLlj5blvpfjgZnjgotcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0KG9mZnNldCA9IDApOiBUW10ge1xyXG4gICAgY29uc3QgcmV0OiBUW10gPSBuZXcgQXJyYXk8VD4oKTtcclxuICAgIGZvciAobGV0IGkgPSBvZmZzZXQ7IGkgPCB0aGlzLl9zaXplOyBpKyspIHtcclxuICAgICAgcmV0LnB1c2godGhpcy5fcHRyW2ldKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBwdXNoQmFja+WHpueQhuOAgeOCs+ODs+ODhuODiuOBq+aWsOOBn+OBquimgee0oOOCkui/veWKoOOBmeOCi1xyXG4gICAqIEBwYXJhbSB2YWx1ZSBQdXNoQmFja+WHpueQhuOBp+i/veWKoOOBmeOCi+WApFxyXG4gICAqL1xyXG4gIHB1YmxpYyBwdXNoQmFjayh2YWx1ZTogVCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuX3NpemUgPj0gdGhpcy5fY2FwYWNpdHkpIHtcclxuICAgICAgdGhpcy5wcmVwYXJlQ2FwYWNpdHkoXHJcbiAgICAgICAgdGhpcy5fY2FwYWNpdHkgPT0gMCA/IGNzbVZlY3Rvci5zX2RlZmF1bHRTaXplIDogdGhpcy5fY2FwYWNpdHkgKiAyXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fcHRyW3RoaXMuX3NpemUrK10gPSB2YWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCs+ODs+ODhuODiuOBruWFqOimgee0oOOCkuino+aUvuOBmeOCi1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjbGVhcigpOiB2b2lkIHtcclxuICAgIHRoaXMuX3B0ci5sZW5ndGggPSAwO1xyXG4gICAgdGhpcy5fc2l6ZSA9IDA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjgrPjg7Pjg4bjg4rjga7opoHntKDmlbDjgpLov5TjgZlcclxuICAgKiBAcmV0dXJuIOOCs+ODs+ODhuODiuOBruimgee0oOaVsFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRTaXplKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fc2l6ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCs+ODs+ODhuODiuOBruWFqOimgee0oOOBq+WvvuOBl+OBpuS7o+WFpeWHpueQhuOCkuihjOOBhlxyXG4gICAqIEBwYXJhbSBuZXdTaXplIOS7o+WFpeWHpueQhuW+jOOBruOCteOCpOOCulxyXG4gICAqIEBwYXJhbSB2YWx1ZSDopoHntKDjgavku6PlhaXjgZnjgovlgKRcclxuICAgKi9cclxuICBwdWJsaWMgYXNzaWduKG5ld1NpemU6IG51bWJlciwgdmFsdWU6IFQpOiB2b2lkIHtcclxuICAgIGNvbnN0IGN1clNpemUgPSB0aGlzLl9zaXplO1xyXG5cclxuICAgIGlmIChjdXJTaXplIDwgbmV3U2l6ZSkge1xyXG4gICAgICB0aGlzLnByZXBhcmVDYXBhY2l0eShuZXdTaXplKTsgLy8gY2FwYWNpdHnmm7TmlrBcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld1NpemU7IGkrKykge1xyXG4gICAgICB0aGlzLl9wdHJbaV0gPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9zaXplID0gbmV3U2l6ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCteOCpOOCuuWkieabtFxyXG4gICAqL1xyXG4gIHB1YmxpYyByZXNpemUobmV3U2l6ZTogbnVtYmVyLCB2YWx1ZTogVCA9IG51bGwpOiB2b2lkIHtcclxuICAgIHRoaXMudXBkYXRlU2l6ZShuZXdTaXplLCB2YWx1ZSwgdHJ1ZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjgrXjgqTjgrrlpInmm7RcclxuICAgKi9cclxuICBwdWJsaWMgdXBkYXRlU2l6ZShcclxuICAgIG5ld1NpemU6IG51bWJlcixcclxuICAgIHZhbHVlOiBhbnkgPSBudWxsLFxyXG4gICAgY2FsbFBsYWNlbWVudE5ldyA9IHRydWVcclxuICApOiB2b2lkIHtcclxuICAgIGNvbnN0IGN1clNpemU6IG51bWJlciA9IHRoaXMuX3NpemU7XHJcblxyXG4gICAgaWYgKGN1clNpemUgPCBuZXdTaXplKSB7XHJcbiAgICAgIHRoaXMucHJlcGFyZUNhcGFjaXR5KG5ld1NpemUpOyAvLyBjYXBhY2l0eeabtOaWsFxyXG5cclxuICAgICAgaWYgKGNhbGxQbGFjZW1lbnROZXcpIHtcclxuICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSB0aGlzLl9zaXplOyBpIDwgbmV3U2l6ZTsgaSsrKSB7XHJcbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgLy8gbmV3XHJcbiAgICAgICAgICAgIHRoaXMuX3B0cltpXSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkobmV3IHZhbHVlKCkpKTtcclxuICAgICAgICAgIH0gLy8g44OX44Oq44Of44OG44Kj44OW5Z6L44Gq44Gu44Gn5YCk5rih44GXXHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fcHRyW2ldID0gdmFsdWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IHRoaXMuX3NpemU7IGkgPCBuZXdTaXplOyBpKyspIHtcclxuICAgICAgICAgIHRoaXMuX3B0cltpXSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gbmV3U2l6ZSA8PSB0aGlzLl9zaXplXHJcbiAgICAgIC8vLS0tXHJcbiAgICAgIGNvbnN0IHN1YiA9IHRoaXMuX3NpemUgLSBuZXdTaXplO1xyXG4gICAgICB0aGlzLl9wdHIuc3BsaWNlKHRoaXMuX3NpemUgLSBzdWIsIHN1Yik7IC8vIOS4jeimgeOBquOBruOBp+egtOajhOOBmeOCi1xyXG4gICAgfVxyXG4gICAgdGhpcy5fc2l6ZSA9IG5ld1NpemU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjgrPjg7Pjg4bjg4rjgavjgrPjg7Pjg4bjg4ropoHntKDjgpLmjL/lhaXjgZnjgotcclxuICAgKiBAcGFyYW0gcG9zaXRpb24g5oy/5YWl44GZ44KL5L2N572uXHJcbiAgICogQHBhcmFtIGJlZ2luIOaMv+WFpeOBmeOCi+OCs+ODs+ODhuODiuOBrumWi+Wni+S9jee9rlxyXG4gICAqIEBwYXJhbSBlbmQg5oy/5YWl44GZ44KL44Kz44Oz44OG44OK44Gu57WC56uv5L2N572uXHJcbiAgICovXHJcbiAgcHVibGljIGluc2VydChcclxuICAgIHBvc2l0aW9uOiBpdGVyYXRvcjxUPixcclxuICAgIGJlZ2luOiBpdGVyYXRvcjxUPixcclxuICAgIGVuZDogaXRlcmF0b3I8VD5cclxuICApOiB2b2lkIHtcclxuICAgIGxldCBkc3RTaTogbnVtYmVyID0gcG9zaXRpb24uX2luZGV4O1xyXG4gICAgY29uc3Qgc3JjU2k6IG51bWJlciA9IGJlZ2luLl9pbmRleDtcclxuICAgIGNvbnN0IHNyY0VpOiBudW1iZXIgPSBlbmQuX2luZGV4O1xyXG5cclxuICAgIGNvbnN0IGFkZENvdW50OiBudW1iZXIgPSBzcmNFaSAtIHNyY1NpO1xyXG5cclxuICAgIHRoaXMucHJlcGFyZUNhcGFjaXR5KHRoaXMuX3NpemUgKyBhZGRDb3VudCk7XHJcblxyXG4gICAgLy8g5oy/5YWl55So44Gu5pei5a2Y44OH44O844K/44KS44K344OV44OI44GX44Gm6ZqZ6ZaT44KS5L2c44KLXHJcbiAgICBjb25zdCBhZGRTaXplID0gdGhpcy5fc2l6ZSAtIGRzdFNpO1xyXG4gICAgaWYgKGFkZFNpemUgPiAwKSB7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWRkU2l6ZTsgaSsrKSB7XHJcbiAgICAgICAgdGhpcy5fcHRyLnNwbGljZShkc3RTaSArIGksIDAsIG51bGwpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgaTogbnVtYmVyID0gc3JjU2k7IGkgPCBzcmNFaTsgaSsrLCBkc3RTaSsrKSB7XHJcbiAgICAgIHRoaXMuX3B0cltkc3RTaV0gPSBiZWdpbi5fdmVjdG9yLl9wdHJbaV07XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fc2l6ZSA9IHRoaXMuX3NpemUgKyBhZGRDb3VudDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCs+ODs+ODhuODiuOBi+OCieOCpOODs+ODh+ODg+OCr+OCueOBp+aMh+WumuOBl+OBn+imgee0oOOCkuWJiumZpOOBmeOCi1xyXG4gICAqIEBwYXJhbSBpbmRleCDjgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcclxuICAgKiBAcmV0dXJuIHRydWUg5YmK6Zmk5a6f6KGMXHJcbiAgICogQHJldHVybiBmYWxzZSDliYrpmaTnr4Tlm7LlpJZcclxuICAgKi9cclxuICBwdWJsaWMgcmVtb3ZlKGluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgIGlmIChpbmRleCA8IDAgfHwgdGhpcy5fc2l6ZSA8PSBpbmRleCkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7IC8vIOWJiumZpOevhOWbsuWkllxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX3B0ci5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgLS10aGlzLl9zaXplO1xyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Kz44Oz44OG44OK44GL44KJ6KaB57Sg44KS5YmK6Zmk44GX44Gm5LuW44Gu6KaB57Sg44KS44K344OV44OI44GZ44KLXHJcbiAgICogQHBhcmFtIGl0ZSDliYrpmaTjgZnjgovopoHntKBcclxuICAgKi9cclxuICBwdWJsaWMgZXJhc2UoaXRlOiBpdGVyYXRvcjxUPik6IGl0ZXJhdG9yPFQ+IHtcclxuICAgIGNvbnN0IGluZGV4OiBudW1iZXIgPSBpdGUuX2luZGV4O1xyXG4gICAgaWYgKGluZGV4IDwgMCB8fCB0aGlzLl9zaXplIDw9IGluZGV4KSB7XHJcbiAgICAgIHJldHVybiBpdGU7IC8vIOWJiumZpOevhOWbsuWkllxyXG4gICAgfVxyXG5cclxuICAgIC8vIOWJiumZpFxyXG4gICAgdGhpcy5fcHRyLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAtLXRoaXMuX3NpemU7XHJcblxyXG4gICAgY29uc3QgaXRlMjogaXRlcmF0b3I8VD4gPSBuZXcgaXRlcmF0b3I8VD4odGhpcywgaW5kZXgpOyAvLyDntYLkuoZcclxuICAgIHJldHVybiBpdGUyO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Kz44Oz44OG44OK44Gu44Kt44Oj44OR44K344OG44Kj44KS56K65L+d44GZ44KLXHJcbiAgICogQHBhcmFtIG5ld1NpemUg5paw44Gf44Gq44Kt44Oj44OR44K344OG44Kj44CC5byV5pWw44Gu5YCk44GM54++5Zyo44Gu44K144Kk44K65pyq5rqA44Gu5aC05ZCI44Gv5L2V44KC44GX44Gq44GELlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwcmVwYXJlQ2FwYWNpdHkobmV3U2l6ZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBpZiAobmV3U2l6ZSA+IHRoaXMuX2NhcGFjaXR5KSB7XHJcbiAgICAgIGlmICh0aGlzLl9jYXBhY2l0eSA9PSAwKSB7XHJcbiAgICAgICAgdGhpcy5fcHRyID0gbmV3IEFycmF5KG5ld1NpemUpO1xyXG4gICAgICAgIHRoaXMuX2NhcGFjaXR5ID0gbmV3U2l6ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLl9wdHIubGVuZ3RoID0gbmV3U2l6ZTtcclxuICAgICAgICB0aGlzLl9jYXBhY2l0eSA9IG5ld1NpemU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCs+ODs+ODhuODiuOBruWFiOmgreimgee0oOOCkui/lOOBmVxyXG4gICAqL1xyXG4gIHB1YmxpYyBiZWdpbigpOiBpdGVyYXRvcjxUPiB7XHJcbiAgICBjb25zdCBpdGU6IGl0ZXJhdG9yPFQ+ID1cclxuICAgICAgdGhpcy5fc2l6ZSA9PSAwID8gdGhpcy5lbmQoKSA6IG5ldyBpdGVyYXRvcjxUPih0aGlzLCAwKTtcclxuICAgIHJldHVybiBpdGU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjgrPjg7Pjg4bjg4rjga7ntYLnq6/opoHntKDjgpLov5TjgZlcclxuICAgKi9cclxuICBwdWJsaWMgZW5kKCk6IGl0ZXJhdG9yPFQ+IHtcclxuICAgIGNvbnN0IGl0ZTogaXRlcmF0b3I8VD4gPSBuZXcgaXRlcmF0b3I8VD4odGhpcywgdGhpcy5fc2l6ZSk7XHJcbiAgICByZXR1cm4gaXRlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldE9mZnNldChvZmZzZXQ6IG51bWJlcik6IGNzbVZlY3RvcjxUPiB7XHJcbiAgICBjb25zdCBuZXdWZWN0b3IgPSBuZXcgY3NtVmVjdG9yPFQ+KCk7XHJcbiAgICBuZXdWZWN0b3IuX3B0ciA9IHRoaXMuZ2V0KG9mZnNldCk7XHJcbiAgICBuZXdWZWN0b3IuX3NpemUgPSB0aGlzLmdldChvZmZzZXQpLmxlbmd0aDtcclxuICAgIG5ld1ZlY3Rvci5fY2FwYWNpdHkgPSB0aGlzLmdldChvZmZzZXQpLmxlbmd0aDtcclxuXHJcbiAgICByZXR1cm4gbmV3VmVjdG9yO1xyXG4gIH1cclxuXHJcbiAgX3B0cjogVFtdOyAvLyDjgrPjg7Pjg4bjg4rjga7lhYjpoK3jgqLjg4njg6zjgrlcclxuICBfc2l6ZTogbnVtYmVyOyAvLyDjgrPjg7Pjg4bjg4rjga7opoHntKDmlbBcclxuICBfY2FwYWNpdHk6IG51bWJlcjsgLy8g44Kz44Oz44OG44OK44Gu44Kt44Oj44OR44K344OG44KjXHJcblxyXG4gIHN0YXRpYyByZWFkb25seSBzX2RlZmF1bHRTaXplID0gMTA7IC8vIOOCs+ODs+ODhuODiuWIneacn+WMluOBruODh+ODleOCqeODq+ODiOOCteOCpOOCulxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgaXRlcmF0b3I8VD4ge1xyXG4gIC8qKlxyXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih2PzogY3NtVmVjdG9yPFQ+LCBpbmRleD86IG51bWJlcikge1xyXG4gICAgdGhpcy5fdmVjdG9yID0gdiAhPSB1bmRlZmluZWQgPyB2IDogbnVsbDtcclxuICAgIHRoaXMuX2luZGV4ID0gaW5kZXggIT0gdW5kZWZpbmVkID8gaW5kZXggOiAwO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Luj5YWlXHJcbiAgICovXHJcbiAgcHVibGljIHNldChpdGU6IGl0ZXJhdG9yPFQ+KTogaXRlcmF0b3I8VD4ge1xyXG4gICAgdGhpcy5faW5kZXggPSBpdGUuX2luZGV4O1xyXG4gICAgdGhpcy5fdmVjdG9yID0gaXRlLl92ZWN0b3I7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWJjee9ruOBjSsr5ryU566XXHJcbiAgICovXHJcbiAgcHVibGljIHByZUluY3JlbWVudCgpOiBpdGVyYXRvcjxUPiB7XHJcbiAgICArK3RoaXMuX2luZGV4O1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliY3nva7jgY0tLea8lOeul1xyXG4gICAqL1xyXG4gIHB1YmxpYyBwcmVEZWNyZW1lbnQoKTogaXRlcmF0b3I8VD4ge1xyXG4gICAgLS10aGlzLl9pbmRleDtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5b6M572u44GNKyvmvJTnrpflrZBcclxuICAgKi9cclxuICBwdWJsaWMgaW5jcmVtZW50KCk6IGl0ZXJhdG9yPFQ+IHtcclxuICAgIGNvbnN0IGl0ZW9sZCA9IG5ldyBpdGVyYXRvcjxUPih0aGlzLl92ZWN0b3IsIHRoaXMuX2luZGV4KyspOyAvLyDlj6TjgYTlgKTjgpLkv53lrZhcclxuICAgIHJldHVybiBpdGVvbGQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlvoznva7jgY0tLea8lOeul+WtkFxyXG4gICAqL1xyXG4gIHB1YmxpYyBkZWNyZW1lbnQoKTogaXRlcmF0b3I8VD4ge1xyXG4gICAgY29uc3QgaXRlb2xkID0gbmV3IGl0ZXJhdG9yPFQ+KHRoaXMuX3ZlY3RvciwgdGhpcy5faW5kZXgtLSk7IC8vIOWPpOOBhOWApOOCkuS/neWtmFxyXG4gICAgcmV0dXJuIGl0ZW9sZDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIHB0clxyXG4gICAqL1xyXG4gIHB1YmxpYyBwdHIoKTogVCB7XHJcbiAgICByZXR1cm4gdGhpcy5fdmVjdG9yLl9wdHJbdGhpcy5faW5kZXhdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogPea8lOeul+WtkOOBruOCquODvOODkOODvOODreODvOODiVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdWJzdGl0dXRpb24oaXRlOiBpdGVyYXRvcjxUPik6IGl0ZXJhdG9yPFQ+IHtcclxuICAgIHRoaXMuX2luZGV4ID0gaXRlLl9pbmRleDtcclxuICAgIHRoaXMuX3ZlY3RvciA9IGl0ZS5fdmVjdG9yO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiAhPea8lOeul+WtkOOBruOCquODvOODkOODvOODreODvOODiVxyXG4gICAqL1xyXG4gIHB1YmxpYyBub3RFcXVhbChpdGU6IGl0ZXJhdG9yPFQ+KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5faW5kZXggIT0gaXRlLl9pbmRleCB8fCB0aGlzLl92ZWN0b3IgIT0gaXRlLl92ZWN0b3I7XHJcbiAgfVxyXG5cclxuICBfaW5kZXg6IG51bWJlcjsgLy8g44Kz44Oz44OG44OK44Gu44Kk44Oz44OH44OD44Kv44K55YCkXHJcbiAgX3ZlY3RvcjogY3NtVmVjdG9yPFQ+OyAvLyDjgrPjg7Pjg4bjg4pcclxufVxyXG5cclxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXHJcbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jc212ZWN0b3InO1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgZXhwb3J0IGNvbnN0IGNzbVZlY3RvciA9ICQuY3NtVmVjdG9yO1xyXG4gIGV4cG9ydCB0eXBlIGNzbVZlY3RvcjxUPiA9ICQuY3NtVmVjdG9yPFQ+O1xyXG4gIGV4cG9ydCBjb25zdCBpdGVyYXRvciA9ICQuaXRlcmF0b3I7XHJcbiAgZXhwb3J0IHR5cGUgaXRlcmF0b3I8VD4gPSAkLml0ZXJhdG9yPFQ+O1xyXG59XHJcbiIsIi8qKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHtcclxuICBDU01fTE9HX0xFVkVMLFxyXG4gIENTTV9MT0dfTEVWRUxfREVCVUcsXHJcbiAgQ1NNX0xPR19MRVZFTF9FUlJPUixcclxuICBDU01fTE9HX0xFVkVMX0lORk8sXHJcbiAgQ1NNX0xPR19MRVZFTF9WRVJCT1NFLFxyXG4gIENTTV9MT0dfTEVWRUxfV0FSTklOR1xyXG59IGZyb20gJy4uL2N1YmlzbWZyYW1ld29ya2NvbmZpZyc7XHJcbmltcG9ydCB7IEN1YmlzbUZyYW1ld29yaywgTG9nTGV2ZWwgfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xyXG5cclxuZXhwb3J0IGNvbnN0IEN1YmlzbUxvZ1ByaW50ID0gKGxldmVsOiBMb2dMZXZlbCwgZm10OiBzdHJpbmcsIGFyZ3M6IGFueVtdKSA9PiB7XHJcbiAgQ3ViaXNtRGVidWcucHJpbnQobGV2ZWwsICdbQ1NNXScgKyBmbXQsIGFyZ3MpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IEN1YmlzbUxvZ1ByaW50SW4gPSAobGV2ZWw6IExvZ0xldmVsLCBmbXQ6IHN0cmluZywgYXJnczogYW55W10pID0+IHtcclxuICBDdWJpc21Mb2dQcmludChsZXZlbCwgZm10ICsgJ1xcbicsIGFyZ3MpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IENTTV9BU1NFUlQgPSAoZXhwcjogYW55KSA9PiB7XHJcbiAgY29uc29sZS5hc3NlcnQoZXhwcik7XHJcbn07XHJcblxyXG5leHBvcnQgbGV0IEN1YmlzbUxvZ1ZlcmJvc2U6IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHZvaWQ7XHJcbmV4cG9ydCBsZXQgQ3ViaXNtTG9nRGVidWc6IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHZvaWQ7XHJcbmV4cG9ydCBsZXQgQ3ViaXNtTG9nSW5mbzogKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4gdm9pZDtcclxuZXhwb3J0IGxldCBDdWJpc21Mb2dXYXJuaW5nOiAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkO1xyXG5leHBvcnQgbGV0IEN1YmlzbUxvZ0Vycm9yOiAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkO1xyXG5cclxuaWYgKENTTV9MT0dfTEVWRUwgPD0gQ1NNX0xPR19MRVZFTF9WRVJCT1NFKSB7XHJcbiAgQ3ViaXNtTG9nVmVyYm9zZSA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcclxuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfVmVyYm9zZSwgJ1tWXScgKyBmbXQsIGFyZ3MpO1xyXG4gIH07XHJcblxyXG4gIEN1YmlzbUxvZ0RlYnVnID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xyXG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9EZWJ1ZywgJ1tEXScgKyBmbXQsIGFyZ3MpO1xyXG4gIH07XHJcblxyXG4gIEN1YmlzbUxvZ0luZm8gPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XHJcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX0luZm8sICdbSV0nICsgZm10LCBhcmdzKTtcclxuICB9O1xyXG5cclxuICBDdWJpc21Mb2dXYXJuaW5nID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xyXG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9XYXJuaW5nLCAnW1ddJyArIGZtdCwgYXJncyk7XHJcbiAgfTtcclxuXHJcbiAgQ3ViaXNtTG9nRXJyb3IgPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XHJcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX0Vycm9yLCAnW0VdJyArIGZtdCwgYXJncyk7XHJcbiAgfTtcclxufSBlbHNlIGlmIChDU01fTE9HX0xFVkVMID09IENTTV9MT0dfTEVWRUxfREVCVUcpIHtcclxuICBDdWJpc21Mb2dEZWJ1ZyA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcclxuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfRGVidWcsICdbRF0nICsgZm10LCBhcmdzKTtcclxuICB9O1xyXG5cclxuICBDdWJpc21Mb2dJbmZvID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xyXG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9JbmZvLCAnW0ldJyArIGZtdCwgYXJncyk7XHJcbiAgfTtcclxuXHJcbiAgQ3ViaXNtTG9nV2FybmluZyA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcclxuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfV2FybmluZywgJ1tXXScgKyBmbXQsIGFyZ3MpO1xyXG4gIH07XHJcblxyXG4gIEN1YmlzbUxvZ0Vycm9yID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xyXG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9FcnJvciwgJ1tFXScgKyBmbXQsIGFyZ3MpO1xyXG4gIH07XHJcbn0gZWxzZSBpZiAoQ1NNX0xPR19MRVZFTCA9PSBDU01fTE9HX0xFVkVMX0lORk8pIHtcclxuICBDdWJpc21Mb2dJbmZvID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xyXG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9JbmZvLCAnW0ldJyArIGZtdCwgYXJncyk7XHJcbiAgfTtcclxuXHJcbiAgQ3ViaXNtTG9nV2FybmluZyA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcclxuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfV2FybmluZywgJ1tXXScgKyBmbXQsIGFyZ3MpO1xyXG4gIH07XHJcblxyXG4gIEN1YmlzbUxvZ0Vycm9yID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xyXG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9FcnJvciwgJ1tFXScgKyBmbXQsIGFyZ3MpO1xyXG4gIH07XHJcbn0gZWxzZSBpZiAoQ1NNX0xPR19MRVZFTCA9PSBDU01fTE9HX0xFVkVMX1dBUk5JTkcpIHtcclxuICBDdWJpc21Mb2dXYXJuaW5nID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xyXG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9XYXJuaW5nLCAnW1ddJyArIGZtdCwgYXJncyk7XHJcbiAgfTtcclxuXHJcbiAgQ3ViaXNtTG9nRXJyb3IgPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XHJcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX0Vycm9yLCAnW0VdJyArIGZtdCwgYXJncyk7XHJcbiAgfTtcclxufSBlbHNlIGlmIChDU01fTE9HX0xFVkVMID09IENTTV9MT0dfTEVWRUxfRVJST1IpIHtcclxuICBDdWJpc21Mb2dFcnJvciA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcclxuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfRXJyb3IsICdbRV0nICsgZm10LCBhcmdzKTtcclxuICB9O1xyXG59XHJcblxyXG4vKipcclxuICog44OH44OQ44OD44Kw55So44Gu44Om44O844OG44Kj44Oq44OG44Kj44Kv44Op44K544CCXHJcbiAqIOODreOCsOOBruWHuuWKm+OAgeODkOOCpOODiOOBruODgOODs+ODl+OBquOBqVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEN1YmlzbURlYnVnIHtcclxuICAvKipcclxuICAgKiDjg63jgrDjgpLlh7rlipvjgZnjgovjgILnrKzkuIDlvJXmlbDjgavjg63jgrDjg6zjg5njg6vjgpLoqK3lrprjgZnjgovjgIJcclxuICAgKiBDdWJpc21GcmFtZXdvcmsuaW5pdGlhbGl6ZSgp5pmC44Gr44Kq44OX44K344On44Oz44Gn6Kit5a6a44GV44KM44Gf44Ot44Kw5Ye65Yqb44Os44OZ44Or44KS5LiL5Zue44KL5aC05ZCI44Gv44Ot44Kw44Gr5Ye644GV44Gq44GE44CCXHJcbiAgICpcclxuICAgKiBAcGFyYW0gbG9nTGV2ZWwg44Ot44Kw44Os44OZ44Or44Gu6Kit5a6aXHJcbiAgICogQHBhcmFtIGZvcm1hdCDmm7jlvI/ku5jjgY3mloflrZfliJdcclxuICAgKiBAcGFyYW0gYXJncyDlj6/lpInplbflvJXmlbBcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIHByaW50KGxvZ0xldmVsOiBMb2dMZXZlbCwgZm9ybWF0OiBzdHJpbmcsIGFyZ3M/OiBhbnlbXSk6IHZvaWQge1xyXG4gICAgLy8g44Kq44OX44K344On44Oz44Gn6Kit5a6a44GV44KM44Gf44Ot44Kw5Ye65Yqb44Os44OZ44Or44KS5LiL5Zue44KL5aC05ZCI44Gv44Ot44Kw44Gr5Ye644GV44Gq44GEXHJcbiAgICBpZiAobG9nTGV2ZWwgPCBDdWJpc21GcmFtZXdvcmsuZ2V0TG9nZ2luZ0xldmVsKCkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGxvZ1ByaW50OiBMaXZlMkRDdWJpc21Db3JlLmNzbUxvZ0Z1bmN0aW9uID1cclxuICAgICAgQ3ViaXNtRnJhbWV3b3JrLmNvcmVMb2dGdW5jdGlvbjtcclxuXHJcbiAgICBpZiAoIWxvZ1ByaW50KSByZXR1cm47XHJcblxyXG4gICAgY29uc3QgYnVmZmVyOiBzdHJpbmcgPSBmb3JtYXQucmVwbGFjZSgvXFx7KFxcZCspXFx9L2csIChtLCBrKSA9PiB7XHJcbiAgICAgIHJldHVybiBhcmdzW2tdO1xyXG4gICAgfSk7XHJcbiAgICBsb2dQcmludChidWZmZXIpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OH44O844K/44GL44KJ5oyH5a6a44GX44Gf6ZW344GV44Gg44GR44OA44Oz44OX5Ye65Yqb44GZ44KL44CCXHJcbiAgICogQ3ViaXNtRnJhbWV3b3JrLmluaXRpYWxpemUoKeaZguOBq+OCquODl+OCt+ODp+ODs+OBp+ioreWumuOBleOCjOOBn+ODreOCsOWHuuWKm+ODrOODmeODq+OCkuS4i+WbnuOCi+WgtOWQiOOBr+ODreOCsOOBq+WHuuOBleOBquOBhOOAglxyXG4gICAqXHJcbiAgICogQHBhcmFtIGxvZ0xldmVsIOODreOCsOODrOODmeODq+OBruioreWumlxyXG4gICAqIEBwYXJhbSBkYXRhIOODgOODs+ODl+OBmeOCi+ODh+ODvOOCv1xyXG4gICAqIEBwYXJhbSBsZW5ndGgg44OA44Oz44OX44GZ44KL6ZW344GVXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBkdW1wQnl0ZXMoXHJcbiAgICBsb2dMZXZlbDogTG9nTGV2ZWwsXHJcbiAgICBkYXRhOiBVaW50OEFycmF5LFxyXG4gICAgbGVuZ3RoOiBudW1iZXJcclxuICApOiB2b2lkIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgaWYgKGkgJSAxNiA9PSAwICYmIGkgPiAwKSB0aGlzLnByaW50KGxvZ0xldmVsLCAnXFxuJyk7XHJcbiAgICAgIGVsc2UgaWYgKGkgJSA4ID09IDAgJiYgaSA+IDApIHRoaXMucHJpbnQobG9nTGV2ZWwsICcgICcpO1xyXG4gICAgICB0aGlzLnByaW50KGxvZ0xldmVsLCAnezB9ICcsIFtkYXRhW2ldICYgMHhmZl0pO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMucHJpbnQobG9nTGV2ZWwsICdcXG4nKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIHByaXZhdGUg44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHt9XHJcbn1cclxuXHJcbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxyXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtZGVidWcnO1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbURlYnVnID0gJC5DdWJpc21EZWJ1ZztcclxuICBleHBvcnQgdHlwZSBDdWJpc21EZWJ1ZyA9ICQuQ3ViaXNtRGVidWc7XHJcbn1cclxuIiwiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQgeyBzdHJ0b2QgfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xyXG5pbXBvcnQgeyBjc21NYXAsIGl0ZXJhdG9yIGFzIGNzbU1hcF9pdGVyYXRvciB9IGZyb20gJy4uL3R5cGUvY3NtbWFwJztcclxuaW1wb3J0IHsgY3NtU3RyaW5nIH0gZnJvbSAnLi4vdHlwZS9jc21zdHJpbmcnO1xyXG5pbXBvcnQgeyBjc21WZWN0b3IsIGl0ZXJhdG9yIGFzIGNzbVZlY3Rvcl9pdGVyYXRvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcclxuaW1wb3J0IHsgQ3ViaXNtTG9nSW5mbyB9IGZyb20gJy4vY3ViaXNtZGVidWcnO1xyXG5cclxuLy8gU3RhdGljSW5pdGlhbGl6ZU5vdEZvckNsaWVudENhbGwoKeOBp+WIneacn+WMluOBmeOCi1xyXG5jb25zdCBDU01fSlNPTl9FUlJPUl9UWVBFX01JU01BVENIID0gJ0Vycm9yOiB0eXBlIG1pc21hdGNoJztcclxuY29uc3QgQ1NNX0pTT05fRVJST1JfSU5ERVhfT0ZfQk9VTkRTID0gJ0Vycm9yOiBpbmRleCBvdXQgb2YgYm91bmRzJztcclxuXHJcbi8qKlxyXG4gKiDjg5Hjg7zjgrnjgZfjgZ9KU09O44Ko44Os44Oh44Oz44OI44Gu6KaB57Sg44Gu5Z+65bqV44Kv44Op44K544CCXHJcbiAqL1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVmFsdWUge1xyXG4gIC8qKlxyXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIOimgee0oOOCkuaWh+Wtl+WIl+Wei+OBp+i/lOOBmShjc21TdHJpbmflnospXHJcbiAgICovXHJcbiAgcHVibGljIGFic3RyYWN0IGdldFN0cmluZyhkZWZhdWx0VmFsdWU/OiBzdHJpbmcsIGluZGVudD86IHN0cmluZyk6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICog6KaB57Sg44KS5paH5a2X5YiX5Z6L44Gn6L+U44GZKHN0cmluZylcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0UmF3U3RyaW5nKGRlZmF1bHRWYWx1ZT86IHN0cmluZywgaW5kZW50Pzogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLmdldFN0cmluZyhkZWZhdWx0VmFsdWUsIGluZGVudCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDopoHntKDjgpLmlbDlgKTlnovjgafov5TjgZkobnVtYmVyKVxyXG4gICAqL1xyXG4gIHB1YmxpYyB0b0ludChkZWZhdWx0VmFsdWUgPSAwKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDopoHntKDjgpLmlbDlgKTlnovjgafov5TjgZkobnVtYmVyKVxyXG4gICAqL1xyXG4gIHB1YmxpYyB0b0Zsb2F0KGRlZmF1bHRWYWx1ZSA9IDApOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOimgee0oOOCkuecn+WBveWApOOBp+i/lOOBmShib29sZWFuKVxyXG4gICAqL1xyXG4gIHB1YmxpYyB0b0Jvb2xlYW4oZGVmYXVsdFZhbHVlID0gZmFsc2UpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjgrXjgqTjgrrjgpLov5TjgZlcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0U2l6ZSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIDA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDopoHntKDjgpLphY3liJfjgafov5TjgZkoVmFsdWVbXSlcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0QXJyYXkoZGVmYXVsdFZhbHVlOiBWYWx1ZVtdID0gbnVsbCk6IFZhbHVlW10ge1xyXG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOimgee0oOOCkuOCs+ODs+ODhuODiuOBp+i/lOOBmShhcnJheSlcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0VmVjdG9yKGRlZmF1bHRWYWx1ZSA9IG5ldyBjc21WZWN0b3I8VmFsdWU+KCkpOiBjc21WZWN0b3I8VmFsdWU+IHtcclxuICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDopoHntKDjgpLjg57jg4Pjg5fjgafov5TjgZkoY3NtTWFwPGNzbVN0cmluZywgVmFsdWU+KVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRNYXAoZGVmYXVsdFZhbHVlPzogY3NtTWFwPHN0cmluZywgVmFsdWU+KTogY3NtTWFwPHN0cmluZywgVmFsdWU+IHtcclxuICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmt7vlrZfmvJTnrpflrZBbaW5kZXhdXHJcbiAgICovXHJcbiAgcHVibGljIGdldFZhbHVlQnlJbmRleChpbmRleDogbnVtYmVyKTogVmFsdWUge1xyXG4gICAgcmV0dXJuIFZhbHVlLmVycm9yVmFsdWUuc2V0RXJyb3JOb3RGb3JDbGllbnRDYWxsKFxyXG4gICAgICBDU01fSlNPTl9FUlJPUl9UWVBFX01JU01BVENIXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5re75a2X5ryU566X5a2QW3N0cmluZyB8IGNzbVN0cmluZ11cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0VmFsdWVCeVN0cmluZyhzOiBzdHJpbmcgfCBjc21TdHJpbmcpOiBWYWx1ZSB7XHJcbiAgICByZXR1cm4gVmFsdWUubnVsbFZhbHVlLnNldEVycm9yTm90Rm9yQ2xpZW50Q2FsbChcclxuICAgICAgQ1NNX0pTT05fRVJST1JfVFlQRV9NSVNNQVRDSFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODnuODg+ODl+OBruOCreODvOS4gOimp+OCkuOCs+ODs+ODhuODiuOBp+i/lOOBmVxyXG4gICAqXHJcbiAgICogQHJldHVybiDjg57jg4Pjg5fjga7jgq3jg7zjga7kuIDopqdcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0S2V5cygpOiBjc21WZWN0b3I8c3RyaW5nPiB7XHJcbiAgICByZXR1cm4gVmFsdWUuc19kdW1teUtleXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBWYWx1ZeOBrueorumhnuOBjOOCqOODqeODvOWApOOBquOCiXRydWVcclxuICAgKi9cclxuICBwdWJsaWMgaXNFcnJvcigpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFZhbHVl44Gu56iu6aGe44GMbnVsbOOBquOCiXRydWVcclxuICAgKi9cclxuICBwdWJsaWMgaXNOdWxsKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVmFsdWXjga7nqK7poZ7jgYznnJ/lgb3lgKTjgarjgol0cnVlXHJcbiAgICovXHJcbiAgcHVibGljIGlzQm9vbCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFZhbHVl44Gu56iu6aGe44GM5pWw5YCk5Z6L44Gq44KJdHJ1ZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc0Zsb2F0KCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVmFsdWXjga7nqK7poZ7jgYzmloflrZfliJfjgarjgol0cnVlXHJcbiAgICovXHJcbiAgcHVibGljIGlzU3RyaW5nKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVmFsdWXjga7nqK7poZ7jgYzphY3liJfjgarjgol0cnVlXHJcbiAgICovXHJcbiAgcHVibGljIGlzQXJyYXkoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBWYWx1ZeOBrueorumhnuOBjOODnuODg+ODl+Wei+OBquOCiXRydWVcclxuICAgKi9cclxuICBwdWJsaWMgaXNNYXAoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlvJXmlbDjga7lgKTjgajnrYnjgZfjgZHjgozjgbB0cnVlXHJcbiAgICovXHJcbiAgcHVibGljIGVxdWFscyh2YWx1ZTogY3NtU3RyaW5nKTogYm9vbGVhbjtcclxuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBzdHJpbmcpOiBib29sZWFuO1xyXG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IG51bWJlcik6IGJvb2xlYW47XHJcbiAgcHVibGljIGVxdWFscyh2YWx1ZTogYm9vbGVhbik6IGJvb2xlYW47XHJcbiAgcHVibGljIGVxdWFscyh2YWx1ZTogYW55KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBWYWx1ZeOBruWApOOBjOmdmeeahOOBquOCiXRydWXjgIHpnZnnmoTjgarjgonop6PmlL7jgZfjgarjgYRcclxuICAgKi9cclxuICBwdWJsaWMgaXNTdGF0aWMoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBWYWx1ZeOBq+OCqOODqeODvOWApOOCkuOCu+ODg+ODiOOBmeOCi1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRFcnJvck5vdEZvckNsaWVudENhbGwoZXJyb3JTdHI6IHN0cmluZyk6IFZhbHVlIHtcclxuICAgIHJldHVybiBKc29uRXJyb3IuZXJyb3JWYWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWIneacn+WMlueUqOODoeOCveODg+ODiVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgc3RhdGljSW5pdGlhbGl6ZU5vdEZvckNsaWVudENhbGwoKTogdm9pZCB7XHJcbiAgICBKc29uQm9vbGVhbi50cnVlVmFsdWUgPSBuZXcgSnNvbkJvb2xlYW4odHJ1ZSk7XHJcbiAgICBKc29uQm9vbGVhbi5mYWxzZVZhbHVlID0gbmV3IEpzb25Cb29sZWFuKGZhbHNlKTtcclxuICAgIFZhbHVlLmVycm9yVmFsdWUgPSBuZXcgSnNvbkVycm9yKCdFUlJPUicsIHRydWUpO1xyXG4gICAgVmFsdWUubnVsbFZhbHVlID0gbmV3IEpzb25OdWxsdmFsdWUoKTtcclxuICAgIFZhbHVlLnNfZHVtbXlLZXlzID0gbmV3IGNzbVZlY3RvcjxzdHJpbmc+KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6rjg6rjg7zjgrnnlKjjg6Hjgr3jg4Pjg4lcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIHN0YXRpY1JlbGVhc2VOb3RGb3JDbGllbnRDYWxsKCk6IHZvaWQge1xyXG4gICAgSnNvbkJvb2xlYW4udHJ1ZVZhbHVlID0gbnVsbDtcclxuICAgIEpzb25Cb29sZWFuLmZhbHNlVmFsdWUgPSBudWxsO1xyXG4gICAgVmFsdWUuZXJyb3JWYWx1ZSA9IG51bGw7XHJcbiAgICBWYWx1ZS5udWxsVmFsdWUgPSBudWxsO1xyXG4gICAgVmFsdWUuc19kdW1teUtleXMgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIF9zdHJpbmdCdWZmZXI6IHN0cmluZzsgLy8g5paH5a2X5YiX44OQ44OD44OV44KhXHJcblxyXG4gIHByaXZhdGUgc3RhdGljIHNfZHVtbXlLZXlzOiBjc21WZWN0b3I8c3RyaW5nPjsgLy8g44OA44Of44O844Kt44O8XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgZXJyb3JWYWx1ZTogVmFsdWU7IC8vIOS4gOaZgueahOOBqui/lOOCiuWApOOBqOOBl+OBpui/lOOBmeOCqOODqeODvOOAgiBDdWJpc21GcmFtZXdvcms6OkRpc3Bvc2XjgZnjgovjgb7jgafjga9kZWxldGXjgZfjgarjgYRcclxuICBwdWJsaWMgc3RhdGljIG51bGxWYWx1ZTogVmFsdWU7IC8vIOS4gOaZgueahOOBqui/lOOCiuWApOOBqOOBl+OBpui/lOOBmU5VTEzjgIIgICBDdWJpc21GcmFtZXdvcms6OkRpc3Bvc2XjgZnjgovjgb7jgafjga9kZWxldGXjgZfjgarjgYRcclxufVxyXG5cclxuLyoqXHJcbiAqIEFzY2lp5paH5a2X44Gu44G/5a++5b+c44GX44Gf5pyA5bCP6ZmQ44Gu6Lu96YePSlNPTuODkeODvOOCteOAglxyXG4gKiDku5Xmp5jjga9KU09O44Gu44K144OW44K744OD44OI44Go44Gq44KL44CCXHJcbiAqIOioreWumuODleOCoeOCpOODqyhtb2RlbDMuanNvbinjgarjganjga7jg63jg7zjg4nnlKhcclxuICpcclxuICogW+acquWvvuW/nOmgheebrl1cclxuICog44O75pel5pys6Kqe44Gq44Gp44Gu6Z2eQVNDSUnmloflrZdcclxuICog44O7ZeOBq+OCiOOCi+aMh+aVsOihqOePvlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEN1YmlzbUpzb24ge1xyXG4gIC8qKlxyXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihidWZmZXI/OiBBcnJheUJ1ZmZlciwgbGVuZ3RoPzogbnVtYmVyKSB7XHJcbiAgICB0aGlzLl9lcnJvciA9IG51bGw7XHJcbiAgICB0aGlzLl9saW5lQ291bnQgPSAwO1xyXG4gICAgdGhpcy5fcm9vdCA9IG51bGw7XHJcblxyXG4gICAgaWYgKGJ1ZmZlciAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgdGhpcy5wYXJzZUJ5dGVzKGJ1ZmZlciwgbGVuZ3RoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODkOOCpOODiOODh+ODvOOCv+OBi+OCieebtOaOpeODreODvOODieOBl+OBpuODkeODvOOCueOBmeOCi1xyXG4gICAqXHJcbiAgICogQHBhcmFtIGJ1ZmZlciDjg5Djg4Pjg5XjgqFcclxuICAgKiBAcGFyYW0gc2l6ZSDjg5Djg4Pjg5XjgqHjgrXjgqTjgrpcclxuICAgKiBAcmV0dXJuIEN1YmlzbUpzb27jgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrnjgILlpLHmlZfjgZfjgZ/jgolOVUxMXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGUoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKSB7XHJcbiAgICBjb25zdCBqc29uID0gbmV3IEN1YmlzbUpzb24oKTtcclxuICAgIGNvbnN0IHN1Y2NlZWRlZDogYm9vbGVhbiA9IGpzb24ucGFyc2VCeXRlcyhidWZmZXIsIHNpemUpO1xyXG5cclxuICAgIGlmICghc3VjY2VlZGVkKSB7XHJcbiAgICAgIEN1YmlzbUpzb24uZGVsZXRlKGpzb24pO1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBqc29uO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OR44O844K544GX44GfSlNPTuOCquODluOCuOOCp+OCr+ODiOOBruino+aUvuWHpueQhlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGluc3RhbmNlIEN1YmlzbUpzb27jgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrlcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGRlbGV0ZShpbnN0YW5jZTogQ3ViaXNtSnNvbikge1xyXG4gICAgaW5zdGFuY2UgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OR44O844K544GX44GfSlNPTuOBruODq+ODvOODiOimgee0oOOCkui/lOOBmVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRSb290KCk6IFZhbHVlIHtcclxuICAgIHJldHVybiB0aGlzLl9yb290O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogIFVuaWNvZGXjga7jg5DjgqTjg4rjg6rjgpJTdHJpbmfjgavlpInmj5tcclxuICAgKlxyXG4gICAqIEBwYXJhbSBidWZmZXIg5aSJ5o+b44GZ44KL44OQ44Kk44OK44Oq44OH44O844K/XHJcbiAgICogQHJldHVybiDlpInmj5vlvozjga7mloflrZfliJdcclxuICAgKi9cclxuICBwdWJsaWMgYXJyYXlCdWZmZXJUb1N0cmluZyhidWZmZXI6IEFycmF5QnVmZmVyKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHVpbnQ4QXJyYXk6IFVpbnQ4QXJyYXkgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xyXG4gICAgbGV0IHN0ciA9ICcnO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwLCBsZW46IG51bWJlciA9IHVpbnQ4QXJyYXkubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcclxuICAgICAgc3RyICs9ICclJyArIHRoaXMucGFkKHVpbnQ4QXJyYXlbaV0udG9TdHJpbmcoMTYpKTtcclxuICAgIH1cclxuXHJcbiAgICBzdHIgPSBkZWNvZGVVUklDb21wb25lbnQoc3RyKTtcclxuICAgIHJldHVybiBzdHI7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjgqjjg7PjgrPjg7zjg4njgIHjg5Hjg4fjgqPjg7PjgrBcclxuICAgKi9cclxuICBwcml2YXRlIHBhZChuOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIG4ubGVuZ3RoIDwgMiA/ICcwJyArIG4gOiBuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSlNPTuOBruODkeODvOOCueOCkuWun+ihjOOBmeOCi1xyXG4gICAqIEBwYXJhbSBidWZmZXIgICAg44OR44O844K55a++6LGh44Gu44OH44O844K/44OQ44Kk44OIXHJcbiAgICogQHBhcmFtIHNpemUgICAgICDjg4fjg7zjgr/jg5DjgqTjg4jjga7jgrXjgqTjgrpcclxuICAgKiByZXR1cm4gdHJ1ZSA6IOaIkOWKn1xyXG4gICAqIHJldHVybiBmYWxzZTog5aSx5pWXXHJcbiAgICovXHJcbiAgcHVibGljIHBhcnNlQnl0ZXMoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBlbmRQb3M6IG51bWJlcltdID0gbmV3IEFycmF5KDEpOyAvLyDlj4LnhafmuKHjgZfjgavjgZnjgovjgZ/jgoHphY3liJdcclxuICAgIGNvbnN0IGRlY29kZUJ1ZmZlcjogc3RyaW5nID0gdGhpcy5hcnJheUJ1ZmZlclRvU3RyaW5nKGJ1ZmZlcik7XHJcbiAgICB0aGlzLl9yb290ID0gdGhpcy5wYXJzZVZhbHVlKGRlY29kZUJ1ZmZlciwgc2l6ZSwgMCwgZW5kUG9zKTtcclxuXHJcbiAgICBpZiAodGhpcy5fZXJyb3IpIHtcclxuICAgICAgbGV0IHN0cmJ1ZiA9ICdcXDAnO1xyXG4gICAgICBzdHJidWYgPSAnSnNvbiBwYXJzZSBlcnJvciA6IEBsaW5lICcgKyAodGhpcy5fbGluZUNvdW50ICsgMSkgKyAnXFxuJztcclxuICAgICAgdGhpcy5fcm9vdCA9IG5ldyBKc29uU3RyaW5nKHN0cmJ1Zik7XHJcblxyXG4gICAgICBDdWJpc21Mb2dJbmZvKCd7MH0nLCB0aGlzLl9yb290LmdldFJhd1N0cmluZygpKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLl9yb290ID09IG51bGwpIHtcclxuICAgICAgdGhpcy5fcm9vdCA9IG5ldyBKc29uRXJyb3IobmV3IGNzbVN0cmluZyh0aGlzLl9lcnJvciksIGZhbHNlKTsgLy8gcm9vdOOBr+ino+aUvuOBleOCjOOCi+OBruOBp+OCqOODqeODvOOCquODluOCuOOCp+OCr+ODiOOCkuWIpemAlOS9nOaIkOOBmeOCi1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODkeODvOOCueaZguOBruOCqOODqeODvOWApOOCkui/lOOBmVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRQYXJzZUVycm9yKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fZXJyb3I7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6vjg7zjg4jopoHntKDjga7mrKHjga7opoHntKDjgYzjg5XjgqHjgqTjg6vjga7ntYLnq6/jgaDjgaPjgZ/jgol0cnVl44KS6L+U44GZXHJcbiAgICovXHJcbiAgcHVibGljIGNoZWNrRW5kT2ZGaWxlKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX3Jvb3QuZ2V0QXJyYXkoKVsxXS5lcXVhbHMoJ0VPRicpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSlNPTuOCqOODrOODoeODs+ODiOOBi+OCiVZhbHVlKGZsb2F0LFN0cmluZyxWYWx1ZSosQXJyYXksbnVsbCx0cnVlLGZhbHNlKeOCkuODkeODvOOCueOBmeOCi1xyXG4gICAqIOOCqOODrOODoeODs+ODiOOBruabuOW8j+OBq+W/nOOBmOOBpuWGhemDqOOBp1BhcnNlU3RyaW5nKCksIFBhcnNlT2JqZWN0KCksIFBhcnNlQXJyYXkoKeOCkuWRvOOBtlxyXG4gICAqXHJcbiAgICogQHBhcmFtICAgYnVmZmVyICAgICAgSlNPTuOCqOODrOODoeODs+ODiOOBruODkOODg+ODleOCoVxyXG4gICAqIEBwYXJhbSAgIGxlbmd0aCAgICAgIOODkeODvOOCueOBmeOCi+mVt+OBlVxyXG4gICAqIEBwYXJhbSAgIGJlZ2luICAgICAgIOODkeODvOOCueOCkumWi+Wni+OBmeOCi+S9jee9rlxyXG4gICAqIEBwYXJhbSAgIG91dEVuZFBvcyAgIOODkeODvOOCuee1guS6huaZguOBruS9jee9rlxyXG4gICAqIEByZXR1cm4gICAgICDjg5Hjg7zjgrnjgYvjgonlj5blvpfjgZfjgZ9WYWx1ZeOCquODluOCuOOCp+OCr+ODiFxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBwYXJzZVZhbHVlKFxyXG4gICAgYnVmZmVyOiBzdHJpbmcsXHJcbiAgICBsZW5ndGg6IG51bWJlcixcclxuICAgIGJlZ2luOiBudW1iZXIsXHJcbiAgICBvdXRFbmRQb3M6IG51bWJlcltdXHJcbiAgKSB7XHJcbiAgICBpZiAodGhpcy5fZXJyb3IpIHJldHVybiBudWxsO1xyXG5cclxuICAgIGxldCBvOiBWYWx1ZSA9IG51bGw7XHJcbiAgICBsZXQgaTogbnVtYmVyID0gYmVnaW47XHJcbiAgICBsZXQgZjogbnVtYmVyO1xyXG5cclxuICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29uc3QgYzogc3RyaW5nID0gYnVmZmVyW2ldO1xyXG4gICAgICBzd2l0Y2ggKGMpIHtcclxuICAgICAgICBjYXNlICctJzpcclxuICAgICAgICBjYXNlICcuJzpcclxuICAgICAgICBjYXNlICcwJzpcclxuICAgICAgICBjYXNlICcxJzpcclxuICAgICAgICBjYXNlICcyJzpcclxuICAgICAgICBjYXNlICczJzpcclxuICAgICAgICBjYXNlICc0JzpcclxuICAgICAgICBjYXNlICc1JzpcclxuICAgICAgICBjYXNlICc2JzpcclxuICAgICAgICBjYXNlICc3JzpcclxuICAgICAgICBjYXNlICc4JzpcclxuICAgICAgICBjYXNlICc5Jzoge1xyXG4gICAgICAgICAgY29uc3QgYWZ0ZXJTdHJpbmc6IHN0cmluZ1tdID0gbmV3IEFycmF5KDEpOyAvLyDlj4LnhafmuKHjgZfjgavjgZnjgovjgZ/jgoFcclxuICAgICAgICAgIGYgPSBzdHJ0b2QoYnVmZmVyLnNsaWNlKGkpLCBhZnRlclN0cmluZyk7XHJcbiAgICAgICAgICBvdXRFbmRQb3NbMF0gPSBidWZmZXIuaW5kZXhPZihhZnRlclN0cmluZ1swXSk7XHJcbiAgICAgICAgICByZXR1cm4gbmV3IEpzb25GbG9hdChmKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSAnXCInOlxyXG4gICAgICAgICAgcmV0dXJuIG5ldyBKc29uU3RyaW5nKFxyXG4gICAgICAgICAgICB0aGlzLnBhcnNlU3RyaW5nKGJ1ZmZlciwgbGVuZ3RoLCBpICsgMSwgb3V0RW5kUG9zKVxyXG4gICAgICAgICAgKTsgLy8gXFxcIuOBruasoeOBruaWh+Wtl+OBi+OCiVxyXG4gICAgICAgIGNhc2UgJ1snOlxyXG4gICAgICAgICAgbyA9IHRoaXMucGFyc2VBcnJheShidWZmZXIsIGxlbmd0aCwgaSArIDEsIG91dEVuZFBvcyk7XHJcbiAgICAgICAgICByZXR1cm4gbztcclxuICAgICAgICBjYXNlICd7JzpcclxuICAgICAgICAgIG8gPSB0aGlzLnBhcnNlT2JqZWN0KGJ1ZmZlciwgbGVuZ3RoLCBpICsgMSwgb3V0RW5kUG9zKTtcclxuICAgICAgICAgIHJldHVybiBvO1xyXG4gICAgICAgIGNhc2UgJ24nOiAvLyBudWxs5Lul5aSW44Gr44Gq44GEXHJcbiAgICAgICAgICBpZiAoaSArIDMgPCBsZW5ndGgpIHtcclxuICAgICAgICAgICAgbyA9IG5ldyBKc29uTnVsbHZhbHVlKCk7IC8vIOino+aUvuOBp+OBjeOCi+OCiOOBhuOBq+OBmeOCi1xyXG4gICAgICAgICAgICBvdXRFbmRQb3NbMF0gPSBpICsgNDtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gJ3BhcnNlIG51bGwnO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIG87XHJcbiAgICAgICAgY2FzZSAndCc6IC8vIHRydWXku6XlpJbjgavjgarjgYRcclxuICAgICAgICAgIGlmIChpICsgMyA8IGxlbmd0aCkge1xyXG4gICAgICAgICAgICBvID0gSnNvbkJvb2xlYW4udHJ1ZVZhbHVlO1xyXG4gICAgICAgICAgICBvdXRFbmRQb3NbMF0gPSBpICsgNDtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gJ3BhcnNlIHRydWUnO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIG87XHJcbiAgICAgICAgY2FzZSAnZic6IC8vIGZhbHNl5Lul5aSW44Gr44Gq44GEXHJcbiAgICAgICAgICBpZiAoaSArIDQgPCBsZW5ndGgpIHtcclxuICAgICAgICAgICAgbyA9IEpzb25Cb29sZWFuLmZhbHNlVmFsdWU7XHJcbiAgICAgICAgICAgIG91dEVuZFBvc1swXSA9IGkgKyA1O1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSBcImlsbGVnYWwgJywnIHBvc2l0aW9uXCI7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gbztcclxuICAgICAgICBjYXNlICcsJzogLy8gQXJyYXkgc2VwYXJhdG9yXHJcbiAgICAgICAgICB0aGlzLl9lcnJvciA9IFwiaWxsZWdhbCAnLCcgcG9zaXRpb25cIjtcclxuICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIGNhc2UgJ10nOiAvLyDkuI3mraPjgarvvZ3jgaDjgYzjgrnjgq3jg4Pjg5fjgZnjgovjgILphY3liJfjga7mnIDlvozjgavkuI3opoHjgaogLCDjgYzjgYLjgovjgajmgJ3jgo/jgozjgotcclxuICAgICAgICAgIG91dEVuZFBvc1swXSA9IGk7IC8vIOWQjOOBmOaWh+Wtl+OCkuWGjeWHpueQhlxyXG4gICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgY2FzZSAnXFxuJzpcclxuICAgICAgICAgIHRoaXMuX2xpbmVDb3VudCsrO1xyXG4gICAgICAgIGNhc2UgJyAnOlxyXG4gICAgICAgIGNhc2UgJ1xcdCc6XHJcbiAgICAgICAgY2FzZSAnXFxyJzpcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgLy8g44K544Kt44OD44OXXHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2Vycm9yID0gJ2lsbGVnYWwgZW5kIG9mIHZhbHVlJztcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5qyh44Gu44CMXCLjgI3jgb7jgafjga7mloflrZfliJfjgpLjg5Hjg7zjgrnjgZnjgovjgIJcclxuICAgKlxyXG4gICAqIEBwYXJhbSAgIHN0cmluZyAgLT4gIOODkeODvOOCueWvvuixoeOBruaWh+Wtl+WIl1xyXG4gICAqIEBwYXJhbSAgIGxlbmd0aCAgLT4gIOODkeODvOOCueOBmeOCi+mVt+OBlVxyXG4gICAqIEBwYXJhbSAgIGJlZ2luICAgLT4gIOODkeODvOOCueOCkumWi+Wni+OBmeOCi+S9jee9rlxyXG4gICAqIEBwYXJhbSAgb3V0RW5kUG9zICAgLT4gIOODkeODvOOCuee1guS6huaZguOBruS9jee9rlxyXG4gICAqIEByZXR1cm4gICAgICDjg5Hjg7zjgrnjgZfjgZ/mlodG5a2X5YiX6KaB57SgXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIHBhcnNlU3RyaW5nKFxyXG4gICAgc3RyaW5nOiBzdHJpbmcsXHJcbiAgICBsZW5ndGg6IG51bWJlcixcclxuICAgIGJlZ2luOiBudW1iZXIsXHJcbiAgICBvdXRFbmRQb3M6IG51bWJlcltdXHJcbiAgKTogc3RyaW5nIHtcclxuICAgIGlmICh0aGlzLl9lcnJvcikgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgbGV0IGkgPSBiZWdpbjtcclxuICAgIGxldCBjOiBzdHJpbmcsIGMyOiBzdHJpbmc7XHJcbiAgICBjb25zdCByZXQ6IGNzbVN0cmluZyA9IG5ldyBjc21TdHJpbmcoJycpO1xyXG4gICAgbGV0IGJ1ZlN0YXJ0OiBudW1iZXIgPSBiZWdpbjsgLy8gc2J1ZuOBq+eZu+mMsuOBleOCjOOBpuOBhOOBquOBhOaWh+Wtl+OBrumWi+Wni+S9jee9rlxyXG5cclxuICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgYyA9IHN0cmluZ1tpXTtcclxuXHJcbiAgICAgIHN3aXRjaCAoYykge1xyXG4gICAgICAgIGNhc2UgJ1wiJzoge1xyXG4gICAgICAgICAgLy8g57WC56uv44Gu4oCd44CB44Ko44K544Kx44O844OX5paH5a2X44Gv5Yil44Gr5Yem55CG44GV44KM44KL44Gu44Gn44GT44GT44Gr5p2l44Gq44GEXHJcbiAgICAgICAgICBvdXRFbmRQb3NbMF0gPSBpICsgMTsgLy8g4oCd44Gu5qyh44Gu5paH5a2XXHJcbiAgICAgICAgICByZXQuYXBwZW5kKHN0cmluZy5zbGljZShidWZTdGFydCksIGkgLSBidWZTdGFydCk7IC8vIOWJjeOBruaWh+Wtl+OBvuOBp+OCkueZu+mMsuOBmeOCi1xyXG4gICAgICAgICAgcmV0dXJuIHJldC5zO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlICcvLyc6IHtcclxuICAgICAgICAgIC8vIOOCqOOCueOCseODvOODl+OBruWgtOWQiFxyXG4gICAgICAgICAgaSsrOyAvLyDvvJLmloflrZfjgpLjgrvjg4Pjg4jjgafmibHjgYZcclxuXHJcbiAgICAgICAgICBpZiAoaSAtIDEgPiBidWZTdGFydCkge1xyXG4gICAgICAgICAgICByZXQuYXBwZW5kKHN0cmluZy5zbGljZShidWZTdGFydCksIGkgLSBidWZTdGFydCk7IC8vIOWJjeOBruaWh+Wtl+OBvuOBp+OCkueZu+mMsuOBmeOCi1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgYnVmU3RhcnQgPSBpICsgMTsgLy8g44Ko44K544Kx44O844OX77yI77yS5paH5a2XKeOBruasoeOBruaWh+Wtl+OBi+OCiVxyXG5cclxuICAgICAgICAgIGlmIChpIDwgbGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGMyID0gc3RyaW5nW2ldO1xyXG5cclxuICAgICAgICAgICAgc3dpdGNoIChjMikge1xyXG4gICAgICAgICAgICAgIGNhc2UgJ1xcXFwnOlxyXG4gICAgICAgICAgICAgICAgcmV0LmV4cGFuc2lvbigxLCAnXFxcXCcpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgY2FzZSAnXCInOlxyXG4gICAgICAgICAgICAgICAgcmV0LmV4cGFuc2lvbigxLCAnXCInKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIGNhc2UgJy8nOlxyXG4gICAgICAgICAgICAgICAgcmV0LmV4cGFuc2lvbigxLCAnLycpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgY2FzZSAnYic6XHJcbiAgICAgICAgICAgICAgICByZXQuZXhwYW5zaW9uKDEsICdcXGInKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIGNhc2UgJ2YnOlxyXG4gICAgICAgICAgICAgICAgcmV0LmV4cGFuc2lvbigxLCAnXFxmJyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICBjYXNlICduJzpcclxuICAgICAgICAgICAgICAgIHJldC5leHBhbnNpb24oMSwgJ1xcbicpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgY2FzZSAncic6XHJcbiAgICAgICAgICAgICAgICByZXQuZXhwYW5zaW9uKDEsICdcXHInKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIGNhc2UgJ3QnOlxyXG4gICAgICAgICAgICAgICAgcmV0LmV4cGFuc2lvbigxLCAnXFx0Jyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICBjYXNlICd1JzpcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gJ3BhcnNlIHN0cmluZy91bmljb3JkIGVzY2FwZSBub3Qgc3VwcG9ydGVkJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSAncGFyc2Ugc3RyaW5nL2VzY2FwZSBlcnJvcic7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2Vycm9yID0gJ3BhcnNlIHN0cmluZy9pbGxlZ2FsIGVuZCc7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEpTT07jga7jgqrjg5bjgrjjgqfjgq/jg4jjgqjjg6zjg6Hjg7Pjg4jjgpLjg5Hjg7zjgrnjgZfjgaZWYWx1ZeOCquODluOCuOOCp+OCr+ODiOOCkui/lOOBmVxyXG4gICAqXHJcbiAgICogQHBhcmFtIGJ1ZmZlciAgICBKU09O44Ko44Os44Oh44Oz44OI44Gu44OQ44OD44OV44KhXHJcbiAgICogQHBhcmFtIGxlbmd0aCAgICDjg5Hjg7zjgrnjgZnjgovplbfjgZVcclxuICAgKiBAcGFyYW0gYmVnaW4gICAgIOODkeODvOOCueOCkumWi+Wni+OBmeOCi+S9jee9rlxyXG4gICAqIEBwYXJhbSBvdXRFbmRQb3Mg44OR44O844K557WC5LqG5pmC44Gu5L2N572uXHJcbiAgICogQHJldHVybiDjg5Hjg7zjgrnjgYvjgonlj5blvpfjgZfjgZ9WYWx1ZeOCquODluOCuOOCp+OCr+ODiFxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBwYXJzZU9iamVjdChcclxuICAgIGJ1ZmZlcjogc3RyaW5nLFxyXG4gICAgbGVuZ3RoOiBudW1iZXIsXHJcbiAgICBiZWdpbjogbnVtYmVyLFxyXG4gICAgb3V0RW5kUG9zOiBudW1iZXJbXVxyXG4gICk6IFZhbHVlIHtcclxuICAgIGlmICh0aGlzLl9lcnJvcikgcmV0dXJuIG51bGw7XHJcbiAgICBjb25zdCByZXQ6IEpzb25NYXAgPSBuZXcgSnNvbk1hcCgpO1xyXG5cclxuICAgIC8vIEtleTogVmFsdWVcclxuICAgIGxldCBrZXkgPSAnJztcclxuICAgIGxldCBpOiBudW1iZXIgPSBiZWdpbjtcclxuICAgIGxldCBjID0gJyc7XHJcbiAgICBjb25zdCBsb2NhbFJldEVuZFBvczI6IG51bWJlcltdID0gQXJyYXkoMSk7XHJcbiAgICBsZXQgb2sgPSBmYWxzZTtcclxuXHJcbiAgICAvLyAsIOOBjOe2muOBj+mZkOOCiuODq+ODvOODl1xyXG4gICAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICBGT1JfTE9PUDogZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGMgPSBidWZmZXJbaV07XHJcblxyXG4gICAgICAgIHN3aXRjaCAoYykge1xyXG4gICAgICAgICAgY2FzZSAnXCInOlxyXG4gICAgICAgICAgICBrZXkgPSB0aGlzLnBhcnNlU3RyaW5nKGJ1ZmZlciwgbGVuZ3RoLCBpICsgMSwgbG9jYWxSZXRFbmRQb3MyKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2Vycm9yKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGkgPSBsb2NhbFJldEVuZFBvczJbMF07XHJcbiAgICAgICAgICAgIG9rID0gdHJ1ZTtcclxuICAgICAgICAgICAgYnJlYWsgRk9SX0xPT1A7IC8vLS0gbG9vcOOBi+OCieWHuuOCi1xyXG4gICAgICAgICAgY2FzZSAnfSc6IC8vIOmWieOBmOOCq+ODg+OCs1xyXG4gICAgICAgICAgICBvdXRFbmRQb3NbMF0gPSBpICsgMTtcclxuICAgICAgICAgICAgcmV0dXJuIHJldDsgLy8g56m6XHJcbiAgICAgICAgICBjYXNlICc6JzpcclxuICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSBcImlsbGVnYWwgJzonIHBvc2l0aW9uXCI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSAnXFxuJzpcclxuICAgICAgICAgICAgdGhpcy5fbGluZUNvdW50Kys7XHJcbiAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICBicmVhazsgLy8g44K544Kt44OD44OX44GZ44KL5paH5a2XXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmICghb2spIHtcclxuICAgICAgICB0aGlzLl9lcnJvciA9ICdrZXkgbm90IGZvdW5kJztcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgfVxyXG5cclxuICAgICAgb2sgPSBmYWxzZTtcclxuXHJcbiAgICAgIC8vIDog44KS44OB44Kn44OD44KvXHJcbiAgICAgIEZPUl9MT09QMjogZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGMgPSBidWZmZXJbaV07XHJcblxyXG4gICAgICAgIHN3aXRjaCAoYykge1xyXG4gICAgICAgICAgY2FzZSAnOic6XHJcbiAgICAgICAgICAgIG9rID0gdHJ1ZTtcclxuICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICBicmVhayBGT1JfTE9PUDI7XHJcbiAgICAgICAgICBjYXNlICd9JzpcclxuICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSBcImlsbGVnYWwgJ30nIHBvc2l0aW9uXCI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSAnXFxuJzpcclxuICAgICAgICAgICAgdGhpcy5fbGluZUNvdW50Kys7XHJcbiAgICAgICAgICAvLyBjYXNlICcgJzogY2FzZSAnXFx0JyA6IGNhc2UgJ1xccic6XHJcbiAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICBicmVhazsgLy8g44K544Kt44OD44OX44GZ44KL5paH5a2XXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIW9rKSB7XHJcbiAgICAgICAgdGhpcy5fZXJyb3IgPSBcIic6JyBub3QgZm91bmRcIjtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8g5YCk44KS44OB44Kn44OD44KvXHJcbiAgICAgIGNvbnN0IHZhbHVlOiBWYWx1ZSA9IHRoaXMucGFyc2VWYWx1ZShidWZmZXIsIGxlbmd0aCwgaSwgbG9jYWxSZXRFbmRQb3MyKTtcclxuICAgICAgaWYgKHRoaXMuX2Vycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGkgPSBsb2NhbFJldEVuZFBvczJbMF07XHJcblxyXG4gICAgICAvLyByZXQucHV0KGtleSwgdmFsdWUpO1xyXG4gICAgICByZXQucHV0KGtleSwgdmFsdWUpO1xyXG5cclxuICAgICAgRk9SX0xPT1AzOiBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgYyA9IGJ1ZmZlcltpXTtcclxuXHJcbiAgICAgICAgc3dpdGNoIChjKSB7XHJcbiAgICAgICAgICBjYXNlICcsJzpcclxuICAgICAgICAgICAgYnJlYWsgRk9SX0xPT1AzO1xyXG4gICAgICAgICAgY2FzZSAnfSc6XHJcbiAgICAgICAgICAgIG91dEVuZFBvc1swXSA9IGkgKyAxO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0OyAvLyDmraPluLjntYLkuoZcclxuICAgICAgICAgIGNhc2UgJ1xcbic6XHJcbiAgICAgICAgICAgIHRoaXMuX2xpbmVDb3VudCsrO1xyXG4gICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgYnJlYWs7IC8vIOOCueOCreODg+ODl1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2Vycm9yID0gJ2lsbGVnYWwgZW5kIG9mIHBlcnNlT2JqZWN0JztcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5qyh44Gu44CMXCLjgI3jgb7jgafjga7mloflrZfliJfjgpLjg5Hjg7zjgrnjgZnjgovjgIJcclxuICAgKiBAcGFyYW0gYnVmZmVyICAgIEpTT07jgqjjg6zjg6Hjg7Pjg4jjga7jg5Djg4Pjg5XjgqFcclxuICAgKiBAcGFyYW0gbGVuZ3RoICAgIOODkeODvOOCueOBmeOCi+mVt+OBlVxyXG4gICAqIEBwYXJhbSBiZWdpbiAgICAg44OR44O844K544KS6ZaL5aeL44GZ44KL5L2N572uXHJcbiAgICogQHBhcmFtIG91dEVuZFBvcyDjg5Hjg7zjgrnntYLkuobmmYLjga7kvY3nva5cclxuICAgKiBAcmV0dXJuIOODkeODvOOCueOBi+OCieWPluW+l+OBl+OBn1ZhbHVl44Kq44OW44K444Kn44Kv44OIXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIHBhcnNlQXJyYXkoXHJcbiAgICBidWZmZXI6IHN0cmluZyxcclxuICAgIGxlbmd0aDogbnVtYmVyLFxyXG4gICAgYmVnaW46IG51bWJlcixcclxuICAgIG91dEVuZFBvczogbnVtYmVyW11cclxuICApOiBWYWx1ZSB7XHJcbiAgICBpZiAodGhpcy5fZXJyb3IpIHJldHVybiBudWxsO1xyXG4gICAgbGV0IHJldDogSnNvbkFycmF5ID0gbmV3IEpzb25BcnJheSgpO1xyXG5cclxuICAgIC8vIGtleSA6IHZhbHVlXHJcbiAgICBsZXQgaTogbnVtYmVyID0gYmVnaW47XHJcbiAgICBsZXQgYzogc3RyaW5nO1xyXG4gICAgY29uc3QgbG9jYWxSZXRFbmRwb3MyOiBudW1iZXJbXSA9IG5ldyBBcnJheSgxKTtcclxuXHJcbiAgICAvLyAsIOOBjOe2muOBj+mZkOOCiuODq+ODvOODl1xyXG4gICAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAvLyA6IOOCkuODgeOCp+ODg+OCr1xyXG4gICAgICBjb25zdCB2YWx1ZTogVmFsdWUgPSB0aGlzLnBhcnNlVmFsdWUoYnVmZmVyLCBsZW5ndGgsIGksIGxvY2FsUmV0RW5kcG9zMik7XHJcblxyXG4gICAgICBpZiAodGhpcy5fZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgfVxyXG4gICAgICBpID0gbG9jYWxSZXRFbmRwb3MyWzBdO1xyXG5cclxuICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0LmFkZCh2YWx1ZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEZPUl9MT09QMzpcclxuICAgICAgLy8gYm9vbGVhbiBicmVha2ZsYWcgPSBmYWxzZTtcclxuICAgICAgRk9SX0xPT1A6IGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjID0gYnVmZmVyW2ldO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKGMpIHtcclxuICAgICAgICAgIGNhc2UgJywnOlxyXG4gICAgICAgICAgICAvLyBicmVha2ZsYWcgPSB0cnVlO1xyXG4gICAgICAgICAgICAvLyBicmVhazsgLy8g5qyh44GuS0VZLCBWQWxVReOBuFxyXG4gICAgICAgICAgICBicmVhayBGT1JfTE9PUDtcclxuICAgICAgICAgIGNhc2UgJ10nOlxyXG4gICAgICAgICAgICBvdXRFbmRQb3NbMF0gPSBpICsgMTtcclxuICAgICAgICAgICAgcmV0dXJuIHJldDsgLy8g57WC5LqGXHJcbiAgICAgICAgICBjYXNlICdcXG4nOlxyXG4gICAgICAgICAgICArK3RoaXMuX2xpbmVDb3VudDtcclxuICAgICAgICAgIC8vY2FzZSAnICc6IGNhc2UgJ1xcdCc6IGNhc2UgJ1xccic6XHJcbiAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICBicmVhazsgLy8g44K544Kt44OD44OXXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0ID0gdm9pZCAwO1xyXG4gICAgdGhpcy5fZXJyb3IgPSAnaWxsZWdhbCBlbmQgb2YgcGFyc2VPYmplY3QnO1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICBfZXJyb3I6IHN0cmluZzsgLy8g44OR44O844K55pmC44Gu44Ko44Op44O8XHJcbiAgX2xpbmVDb3VudDogbnVtYmVyOyAvLyDjgqjjg6njg7zloLHlkYrjgavnlKjjgYTjgovooYzmlbDjgqvjgqbjg7Pjg4hcclxuICBfcm9vdDogVmFsdWU7IC8vIOODkeODvOOCueOBleOCjOOBn+ODq+ODvOODiOimgee0oFxyXG59XHJcblxyXG4vKipcclxuICog44OR44O844K544GX44GfSlNPTuOBruimgee0oOOCkmZsb2F05YCk44Go44GX44Gm5omx44GGXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSnNvbkZsb2F0IGV4dGVuZHMgVmFsdWUge1xyXG4gIC8qKlxyXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHY6IG51bWJlcikge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICB0aGlzLl92YWx1ZSA9IHY7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBWYWx1ZeOBrueorumhnuOBjOaVsOWApOWei+OBquOCiXRydWVcclxuICAgKi9cclxuICBwdWJsaWMgaXNGbG9hdCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6KaB57Sg44KS5paH5a2X5YiX44Gn6L+U44GZKGNzbVN0cmluZ+WeiylcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0U3RyaW5nKGRlZmF1bHRWYWx1ZTogc3RyaW5nLCBpbmRlbnQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBzdHJidWYgPSAnXFwwJztcclxuICAgIHRoaXMuX3ZhbHVlID0gcGFyc2VGbG9hdChzdHJidWYpO1xyXG4gICAgdGhpcy5fc3RyaW5nQnVmZmVyID0gc3RyYnVmO1xyXG5cclxuICAgIHJldHVybiB0aGlzLl9zdHJpbmdCdWZmZXI7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDopoHntKDjgpLmlbDlgKTlnovjgafov5TjgZkobnVtYmVyKVxyXG4gICAqL1xyXG4gIHB1YmxpYyB0b0ludChkZWZhdWx0VmFsdWUgPSAwKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBwYXJzZUludCh0aGlzLl92YWx1ZS50b1N0cmluZygpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOimgee0oOOCkuaVsOWApOWei+OBp+i/lOOBmShudW1iZXIpXHJcbiAgICovXHJcbiAgcHVibGljIHRvRmxvYXQoZGVmYXVsdFZhbHVlID0gMC4wKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOW8leaVsOOBruWApOOBqOetieOBl+OBkeOCjOOBsHRydWVcclxuICAgKi9cclxuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBjc21TdHJpbmcpOiBib29sZWFuO1xyXG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IHN0cmluZyk6IGJvb2xlYW47XHJcbiAgcHVibGljIGVxdWFscyh2YWx1ZTogbnVtYmVyKTogYm9vbGVhbjtcclxuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBib29sZWFuKTogYm9vbGVhbjtcclxuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICAgIGlmICgnbnVtYmVyJyA9PT0gdHlwZW9mIHZhbHVlKSB7XHJcbiAgICAgIC8vIGludFxyXG4gICAgICBpZiAoTWF0aC5yb3VuZCh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgLy8gZmxvYXRcclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlID09IHRoaXMuX3ZhbHVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF92YWx1ZTogbnVtYmVyOyAvLyBKU09O6KaB57Sg44Gu5YCkXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDjg5Hjg7zjgrnjgZfjgZ9KU09O44Gu6KaB57Sg44KS55yf5YG95YCk44Go44GX44Gm5omx44GGXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSnNvbkJvb2xlYW4gZXh0ZW5kcyBWYWx1ZSB7XHJcbiAgLyoqXHJcbiAgICogVmFsdWXjga7nqK7poZ7jgYznnJ/lgb3lgKTjgarjgol0cnVlXHJcbiAgICovXHJcbiAgcHVibGljIGlzQm9vbCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6KaB57Sg44KS55yf5YG95YCk44Gn6L+U44GZKGJvb2xlYW4pXHJcbiAgICovXHJcbiAgcHVibGljIHRvQm9vbGVhbihkZWZhdWx0VmFsdWUgPSBmYWxzZSk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2Jvb2xWYWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOimgee0oOOCkuaWh+Wtl+WIl+OBp+i/lOOBmShjc21TdHJpbmflnospXHJcbiAgICovXHJcbiAgcHVibGljIGdldFN0cmluZyhkZWZhdWx0VmFsdWU6IHN0cmluZywgaW5kZW50OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgdGhpcy5fc3RyaW5nQnVmZmVyID0gdGhpcy5fYm9vbFZhbHVlID8gJ3RydWUnIDogJ2ZhbHNlJztcclxuXHJcbiAgICByZXR1cm4gdGhpcy5fc3RyaW5nQnVmZmVyO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5byV5pWw44Gu5YCk44Go562J44GX44GR44KM44GwdHJ1ZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IGNzbVN0cmluZyk6IGJvb2xlYW47XHJcbiAgcHVibGljIGVxdWFscyh2YWx1ZTogc3RyaW5nKTogYm9vbGVhbjtcclxuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBudW1iZXIpOiBib29sZWFuO1xyXG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IGJvb2xlYW4pOiBib29sZWFuO1xyXG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKCdib29sZWFuJyA9PT0gdHlwZW9mIHZhbHVlKSB7XHJcbiAgICAgIHJldHVybiB2YWx1ZSA9PSB0aGlzLl9ib29sVmFsdWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBWYWx1ZeOBruWApOOBjOmdmeeahOOBquOCiXRydWUsIOmdmeeahOOBquOCieino+aUvuOBl+OBquOBhFxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc1N0YXRpYygpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5byV5pWw5LuY44GN44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKHY6IGJvb2xlYW4pIHtcclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgdGhpcy5fYm9vbFZhbHVlID0gdjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyB0cnVlVmFsdWU6IEpzb25Cb29sZWFuOyAvLyB0cnVlXHJcbiAgc3RhdGljIGZhbHNlVmFsdWU6IEpzb25Cb29sZWFuOyAvLyBmYWxzZVxyXG5cclxuICBwcml2YXRlIF9ib29sVmFsdWU6IGJvb2xlYW47IC8vIEpTT07opoHntKDjga7lgKRcclxufVxyXG5cclxuLyoqXHJcbiAqIOODkeODvOOCueOBl+OBn0pTT07jga7opoHntKDjgpLmloflrZfliJfjgajjgZfjgabmibHjgYZcclxuICovXHJcbmV4cG9ydCBjbGFzcyBKc29uU3RyaW5nIGV4dGVuZHMgVmFsdWUge1xyXG4gIC8qKlxyXG4gICAqIOW8leaVsOS7mOOBjeOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihzOiBzdHJpbmcpO1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihzOiBjc21TdHJpbmcpO1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihzOiBhbnkpIHtcclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2Ygcykge1xyXG4gICAgICB0aGlzLl9zdHJpbmdCdWZmZXIgPSBzO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChzIGluc3RhbmNlb2YgY3NtU3RyaW5nKSB7XHJcbiAgICAgIHRoaXMuX3N0cmluZ0J1ZmZlciA9IHMucztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFZhbHVl44Gu56iu6aGe44GM5paH5a2X5YiX44Gq44KJdHJ1ZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc1N0cmluZygpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6KaB57Sg44KS5paH5a2X5YiX44Gn6L+U44GZKGNzbVN0cmluZ+WeiylcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0U3RyaW5nKGRlZmF1bHRWYWx1ZTogc3RyaW5nLCBpbmRlbnQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fc3RyaW5nQnVmZmVyO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5byV5pWw44Gu5YCk44Go562J44GX44GR44KM44GwdHJ1ZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IGNzbVN0cmluZyk6IGJvb2xlYW47XHJcbiAgcHVibGljIGVxdWFscyh2YWx1ZTogc3RyaW5nKTogYm9vbGVhbjtcclxuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBudW1iZXIpOiBib29sZWFuO1xyXG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IGJvb2xlYW4pOiBib29sZWFuO1xyXG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgdmFsdWUpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX3N0cmluZ0J1ZmZlciA9PSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBjc21TdHJpbmcpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX3N0cmluZ0J1ZmZlciA9PSB2YWx1ZS5zO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBKU09O44OR44O844K55pmC44Gu44Ko44Op44O857WQ5p6c44CC5paH5a2X5YiX5Z6L44Gu44KI44GG44Gr44G144KL44G+44GGXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSnNvbkVycm9yIGV4dGVuZHMgSnNvblN0cmluZyB7XHJcbiAgLyoqXHJcbiAgICogVmFsdWXjga7lgKTjgYzpnZnnmoTjgarjgol0cnVl44CB6Z2Z55qE44Gq44KJ6Kej5pS+44GX44Gq44GEXHJcbiAgICovXHJcbiAgcHVibGljIGlzU3RhdGljKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lzU3RhdGljO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Ko44Op44O85oOF5aCx44KS44K744OD44OI44GZ44KLXHJcbiAgICovXHJcbiAgcHVibGljIHNldEVycm9yTm90Rm9yQ2xpZW50Q2FsbChzOiBzdHJpbmcpOiBWYWx1ZSB7XHJcbiAgICB0aGlzLl9zdHJpbmdCdWZmZXIgPSBzO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlvJXmlbDku5jjgY3jgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoczogY3NtU3RyaW5nIHwgc3RyaW5nLCBpc1N0YXRpYzogYm9vbGVhbikge1xyXG4gICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2Ygcykge1xyXG4gICAgICBzdXBlcihzKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHN1cGVyKHMpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5faXNTdGF0aWMgPSBpc1N0YXRpYztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFZhbHVl44Gu56iu6aGe44GM44Ko44Op44O85YCk44Gq44KJdHJ1ZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc0Vycm9yKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgX2lzU3RhdGljOiBib29sZWFuOyAvLyDpnZnnmoTjgapWYWx1ZeOBi+OBqeOBhuOBi1xyXG59XHJcblxyXG4vKipcclxuICog44OR44O844K544GX44GfSlNPTuOBruimgee0oOOCkk5VTEzlgKTjgajjgZfjgabmjIHjgaRcclxuICovXHJcbmV4cG9ydCBjbGFzcyBKc29uTnVsbHZhbHVlIGV4dGVuZHMgVmFsdWUge1xyXG4gIC8qKlxyXG4gICAqIFZhbHVl44Gu56iu6aGe44GMTlVMTOWApOOBquOCiXRydWVcclxuICAgKi9cclxuICBwdWJsaWMgaXNOdWxsKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDopoHntKDjgpLmloflrZfliJfjgafov5TjgZkoY3NtU3RyaW5n5Z6LKVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRTdHJpbmcoZGVmYXVsdFZhbHVlOiBzdHJpbmcsIGluZGVudDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl9zdHJpbmdCdWZmZXI7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBWYWx1ZeOBruWApOOBjOmdmeeahOOBquOCiXRydWUsIOmdmeeahOOBquOCieino+aUvuOBl+OBquOBhFxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc1N0YXRpYygpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVmFsdWXjgavjgqjjg6njg7zlgKTjgpLjgrvjg4Pjg4jjgZnjgotcclxuICAgKi9cclxuICBwdWJsaWMgc2V0RXJyb3JOb3RGb3JDbGllbnRDYWxsKHM6IHN0cmluZyk6IFZhbHVlIHtcclxuICAgIHRoaXMuX3N0cmluZ0J1ZmZlciA9IHM7XHJcbiAgICByZXR1cm4gSnNvbkVycm9yLm51bGxWYWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgdGhpcy5fc3RyaW5nQnVmZmVyID0gJ051bGxWYWx1ZSc7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICog44OR44O844K544GX44GfSlNPTuOBruimgee0oOOCkumFjeWIl+OBqOOBl+OBpuaMgeOBpFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEpzb25BcnJheSBleHRlbmRzIFZhbHVlIHtcclxuICAvKipcclxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5fYXJyYXkgPSBuZXcgY3NtVmVjdG9yPFZhbHVlPigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXHJcbiAgICovXHJcbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XHJcbiAgICBmb3IgKFxyXG4gICAgICBsZXQgaXRlOiBjc21WZWN0b3JfaXRlcmF0b3I8VmFsdWU+ID0gdGhpcy5fYXJyYXkuYmVnaW4oKTtcclxuICAgICAgaXRlLm5vdEVxdWFsKHRoaXMuX2FycmF5LmVuZCgpKTtcclxuICAgICAgaXRlLnByZUluY3JlbWVudCgpXHJcbiAgICApIHtcclxuICAgICAgbGV0IHY6IFZhbHVlID0gaXRlLnB0cigpO1xyXG5cclxuICAgICAgaWYgKHYgJiYgIXYuaXNTdGF0aWMoKSkge1xyXG4gICAgICAgIHYgPSB2b2lkIDA7XHJcbiAgICAgICAgdiA9IG51bGw7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFZhbHVl44Gu56iu6aGe44GM6YWN5YiX44Gq44KJdHJ1ZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc0FycmF5KCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmt7vlrZfmvJTnrpflrZBbaW5kZXhdXHJcbiAgICovXHJcbiAgcHVibGljIGdldFZhbHVlQnlJbmRleChpbmRleDogbnVtYmVyKTogVmFsdWUge1xyXG4gICAgaWYgKGluZGV4IDwgMCB8fCB0aGlzLl9hcnJheS5nZXRTaXplKCkgPD0gaW5kZXgpIHtcclxuICAgICAgcmV0dXJuIFZhbHVlLmVycm9yVmFsdWUuc2V0RXJyb3JOb3RGb3JDbGllbnRDYWxsKFxyXG4gICAgICAgIENTTV9KU09OX0VSUk9SX0lOREVYX09GX0JPVU5EU1xyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHY6IFZhbHVlID0gdGhpcy5fYXJyYXkuYXQoaW5kZXgpO1xyXG5cclxuICAgIGlmICh2ID09IG51bGwpIHtcclxuICAgICAgcmV0dXJuIFZhbHVlLm51bGxWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOa3u+Wtl+a8lOeul+WtkFtzdHJpbmcgfCBjc21TdHJpbmddXHJcbiAgICovXHJcbiAgcHVibGljIGdldFZhbHVlQnlTdHJpbmcoczogc3RyaW5nIHwgY3NtU3RyaW5nKTogVmFsdWUge1xyXG4gICAgcmV0dXJuIFZhbHVlLmVycm9yVmFsdWUuc2V0RXJyb3JOb3RGb3JDbGllbnRDYWxsKFxyXG4gICAgICBDU01fSlNPTl9FUlJPUl9UWVBFX01JU01BVENIXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6KaB57Sg44KS5paH5a2X5YiX44Gn6L+U44GZKGNzbVN0cmluZ+WeiylcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0U3RyaW5nKGRlZmF1bHRWYWx1ZTogc3RyaW5nLCBpbmRlbnQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBzdHJpbmdCdWZmZXI6IHN0cmluZyA9IGluZGVudCArICdbXFxuJztcclxuXHJcbiAgICBmb3IgKFxyXG4gICAgICBsZXQgaXRlOiBjc21WZWN0b3JfaXRlcmF0b3I8VmFsdWU+ID0gdGhpcy5fYXJyYXkuYmVnaW4oKTtcclxuICAgICAgaXRlLm5vdEVxdWFsKHRoaXMuX2FycmF5LmVuZCgpKTtcclxuICAgICAgaXRlLmluY3JlbWVudCgpXHJcbiAgICApIHtcclxuICAgICAgY29uc3QgdjogVmFsdWUgPSBpdGUucHRyKCk7XHJcbiAgICAgIHRoaXMuX3N0cmluZ0J1ZmZlciArPSBpbmRlbnQgKyAnJyArIHYuZ2V0U3RyaW5nKGluZGVudCArICcgJykgKyAnXFxuJztcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9zdHJpbmdCdWZmZXIgPSBzdHJpbmdCdWZmZXIgKyBpbmRlbnQgKyAnXVxcbic7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX3N0cmluZ0J1ZmZlcjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOmFjeWIl+imgee0oOOCkui/veWKoOOBmeOCi1xyXG4gICAqIEBwYXJhbSB2IOi/veWKoOOBmeOCi+imgee0oFxyXG4gICAqL1xyXG4gIHB1YmxpYyBhZGQodjogVmFsdWUpOiB2b2lkIHtcclxuICAgIHRoaXMuX2FycmF5LnB1c2hCYWNrKHYpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6KaB57Sg44KS44Kz44Oz44OG44OK44Gn6L+U44GZKGNzbVZlY3RvcjxWYWx1ZT4pXHJcbiAgICovXHJcbiAgcHVibGljIGdldFZlY3RvcihkZWZhdWx0VmFsdWU6IGNzbVZlY3RvcjxWYWx1ZT4gPSBudWxsKTogY3NtVmVjdG9yPFZhbHVlPiB7XHJcbiAgICByZXR1cm4gdGhpcy5fYXJyYXk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDopoHntKDjga7mlbDjgpLov5TjgZlcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0U2l6ZSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2FycmF5LmdldFNpemUoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX2FycmF5OiBjc21WZWN0b3I8VmFsdWU+OyAvLyBKU09O6KaB57Sg44Gu5YCkXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDjg5Hjg7zjgrnjgZfjgZ9KU09O44Gu6KaB57Sg44KS44Oe44OD44OX44Go44GX44Gm5oyB44GkXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSnNvbk1hcCBleHRlbmRzIFZhbHVlIHtcclxuICAvKipcclxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5fbWFwID0gbmV3IGNzbU1hcDxzdHJpbmcsIFZhbHVlPigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXHJcbiAgICovXHJcbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XHJcbiAgICBjb25zdCBpdGU6IGNzbU1hcF9pdGVyYXRvcjxzdHJpbmcsIFZhbHVlPiA9IHRoaXMuX21hcC5iZWdpbigpO1xyXG5cclxuICAgIHdoaWxlIChpdGUubm90RXF1YWwodGhpcy5fbWFwLmVuZCgpKSkge1xyXG4gICAgICBsZXQgdjogVmFsdWUgPSBpdGUucHRyKCkuc2Vjb25kO1xyXG5cclxuICAgICAgaWYgKHYgJiYgIXYuaXNTdGF0aWMoKSkge1xyXG4gICAgICAgIHYgPSB2b2lkIDA7XHJcbiAgICAgICAgdiA9IG51bGw7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFZhbHVl44Gu5YCk44GMTWFw5Z6L44Gq44KJdHJ1ZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc01hcCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5re75a2X5ryU566X5a2QW3N0cmluZyB8IGNzbVN0cmluZ11cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0VmFsdWVCeVN0cmluZyhzOiBzdHJpbmcgfCBjc21TdHJpbmcpOiBWYWx1ZSB7XHJcbiAgICBpZiAocyBpbnN0YW5jZW9mIGNzbVN0cmluZykge1xyXG4gICAgICBjb25zdCByZXQ6IFZhbHVlID0gdGhpcy5fbWFwLmdldFZhbHVlKHMucyk7XHJcbiAgICAgIGlmIChyZXQgPT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiBWYWx1ZS5udWxsVmFsdWU7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHJldDtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKFxyXG4gICAgICBsZXQgaXRlcjogY3NtTWFwX2l0ZXJhdG9yPHN0cmluZywgVmFsdWU+ID0gdGhpcy5fbWFwLmJlZ2luKCk7XHJcbiAgICAgIGl0ZXIubm90RXF1YWwodGhpcy5fbWFwLmVuZCgpKTtcclxuICAgICAgaXRlci5wcmVJbmNyZW1lbnQoKVxyXG4gICAgKSB7XHJcbiAgICAgIGlmIChpdGVyLnB0cigpLmZpcnN0ID09IHMpIHtcclxuICAgICAgICBpZiAoaXRlci5wdHIoKS5zZWNvbmQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgcmV0dXJuIFZhbHVlLm51bGxWYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGl0ZXIucHRyKCkuc2Vjb25kO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFZhbHVlLm51bGxWYWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOa3u+Wtl+a8lOeul+WtkFtpbmRleF1cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0VmFsdWVCeUluZGV4KGluZGV4OiBudW1iZXIpOiBWYWx1ZSB7XHJcbiAgICByZXR1cm4gVmFsdWUuZXJyb3JWYWx1ZS5zZXRFcnJvck5vdEZvckNsaWVudENhbGwoXHJcbiAgICAgIENTTV9KU09OX0VSUk9SX1RZUEVfTUlTTUFUQ0hcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDopoHntKDjgpLmloflrZfliJfjgafov5TjgZkoY3NtU3RyaW5n5Z6LKVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRTdHJpbmcoZGVmYXVsdFZhbHVlOiBzdHJpbmcsIGluZGVudDogc3RyaW5nKSB7XHJcbiAgICB0aGlzLl9zdHJpbmdCdWZmZXIgPSBpbmRlbnQgKyAne1xcbic7XHJcblxyXG4gICAgY29uc3QgaXRlOiBjc21NYXBfaXRlcmF0b3I8c3RyaW5nLCBWYWx1ZT4gPSB0aGlzLl9tYXAuYmVnaW4oKTtcclxuICAgIHdoaWxlIChpdGUubm90RXF1YWwodGhpcy5fbWFwLmVuZCgpKSkge1xyXG4gICAgICBjb25zdCBrZXkgPSBpdGUucHRyKCkuZmlyc3Q7XHJcbiAgICAgIGNvbnN0IHY6IFZhbHVlID0gaXRlLnB0cigpLnNlY29uZDtcclxuXHJcbiAgICAgIHRoaXMuX3N0cmluZ0J1ZmZlciArPVxyXG4gICAgICAgIGluZGVudCArICcgJyArIGtleSArICcgOiAnICsgdi5nZXRTdHJpbmcoaW5kZW50ICsgJyAgICcpICsgJyBcXG4nO1xyXG4gICAgICBpdGUucHJlSW5jcmVtZW50KCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fc3RyaW5nQnVmZmVyICs9IGluZGVudCArICd9XFxuJztcclxuXHJcbiAgICByZXR1cm4gdGhpcy5fc3RyaW5nQnVmZmVyO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6KaB57Sg44KSTWFw5Z6L44Gn6L+U44GZXHJcbiAgICovXHJcbiAgcHVibGljIGdldE1hcChkZWZhdWx0VmFsdWU/OiBjc21NYXA8c3RyaW5nLCBWYWx1ZT4pOiBjc21NYXA8c3RyaW5nLCBWYWx1ZT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX21hcDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE1hcOOBq+imgee0oOOCkui/veWKoOOBmeOCi1xyXG4gICAqL1xyXG4gIHB1YmxpYyBwdXQoa2V5OiBzdHJpbmcsIHY6IFZhbHVlKTogdm9pZCB7XHJcbiAgICB0aGlzLl9tYXAuc2V0VmFsdWUoa2V5LCB2KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE1hcOOBi+OCieOCreODvOOBruODquOCueODiOOCkuWPluW+l+OBmeOCi1xyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRLZXlzKCk6IGNzbVZlY3RvcjxzdHJpbmc+IHtcclxuICAgIGlmICghdGhpcy5fa2V5cykge1xyXG4gICAgICB0aGlzLl9rZXlzID0gbmV3IGNzbVZlY3RvcjxzdHJpbmc+KCk7XHJcblxyXG4gICAgICBjb25zdCBpdGU6IGNzbU1hcF9pdGVyYXRvcjxzdHJpbmcsIFZhbHVlPiA9IHRoaXMuX21hcC5iZWdpbigpO1xyXG5cclxuICAgICAgd2hpbGUgKGl0ZS5ub3RFcXVhbCh0aGlzLl9tYXAuZW5kKCkpKSB7XHJcbiAgICAgICAgY29uc3Qga2V5OiBzdHJpbmcgPSBpdGUucHRyKCkuZmlyc3Q7XHJcbiAgICAgICAgdGhpcy5fa2V5cy5wdXNoQmFjayhrZXkpO1xyXG4gICAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuX2tleXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNYXDjga7opoHntKDmlbDjgpLlj5blvpfjgZnjgotcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0U2l6ZSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2tleXMuZ2V0U2l6ZSgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfbWFwOiBjc21NYXA8c3RyaW5nLCBWYWx1ZT47IC8vIEpTT07opoHntKDjga7lgKRcclxuICBwcml2YXRlIF9rZXlzOiBjc21WZWN0b3I8c3RyaW5nPjsgLy8gSlNPTuimgee0oOOBruWApFxyXG59XHJcblxyXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cclxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbWpzb24nO1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbUpzb24gPSAkLkN1YmlzbUpzb247XHJcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtSnNvbiA9ICQuQ3ViaXNtSnNvbjtcclxuICBleHBvcnQgY29uc3QgSnNvbkFycmF5ID0gJC5Kc29uQXJyYXk7XHJcbiAgZXhwb3J0IHR5cGUgSnNvbkFycmF5ID0gJC5Kc29uQXJyYXk7XHJcbiAgZXhwb3J0IGNvbnN0IEpzb25Cb29sZWFuID0gJC5Kc29uQm9vbGVhbjtcclxuICBleHBvcnQgdHlwZSBKc29uQm9vbGVhbiA9ICQuSnNvbkJvb2xlYW47XHJcbiAgZXhwb3J0IGNvbnN0IEpzb25FcnJvciA9ICQuSnNvbkVycm9yO1xyXG4gIGV4cG9ydCB0eXBlIEpzb25FcnJvciA9ICQuSnNvbkVycm9yO1xyXG4gIGV4cG9ydCBjb25zdCBKc29uRmxvYXQgPSAkLkpzb25GbG9hdDtcclxuICBleHBvcnQgdHlwZSBKc29uRmxvYXQgPSAkLkpzb25GbG9hdDtcclxuICBleHBvcnQgY29uc3QgSnNvbk1hcCA9ICQuSnNvbk1hcDtcclxuICBleHBvcnQgdHlwZSBKc29uTWFwID0gJC5Kc29uTWFwO1xyXG4gIGV4cG9ydCBjb25zdCBKc29uTnVsbHZhbHVlID0gJC5Kc29uTnVsbHZhbHVlO1xyXG4gIGV4cG9ydCB0eXBlIEpzb25OdWxsdmFsdWUgPSAkLkpzb25OdWxsdmFsdWU7XHJcbiAgZXhwb3J0IGNvbnN0IEpzb25TdHJpbmcgPSAkLkpzb25TdHJpbmc7XHJcbiAgZXhwb3J0IHR5cGUgSnNvblN0cmluZyA9ICQuSnNvblN0cmluZztcclxuICBleHBvcnQgY29uc3QgVmFsdWUgPSAkLlZhbHVlO1xyXG4gIGV4cG9ydCB0eXBlIFZhbHVlID0gJC5WYWx1ZTtcclxufVxyXG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBMb2dMZXZlbCB9IGZyb20gJ0BmcmFtZXdvcmsvbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcblxuLyoqXG4gKiBTYW1wbGUgQXBw44Gn5L2/55So44GZ44KL5a6a5pWwXG4gKi9cblxuLy8g55S76Z2iXG5leHBvcnQgY29uc3QgVmlld1NjYWxlID0gMS4wO1xuZXhwb3J0IGNvbnN0IFZpZXdNYXhTY2FsZSA9IDIuMDtcbmV4cG9ydCBjb25zdCBWaWV3TWluU2NhbGUgPSAwLjg7XG5cbmV4cG9ydCBjb25zdCBWaWV3TG9naWNhbExlZnQgPSAtMS4wO1xuZXhwb3J0IGNvbnN0IFZpZXdMb2dpY2FsUmlnaHQgPSAxLjA7XG5leHBvcnQgY29uc3QgVmlld0xvZ2ljYWxCb3R0b20gPSAtMS4wO1xuZXhwb3J0IGNvbnN0IFZpZXdMb2dpY2FsVG9wID0gMS4wO1xuXG5leHBvcnQgY29uc3QgVmlld0xvZ2ljYWxNYXhMZWZ0ID0gLTIuMDtcbmV4cG9ydCBjb25zdCBWaWV3TG9naWNhbE1heFJpZ2h0ID0gMi4wO1xuZXhwb3J0IGNvbnN0IFZpZXdMb2dpY2FsTWF4Qm90dG9tID0gLTIuMDtcbmV4cG9ydCBjb25zdCBWaWV3TG9naWNhbE1heFRvcCA9IDIuMDtcblxuLy8g5aSW6YOo5a6a576p44OV44Kh44Kk44Or77yIanNvbu+8ieOBqOWQiOOCj+OBm+OCi1xuZXhwb3J0IGNvbnN0IE1vdGlvbkdyb3VwSWRsZSA9ICdJZGxlJzsgLy8g44Ki44Kk44OJ44Oq44Oz44KwXG5leHBvcnQgY29uc3QgTW90aW9uR3JvdXBUYXBCb2R5ID0gJ1RhcEJvZHknOyAvLyDkvZPjgpLjgr/jg4Pjg5fjgZfjgZ/jgajjgY1cblxuLy8g5aSW6YOo5a6a576p44OV44Kh44Kk44Or77yIanNvbu+8ieOBqOWQiOOCj+OBm+OCi1xuZXhwb3J0IGNvbnN0IEhpdEFyZWFOYW1lSGVhZCA9ICdIZWFkJztcbmV4cG9ydCBjb25zdCBIaXRBcmVhTmFtZUJvZHkgPSAnQm9keSc7XG5cbi8vIOODouODvOOCt+ODp+ODs+OBruWEquWFiOW6puWumuaVsFxuZXhwb3J0IGNvbnN0IFByaW9yaXR5Tm9uZSA9IDA7XG5leHBvcnQgY29uc3QgUHJpb3JpdHlJZGxlID0gMTtcbmV4cG9ydCBjb25zdCBQcmlvcml0eU5vcm1hbCA9IDI7XG5leHBvcnQgY29uc3QgUHJpb3JpdHlGb3JjZSA9IDM7XG5cbi8vIOODh+ODkOODg+OCsOeUqOODreOCsOOBruihqOekuuOCquODl+OCt+ODp+ODs1xuZXhwb3J0IGNvbnN0IERlYnVnTG9nRW5hYmxlID0gdHJ1ZTtcbmV4cG9ydCBjb25zdCBEZWJ1Z1RvdWNoTG9nRW5hYmxlID0gZmFsc2U7XG5cbi8vIEZyYW1ld29ya+OBi+OCieWHuuWKm+OBmeOCi+ODreOCsOOBruODrOODmeODq+ioreWumlxuZXhwb3J0IGNvbnN0IEN1YmlzbUxvZ2dpbmdMZXZlbDogTG9nTGV2ZWwgPSBMb2dMZXZlbC5Mb2dMZXZlbF9WZXJib3NlO1xuIiwiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQgeyBDdWJpc21GcmFtZXdvcmssIE9wdGlvbiB9IGZyb20gJ0BmcmFtZXdvcmsvbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcclxuXHJcbmltcG9ydCAqIGFzIExBcHBEZWZpbmUgZnJvbSAnLi9sYXBwZGVmaW5lJztcclxuaW1wb3J0IHsgTEFwcExpdmUyRE1hbmFnZXIgfSBmcm9tICcuL2xhcHBsaXZlMmRtYW5hZ2VyJztcclxuaW1wb3J0IHsgTEFwcFBhbCB9IGZyb20gJy4vbGFwcHBhbCc7XHJcbmltcG9ydCB7IExBcHBUZXh0dXJlTWFuYWdlciB9IGZyb20gJy4vbGFwcHRleHR1cmVtYW5hZ2VyJztcclxuaW1wb3J0IHsgTEFwcFZpZXcgfSBmcm9tICcuL2xhcHB2aWV3JztcclxuaW1wb3J0IHsgTGl2ZTJkQVBJIH0gZnJvbSAnLi9tYWluJztcclxuXHJcbmV4cG9ydCBsZXQgbGl2ZTJkX3ZpZXc6IEhUTUxDYW52YXNFbGVtZW50ID0gbnVsbDtcclxuZXhwb3J0IGxldCBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0ID0gbnVsbDtcclxuZXhwb3J0IGxldCBmcmFtZUJ1ZmZlcjogV2ViR0xGcmFtZWJ1ZmZlciA9IG51bGw7XHJcblxyXG4vKipcclxuICog44Ki44OX44Oq44Kx44O844K344On44Oz44Kv44Op44K544CCXHJcbiAqIEN1YmlzbSBTREvjga7nrqHnkIbjgpLooYzjgYbjgIJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBMQXBwRGVsZWdhdGUge1xyXG4gIC8qKlxyXG4gICAqIEFQUOOBq+W/heimgeOBqueJqeOCkuWIneacn+WMluOBmeOCi+OAglxyXG4gICAqL1xyXG4gIHB1YmxpYyBpbml0aWFsaXplKHdpZHRoOm51bWJlciwgaGVpZ2h0Om51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgLy8g44Kt44Oj44Oz44OQ44K544Gu5L2c5oiQXHJcbiAgICBsaXZlMmRfdmlldyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpOyBcclxuICAgIGxpdmUyZF92aWV3LndpZHRoID0gdGhpcy5fd2lkdGggPSB3aWR0aDtcclxuICAgIGxpdmUyZF92aWV3LmhlaWdodCA9IHRoaXMuX2hlaWdodCA9IGhlaWdodDtcclxuICAgIC8vIGds44Kz44Oz44OG44Kt44K544OI44KS5Yid5pyf5YyWXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBnbCA9IGxpdmUyZF92aWV3LmdldENvbnRleHQoJ3dlYmdsJykgfHwgbGl2ZTJkX3ZpZXcuZ2V0Q29udGV4dCgnZXhwZXJpbWVudGFsLXdlYmdsJyk7XHJcblxyXG4gICAgaWYgKCFnbCkge1xyXG4gICAgICBhbGVydCgnQ2Fubm90IGluaXRpYWxpemUgV2ViR0wuIFRoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0LicpO1xyXG4gICAgICBnbCA9IG51bGw7XHJcbiAgICAgIC8vIGds5Yid5pyf5YyW5aSx5pWXXHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyDjgq3jg6Pjg7Pjg5DjgrnjgpIgRE9NIOOBq+i/veWKoFxyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsaXZlMmRfdmlldyk7XHJcblxyXG4gICAgaWYgKCFmcmFtZUJ1ZmZlcikge1xyXG4gICAgICBmcmFtZUJ1ZmZlciA9IGdsLmdldFBhcmFtZXRlcihnbC5GUkFNRUJVRkZFUl9CSU5ESU5HKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDpgI/pgY7oqK3lrppcclxuICAgIGdsLmVuYWJsZShnbC5CTEVORCk7XHJcbiAgICBnbC5ibGVuZEZ1bmMoZ2wuU1JDX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcclxuXHJcbiAgICAvLyBBcHBWaWV344Gu5Yid5pyf5YyWXHJcbiAgICB0aGlzLl92aWV3LmluaXRpYWxpemUoKTtcclxuXHJcbiAgICAvLyBDdWJpc20gU0RL44Gu5Yid5pyf5YyWXHJcbiAgICB0aGlzLmluaXRpYWxpemVDdWJpc20oKTtcclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc2l6ZSBjYW52YXMgYW5kIHJlLWluaXRpYWxpemUgdmlldy5cclxuICAgKi9cclxuICBwdWJsaWMgb25SZXNpemUod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgIGlmICh3aWR0aCA9PSAwIHx8IGhlaWdodCA9PSAwKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiW0FQUF1zaXplIGNhbid0IG5vdCBiZSB6ZXJvLlwiKTtcclxuICAgICAgcmV0dXJuIGZhbHNlOyBcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl93aWR0aCA9IHdpZHRoO1xyXG4gICAgdGhpcy5faGVpZ2h0ID0gaGVpZ2h0O1xyXG5cclxuICAgIHRoaXMuX3Jlc2l6ZUNhbnZhcygpO1xyXG4gICAgdGhpcy5fdmlldy5pbml0aWFsaXplKCk7XHJcbiAgICB0aGlzLl92aWV3LmluaXRpYWxpemVTcHJpdGUoKTtcclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOino+aUvuOBmeOCi+OAglxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5fdGV4dHVyZU1hbmFnZXIucmVsZWFzZSgpO1xyXG4gICAgdGhpcy5fdGV4dHVyZU1hbmFnZXIgPSBudWxsO1xyXG5cclxuICAgIHRoaXMuX3ZpZXcucmVsZWFzZSgpO1xyXG4gICAgdGhpcy5fdmlldyA9IG51bGw7XHJcblxyXG4gICAgLy8g44Oq44K944O844K544KS6Kej5pS+XHJcbiAgICB0aGlzLl9tYW5hZ2VyID0gbnVsbDtcclxuXHJcbiAgICAvLyBDdWJpc20gU0RL44Gu6Kej5pS+XHJcbiAgICBDdWJpc21GcmFtZXdvcmsuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5a6f6KGM5Yem55CG44CCXHJcbiAgICovXHJcbiAgcHVibGljIHJ1bigpOiB2b2lkIHtcclxuICAgIC8vIOODoeOCpOODs+ODq+ODvOODl1xyXG4gICAgY29uc3QgbG9vcCA9ICgpOiB2b2lkID0+IHtcclxuXHJcbiAgICAgIC8vIOaZgumWk+abtOaWsFxyXG4gICAgICBMQXBwUGFsLnVwZGF0ZVRpbWUoKTtcclxuXHJcbiAgICAgIC8vIOeUu+mdouOBruWIneacn+WMllxyXG4gICAgICBnbC5jbGVhckNvbG9yKDAuMCwgMC4wLCAwLjAsIDAuMCk7XHJcblxyXG4gICAgICAvLyDmt7Hluqbjg4bjgrnjg4jjgpLmnInlirnljJZcclxuICAgICAgZ2wuZW5hYmxlKGdsLkRFUFRIX1RFU1QpO1xyXG5cclxuICAgICAgLy8g6L+R44GP44Gr44GC44KL54mp5L2T44Gv44CB6YGg44GP44Gr44GC44KL54mp5L2T44KS6KaG44GE6Zqg44GZXHJcbiAgICAgIGdsLmRlcHRoRnVuYyhnbC5MRVFVQUwpO1xyXG5cclxuICAgICAgLy8g44Kr44Op44O844OQ44OD44OV44Kh44KE5rex5bqm44OQ44OD44OV44Kh44KS44Kv44Oq44Ki44GZ44KLXHJcbiAgICAgIGdsLmNsZWFyKGdsLkNPTE9SX0JVRkZFUl9CSVQgfCBnbC5ERVBUSF9CVUZGRVJfQklUKTtcclxuXHJcbiAgICAgIGdsLmNsZWFyRGVwdGgoMS4wKTtcclxuXHJcbiAgICAgIC8vIOmAj+mBjuioreWumlxyXG4gICAgICBnbC5lbmFibGUoZ2wuQkxFTkQpO1xyXG4gICAgICBnbC5ibGVuZEZ1bmMoZ2wuU1JDX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcclxuXHJcbiAgICAgIC8vIOaPj+eUu+abtOaWsFxyXG4gICAgICB0aGlzLl92aWV3LnJlbmRlcigpO1xyXG5cclxuICAgICAgLy8g44Or44O844OX44Gu44Gf44KB44Gr5YaN5biw5ZG844Gz5Ye644GXXHJcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcclxuICAgIH07XHJcbiAgICBsb29wKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjgrfjgqfjg7zjg4Djg7zjgpLnmbvpjLLjgZnjgovjgIJcclxuICAgKi9cclxuICBwdWJsaWMgY3JlYXRlU2hhZGVyKCk6IFdlYkdMUHJvZ3JhbSB7XHJcbiAgICAvLyDjg5Djg7zjg4bjg4Pjgq/jgrnjgrfjgqfjg7zjg4Djg7zjga7jgrPjg7Pjg5HjgqTjg6tcclxuICAgIGNvbnN0IHZlcnRleFNoYWRlcklkID0gZ2wuY3JlYXRlU2hhZGVyKGdsLlZFUlRFWF9TSEFERVIpO1xyXG5cclxuICAgIGlmICh2ZXJ0ZXhTaGFkZXJJZCA9PSBudWxsKSB7XHJcbiAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKCdmYWlsZWQgdG8gY3JlYXRlIHZlcnRleFNoYWRlcicpO1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB2ZXJ0ZXhTaGFkZXI6IHN0cmluZyA9XHJcbiAgICAgICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnICtcclxuICAgICAgJ2F0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uOycgK1xyXG4gICAgICAnYXR0cmlidXRlIHZlYzIgdXY7JyArXHJcbiAgICAgICd2YXJ5aW5nIHZlYzIgdnV2OycgK1xyXG4gICAgICAndm9pZCBtYWluKHZvaWQpJyArXHJcbiAgICAgICd7JyArXHJcbiAgICAgICcgICBnbF9Qb3NpdGlvbiA9IHZlYzQocG9zaXRpb24sIDEuMCk7JyArXHJcbiAgICAgICcgICB2dXYgPSB1djsnICtcclxuICAgICAgJ30nO1xyXG5cclxuICAgIGdsLnNoYWRlclNvdXJjZSh2ZXJ0ZXhTaGFkZXJJZCwgdmVydGV4U2hhZGVyKTtcclxuICAgIGdsLmNvbXBpbGVTaGFkZXIodmVydGV4U2hhZGVySWQpO1xyXG5cclxuICAgIC8vIOODleODqeOCsOODoeODs+ODiOOCt+OCp+ODvOODgOOBruOCs+ODs+ODkeOCpOODq1xyXG4gICAgY29uc3QgZnJhZ21lbnRTaGFkZXJJZCA9IGdsLmNyZWF0ZVNoYWRlcihnbC5GUkFHTUVOVF9TSEFERVIpO1xyXG5cclxuICAgIGlmIChmcmFnbWVudFNoYWRlcklkID09IG51bGwpIHtcclxuICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoJ2ZhaWxlZCB0byBjcmVhdGUgZnJhZ21lbnRTaGFkZXInKTtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZnJhZ21lbnRTaGFkZXI6IHN0cmluZyA9XHJcbiAgICAgICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnICtcclxuICAgICAgJ3ZhcnlpbmcgdmVjMiB2dXY7JyArXHJcbiAgICAgICd1bmlmb3JtIHNhbXBsZXIyRCB0ZXh0dXJlOycgK1xyXG4gICAgICAndm9pZCBtYWluKHZvaWQpJyArXHJcbiAgICAgICd7JyArXHJcbiAgICAgICcgICBnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQodGV4dHVyZSwgdnV2KTsnICtcclxuICAgICAgJ30nO1xyXG5cclxuICAgIGdsLnNoYWRlclNvdXJjZShmcmFnbWVudFNoYWRlcklkLCBmcmFnbWVudFNoYWRlcik7XHJcbiAgICBnbC5jb21waWxlU2hhZGVyKGZyYWdtZW50U2hhZGVySWQpO1xyXG5cclxuICAgIC8vIOODl+ODreOCsOODqeODoOOCquODluOCuOOCp+OCr+ODiOOBruS9nOaIkFxyXG4gICAgY29uc3QgcHJvZ3JhbUlkID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xyXG4gICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW1JZCwgdmVydGV4U2hhZGVySWQpO1xyXG4gICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW1JZCwgZnJhZ21lbnRTaGFkZXJJZCk7XHJcblxyXG4gICAgZ2wuZGVsZXRlU2hhZGVyKHZlcnRleFNoYWRlcklkKTtcclxuICAgIGdsLmRlbGV0ZVNoYWRlcihmcmFnbWVudFNoYWRlcklkKTtcclxuXHJcbiAgICAvLyDjg6rjg7Pjgq9cclxuICAgIGdsLmxpbmtQcm9ncmFtKHByb2dyYW1JZCk7XHJcblxyXG4gICAgZ2wudXNlUHJvZ3JhbShwcm9ncmFtSWQpO1xyXG5cclxuICAgIHJldHVybiBwcm9ncmFtSWQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBWaWV35oOF5aCx44KS5Y+W5b6X44GZ44KL44CCXHJcbiAgICovXHJcbiAgcHVibGljIGdldFZpZXcoKTogTEFwcFZpZXcge1xyXG4gICAgcmV0dXJuIHRoaXMuX3ZpZXc7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0VGV4dHVyZU1hbmFnZXIoKTogTEFwcFRleHR1cmVNYW5hZ2VyIHtcclxuICAgIHJldHVybiB0aGlzLl90ZXh0dXJlTWFuYWdlcjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKGFwaTogTGl2ZTJkQVBJKSB7XHJcbiAgICB0aGlzLl9hcGkgPSBhcGk7XHJcbiAgICB0aGlzLl9jYXB0dXJlZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5fbW91c2VYID0gMC4wO1xyXG4gICAgdGhpcy5fbW91c2VZID0gMC4wO1xyXG4gICAgdGhpcy5faXNFbmQgPSBmYWxzZTtcclxuXHJcbiAgICB0aGlzLl9jdWJpc21PcHRpb24gPSBuZXcgT3B0aW9uKCk7XHJcbiAgICB0aGlzLl9tYW5hZ2VyID0gbmV3IExBcHBMaXZlMkRNYW5hZ2VyKHRoaXMsIHRoaXMuX2FwaSk7XHJcbiAgICB0aGlzLl92aWV3ID0gbmV3IExBcHBWaWV3KHRoaXMsIHRoaXMuX21hbmFnZXIpO1xyXG4gICAgdGhpcy5fdGV4dHVyZU1hbmFnZXIgPSBuZXcgTEFwcFRleHR1cmVNYW5hZ2VyKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDdWJpc20gU0RL44Gu5Yid5pyf5YyWXHJcbiAgICovXHJcbiAgcHVibGljIGluaXRpYWxpemVDdWJpc20oKTogdm9pZCB7XHJcbiAgICAvLyBzZXR1cCBjdWJpc21cclxuICAgIHRoaXMuX2N1YmlzbU9wdGlvbi5sb2dGdW5jdGlvbiA9IExBcHBQYWwucHJpbnRNZXNzYWdlO1xyXG4gICAgdGhpcy5fY3ViaXNtT3B0aW9uLmxvZ2dpbmdMZXZlbCA9IExBcHBEZWZpbmUuQ3ViaXNtTG9nZ2luZ0xldmVsO1xyXG4gICAgQ3ViaXNtRnJhbWV3b3JrLnN0YXJ0VXAodGhpcy5fY3ViaXNtT3B0aW9uKTtcclxuXHJcbiAgICAvLyBpbml0aWFsaXplIGN1YmlzbVxyXG4gICAgQ3ViaXNtRnJhbWV3b3JrLmluaXRpYWxpemUoKTtcclxuXHJcbiAgICBMQXBwUGFsLnVwZGF0ZVRpbWUoKTtcclxuXHJcbiAgICB0aGlzLl92aWV3LmluaXRpYWxpemVTcHJpdGUoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc2l6ZSB0aGUgY2FudmFzIHRvIGZpbGwgdGhlIHNjcmVlbi5cclxuICAgKi9cclxuICBwdWJsaWMgX3Jlc2l6ZUNhbnZhcygpOiB2b2lkIHtcclxuICAgIGxpdmUyZF92aWV3LndpZHRoID0gdGhpcy5fd2lkdGg7XHJcbiAgICBsaXZlMmRfdmlldy5oZWlnaHQgPSB0aGlzLl9oZWlnaHQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICog44K/44OD44OB44GX44Gf44Go44GN44Gr5ZG844Gw44KM44KL44CCXHJcbiAqL1xyXG4gIHB1YmxpYyBvblRvdWNoQmVnYW4oZTogVG91Y2hFdmVudCk6IHZvaWQge1xyXG4gICAgaWYgKCF0aGlzLl92aWV3KSB7XHJcbiAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKCd2aWV3IG5vdGZvdW5kJyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9jYXB0dXJlZCA9IHRydWU7XHJcblxyXG4gICAgY29uc3QgcG9zWCA9IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVg7XHJcbiAgICBjb25zdCBwb3NZID0gZS5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWTtcclxuXHJcbiAgICB0aGlzLl92aWV3Lm9uVG91Y2hlc0JlZ2FuKHBvc1gsIHBvc1kpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44K544Ov44Kk44OX44GZ44KL44Go5ZG844Gw44KM44KL44CCXHJcbiAgICovXHJcbiAgcHVibGljIG9uVG91Y2hNb3ZlZChlOiBUb3VjaEV2ZW50KTogdm9pZCB7XHJcbiAgICBpZiAoIXRoaXMuX2NhcHR1cmVkKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIXRoaXMuX3ZpZXcpIHtcclxuICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoJ3ZpZXcgbm90Zm91bmQnKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJlY3QgPSAoZS50YXJnZXQgYXMgRWxlbWVudCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblxyXG4gICAgY29uc3QgcG9zWCA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WCAtIHJlY3QubGVmdDtcclxuICAgIGNvbnN0IHBvc1kgPSBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFkgLSByZWN0LnRvcDtcclxuXHJcbiAgICB0aGlzLl92aWV3Lm9uVG91Y2hlc01vdmVkKHBvc1gsIHBvc1kpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44K/44OD44OB44GM57WC5LqG44GX44Gf44KJ5ZG844Gw44KM44KL44CCXHJcbiAgICovXHJcbiAgcHVibGljIG9uVG91Y2hFbmRlZChlOiBUb3VjaEV2ZW50KTogdm9pZCB7XHJcbiAgICB0aGlzLl9jYXB0dXJlZCA9IGZhbHNlO1xyXG5cclxuICAgIGlmICghdGhpcy5fdmlldykge1xyXG4gICAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgndmlldyBub3Rmb3VuZCcpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcmVjdCA9IChlLnRhcmdldCBhcyBFbGVtZW50KS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHJcbiAgICBjb25zdCBwb3NYID0gZS5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRYIC0gcmVjdC5sZWZ0O1xyXG4gICAgY29uc3QgcG9zWSA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WSAtIHJlY3QudG9wO1xyXG5cclxuICAgIHRoaXMuX3ZpZXcub25Ub3VjaGVzRW5kZWQocG9zWCwgcG9zWSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0TWFuYWdlcigpIHtcclxuICAgIHJldHVybiB0aGlzLl9tYW5hZ2VyO1xyXG4gIH1cclxuXHJcbiAgX3dpZHRoOiBudW1iZXI7XHJcbiAgX2hlaWdodDogbnVtYmVyO1xyXG4gIF9hcGk6IExpdmUyZEFQSTtcclxuICBfbWFuYWdlcjogTEFwcExpdmUyRE1hbmFnZXI7XHJcbiAgX2N1YmlzbU9wdGlvbjogT3B0aW9uOyAvLyBDdWJpc20gU0RLIE9wdGlvblxyXG4gIF92aWV3OiBMQXBwVmlldzsgLy8gVmlld+aDheWgsVxyXG4gIF9jYXB0dXJlZDogYm9vbGVhbjsgLy8g44Kv44Oq44OD44Kv44GX44Gm44GE44KL44GLXHJcbiAgX21vdXNlWDogbnVtYmVyOyAvLyDjg57jgqbjgrlY5bqn5qiZXHJcbiAgX21vdXNlWTogbnVtYmVyOyAvLyDjg57jgqbjgrlZ5bqn5qiZXHJcbiAgX2lzRW5kOiBib29sZWFuOyAvLyBBUFDntYLkuobjgZfjgabjgYTjgovjgYtcclxuICBfdGV4dHVyZU1hbmFnZXI6IExBcHBUZXh0dXJlTWFuYWdlcjsgLy8g44OG44Kv44K544OB44Oj44Oe44ON44O844K444Oj44O8XHJcbn0iLCIvKipcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEN1YmlzbU1hdHJpeDQ0IH0gZnJvbSAnQGZyYW1ld29yay9tYXRoL2N1YmlzbW1hdHJpeDQ0JztcclxuaW1wb3J0IHsgQUN1YmlzbU1vdGlvbiB9IGZyb20gJ0BmcmFtZXdvcmsvbW90aW9uL2FjdWJpc21tb3Rpb24nO1xyXG5cclxuaW1wb3J0ICogYXMgTEFwcERlZmluZSBmcm9tICcuL2xhcHBkZWZpbmUnO1xyXG5pbXBvcnQgeyBMQXBwRGVsZWdhdGUsIGxpdmUyZF92aWV3IH0gZnJvbSAnLi9sYXBwZGVsZWdhdGUnO1xyXG5pbXBvcnQgeyBMQXBwTW9kZWwgfSBmcm9tICcuL2xhcHBtb2RlbCc7XHJcbmltcG9ydCB7IExBcHBQYWwgfSBmcm9tICcuL2xhcHBwYWwnO1xyXG5pbXBvcnQgeyBMaXZlMmRBUEkgfSBmcm9tICcuL21haW4nO1xyXG5cclxuLyoqXHJcbiAqIOOCteODs+ODl+ODq+OCouODl+ODquOCseODvOOCt+ODp+ODs+OBq+OBiuOBhOOBpkN1YmlzbU1vZGVs44KS566h55CG44GZ44KL44Kv44Op44K5XHJcbiAqIOODouODh+ODq+eUn+aIkOOBqOegtOajhOOAgeOCv+ODg+ODl+OCpOODmeODs+ODiOOBruWHpueQhuOAgeODouODh+ODq+WIh+OCiuabv+OBiOOCkuihjOOBhuOAglxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIExBcHBMaXZlMkRNYW5hZ2VyIHtcclxuICAvKipcclxuICAgKiDnj77lnKjjga7jgrfjg7zjg7Pjgafkv53mjIHjgZfjgabjgYTjgovjg6Ljg4fjg6vjgpLov5TjgZnjgIJcclxuICAgKlxyXG4gICAqIEByZXR1cm4g44Oi44OH44Or44Gu44Kk44Oz44K544K/44Oz44K544KS6L+U44GZ44CC44Kk44Oz44OH44OD44Kv44K55YCk44GM56+E5Zuy5aSW44Gu5aC05ZCI44GvTlVMTOOCkui/lOOBmeOAglxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRNb2RlbCgpOiBMQXBwTW9kZWwge1xyXG4gICAgcmV0dXJuIHRoaXMuX21vZGVsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog54++5Zyo44Gu44K344O844Oz44Gn5L+d5oyB44GX44Gm44GE44KL44GZ44G544Gm44Gu44Oi44OH44Or44KS6Kej5pS+44GZ44KLXHJcbiAgICovXHJcbiAgcHVibGljIHJlbGVhc2VBbGxNb2RlbCgpOiB2b2lkIHtcclxuICAgIHRoaXMuX21vZGVsPy5yZWxlYXNlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDnlLvpnaLjgpLjg4njg6njg4PjgrDjgZfjgZ/mmYLjga7lh6bnkIZcclxuICAgKlxyXG4gICAqIEBwYXJhbSB4IOeUu+mdouOBrljluqfmqJlcclxuICAgKiBAcGFyYW0geSDnlLvpnaLjga5Z5bqn5qiZXHJcbiAgICovXHJcbiAgcHVibGljIG9uRHJhZyh4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuX21vZGVsKSB7XHJcbiAgICAgIHRoaXMuX21vZGVsLnNldERyYWdnaW5nKHgsIHkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog55S76Z2i44KS44K/44OD44OX44GX44Gf5pmC44Gu5Yem55CGXHJcbiAgICpcclxuICAgKiBAcGFyYW0geCDnlLvpnaLjga5Y5bqn5qiZXHJcbiAgICogQHBhcmFtIHkg55S76Z2i44GuWeW6p+aomVxyXG4gICAqL1xyXG4gIHB1YmxpYyBvblRhcCh4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuX29uVGFwICE9IG51bGwpIHtcclxuICAgICAgdGhpcy5fb25UYXAoeCwgeSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChMQXBwRGVmaW5lLkRlYnVnTG9nRW5hYmxlKSB7XHJcbiAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKFxyXG4gICAgICAgIGBbQVBQXXRhcCBwb2ludDoge3g6ICR7eC50b0ZpeGVkKDIpfSB5OiAke3kudG9GaXhlZCgyKX19YFxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLl9tb2RlbC5oaXRUZXN0KExBcHBEZWZpbmUuSGl0QXJlYU5hbWVIZWFkLCB4LCB5KSkge1xyXG4gICAgICBpZiAoTEFwcERlZmluZS5EZWJ1Z0xvZ0VuYWJsZSkge1xyXG4gICAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKFxyXG4gICAgICAgICAgYFtBUFBdaGl0IGFyZWE6IFske0xBcHBEZWZpbmUuSGl0QXJlYU5hbWVIZWFkfV1gXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLl9tb2RlbC5zZXRSYW5kb21FeHByZXNzaW9uKCk7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuX21vZGVsLmhpdFRlc3QoTEFwcERlZmluZS5IaXRBcmVhTmFtZUJvZHksIHgsIHkpKSB7XHJcbiAgICAgIGlmIChMQXBwRGVmaW5lLkRlYnVnTG9nRW5hYmxlKSB7XHJcbiAgICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoXHJcbiAgICAgICAgICBgW0FQUF1oaXQgYXJlYTogWyR7TEFwcERlZmluZS5IaXRBcmVhTmFtZUJvZHl9XWBcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuX21vZGVsXHJcbiAgICAgICAgLnN0YXJ0UmFuZG9tTW90aW9uKFxyXG4gICAgICAgICAgTEFwcERlZmluZS5Nb3Rpb25Hcm91cFRhcEJvZHksXHJcbiAgICAgICAgICBMQXBwRGVmaW5lLlByaW9yaXR5Tm9ybWFsLFxyXG4gICAgICAgICAgdGhpcy5fZmluaXNoZWRNb3Rpb25cclxuICAgICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog55S76Z2i44KS5pu05paw44GZ44KL44Go44GN44Gu5Yem55CGXHJcbiAgICog44Oi44OH44Or44Gu5pu05paw5Yem55CG5Y+K44Gz5o+P55S75Yem55CG44KS6KGM44GGXHJcbiAgICovXHJcbiAgcHVibGljIG9uVXBkYXRlKCk6IHZvaWQge1xyXG4gICAgaWYgKCF0aGlzLl9tb2RlbClcclxuICAgICAgcmV0dXJuO1xyXG4gICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBsaXZlMmRfdmlldztcclxuXHJcbiAgICBjb25zdCBwcm9qZWN0aW9uOiBDdWJpc21NYXRyaXg0NCA9IG5ldyBDdWJpc21NYXRyaXg0NCgpO1xyXG5cclxuICAgIGlmICh0aGlzLl9tb2RlbC5nZXRNb2RlbCgpKSB7XHJcbiAgICAgIHByb2plY3Rpb24udHJhbnNsYXRlWCh0aGlzLl94KTtcclxuICAgICAgcHJvamVjdGlvbi50cmFuc2xhdGVZKHRoaXMuX3kpO1xyXG5cclxuICAgICAgaWYgKHRoaXMuX21vZGVsLmdldE1vZGVsKCkuZ2V0Q2FudmFzV2lkdGgoKSA+IDEuMCAmJiB3aWR0aCA8IGhlaWdodCkge1xyXG4gICAgICAgIC8vIOaoquOBq+mVt+OBhOODouODh+ODq+OCkue4pumVt+OCpuOCo+ODs+ODieOCpuOBq+ihqOekuuOBmeOCi+mam+ODouODh+ODq+OBruaoquOCteOCpOOCuuOBp3NjYWxl44KS566X5Ye644GZ44KLXHJcbiAgICAgICAgdGhpcy5fbW9kZWwuZ2V0TW9kZWxNYXRyaXgoKS5zZXRXaWR0aCgyLjApO1xyXG4gICAgICB9XHJcbiAgICAgIHByb2plY3Rpb24uc2NhbGUodGhpcy5fc2NhbGUsIHRoaXMuX3NjYWxlKTtcclxuXHJcbiAgICAgIC8vIOW/heimgeOBjOOBguOCjOOBsOOBk+OBk+OBp+S5l+eul1xyXG4gICAgICBpZiAodGhpcy5fdmlld01hdHJpeCAhPSBudWxsKSB7XHJcbiAgICAgICAgcHJvamVjdGlvbi5tdWx0aXBseUJ5TWF0cml4KHRoaXMuX3ZpZXdNYXRyaXgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fbW9kZWwudXBkYXRlKCk7XHJcbiAgICB0aGlzLl9tb2RlbC5kcmF3KHByb2plY3Rpb24pOyAvLyDlj4LnhafmuKHjgZfjgarjga7jgadwcm9qZWN0aW9u44Gv5aSJ6LOq44GZ44KL44CCXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjgrfjg7zjg7PjgpLliIfjgormm7/jgYjjgotcclxuICAgKiDjgrXjg7Pjg5fjg6vjgqLjg5fjg6rjgrHjg7zjgrfjg6fjg7Pjgafjga/jg6Ljg4fjg6vjgrvjg4Pjg4jjga7liIfjgormm7/jgYjjgpLooYzjgYbjgIJcclxuICAgKi9cclxuICBwdWJsaWMgY2hhbmdlU2NlbmUoKTogdm9pZCB7XHJcbiAgICB0aGlzLnJlbGVhc2VBbGxNb2RlbCgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGxvYWRNb2RlbChtb2RlbDogc3RyaW5nLCBwYXRoOiBzdHJpbmcpIHtcclxuICAgIGlmIChMQXBwRGVmaW5lLkRlYnVnTG9nRW5hYmxlKSB7XHJcbiAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKGBbQVBQXW1vZGVsIGxvYWQ6ICR7cGF0aH0vJHttb2RlbH1gKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBtb2RlbDMuanNvbuOBruODkeOCueOCkuaxuuWumuOBmeOCi+OAglxyXG4gICAgLy8g44OH44Kj44Os44Kv44OI44Oq5ZCN44GobW9kZWwzLmpzb27jga7lkI3liY3jgpLkuIDoh7TjgZXjgZvjgabjgYrjgY/jgZPjgajjgIJcclxuICAgIGNvbnN0IG1vZGVsUGF0aDogc3RyaW5nID0gcGF0aCArICcvJztcclxuICAgIGxldCBtb2RlbEpzb25OYW1lOiBzdHJpbmcgPSBtb2RlbCArICcubW9kZWwzLmpzb24nO1xyXG5cclxuICAgIHRoaXMuX21vZGVsID0gbmV3IExBcHBNb2RlbCh0aGlzLl9kZWxlZ2F0ZSwgdGhpcy5fYXBpKTtcclxuICAgIHRoaXMuX21vZGVsLmxvYWRBc3NldHMobW9kZWxQYXRoLCBtb2RlbEpzb25OYW1lKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXRWaWV3TWF0cml4KG06IEN1YmlzbU1hdHJpeDQ0KSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcclxuICAgICAgdGhpcy5fdmlld01hdHJpeC5nZXRBcnJheSgpW2ldID0gbS5nZXRBcnJheSgpW2ldO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIHNldFgoeDogbnVtYmVyKSB7XHJcbiAgICB0aGlzLl94ID0geDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXRZKHk6IG51bWJlcikge1xyXG4gICAgdGhpcy5feSA9IHk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0T25UYXAoY2FsbCkge1xyXG4gICAgdGhpcy5fb25UYXAgPSBjYWxsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoZGVsZWdhdGU6IExBcHBEZWxlZ2F0ZSwgYXBpOiBMaXZlMmRBUEkpIHtcclxuICAgIHRoaXMuX2RlbGVnYXRlID0gZGVsZWdhdGU7XHJcbiAgICB0aGlzLl9hcGkgPSBhcGk7XHJcbiAgICB0aGlzLl92aWV3TWF0cml4ID0gbmV3IEN1YmlzbU1hdHJpeDQ0KCk7XHJcbiAgICB0aGlzLmNoYW5nZVNjZW5lKCk7XHJcbiAgICB0aGlzLl9zY2FsZSA9IDEuMDtcclxuICAgIHRoaXMuX3ggPSAwLjA7XHJcbiAgICB0aGlzLl95ID0gMC4wO1xyXG4gIH1cclxuXHJcbiAgX29uVGFwOiBhbnk7XHJcbiAgX3NjYWxlOiBudW1iZXI7XHJcbiAgX3g6IG51bWJlcjtcclxuICBfeTogbnVtYmVyO1xyXG4gIF9hcGk6IExpdmUyZEFQSTtcclxuICBfZGVsZWdhdGU6IExBcHBEZWxlZ2F0ZTtcclxuICBfdmlld01hdHJpeDogQ3ViaXNtTWF0cml4NDQ7IC8vIOODouODh+ODq+aPj+eUu+OBq+eUqOOBhOOCi3ZpZXfooYzliJdcclxuICBfbW9kZWw6IExBcHBNb2RlbDsgLy8g44Oi44OH44Or44Kk44Oz44K544K/44Oz44K544Gu44Kz44Oz44OG44OKXHJcbiAgLy8g44Oi44O844K344On44Oz5YaN55Sf57WC5LqG44Gu44Kz44O844Or44OQ44OD44Kv6Zai5pWwXHJcbiAgX2ZpbmlzaGVkTW90aW9uID0gKHNlbGY6IEFDdWJpc21Nb3Rpb24pOiB2b2lkID0+IHtcclxuICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKCdNb3Rpb24gRmluaXNoZWQ6Jyk7XHJcbiAgICBjb25zb2xlLmxvZyhzZWxmKTtcclxuICB9O1xyXG59XHJcbiIsIi8qKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuaW1wb3J0ICd3aGF0d2ctZmV0Y2gnO1xyXG5cclxuaW1wb3J0IHsgQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkIH0gZnJvbSAnQGZyYW1ld29yay9jdWJpc21kZWZhdWx0cGFyYW1ldGVyaWQnO1xyXG5pbXBvcnQgeyBDdWJpc21Nb2RlbFNldHRpbmdKc29uIH0gZnJvbSAnQGZyYW1ld29yay9jdWJpc21tb2RlbHNldHRpbmdqc29uJztcclxuaW1wb3J0IHtcclxuICBCcmVhdGhQYXJhbWV0ZXJEYXRhLFxyXG4gIEN1YmlzbUJyZWF0aFxyXG59IGZyb20gJ0BmcmFtZXdvcmsvZWZmZWN0L2N1YmlzbWJyZWF0aCc7XHJcbmltcG9ydCB7IEN1YmlzbUV5ZUJsaW5rIH0gZnJvbSAnQGZyYW1ld29yay9lZmZlY3QvY3ViaXNtZXllYmxpbmsnO1xyXG5pbXBvcnQgeyBJQ3ViaXNtTW9kZWxTZXR0aW5nIH0gZnJvbSAnQGZyYW1ld29yay9pY3ViaXNtbW9kZWxzZXR0aW5nJztcclxuaW1wb3J0IHsgQ3ViaXNtSWRIYW5kbGUgfSBmcm9tICdAZnJhbWV3b3JrL2lkL2N1YmlzbWlkJztcclxuaW1wb3J0IHsgQ3ViaXNtRnJhbWV3b3JrIH0gZnJvbSAnQGZyYW1ld29yay9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xyXG5pbXBvcnQgeyBDdWJpc21NYXRyaXg0NCB9IGZyb20gJ0BmcmFtZXdvcmsvbWF0aC9jdWJpc21tYXRyaXg0NCc7XHJcbmltcG9ydCB7IEN1YmlzbVVzZXJNb2RlbCB9IGZyb20gJ0BmcmFtZXdvcmsvbW9kZWwvY3ViaXNtdXNlcm1vZGVsJztcclxuaW1wb3J0IHtcclxuICBBQ3ViaXNtTW90aW9uLFxyXG4gIEZpbmlzaGVkTW90aW9uQ2FsbGJhY2tcclxufSBmcm9tICdAZnJhbWV3b3JrL21vdGlvbi9hY3ViaXNtbW90aW9uJztcclxuaW1wb3J0IHsgQ3ViaXNtTW90aW9uIH0gZnJvbSAnQGZyYW1ld29yay9tb3Rpb24vY3ViaXNtbW90aW9uJztcclxuaW1wb3J0IHtcclxuICBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlLFxyXG4gIEludmFsaWRNb3Rpb25RdWV1ZUVudHJ5SGFuZGxlVmFsdWVcclxufSBmcm9tICdAZnJhbWV3b3JrL21vdGlvbi9jdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXInO1xyXG5pbXBvcnQgeyBjc21NYXAgfSBmcm9tICdAZnJhbWV3b3JrL3R5cGUvY3NtbWFwJztcclxuaW1wb3J0IHsgY3NtUmVjdCB9IGZyb20gJ0BmcmFtZXdvcmsvdHlwZS9jc21yZWN0Zic7XHJcbmltcG9ydCB7IGNzbVN0cmluZyB9IGZyb20gJ0BmcmFtZXdvcmsvdHlwZS9jc21zdHJpbmcnO1xyXG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICdAZnJhbWV3b3JrL3R5cGUvY3NtdmVjdG9yJztcclxuaW1wb3J0IHsgQ3ViaXNtTG9nSW5mbyB9IGZyb20gJ0BmcmFtZXdvcmsvdXRpbHMvY3ViaXNtZGVidWcnO1xyXG5cclxuaW1wb3J0ICogYXMgTEFwcERlZmluZSBmcm9tICcuL2xhcHBkZWZpbmUnO1xyXG5pbXBvcnQgeyBsaXZlMmRfdmlldywgZnJhbWVCdWZmZXIsIGdsLCBMQXBwRGVsZWdhdGUgfSBmcm9tICcuL2xhcHBkZWxlZ2F0ZSc7XHJcbmltcG9ydCB7IExBcHBQYWwgfSBmcm9tICcuL2xhcHBwYWwnO1xyXG5pbXBvcnQgeyBUZXh0dXJlSW5mbyB9IGZyb20gJy4vbGFwcHRleHR1cmVtYW5hZ2VyJztcclxuaW1wb3J0IHsgTEFwcFdhdkZpbGVIYW5kbGVyIH0gZnJvbSAnLi9sYXBwd2F2ZmlsZWhhbmRsZXInO1xyXG5pbXBvcnQgeyBMaXZlMmRBUEkgfSBmcm9tICcuL21haW4nO1xyXG5pbXBvcnQgeyBKc29uTnVsbHZhbHVlIH0gZnJvbSAnQGZyYW1ld29yay91dGlscy9jdWJpc21qc29uJztcclxuXHJcbmVudW0gTG9hZFN0ZXAge1xyXG4gIExvYWRBc3NldHMsXHJcbiAgTG9hZE1vZGVsLFxyXG4gIFdhaXRMb2FkTW9kZWwsXHJcbiAgTG9hZEV4cHJlc3Npb24sXHJcbiAgV2FpdExvYWRFeHByZXNzaW9uLFxyXG4gIExvYWRQaHlzaWNzLFxyXG4gIFdhaXRMb2FkUGh5c2ljcyxcclxuICBMb2FkUG9zZSxcclxuICBXYWl0TG9hZFBvc2UsXHJcbiAgU2V0dXBFeWVCbGluayxcclxuICBTZXR1cEJyZWF0aCxcclxuICBMb2FkVXNlckRhdGEsXHJcbiAgV2FpdExvYWRVc2VyRGF0YSxcclxuICBTZXR1cEV5ZUJsaW5rSWRzLFxyXG4gIFNldHVwTGlwU3luY0lkcyxcclxuICBTZXR1cExheW91dCxcclxuICBMb2FkTW90aW9uLFxyXG4gIFdhaXRMb2FkTW90aW9uLFxyXG4gIENvbXBsZXRlSW5pdGlhbGl6ZSxcclxuICBDb21wbGV0ZVNldHVwTW9kZWwsXHJcbiAgTG9hZFRleHR1cmUsXHJcbiAgV2FpdExvYWRUZXh0dXJlLFxyXG4gIENvbXBsZXRlU2V0dXBcclxufVxyXG5cclxuLyoqXHJcbiAqIOODpuODvOOCtuODvOOBjOWun+mam+OBq+S9v+eUqOOBmeOCi+ODouODh+ODq+OBruWun+ijheOCr+ODqeOCuTxicj5cclxuICog44Oi44OH44Or55Sf5oiQ44CB5qmf6IO944Kz44Oz44Od44O844ON44Oz44OI55Sf5oiQ44CB5pu05paw5Yem55CG44Go44Os44Oz44OA44Oq44Oz44Kw44Gu5ZG844Gz5Ye644GX44KS6KGM44GG44CCXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTEFwcE1vZGVsIGV4dGVuZHMgQ3ViaXNtVXNlck1vZGVsIHtcclxuICAvKipcclxuICAgKiBtb2RlbDMuanNvbuOBjOe9ruOBi+OCjOOBn+ODh+OCo+ODrOOCr+ODiOODquOBqOODleOCoeOCpOODq+ODkeOCueOBi+OCieODouODh+ODq+OCkueUn+aIkOOBmeOCi1xyXG4gICAqIEBwYXJhbSBkaXJcclxuICAgKiBAcGFyYW0gZmlsZU5hbWVcclxuICAgKi9cclxuICBwdWJsaWMgbG9hZEFzc2V0cyhkaXI6IHN0cmluZywgZmlsZU5hbWU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgdGhpcy5fbW9kZWxIb21lRGlyID0gZGlyO1xyXG5cclxuICAgIGZldGNoKGAke3RoaXMuX21vZGVsSG9tZURpcn0ke2ZpbGVOYW1lfWApXHJcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXHJcbiAgICAgIC50aGVuKGFycmF5QnVmZmVyID0+IHtcclxuICAgICAgICBjb25zdCBzZXR0aW5nOiBJQ3ViaXNtTW9kZWxTZXR0aW5nID0gbmV3IEN1YmlzbU1vZGVsU2V0dGluZ0pzb24oXHJcbiAgICAgICAgICBhcnJheUJ1ZmZlcixcclxuICAgICAgICAgIGFycmF5QnVmZmVyLmJ5dGVMZW5ndGhcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyDjgrnjg4bjg7zjg4jjgpLmm7TmlrBcclxuICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRNb2RlbDtcclxuXHJcbiAgICAgICAgLy8g57WQ5p6c44KS5L+d5a2YXHJcbiAgICAgICAgdGhpcy5zZXR1cE1vZGVsKHNldHRpbmcpO1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRNb2RlbFNldHRpbmcoKTogSUN1YmlzbU1vZGVsU2V0dGluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fbW9kZWxTZXR0aW5nO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbW9kZWwzLmpzb27jgYvjgonjg6Ljg4fjg6vjgpLnlJ/miJDjgZnjgovjgIJcclxuICAgKiBtb2RlbDMuanNvbuOBruiomOi/sOOBq+W+k+OBo+OBpuODouODh+ODq+eUn+aIkOOAgeODouODvOOCt+ODp+ODs+OAgeeJqeeQhua8lOeul+OBquOBqeOBruOCs+ODs+ODneODvOODjeODs+ODiOeUn+aIkOOCkuihjOOBhuOAglxyXG4gICAqXHJcbiAgICogQHBhcmFtIHNldHRpbmcgSUN1YmlzbU1vZGVsU2V0dGluZ+OBruOCpOODs+OCueOCv+ODs+OCuVxyXG4gICAqL1xyXG4gIHByaXZhdGUgc2V0dXBNb2RlbChzZXR0aW5nOiBJQ3ViaXNtTW9kZWxTZXR0aW5nKTogdm9pZCB7XHJcbiAgICB0aGlzLl91cGRhdGluZyA9IHRydWU7XHJcbiAgICB0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xyXG5cclxuICAgIHRoaXMuX21vZGVsU2V0dGluZyA9IHNldHRpbmc7XHJcblxyXG4gICAgLy8gQ3ViaXNtTW9kZWxcclxuICAgIGlmICh0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW9kZWxGaWxlTmFtZSgpICE9ICcnKSB7XHJcbiAgICAgIGNvbnN0IG1vZGVsRmlsZU5hbWUgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW9kZWxGaWxlTmFtZSgpO1xyXG5cclxuICAgICAgZmV0Y2goYCR7dGhpcy5fbW9kZWxIb21lRGlyfSR7bW9kZWxGaWxlTmFtZX1gKVxyXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXHJcbiAgICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4ge1xyXG4gICAgICAgICAgdGhpcy5sb2FkTW9kZWwoYXJyYXlCdWZmZXIpO1xyXG4gICAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5Mb2FkRXhwcmVzc2lvbjtcclxuXHJcbiAgICAgICAgICAvLyBjYWxsYmFja1xyXG4gICAgICAgICAgbG9hZEN1YmlzbUV4cHJlc3Npb24oKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuV2FpdExvYWRNb2RlbDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKCdNb2RlbCBkYXRhIGRvZXMgbm90IGV4aXN0LicpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEV4cHJlc3Npb25cclxuICAgIGNvbnN0IGxvYWRDdWJpc21FeHByZXNzaW9uID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgICBpZiAodGhpcy5fbW9kZWxTZXR0aW5nLmdldEV4cHJlc3Npb25Db3VudCgpID4gMCkge1xyXG4gICAgICAgIGNvbnN0IGNvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0RXhwcmVzc2lvbkNvdW50KCk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xyXG4gICAgICAgICAgY29uc3QgZXhwcmVzc2lvbk5hbWUgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0RXhwcmVzc2lvbk5hbWUoaSk7XHJcbiAgICAgICAgICBjb25zdCBleHByZXNzaW9uRmlsZU5hbWUgPVxyXG4gICAgICAgICAgICB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0RXhwcmVzc2lvbkZpbGVOYW1lKGkpO1xyXG5cclxuICAgICAgICAgIGZldGNoKGAke3RoaXMuX21vZGVsSG9tZURpcn0ke2V4cHJlc3Npb25GaWxlTmFtZX1gKVxyXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5hcnJheUJ1ZmZlcigpKVxyXG4gICAgICAgICAgICAudGhlbihhcnJheUJ1ZmZlciA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc3QgbW90aW9uOiBBQ3ViaXNtTW90aW9uID0gdGhpcy5sb2FkRXhwcmVzc2lvbihcclxuICAgICAgICAgICAgICAgIGFycmF5QnVmZmVyLFxyXG4gICAgICAgICAgICAgICAgYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCxcclxuICAgICAgICAgICAgICAgIGV4cHJlc3Npb25OYW1lXHJcbiAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgaWYgKHRoaXMuX2V4cHJlc3Npb25zLmdldFZhbHVlKGV4cHJlc3Npb25OYW1lKSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBBQ3ViaXNtTW90aW9uLmRlbGV0ZShcclxuICAgICAgICAgICAgICAgICAgdGhpcy5fZXhwcmVzc2lvbnMuZ2V0VmFsdWUoZXhwcmVzc2lvbk5hbWUpXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZXhwcmVzc2lvbnMuc2V0VmFsdWUoZXhwcmVzc2lvbk5hbWUsIG51bGwpO1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgdGhpcy5fZXhwcmVzc2lvbnMuc2V0VmFsdWUoZXhwcmVzc2lvbk5hbWUsIG1vdGlvbik7XHJcblxyXG4gICAgICAgICAgICAgIHRoaXMuX2V4cHJlc3Npb25Db3VudCsrO1xyXG5cclxuICAgICAgICAgICAgICBpZiAodGhpcy5fZXhwcmVzc2lvbkNvdW50ID49IGNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRQaHlzaWNzO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGNhbGxiYWNrXHJcbiAgICAgICAgICAgICAgICBsb2FkQ3ViaXNtUGh5c2ljcygpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuV2FpdExvYWRFeHByZXNzaW9uO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuTG9hZFBoeXNpY3M7XHJcblxyXG4gICAgICAgIC8vIGNhbGxiYWNrXHJcbiAgICAgICAgbG9hZEN1YmlzbVBoeXNpY3MoKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBQaHlzaWNzXHJcbiAgICBjb25zdCBsb2FkQ3ViaXNtUGh5c2ljcyA9ICgpOiB2b2lkID0+IHtcclxuICAgICAgaWYgKHRoaXMuX21vZGVsU2V0dGluZy5nZXRQaHlzaWNzRmlsZU5hbWUoKSAhPSAnJykge1xyXG4gICAgICAgIGNvbnN0IHBoeXNpY3NGaWxlTmFtZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRQaHlzaWNzRmlsZU5hbWUoKTtcclxuXHJcbiAgICAgICAgZmV0Y2goYCR7dGhpcy5fbW9kZWxIb21lRGlyfSR7cGh5c2ljc0ZpbGVOYW1lfWApXHJcbiAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5hcnJheUJ1ZmZlcigpKVxyXG4gICAgICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRQaHlzaWNzKGFycmF5QnVmZmVyLCBhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuTG9hZFBvc2U7XHJcblxyXG4gICAgICAgICAgICAvLyBjYWxsYmFja1xyXG4gICAgICAgICAgICBsb2FkQ3ViaXNtUG9zZSgpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5XYWl0TG9hZFBoeXNpY3M7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5Mb2FkUG9zZTtcclxuXHJcbiAgICAgICAgLy8gY2FsbGJhY2tcclxuICAgICAgICBsb2FkQ3ViaXNtUG9zZSgpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFBvc2VcclxuICAgIGNvbnN0IGxvYWRDdWJpc21Qb3NlID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgICBpZiAodGhpcy5fbW9kZWxTZXR0aW5nLmdldFBvc2VGaWxlTmFtZSgpICE9ICcnKSB7XHJcbiAgICAgICAgY29uc3QgcG9zZUZpbGVOYW1lID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldFBvc2VGaWxlTmFtZSgpO1xyXG5cclxuICAgICAgICBmZXRjaChgJHt0aGlzLl9tb2RlbEhvbWVEaXJ9JHtwb3NlRmlsZU5hbWV9YClcclxuICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXHJcbiAgICAgICAgICAudGhlbihhcnJheUJ1ZmZlciA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZFBvc2UoYXJyYXlCdWZmZXIsIGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5TZXR1cEV5ZUJsaW5rO1xyXG5cclxuICAgICAgICAgICAgLy8gY2FsbGJhY2tcclxuICAgICAgICAgICAgc2V0dXBFeWVCbGluaygpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5XYWl0TG9hZFBvc2U7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5TZXR1cEV5ZUJsaW5rO1xyXG5cclxuICAgICAgICAvLyBjYWxsYmFja1xyXG4gICAgICAgIHNldHVwRXllQmxpbmsoKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBFeWVCbGlua1xyXG4gICAgY29uc3Qgc2V0dXBFeWVCbGluayA9ICgpOiB2b2lkID0+IHtcclxuICAgICAgaWYgKHRoaXMuX21vZGVsU2V0dGluZy5nZXRFeWVCbGlua1BhcmFtZXRlckNvdW50KCkgPiAwKSB7XHJcbiAgICAgICAgdGhpcy5fZXllQmxpbmsgPSBDdWJpc21FeWVCbGluay5jcmVhdGUodGhpcy5fbW9kZWxTZXR0aW5nKTtcclxuICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLlNldHVwQnJlYXRoO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBjYWxsYmFja1xyXG4gICAgICBzZXR1cEJyZWF0aCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBCcmVhdGhcclxuICAgIGNvbnN0IHNldHVwQnJlYXRoID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgICB0aGlzLl9icmVhdGggPSBDdWJpc21CcmVhdGguY3JlYXRlKCk7XHJcblxyXG4gICAgICBjb25zdCBicmVhdGhQYXJhbWV0ZXJzOiBjc21WZWN0b3I8QnJlYXRoUGFyYW1ldGVyRGF0YT4gPSBuZXcgY3NtVmVjdG9yKCk7XHJcbiAgICAgIGJyZWF0aFBhcmFtZXRlcnMucHVzaEJhY2soXHJcbiAgICAgICAgbmV3IEJyZWF0aFBhcmFtZXRlckRhdGEodGhpcy5faWRQYXJhbUFuZ2xlWCwgMC4wLCAxNS4wLCA2LjUzNDUsIDAuNSlcclxuICAgICAgKTtcclxuICAgICAgYnJlYXRoUGFyYW1ldGVycy5wdXNoQmFjayhcclxuICAgICAgICBuZXcgQnJlYXRoUGFyYW1ldGVyRGF0YSh0aGlzLl9pZFBhcmFtQW5nbGVZLCAwLjAsIDguMCwgMy41MzQ1LCAwLjUpXHJcbiAgICAgICk7XHJcbiAgICAgIGJyZWF0aFBhcmFtZXRlcnMucHVzaEJhY2soXHJcbiAgICAgICAgbmV3IEJyZWF0aFBhcmFtZXRlckRhdGEodGhpcy5faWRQYXJhbUFuZ2xlWiwgMC4wLCAxMC4wLCA1LjUzNDUsIDAuNSlcclxuICAgICAgKTtcclxuICAgICAgYnJlYXRoUGFyYW1ldGVycy5wdXNoQmFjayhcclxuICAgICAgICBuZXcgQnJlYXRoUGFyYW1ldGVyRGF0YSh0aGlzLl9pZFBhcmFtQm9keUFuZ2xlWCwgMC4wLCA0LjAsIDE1LjUzNDUsIDAuNSlcclxuICAgICAgKTtcclxuICAgICAgYnJlYXRoUGFyYW1ldGVycy5wdXNoQmFjayhcclxuICAgICAgICBuZXcgQnJlYXRoUGFyYW1ldGVyRGF0YShcclxuICAgICAgICAgIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcclxuICAgICAgICAgICAgQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQnJlYXRoXHJcbiAgICAgICAgICApLFxyXG4gICAgICAgICAgMC41LFxyXG4gICAgICAgICAgMC41LFxyXG4gICAgICAgICAgMy4yMzQ1LFxyXG4gICAgICAgICAgMVxyXG4gICAgICAgIClcclxuICAgICAgKTtcclxuXHJcbiAgICAgIHRoaXMuX2JyZWF0aC5zZXRQYXJhbWV0ZXJzKGJyZWF0aFBhcmFtZXRlcnMpO1xyXG4gICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRVc2VyRGF0YTtcclxuXHJcbiAgICAgIC8vIGNhbGxiYWNrXHJcbiAgICAgIGxvYWRVc2VyRGF0YSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBVc2VyRGF0YVxyXG4gICAgY29uc3QgbG9hZFVzZXJEYXRhID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgICBpZiAodGhpcy5fbW9kZWxTZXR0aW5nLmdldFVzZXJEYXRhRmlsZSgpICE9ICcnKSB7XHJcbiAgICAgICAgY29uc3QgdXNlckRhdGFGaWxlID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldFVzZXJEYXRhRmlsZSgpO1xyXG5cclxuICAgICAgICBmZXRjaChgJHt0aGlzLl9tb2RlbEhvbWVEaXJ9JHt1c2VyRGF0YUZpbGV9YClcclxuICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXHJcbiAgICAgICAgICAudGhlbihhcnJheUJ1ZmZlciA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZFVzZXJEYXRhKGFycmF5QnVmZmVyLCBhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuU2V0dXBFeWVCbGlua0lkcztcclxuXHJcbiAgICAgICAgICAgIC8vIGNhbGxiYWNrXHJcbiAgICAgICAgICAgIHNldHVwRXllQmxpbmtJZHMoKTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLldhaXRMb2FkVXNlckRhdGE7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5TZXR1cEV5ZUJsaW5rSWRzO1xyXG5cclxuICAgICAgICAvLyBjYWxsYmFja1xyXG4gICAgICAgIHNldHVwRXllQmxpbmtJZHMoKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBFeWVCbGlua0lkc1xyXG4gICAgY29uc3Qgc2V0dXBFeWVCbGlua0lkcyA9ICgpOiB2b2lkID0+IHtcclxuICAgICAgY29uc3QgZXllQmxpbmtJZENvdW50OiBudW1iZXIgPVxyXG4gICAgICAgIHRoaXMuX21vZGVsU2V0dGluZy5nZXRFeWVCbGlua1BhcmFtZXRlckNvdW50KCk7XHJcblxyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV5ZUJsaW5rSWRDb3VudDsgKytpKSB7XHJcbiAgICAgICAgdGhpcy5fZXllQmxpbmtJZHMucHVzaEJhY2soXHJcbiAgICAgICAgICB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0RXllQmxpbmtQYXJhbWV0ZXJJZChpKVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuU2V0dXBMaXBTeW5jSWRzO1xyXG5cclxuICAgICAgLy8gY2FsbGJhY2tcclxuICAgICAgc2V0dXBMaXBTeW5jSWRzKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIExpcFN5bmNJZHNcclxuICAgIGNvbnN0IHNldHVwTGlwU3luY0lkcyA9ICgpOiB2b2lkID0+IHtcclxuICAgICAgY29uc3QgbGlwU3luY0lkQ291bnQgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TGlwU3luY1BhcmFtZXRlckNvdW50KCk7XHJcblxyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpcFN5bmNJZENvdW50OyArK2kpIHtcclxuICAgICAgICB0aGlzLl9saXBTeW5jSWRzLnB1c2hCYWNrKHRoaXMuX21vZGVsU2V0dGluZy5nZXRMaXBTeW5jUGFyYW1ldGVySWQoaSkpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuU2V0dXBMYXlvdXQ7XHJcblxyXG4gICAgICAvLyBjYWxsYmFja1xyXG4gICAgICBzZXR1cExheW91dCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBMYXlvdXRcclxuICAgIGNvbnN0IHNldHVwTGF5b3V0ID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgICBjb25zdCBsYXlvdXQ6IGNzbU1hcDxzdHJpbmcsIG51bWJlcj4gPSBuZXcgY3NtTWFwPHN0cmluZywgbnVtYmVyPigpO1xyXG4gICAgICB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TGF5b3V0TWFwKGxheW91dCk7XHJcbiAgICAgIHRoaXMuX21vZGVsTWF0cml4LnNldHVwRnJvbUxheW91dChsYXlvdXQpO1xyXG4gICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRNb3Rpb247XHJcblxyXG4gICAgICAvLyBjYWxsYmFja1xyXG4gICAgICBsb2FkQ3ViaXNtTW90aW9uKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIE1vdGlvblxyXG4gICAgY29uc3QgbG9hZEN1YmlzbU1vdGlvbiA9ICgpOiB2b2lkID0+IHtcclxuICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5XYWl0TG9hZE1vdGlvbjtcclxuICAgICAgdGhpcy5fbW9kZWwuc2F2ZVBhcmFtZXRlcnMoKTtcclxuICAgICAgdGhpcy5fYWxsTW90aW9uQ291bnQgPSAwO1xyXG4gICAgICB0aGlzLl9tb3Rpb25Db3VudCA9IDA7XHJcbiAgICAgIGNvbnN0IGdyb3VwOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgICAgbGV0IG1vdGlvbkdyb3VwQ291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb3Rpb25Hcm91cENvdW50KCk7XHJcblxyXG4gICAgICBsZXQgaW5kZXggPSAwO1xyXG5cclxuICAgICAgLy8g44Oi44O844K344On44Oz44Gu57eP5pWw44KS5rGC44KB44KLXHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW90aW9uR3JvdXBDb3VudDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgZ3JvdXBOYW1lID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vdGlvbkdyb3VwTmFtZShpKTtcclxuICAgICAgICBjb25zdCBtb3Rpb25GaWxlTmFtZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb3Rpb25GaWxlTmFtZShncm91cE5hbWUsIDApO1xyXG4gICAgICAgIGlmICghbW90aW9uRmlsZU5hbWUuZW5kc1dpdGgoXCIubW90aW9uMy5qc29uXCIpKVxyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgLy8g44Oi44O844K344On44Oz44Gu6Kqt44G/6L6844G/XHJcbiAgICAgICAgdGhpcy5wcmVMb2FkTW90aW9uR3JvdXAoZ3JvdXBOYW1lKTtcclxuICAgICAgICB0aGlzLl9hbGxNb3Rpb25Db3VudCArPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uQ291bnQoZ3JvdXBOYW1lKTtcclxuICAgICAgICBncm91cFtpbmRleF0gPSBncm91cE5hbWU7XHJcbiAgICAgICAgaW5kZXgrKztcclxuICAgICAgfVxyXG5cclxuICAgICAgbW90aW9uR3JvdXBDb3VudCA9IGluZGV4O1xyXG5cclxuICAgICAgLy8g44Oi44O844K344On44Oz44GM44Gq44GE5aC05ZCIXHJcbiAgICAgIGlmIChtb3Rpb25Hcm91cENvdW50ID09IDApIHtcclxuICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRUZXh0dXJlO1xyXG5cclxuICAgICAgICAvLyDlhajjgabjga7jg6Ljg7zjgrfjg6fjg7PjgpLlgZzmraLjgZnjgotcclxuICAgICAgICB0aGlzLl9tb3Rpb25NYW5hZ2VyLnN0b3BBbGxNb3Rpb25zKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3VwZGF0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLmNyZWF0ZVJlbmRlcmVyKCk7XHJcbiAgICAgICAgdGhpcy5zZXR1cFRleHR1cmVzKCk7XHJcbiAgICAgICAgdGhpcy5nZXRSZW5kZXJlcigpLnN0YXJ0VXAoZ2wpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OG44Kv44K544OB44Oj44Om44OL44OD44OI44Gr44OG44Kv44K544OB44Oj44KS44Ot44O844OJ44GZ44KLXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBzZXR1cFRleHR1cmVzKCk6IHZvaWQge1xyXG4gICAgLy8gaVBob25l44Gn44Gu44Ki44Or44OV44Kh5ZOB6LOq5ZCR5LiK44Gu44Gf44KBVHlwZXNjcmlwdOOBp+OBr3ByZW11bHRpcGxpZWRBbHBoYeOCkuaOoeeUqFxyXG4gICAgY29uc3QgdXNlUHJlbXVsdGlwbHkgPSB0cnVlO1xyXG5cclxuICAgIGlmICh0aGlzLl9zdGF0ZSA9PSBMb2FkU3RlcC5Mb2FkVGV4dHVyZSkge1xyXG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6Poqq3jgb/ovrzjgb/nlKhcclxuICAgICAgY29uc3QgdGV4dHVyZUNvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0VGV4dHVyZUNvdW50KCk7XHJcblxyXG4gICAgICBmb3IgKFxyXG4gICAgICAgIGxldCBtb2RlbFRleHR1cmVOdW1iZXIgPSAwO1xyXG4gICAgICAgIG1vZGVsVGV4dHVyZU51bWJlciA8IHRleHR1cmVDb3VudDtcclxuICAgICAgICBtb2RlbFRleHR1cmVOdW1iZXIrK1xyXG4gICAgICApIHtcclxuICAgICAgICAvLyDjg4bjgq/jgrnjg4Hjg6PlkI3jgYznqbrmloflrZfjgaDjgaPjgZ/loLTlkIjjga/jg63jg7zjg4njg7vjg5DjgqTjg7Pjg4nlh6bnkIbjgpLjgrnjgq3jg4Pjg5dcclxuICAgICAgICBpZiAodGhpcy5fbW9kZWxTZXR0aW5nLmdldFRleHR1cmVGaWxlTmFtZShtb2RlbFRleHR1cmVOdW1iZXIpID09ICcnKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnZ2V0VGV4dHVyZUZpbGVOYW1lIG51bGwnKTtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gV2ViR0zjga7jg4bjgq/jgrnjg4Hjg6Pjg6bjg4vjg4Pjg4jjgavjg4bjgq/jgrnjg4Hjg6PjgpLjg63jg7zjg4njgZnjgotcclxuICAgICAgICBsZXQgdGV4dHVyZVBhdGggPVxyXG4gICAgICAgICAgdGhpcy5fbW9kZWxTZXR0aW5nLmdldFRleHR1cmVGaWxlTmFtZShtb2RlbFRleHR1cmVOdW1iZXIpO1xyXG4gICAgICAgIHRleHR1cmVQYXRoID0gdGhpcy5fbW9kZWxIb21lRGlyICsgdGV4dHVyZVBhdGg7XHJcblxyXG4gICAgICAgIC8vIOODreODvOODieWujOS6huaZguOBq+WRvOOBs+WHuuOBmeOCs+ODvOODq+ODkOODg+OCr+mWouaVsFxyXG4gICAgICAgIGNvbnN0IG9uTG9hZCA9ICh0ZXh0dXJlSW5mbzogVGV4dHVyZUluZm8pOiB2b2lkID0+IHtcclxuICAgICAgICAgIHRoaXMuZ2V0UmVuZGVyZXIoKS5iaW5kVGV4dHVyZShtb2RlbFRleHR1cmVOdW1iZXIsIHRleHR1cmVJbmZvLmlkKTtcclxuXHJcbiAgICAgICAgICB0aGlzLl90ZXh0dXJlQ291bnQrKztcclxuXHJcbiAgICAgICAgICBpZiAodGhpcy5fdGV4dHVyZUNvdW50ID49IHRleHR1cmVDb3VudCkge1xyXG4gICAgICAgICAgICAvLyDjg63jg7zjg4nlrozkuoZcclxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5Db21wbGV0ZVNldHVwO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIOiqreOBv+i+vOOBv1xyXG4gICAgICAgIHRoaXMuX2RlbGVnYXRlXHJcbiAgICAgICAgICAuZ2V0VGV4dHVyZU1hbmFnZXIoKVxyXG4gICAgICAgICAgLmNyZWF0ZVRleHR1cmVGcm9tUG5nRmlsZSh0ZXh0dXJlUGF0aCwgdXNlUHJlbXVsdGlwbHksIG9uTG9hZCk7XHJcbiAgICAgICAgdGhpcy5nZXRSZW5kZXJlcigpLnNldElzUHJlbXVsdGlwbGllZEFscGhhKHVzZVByZW11bHRpcGx5KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5XYWl0TG9hZFRleHR1cmU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6zjg7Pjg4Djg6njgpLlho3mp4vnr4njgZnjgotcclxuICAgKi9cclxuICBwdWJsaWMgcmVsb2FkUmVuZGVyZXIoKTogdm9pZCB7XHJcbiAgICB0aGlzLmRlbGV0ZVJlbmRlcmVyKCk7XHJcbiAgICB0aGlzLmNyZWF0ZVJlbmRlcmVyKCk7XHJcbiAgICB0aGlzLnNldHVwVGV4dHVyZXMoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOabtOaWsFxyXG4gICAqL1xyXG4gIHB1YmxpYyB1cGRhdGUoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5fc3RhdGUgIT0gTG9hZFN0ZXAuQ29tcGxldGVTZXR1cCkgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IGRlbHRhVGltZVNlY29uZHM6IG51bWJlciA9IExBcHBQYWwuZ2V0RGVsdGFUaW1lKCk7XHJcbiAgICB0aGlzLl91c2VyVGltZVNlY29uZHMgKz0gZGVsdGFUaW1lU2Vjb25kcztcclxuXHJcbiAgICB0aGlzLl9kcmFnTWFuYWdlci51cGRhdGUoZGVsdGFUaW1lU2Vjb25kcyk7XHJcbiAgICB0aGlzLl9kcmFnWCA9IHRoaXMuX2RyYWdNYW5hZ2VyLmdldFgoKTtcclxuICAgIHRoaXMuX2RyYWdZID0gdGhpcy5fZHJhZ01hbmFnZXIuZ2V0WSgpO1xyXG5cclxuICAgIC8vIOODouODvOOCt+ODp+ODs+OBq+OCiOOCi+ODkeODqeODoeODvOOCv+abtOaWsOOBruacieeEoVxyXG4gICAgbGV0IG1vdGlvblVwZGF0ZWQgPSBmYWxzZTtcclxuXHJcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICB0aGlzLl9tb2RlbC5sb2FkUGFyYW1ldGVycygpOyAvLyDliY3lm57jgrvjg7zjg5bjgZXjgozjgZ/nirbmhYvjgpLjg63jg7zjg4lcclxuICAgIGlmICh0aGlzLl9tb3Rpb25NYW5hZ2VyLmlzRmluaXNoZWQoKSkge1xyXG4gICAgICAvLyDjg6Ljg7zjgrfjg6fjg7Pjga7lho3nlJ/jgYzjgarjgYTloLTlkIjjgIHlvoXmqZ/jg6Ljg7zjgrfjg6fjg7Pjga7kuK3jgYvjgonjg6njg7Pjg4Djg6Djgaflho3nlJ/jgZnjgotcclxuICAgICAgdGhpcy5zdGFydFJhbmRvbU1vdGlvbihcclxuICAgICAgICBMQXBwRGVmaW5lLk1vdGlvbkdyb3VwSWRsZSxcclxuICAgICAgICBMQXBwRGVmaW5lLlByaW9yaXR5SWRsZVxyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbW90aW9uVXBkYXRlZCA9IHRoaXMuX21vdGlvbk1hbmFnZXIudXBkYXRlTW90aW9uKFxyXG4gICAgICAgIHRoaXMuX21vZGVsLFxyXG4gICAgICAgIGRlbHRhVGltZVNlY29uZHNcclxuICAgICAgKTsgLy8g44Oi44O844K344On44Oz44KS5pu05pawXHJcbiAgICB9XHJcbiAgICB0aGlzLl9tb2RlbC5zYXZlUGFyYW1ldGVycygpOyAvLyDnirbmhYvjgpLkv53lrZhcclxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgICAvLyDjgb7jgbDjgZ/jgY1cclxuICAgIGlmICghbW90aW9uVXBkYXRlZCkge1xyXG4gICAgICBpZiAodGhpcy5fZXllQmxpbmsgIT0gbnVsbCkge1xyXG4gICAgICAgIC8vIOODoeOCpOODs+ODouODvOOCt+ODp+ODs+OBruabtOaWsOOBjOOBquOBhOOBqOOBjVxyXG4gICAgICAgIHRoaXMuX2V5ZUJsaW5rLnVwZGF0ZVBhcmFtZXRlcnModGhpcy5fbW9kZWwsIGRlbHRhVGltZVNlY29uZHMpOyAvLyDnm67jg5Hjg4FcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLl9leHByZXNzaW9uTWFuYWdlciAhPSBudWxsKSB7XHJcbiAgICAgIHRoaXMuX2V4cHJlc3Npb25NYW5hZ2VyLnVwZGF0ZU1vdGlvbih0aGlzLl9tb2RlbCwgZGVsdGFUaW1lU2Vjb25kcyk7IC8vIOihqOaDheOBp+ODkeODqeODoeODvOOCv+abtOaWsO+8iOebuOWvvuWkieWMlu+8iVxyXG4gICAgfVxyXG5cclxuICAgIC8vIOODieODqeODg+OCsOOBq+OCiOOCi+WkieWMllxyXG4gICAgLy8g44OJ44Op44OD44Kw44Gr44KI44KL6aGU44Gu5ZCR44GN44Gu6Kq/5pW0XHJcbiAgICB0aGlzLl9tb2RlbC5hZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQodGhpcy5faWRQYXJhbUFuZ2xlWCwgdGhpcy5fZHJhZ1ggKiAzMCk7IC8vIC0zMOOBi+OCiTMw44Gu5YCk44KS5Yqg44GI44KLXHJcbiAgICB0aGlzLl9tb2RlbC5hZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQodGhpcy5faWRQYXJhbUFuZ2xlWSwgdGhpcy5fZHJhZ1kgKiAzMCk7XHJcbiAgICB0aGlzLl9tb2RlbC5hZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQoXHJcbiAgICAgIHRoaXMuX2lkUGFyYW1BbmdsZVosXHJcbiAgICAgIHRoaXMuX2RyYWdYICogdGhpcy5fZHJhZ1kgKiAtMzBcclxuICAgICk7XHJcblxyXG4gICAgLy8g44OJ44Op44OD44Kw44Gr44KI44KL5L2T44Gu5ZCR44GN44Gu6Kq/5pW0XHJcbiAgICB0aGlzLl9tb2RlbC5hZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQoXHJcbiAgICAgIHRoaXMuX2lkUGFyYW1Cb2R5QW5nbGVYLFxyXG4gICAgICB0aGlzLl9kcmFnWCAqIDEwXHJcbiAgICApOyAvLyAtMTDjgYvjgokxMOOBruWApOOCkuWKoOOBiOOCi1xyXG5cclxuICAgIC8vIOODieODqeODg+OCsOOBq+OCiOOCi+ebruOBruWQkeOBjeOBruiqv+aVtFxyXG4gICAgdGhpcy5fbW9kZWwuYWRkUGFyYW1ldGVyVmFsdWVCeUlkKHRoaXMuX2lkUGFyYW1FeWVCYWxsWCwgdGhpcy5fZHJhZ1gpOyAvLyAtMeOBi+OCiTHjga7lgKTjgpLliqDjgYjjgotcclxuICAgIHRoaXMuX21vZGVsLmFkZFBhcmFtZXRlclZhbHVlQnlJZCh0aGlzLl9pZFBhcmFtRXllQmFsbFksIHRoaXMuX2RyYWdZKTtcclxuXHJcbiAgICAvLyDlkbzlkLjjgarjgalcclxuICAgIGlmICh0aGlzLl9icmVhdGggIT0gbnVsbCkge1xyXG4gICAgICB0aGlzLl9icmVhdGgudXBkYXRlUGFyYW1ldGVycyh0aGlzLl9tb2RlbCwgZGVsdGFUaW1lU2Vjb25kcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g54mp55CG5ryU566X44Gu6Kit5a6aXHJcbiAgICBpZiAodGhpcy5fcGh5c2ljcyAhPSBudWxsKSB7XHJcbiAgICAgIHRoaXMuX3BoeXNpY3MuZXZhbHVhdGUodGhpcy5fbW9kZWwsIGRlbHRhVGltZVNlY29uZHMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOODquODg+ODl+OCt+ODs+OCr+OBruioreWumlxyXG4gICAgaWYgKHRoaXMuX2xpcHN5bmMpIHtcclxuICAgICAgbGV0IHZhbHVlID0gMC4wOyAvLyDjg6rjgqLjg6vjgr/jgqTjg6Djgafjg6rjg4Pjg5fjgrfjg7Pjgq/jgpLooYzjgYbloLTlkIjjgIHjgrfjgrnjg4bjg6DjgYvjgonpn7Pph4/jgpLlj5blvpfjgZfjgabjgIEwfjHjga7nr4Tlm7LjgaflgKTjgpLlhaXlipvjgZfjgb7jgZnjgIJcclxuXHJcbiAgICAgIHRoaXMuX3dhdkZpbGVIYW5kbGVyLnVwZGF0ZShkZWx0YVRpbWVTZWNvbmRzKTtcclxuICAgICAgdmFsdWUgPSB0aGlzLl93YXZGaWxlSGFuZGxlci5nZXRSbXMoKTtcclxuXHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fbGlwU3luY0lkcy5nZXRTaXplKCk7ICsraSkge1xyXG4gICAgICAgIHRoaXMuX21vZGVsLmFkZFBhcmFtZXRlclZhbHVlQnlJZCh0aGlzLl9saXBTeW5jSWRzLmF0KGkpLCB2YWx1ZSwgMC44KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIOODneODvOOCuuOBruioreWumlxyXG4gICAgaWYgKHRoaXMuX3Bvc2UgIT0gbnVsbCkge1xyXG4gICAgICB0aGlzLl9wb3NlLnVwZGF0ZVBhcmFtZXRlcnModGhpcy5fbW9kZWwsIGRlbHRhVGltZVNlY29uZHMpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX21vZGVsLnVwZGF0ZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5byV5pWw44Gn5oyH5a6a44GX44Gf44Oi44O844K344On44Oz44Gu5YaN55Sf44KS6ZaL5aeL44GZ44KLXHJcbiAgICogQHBhcmFtIGdyb3VwIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+WQjVxyXG4gICAqIEBwYXJhbSBubyDjgrDjg6vjg7zjg5flhoXjga7nlarlj7dcclxuICAgKiBAcGFyYW0gcHJpb3JpdHkg5YSq5YWI5bqmXHJcbiAgICogQHBhcmFtIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyIOODouODvOOCt+ODp+ODs+WGjeeUn+e1guS6huaZguOBq+WRvOOBs+WHuuOBleOCjOOCi+OCs+ODvOODq+ODkOODg+OCr+mWouaVsFxyXG4gICAqIEByZXR1cm4g6ZaL5aeL44GX44Gf44Oi44O844K344On44Oz44Gu6K2Y5Yil55Wq5Y+344KS6L+U44GZ44CC5YCL5Yil44Gu44Oi44O844K344On44Oz44GM57WC5LqG44GX44Gf44GL5ZCm44GL44KS5Yik5a6a44GZ44KLaXNGaW5pc2hlZCgp44Gu5byV5pWw44Gn5L2/55So44GZ44KL44CC6ZaL5aeL44Gn44GN44Gq44GE5pmC44GvWy0xXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGFydE1vdGlvbihcclxuICAgIGdyb3VwOiBzdHJpbmcsXHJcbiAgICBubzogbnVtYmVyLFxyXG4gICAgcHJpb3JpdHk6IG51bWJlcixcclxuICAgIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyPzogRmluaXNoZWRNb3Rpb25DYWxsYmFja1xyXG4gICk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGUge1xyXG4gICAgaWYgKHByaW9yaXR5ID09IExBcHBEZWZpbmUuUHJpb3JpdHlGb3JjZSkge1xyXG4gICAgICB0aGlzLl9tb3Rpb25NYW5hZ2VyLnNldFJlc2VydmVQcmlvcml0eShwcmlvcml0eSk7XHJcbiAgICB9IGVsc2UgaWYgKCF0aGlzLl9tb3Rpb25NYW5hZ2VyLnJlc2VydmVNb3Rpb24ocHJpb3JpdHkpKSB7XHJcbiAgICAgIGlmICh0aGlzLl9kZWJ1Z01vZGUpIHtcclxuICAgICAgICBMQXBwUGFsLnByaW50TWVzc2FnZShcIltBUFBdY2FuJ3Qgc3RhcnQgbW90aW9uLlwiKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gSW52YWxpZE1vdGlvblF1ZXVlRW50cnlIYW5kbGVWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBtb3Rpb25GaWxlTmFtZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb3Rpb25GaWxlTmFtZShncm91cCwgbm8pO1xyXG5cclxuICAgIC8vIGV4KSBpZGxlXzBcclxuICAgIGNvbnN0IG5hbWUgPSBgJHtncm91cH1fJHtub31gO1xyXG4gICAgbGV0IG1vdGlvbjogQ3ViaXNtTW90aW9uID0gdGhpcy5fbW90aW9ucy5nZXRWYWx1ZShuYW1lKSBhcyBDdWJpc21Nb3Rpb247XHJcbiAgICBsZXQgYXV0b0RlbGV0ZSA9IGZhbHNlO1xyXG5cclxuICAgIGlmIChtb3Rpb24gPT0gbnVsbCkge1xyXG4gICAgICBmZXRjaChgJHt0aGlzLl9tb2RlbEhvbWVEaXJ9JHttb3Rpb25GaWxlTmFtZX1gKVxyXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXHJcbiAgICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4ge1xyXG4gICAgICAgICAgbW90aW9uID0gdGhpcy5sb2FkTW90aW9uKFxyXG4gICAgICAgICAgICBhcnJheUJ1ZmZlcixcclxuICAgICAgICAgICAgYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCxcclxuICAgICAgICAgICAgbnVsbCxcclxuICAgICAgICAgICAgb25GaW5pc2hlZE1vdGlvbkhhbmRsZXJcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBsZXQgZmFkZVRpbWU6IG51bWJlciA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb3Rpb25GYWRlSW5UaW1lVmFsdWUoXHJcbiAgICAgICAgICAgIGdyb3VwLFxyXG4gICAgICAgICAgICBub1xyXG4gICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICBpZiAoZmFkZVRpbWUgPj0gMC4wKSB7XHJcbiAgICAgICAgICAgIG1vdGlvbi5zZXRGYWRlSW5UaW1lKGZhZGVUaW1lKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBmYWRlVGltZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb3Rpb25GYWRlT3V0VGltZVZhbHVlKGdyb3VwLCBubyk7XHJcbiAgICAgICAgICBpZiAoZmFkZVRpbWUgPj0gMC4wKSB7XHJcbiAgICAgICAgICAgIG1vdGlvbi5zZXRGYWRlT3V0VGltZShmYWRlVGltZSk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgbW90aW9uLnNldEVmZmVjdElkcyh0aGlzLl9leWVCbGlua0lkcywgdGhpcy5fbGlwU3luY0lkcyk7XHJcbiAgICAgICAgICBhdXRvRGVsZXRlID0gdHJ1ZTsgLy8g57WC5LqG5pmC44Gr44Oh44Oi44Oq44GL44KJ5YmK6ZmkXHJcbiAgICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBtb3Rpb24uc2V0RmluaXNoZWRNb3Rpb25IYW5kbGVyKG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyKTtcclxuICAgIH1cclxuXHJcbiAgICAvL3ZvaWNlXHJcbiAgICBjb25zdCB2b2ljZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb3Rpb25Tb3VuZEZpbGVOYW1lKGdyb3VwLCBubyk7XHJcbiAgICBpZiAodm9pY2UubG9jYWxlQ29tcGFyZSgnJykgIT0gMCkge1xyXG4gICAgICBsZXQgcGF0aCA9IHZvaWNlO1xyXG4gICAgICBwYXRoID0gdGhpcy5fbW9kZWxIb21lRGlyICsgcGF0aDtcclxuICAgICAgdGhpcy5fd2F2RmlsZUhhbmRsZXIuc3RhcnQocGF0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuX2RlYnVnTW9kZSkge1xyXG4gICAgICBMQXBwUGFsLnByaW50TWVzc2FnZShgW0FQUF1zdGFydCBtb3Rpb246IFske2dyb3VwfV8ke25vfWApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuX21vdGlvbk1hbmFnZXIuc3RhcnRNb3Rpb25Qcmlvcml0eShcclxuICAgICAgbW90aW9uLFxyXG4gICAgICBhdXRvRGVsZXRlLFxyXG4gICAgICBwcmlvcml0eVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODqeODs+ODgOODoOOBq+mBuOOBsOOCjOOBn+ODouODvOOCt+ODp+ODs+OBruWGjeeUn+OCkumWi+Wni+OBmeOCi+OAglxyXG4gICAqIEBwYXJhbSBncm91cCDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5flkI1cclxuICAgKiBAcGFyYW0gcHJpb3JpdHkg5YSq5YWI5bqmXHJcbiAgICogQHBhcmFtIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyIOODouODvOOCt+ODp+ODs+WGjeeUn+e1guS6huaZguOBq+WRvOOBs+WHuuOBleOCjOOCi+OCs+ODvOODq+ODkOODg+OCr+mWouaVsFxyXG4gICAqIEByZXR1cm4g6ZaL5aeL44GX44Gf44Oi44O844K344On44Oz44Gu6K2Y5Yil55Wq5Y+344KS6L+U44GZ44CC5YCL5Yil44Gu44Oi44O844K344On44Oz44GM57WC5LqG44GX44Gf44GL5ZCm44GL44KS5Yik5a6a44GZ44KLaXNGaW5pc2hlZCgp44Gu5byV5pWw44Gn5L2/55So44GZ44KL44CC6ZaL5aeL44Gn44GN44Gq44GE5pmC44GvWy0xXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGFydFJhbmRvbU1vdGlvbihcclxuICAgIGdyb3VwOiBzdHJpbmcsXHJcbiAgICBwcmlvcml0eTogbnVtYmVyLFxyXG4gICAgb25GaW5pc2hlZE1vdGlvbkhhbmRsZXI/OiBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrXHJcbiAgKTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZSB7XHJcbiAgICBpZiAodGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vdGlvbkNvdW50KGdyb3VwKSA9PSAwKSB7XHJcbiAgICAgIHJldHVybiBJbnZhbGlkTW90aW9uUXVldWVFbnRyeUhhbmRsZVZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG5vOiBudW1iZXIgPSBNYXRoLmZsb29yKFxyXG4gICAgICBNYXRoLnJhbmRvbSgpICogdGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vdGlvbkNvdW50KGdyb3VwKVxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5zdGFydE1vdGlvbihncm91cCwgbm8sIHByaW9yaXR5LCBvbkZpbmlzaGVkTW90aW9uSGFuZGxlcik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlvJXmlbDjgafmjIflrprjgZfjgZ/ooajmg4Xjg6Ljg7zjgrfjg6fjg7PjgpLjgrvjg4Pjg4jjgZnjgotcclxuICAgKlxyXG4gICAqIEBwYXJhbSBleHByZXNzaW9uSWQg6KGo5oOF44Oi44O844K344On44Oz44GuSURcclxuICAgKi9cclxuICBwdWJsaWMgc2V0RXhwcmVzc2lvbihleHByZXNzaW9uSWQ6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgY29uc3QgbW90aW9uOiBBQ3ViaXNtTW90aW9uID0gdGhpcy5fZXhwcmVzc2lvbnMuZ2V0VmFsdWUoZXhwcmVzc2lvbklkKTtcclxuXHJcbiAgICBpZiAodGhpcy5fZGVidWdNb2RlKSB7XHJcbiAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKGBbQVBQXWV4cHJlc3Npb246IFske2V4cHJlc3Npb25JZH1dYCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG1vdGlvbiAhPSBudWxsKSB7XHJcbiAgICAgIHRoaXMuX2V4cHJlc3Npb25NYW5hZ2VyLnN0YXJ0TW90aW9uUHJpb3JpdHkoXHJcbiAgICAgICAgbW90aW9uLFxyXG4gICAgICAgIGZhbHNlLFxyXG4gICAgICAgIExBcHBEZWZpbmUuUHJpb3JpdHlGb3JjZVxyXG4gICAgICApO1xyXG4gICAgICB0aGlzLl9hcGkudGlja1Jlc2V0RXhwcmVzc2lvbigpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKHRoaXMuX2RlYnVnTW9kZSkge1xyXG4gICAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKGBbQVBQXWV4cHJlc3Npb25bJHtleHByZXNzaW9uSWR9XSBpcyBudWxsYCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODqeODs+ODgOODoOOBq+mBuOOBsOOCjOOBn+ihqOaDheODouODvOOCt+ODp+ODs+OCkuOCu+ODg+ODiOOBmeOCi1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRSYW5kb21FeHByZXNzaW9uKCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuX2V4cHJlc3Npb25zLmdldFNpemUoKSA9PSAwKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBubzogbnVtYmVyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5fZXhwcmVzc2lvbnMuZ2V0U2l6ZSgpKTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2V4cHJlc3Npb25zLmdldFNpemUoKTsgaSsrKSB7XHJcbiAgICAgIGlmIChpID09IG5vKSB7XHJcbiAgICAgICAgY29uc3QgbmFtZTogc3RyaW5nID0gdGhpcy5fZXhwcmVzc2lvbnMuX2tleVZhbHVlc1tpXS5maXJzdDtcclxuICAgICAgICB0aGlzLnNldEV4cHJlc3Npb24obmFtZSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjgqTjg5njg7Pjg4jjga7nmbrngavjgpLlj5fjgZHlj5bjgotcclxuICAgKi9cclxuICBwdWJsaWMgbW90aW9uRXZlbnRGaXJlZChldmVudFZhbHVlOiBjc21TdHJpbmcpOiB2b2lkIHtcclxuICAgIEN1YmlzbUxvZ0luZm8oJ3swfSBpcyBmaXJlZCBvbiBMQXBwTW9kZWwhIScsIGV2ZW50VmFsdWUucyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlvZPjgZ/jgorliKTlrprjg4bjgrnjg4hcclxuICAgKiDmjIflrprvvKnvvKTjga7poILngrnjg6rjgrnjg4jjgYvjgonnn6nlvaLjgpLoqIjnrpfjgZfjgIHluqfmqJnjgpLjgYznn6nlvaLnr4Tlm7LlhoXjgYvliKTlrprjgZnjgovjgIJcclxuICAgKlxyXG4gICAqIEBwYXJhbSBoaXRBcmVuYU5hbWUgIOW9k+OBn+OCiuWIpOWumuOCkuODhuOCueODiOOBmeOCi+WvvuixoeOBrklEXHJcbiAgICogQHBhcmFtIHggICAgICAgICAgICAg5Yik5a6a44KS6KGM44GGWOW6p+aomVxyXG4gICAqIEBwYXJhbSB5ICAgICAgICAgICAgIOWIpOWumuOCkuihjOOBhlnluqfmqJlcclxuICAgKi9cclxuICBwdWJsaWMgaGl0VGVzdChoaXRBcmVuYU5hbWU6IHN0cmluZywgeDogbnVtYmVyLCB5OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgIC8vIOmAj+aYjuaZguOBr+W9k+OBn+OCiuWIpOWumueEoeOBl+OAglxyXG4gICAgaWYgKHRoaXMuX29wYWNpdHkgPCAxKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldEhpdEFyZWFzQ291bnQoKTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgaWYgKHRoaXMuX21vZGVsU2V0dGluZy5nZXRIaXRBcmVhTmFtZShpKSA9PSBoaXRBcmVuYU5hbWUpIHtcclxuICAgICAgICBjb25zdCBkcmF3SWQ6IEN1YmlzbUlkSGFuZGxlID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldEhpdEFyZWFJZChpKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5pc0hpdChkcmF3SWQsIHgsIHkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44O844K344On44Oz44OH44O844K/44KS44Kw44Or44O844OX5ZCN44GL44KJ5LiA5ous44Gn44Ot44O844OJ44GZ44KL44CCXHJcbiAgICog44Oi44O844K344On44Oz44OH44O844K/44Gu5ZCN5YmN44Gv5YaF6YOo44GnTW9kZWxTZXR0aW5n44GL44KJ5Y+W5b6X44GZ44KL44CCXHJcbiAgICpcclxuICAgKiBAcGFyYW0gZ3JvdXAg44Oi44O844K344On44Oz44OH44O844K/44Gu44Kw44Or44O844OX5ZCNXHJcbiAgICovXHJcbiAgcHVibGljIHByZUxvYWRNb3Rpb25Hcm91cChncm91cDogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb3Rpb25Db3VudChncm91cCk7IGkrKykge1xyXG4gICAgICBjb25zdCBtb3Rpb25GaWxlTmFtZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb3Rpb25GaWxlTmFtZShncm91cCwgaSk7XHJcblxyXG4gICAgICBpZiAobW90aW9uRmlsZU5hbWUgPT0gbnVsbCB8fCBtb3Rpb25GaWxlTmFtZSA9PSBcIk51bGxWYWx1ZVwiKVxyXG4gICAgICAgIGNvbnRpbnVlO1xyXG5cclxuICAgICAgLy8gZXgpIGlkbGVfMFxyXG4gICAgICBjb25zdCBuYW1lID0gYCR7Z3JvdXB9XyR7aX1gO1xyXG4gICAgICBpZiAodGhpcy5fZGVidWdNb2RlKSB7XHJcbiAgICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoXHJcbiAgICAgICAgICBgW0FQUF1sb2FkIG1vdGlvbjogJHttb3Rpb25GaWxlTmFtZX0gPT4gWyR7bmFtZX1dYFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZldGNoKGAke3RoaXMuX21vZGVsSG9tZURpcn0ke21vdGlvbkZpbGVOYW1lfWApXHJcbiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSlcclxuICAgICAgICAudGhlbihhcnJheUJ1ZmZlciA9PiB7XHJcbiAgICAgICAgICBjb25zdCB0bXBNb3Rpb246IEN1YmlzbU1vdGlvbiA9IHRoaXMubG9hZE1vdGlvbihcclxuICAgICAgICAgICAgYXJyYXlCdWZmZXIsXHJcbiAgICAgICAgICAgIGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgsXHJcbiAgICAgICAgICAgIG5hbWVcclxuICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgbGV0IGZhZGVUaW1lID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vdGlvbkZhZGVJblRpbWVWYWx1ZShncm91cCwgaSk7XHJcbiAgICAgICAgICBpZiAoZmFkZVRpbWUgPj0gMC4wKSB7XHJcbiAgICAgICAgICAgIHRtcE1vdGlvbi5zZXRGYWRlSW5UaW1lKGZhZGVUaW1lKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBmYWRlVGltZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb3Rpb25GYWRlT3V0VGltZVZhbHVlKGdyb3VwLCBpKTtcclxuICAgICAgICAgIGlmIChmYWRlVGltZSA+PSAwLjApIHtcclxuICAgICAgICAgICAgdG1wTW90aW9uLnNldEZhZGVPdXRUaW1lKGZhZGVUaW1lKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRtcE1vdGlvbi5zZXRFZmZlY3RJZHModGhpcy5fZXllQmxpbmtJZHMsIHRoaXMuX2xpcFN5bmNJZHMpO1xyXG5cclxuICAgICAgICAgIGlmICh0aGlzLl9tb3Rpb25zLmdldFZhbHVlKG5hbWUpICE9IG51bGwpIHtcclxuICAgICAgICAgICAgQUN1YmlzbU1vdGlvbi5kZWxldGUodGhpcy5fbW90aW9ucy5nZXRWYWx1ZShuYW1lKSk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgdGhpcy5fbW90aW9ucy5zZXRWYWx1ZShuYW1lLCB0bXBNb3Rpb24pO1xyXG5cclxuICAgICAgICAgIHRoaXMuX21vdGlvbkNvdW50Kys7XHJcbiAgICAgICAgICBpZiAodGhpcy5fbW90aW9uQ291bnQgPj0gdGhpcy5fYWxsTW90aW9uQ291bnQpIHtcclxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5Mb2FkVGV4dHVyZTtcclxuXHJcbiAgICAgICAgICAgIC8vIOWFqOOBpuOBruODouODvOOCt+ODp+ODs+OCkuWBnOatouOBmeOCi1xyXG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25NYW5hZ2VyLnN0b3BBbGxNb3Rpb25zKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVJlbmRlcmVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0dXBUZXh0dXJlcygpO1xyXG4gICAgICAgICAgICB0aGlzLmdldFJlbmRlcmVyKCkuc3RhcnRVcChnbCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjgZnjgbnjgabjga7jg6Ljg7zjgrfjg6fjg7Pjg4fjg7zjgr/jgpLop6PmlL7jgZnjgovjgIJcclxuICAgKi9cclxuICBwdWJsaWMgcmVsZWFzZU1vdGlvbnMoKTogdm9pZCB7XHJcbiAgICB0aGlzLl9tb3Rpb25zLmNsZWFyKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlhajjgabjga7ooajmg4Xjg4fjg7zjgr/jgpLop6PmlL7jgZnjgovjgIJcclxuICAgKi9cclxuICBwdWJsaWMgcmVsZWFzZUV4cHJlc3Npb25zKCk6IHZvaWQge1xyXG4gICAgdGhpcy5fZXhwcmVzc2lvbnMuY2xlYXIoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODh+ODq+OCkuaPj+eUu+OBmeOCi+WHpueQhuOAguODouODh+ODq+OCkuaPj+eUu+OBmeOCi+epuumWk+OBrlZpZXctUHJvamVjdGlvbuihjOWIl+OCkua4oeOBmeOAglxyXG4gICAqL1xyXG4gIHB1YmxpYyBkb0RyYXcoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5fbW9kZWwgPT0gbnVsbCkgcmV0dXJuO1xyXG5cclxuICAgIC8vIOOCreODo+ODs+ODkOOCueOCteOCpOOCuuOCkua4oeOBmVxyXG4gICAgY29uc3Qgdmlld3BvcnQ6IG51bWJlcltdID0gWzAsIDAsIGxpdmUyZF92aWV3LndpZHRoLCBsaXZlMmRfdmlldy5oZWlnaHRdO1xyXG5cclxuICAgIHRoaXMuZ2V0UmVuZGVyZXIoKS5zZXRSZW5kZXJTdGF0ZShmcmFtZUJ1ZmZlciwgdmlld3BvcnQpO1xyXG4gICAgdGhpcy5nZXRSZW5kZXJlcigpLmRyYXdNb2RlbCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44OH44Or44KS5o+P55S744GZ44KL5Yem55CG44CC44Oi44OH44Or44KS5o+P55S744GZ44KL56m66ZaT44GuVmlldy1Qcm9qZWN0aW9u6KGM5YiX44KS5rih44GZ44CCXHJcbiAgICovXHJcbiAgcHVibGljIGRyYXcobWF0cml4OiBDdWJpc21NYXRyaXg0NCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuX21vZGVsID09IG51bGwpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOWQhOiqreOBv+i+vOOBv+e1guS6huW+jFxyXG4gICAgaWYgKHRoaXMuX3N0YXRlID09IExvYWRTdGVwLkNvbXBsZXRlU2V0dXApIHtcclxuICAgICAgbWF0cml4Lm11bHRpcGx5QnlNYXRyaXgodGhpcy5fbW9kZWxNYXRyaXgpO1xyXG5cclxuICAgICAgdGhpcy5nZXRSZW5kZXJlcigpLnNldE12cE1hdHJpeChtYXRyaXgpO1xyXG5cclxuICAgICAgdGhpcy5kb0RyYXcoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihkZWxlZ2F0ZTogTEFwcERlbGVnYXRlLCBhcGk6IExpdmUyZEFQSSkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMuX2FwaSA9IGFwaTtcclxuICAgIHRoaXMuX2RlbGVnYXRlID0gZGVsZWdhdGU7XHJcblxyXG4gICAgdGhpcy5fbW9kZWxTZXR0aW5nID0gbnVsbDtcclxuICAgIHRoaXMuX21vZGVsSG9tZURpciA9IG51bGw7XHJcbiAgICB0aGlzLl91c2VyVGltZVNlY29uZHMgPSAwLjA7XHJcblxyXG4gICAgdGhpcy5fZXllQmxpbmtJZHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPigpO1xyXG4gICAgdGhpcy5fbGlwU3luY0lkcyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+KCk7XHJcblxyXG4gICAgdGhpcy5fbW90aW9ucyA9IG5ldyBjc21NYXA8c3RyaW5nLCBBQ3ViaXNtTW90aW9uPigpO1xyXG4gICAgdGhpcy5fZXhwcmVzc2lvbnMgPSBuZXcgY3NtTWFwPHN0cmluZywgQUN1YmlzbU1vdGlvbj4oKTtcclxuXHJcbiAgICB0aGlzLl9oaXRBcmVhID0gbmV3IGNzbVZlY3Rvcjxjc21SZWN0PigpO1xyXG4gICAgdGhpcy5fdXNlckFyZWEgPSBuZXcgY3NtVmVjdG9yPGNzbVJlY3Q+KCk7XHJcblxyXG4gICAgdGhpcy5faWRQYXJhbUFuZ2xlWCA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcclxuICAgICAgQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQW5nbGVYXHJcbiAgICApO1xyXG4gICAgdGhpcy5faWRQYXJhbUFuZ2xlWSA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcclxuICAgICAgQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQW5nbGVZXHJcbiAgICApO1xyXG4gICAgdGhpcy5faWRQYXJhbUFuZ2xlWiA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcclxuICAgICAgQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQW5nbGVaXHJcbiAgICApO1xyXG4gICAgdGhpcy5faWRQYXJhbUV5ZUJhbGxYID0gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxyXG4gICAgICBDdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1FeWVCYWxsWFxyXG4gICAgKTtcclxuICAgIHRoaXMuX2lkUGFyYW1FeWVCYWxsWSA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcclxuICAgICAgQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtRXllQmFsbFlcclxuICAgICk7XHJcbiAgICB0aGlzLl9pZFBhcmFtQm9keUFuZ2xlWCA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcclxuICAgICAgQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQm9keUFuZ2xlWFxyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRBc3NldHM7XHJcbiAgICB0aGlzLl9leHByZXNzaW9uQ291bnQgPSAwO1xyXG4gICAgdGhpcy5fdGV4dHVyZUNvdW50ID0gMDtcclxuICAgIHRoaXMuX21vdGlvbkNvdW50ID0gMDtcclxuICAgIHRoaXMuX2FsbE1vdGlvbkNvdW50ID0gMDtcclxuICAgIHRoaXMuX3dhdkZpbGVIYW5kbGVyID0gbmV3IExBcHBXYXZGaWxlSGFuZGxlcigpO1xyXG4gIH1cclxuXHJcbiAgX2FwaTogTGl2ZTJkQVBJO1xyXG4gIF9kZWxlZ2F0ZTogTEFwcERlbGVnYXRlO1xyXG4gIF9tb2RlbFNldHRpbmc6IElDdWJpc21Nb2RlbFNldHRpbmc7IC8vIOODouODh+ODq+OCu+ODg+ODhuOCo+ODs+OCsOaDheWgsVxyXG4gIF9tb2RlbEhvbWVEaXI6IHN0cmluZzsgLy8g44Oi44OH44Or44K744OD44OG44Kj44Oz44Kw44GM572u44GL44KM44Gf44OH44Kj44Os44Kv44OI44OqXHJcbiAgX3VzZXJUaW1lU2Vjb25kczogbnVtYmVyOyAvLyDjg4fjg6vjgr/mmYLplpPjga7nqY3nrpflgKRb56eSXVxyXG5cclxuICBfZXllQmxpbmtJZHM6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT47IC8vIOODouODh+ODq+OBq+ioreWumuOBleOCjOOBn+eerOOBjeapn+iDveeUqOODkeODqeODoeODvOOCv0lEXHJcbiAgX2xpcFN5bmNJZHM6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT47IC8vIOODouODh+ODq+OBq+ioreWumuOBleOCjOOBn+ODquODg+ODl+OCt+ODs+OCr+apn+iDveeUqOODkeODqeODoeODvOOCv0lEXHJcblxyXG4gIF9tb3Rpb25zOiBjc21NYXA8c3RyaW5nLCBBQ3ViaXNtTW90aW9uPjsgLy8g6Kqt44G/6L6844G+44KM44Gm44GE44KL44Oi44O844K344On44Oz44Gu44Oq44K544OIXHJcbiAgX2V4cHJlc3Npb25zOiBjc21NYXA8c3RyaW5nLCBBQ3ViaXNtTW90aW9uPjsgLy8g6Kqt44G/6L6844G+44KM44Gm44GE44KL6KGo5oOF44Gu44Oq44K544OIXHJcblxyXG4gIF9oaXRBcmVhOiBjc21WZWN0b3I8Y3NtUmVjdD47XHJcbiAgX3VzZXJBcmVhOiBjc21WZWN0b3I8Y3NtUmVjdD47XHJcblxyXG4gIF9pZFBhcmFtQW5nbGVYOiBDdWJpc21JZEhhbmRsZTsgLy8g44OR44Op44Oh44O844K/SUQ6IFBhcmFtQW5nbGVYXHJcbiAgX2lkUGFyYW1BbmdsZVk6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg5Hjg6njg6Hjg7zjgr9JRDogUGFyYW1BbmdsZVlcclxuICBfaWRQYXJhbUFuZ2xlWjogQ3ViaXNtSWRIYW5kbGU7IC8vIOODkeODqeODoeODvOOCv0lEOiBQYXJhbUFuZ2xlWlxyXG4gIF9pZFBhcmFtRXllQmFsbFg6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg5Hjg6njg6Hjg7zjgr9JRDogUGFyYW1FeWVCYWxsWFxyXG4gIF9pZFBhcmFtRXllQmFsbFk6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg5Hjg6njg6Hjg7zjgr9JRDogUGFyYW1FeWVCQWxsWVxyXG4gIF9pZFBhcmFtQm9keUFuZ2xlWDogQ3ViaXNtSWRIYW5kbGU7IC8vIOODkeODqeODoeODvOOCv0lEOiBQYXJhbUJvZHlBbmdsZVhcclxuXHJcbiAgX3N0YXRlOiBudW1iZXI7IC8vIOePvuWcqOOBruOCueODhuODvOOCv+OCueeuoeeQhueUqFxyXG4gIF9leHByZXNzaW9uQ291bnQ6IG51bWJlcjsgLy8g6KGo5oOF44OH44O844K/44Kr44Km44Oz44OIXHJcbiAgX3RleHR1cmVDb3VudDogbnVtYmVyOyAvLyDjg4bjgq/jgrnjg4Hjg6Pjgqvjgqbjg7Pjg4hcclxuICBfbW90aW9uQ291bnQ6IG51bWJlcjsgLy8g44Oi44O844K344On44Oz44OH44O844K/44Kr44Km44Oz44OIXHJcbiAgX2FsbE1vdGlvbkNvdW50OiBudW1iZXI7IC8vIOODouODvOOCt+ODp+ODs+e3j+aVsFxyXG4gIF93YXZGaWxlSGFuZGxlcjogTEFwcFdhdkZpbGVIYW5kbGVyOyAvL3dhduODleOCoeOCpOODq+ODj+ODs+ODieODqVxyXG59XHJcbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbi8qKlxuICog44OX44Op44OD44OI44OV44Kp44O844Og5L6d5a2Y5qmf6IO944KS5oq96LGh5YyW44GZ44KLIEN1YmlzbSBQbGF0Zm9ybSBBYnN0cmFjdGlvbiBMYXllci5cbiAqXG4gKiDjg5XjgqHjgqTjg6voqq3jgb/ovrzjgb/jgoTmmYLliLvlj5blvpfnrYnjga7jg5fjg6njg4Pjg4jjg5Xjgqnjg7zjg6Djgavkvp3lrZjjgZnjgovplqLmlbDjgpLjgb7jgajjgoHjgovjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIExBcHBQYWwge1xuICAvKipcbiAgICog44OV44Kh44Kk44Or44KS44OQ44Kk44OI44OH44O844K/44Go44GX44Gm6Kqt44G/44GT44KAXG4gICAqXG4gICAqIEBwYXJhbSBmaWxlUGF0aCDoqq3jgb/ovrzjgb/lr77osaHjg5XjgqHjgqTjg6vjga7jg5HjgrlcbiAgICogQHJldHVyblxuICAgKiB7XG4gICAqICAgICAgYnVmZmVyLCAgIOiqreOBv+i+vOOCk+OBoOODkOOCpOODiOODh+ODvOOCv1xuICAgKiAgICAgIHNpemUgICAgICAgIOODleOCoeOCpOODq+OCteOCpOOCulxuICAgKiB9XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGxvYWRGaWxlQXNCeXRlcyhcbiAgICBmaWxlUGF0aDogc3RyaW5nLFxuICAgIGNhbGxiYWNrOiAoYXJyYXlCdWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpID0+IHZvaWRcbiAgKTogdm9pZCB7XG4gICAgZmV0Y2goZmlsZVBhdGgpXG4gICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5hcnJheUJ1ZmZlcigpKVxuICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4gY2FsbGJhY2soYXJyYXlCdWZmZXIsIGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjg6vjgr/mmYLplpPvvIjliY3lm57jg5Xjg6zjg7zjg6Djgajjga7lt67liIbvvInjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg4fjg6vjgr/mmYLplpNbbXNdXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldERlbHRhVGltZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnNfZGVsdGFUaW1lO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyB1cGRhdGVUaW1lKCk6IHZvaWQge1xuICAgIHRoaXMuc19jdXJyZW50RnJhbWUgPSBEYXRlLm5vdygpO1xuICAgIHRoaXMuc19kZWx0YVRpbWUgPSAodGhpcy5zX2N1cnJlbnRGcmFtZSAtIHRoaXMuc19sYXN0RnJhbWUpIC8gMTAwMDtcbiAgICB0aGlzLnNfbGFzdEZyYW1lID0gdGhpcy5zX2N1cnJlbnRGcmFtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Hjg4Pjgrvjg7zjgrjjgpLlh7rlipvjgZnjgotcbiAgICogQHBhcmFtIG1lc3NhZ2Ug5paH5a2X5YiXXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHByaW50TWVzc2FnZShtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcbiAgfVxuXG4gIHN0YXRpYyBsYXN0VXBkYXRlID0gRGF0ZS5ub3coKTtcblxuICBzdGF0aWMgc19jdXJyZW50RnJhbWUgPSAwLjA7XG4gIHN0YXRpYyBzX2xhc3RGcmFtZSA9IDAuMDtcbiAgc3RhdGljIHNfZGVsdGFUaW1lID0gMC4wO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgY3NtVmVjdG9yLCBpdGVyYXRvciB9IGZyb20gJ0BmcmFtZXdvcmsvdHlwZS9jc212ZWN0b3InO1xuXG5pbXBvcnQgeyBnbCB9IGZyb20gJy4vbGFwcGRlbGVnYXRlJztcblxuLyoqXG4gKiDjg4bjgq/jgrnjg4Hjg6PnrqHnkIbjgq/jg6njgrlcbiAqIOeUu+WDj+iqreOBv+i+vOOBv+OAgeeuoeeQhuOCkuihjOOBhuOCr+ODqeOCueOAglxuICovXG5leHBvcnQgY2xhc3MgTEFwcFRleHR1cmVNYW5hZ2VyIHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fdGV4dHVyZXMgPSBuZXcgY3NtVmVjdG9yPFRleHR1cmVJbmZvPigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOino+aUvuOBmeOCi+OAglxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgZm9yIChcbiAgICAgIGxldCBpdGU6IGl0ZXJhdG9yPFRleHR1cmVJbmZvPiA9IHRoaXMuX3RleHR1cmVzLmJlZ2luKCk7XG4gICAgICBpdGUubm90RXF1YWwodGhpcy5fdGV4dHVyZXMuZW5kKCkpO1xuICAgICAgaXRlLnByZUluY3JlbWVudCgpXG4gICAgKSB7XG4gICAgICBnbC5kZWxldGVUZXh0dXJlKGl0ZS5wdHIoKS5pZCk7XG4gICAgfVxuICAgIHRoaXMuX3RleHR1cmVzID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDnlLvlg4/oqq3jgb/ovrzjgb9cbiAgICpcbiAgICogQHBhcmFtIGZpbGVOYW1lIOiqreOBv+i+vOOCgOeUu+WDj+ODleOCoeOCpOODq+ODkeOCueWQjVxuICAgKiBAcGFyYW0gdXNlUHJlbXVsdGlwbHkgUHJlbXVsdOWHpueQhuOCkuacieWKueOBq+OBmeOCi+OBi1xuICAgKiBAcmV0dXJuIOeUu+WDj+aDheWgseOAgeiqreOBv+i+vOOBv+WkseaVl+aZguOBr251bGzjgpLov5TjgZlcbiAgICovXG4gIHB1YmxpYyBjcmVhdGVUZXh0dXJlRnJvbVBuZ0ZpbGUoXG4gICAgZmlsZU5hbWU6IHN0cmluZyxcbiAgICB1c2VQcmVtdWx0aXBseTogYm9vbGVhbixcbiAgICBjYWxsYmFjazogKHRleHR1cmVJbmZvOiBUZXh0dXJlSW5mbykgPT4gdm9pZFxuICApOiB2b2lkIHtcbiAgICAvLyBzZWFyY2ggbG9hZGVkIHRleHR1cmUgYWxyZWFkeVxuICAgIGZvciAoXG4gICAgICBsZXQgaXRlOiBpdGVyYXRvcjxUZXh0dXJlSW5mbz4gPSB0aGlzLl90ZXh0dXJlcy5iZWdpbigpO1xuICAgICAgaXRlLm5vdEVxdWFsKHRoaXMuX3RleHR1cmVzLmVuZCgpKTtcbiAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKVxuICAgICkge1xuICAgICAgaWYgKFxuICAgICAgICBpdGUucHRyKCkuZmlsZU5hbWUgPT0gZmlsZU5hbWUgJiZcbiAgICAgICAgaXRlLnB0cigpLnVzZVByZW11bHRwbHkgPT0gdXNlUHJlbXVsdGlwbHlcbiAgICAgICkge1xuICAgICAgICAvLyAy5Zue55uu5Lul6ZmN44Gv44Kt44Oj44OD44K344Ol44GM5L2/55So44GV44KM44KLKOW+heOBoeaZgumWk+OBquOBlylcbiAgICAgICAgLy8gV2ViS2l044Gn44Gv5ZCM44GYSW1hZ2Xjga5vbmxvYWTjgpLlho3luqblkbzjgbbjgavjga/lho3jgqTjg7Pjgrnjgr/jg7PjgrnjgYzlv4XopoFcbiAgICAgICAgLy8g6Kmz57Sw77yaaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzUwMjQxODFcbiAgICAgICAgaXRlLnB0cigpLmltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICBpdGUucHRyKCkuaW1nLm9ubG9hZCA9ICgpOiB2b2lkID0+IGNhbGxiYWNrKGl0ZS5wdHIoKSk7XG4gICAgICAgIGl0ZS5wdHIoKS5pbWcuc3JjID0gZmlsZU5hbWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyDjg4fjg7zjgr/jga7jgqrjg7Pjg63jg7zjg4njgpLjg4jjg6rjgqzjg7zjgavjgZnjgotcbiAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICBpbWcub25sb2FkID0gKCk6IHZvaWQgPT4ge1xuICAgICAgLy8g44OG44Kv44K544OB44Oj44Kq44OW44K444Kn44Kv44OI44Gu5L2c5oiQXG4gICAgICBjb25zdCB0ZXg6IFdlYkdMVGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcblxuICAgICAgLy8g44OG44Kv44K544OB44Oj44KS6YG45oqeXG4gICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXgpO1xuXG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6Pjgavjg5Tjgq/jgrvjg6vjgpLmm7jjgY3ovrzjgoBcbiAgICAgIGdsLnRleFBhcmFtZXRlcmkoXG4gICAgICAgIGdsLlRFWFRVUkVfMkQsXG4gICAgICAgIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUixcbiAgICAgICAgZ2wuTElORUFSX01JUE1BUF9MSU5FQVJcbiAgICAgICk7XG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTElORUFSKTtcblxuICAgICAgLy8gUHJlbXVsdOWHpueQhuOCkuihjOOCj+OBm+OCi1xuICAgICAgaWYgKHVzZVByZW11bHRpcGx5KSB7XG4gICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgMSk7XG4gICAgICB9XG5cbiAgICAgIC8vIOODhuOCr+OCueODgeODo+OBq+ODlOOCr+OCu+ODq+OCkuabuOOBjei+vOOCgFxuICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBpbWcpO1xuXG4gICAgICAvLyDjg5/jg4Pjg5fjg57jg4Pjg5fjgpLnlJ/miJBcbiAgICAgIGdsLmdlbmVyYXRlTWlwbWFwKGdsLlRFWFRVUkVfMkQpO1xuXG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6PjgpLjg5DjgqTjg7Pjg4lcbiAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpO1xuXG4gICAgICBjb25zdCB0ZXh0dXJlSW5mbzogVGV4dHVyZUluZm8gPSBuZXcgVGV4dHVyZUluZm8oKTtcbiAgICAgIGlmICh0ZXh0dXJlSW5mbyAhPSBudWxsKSB7XG4gICAgICAgIHRleHR1cmVJbmZvLmZpbGVOYW1lID0gZmlsZU5hbWU7XG4gICAgICAgIHRleHR1cmVJbmZvLndpZHRoID0gaW1nLndpZHRoO1xuICAgICAgICB0ZXh0dXJlSW5mby5oZWlnaHQgPSBpbWcuaGVpZ2h0O1xuICAgICAgICB0ZXh0dXJlSW5mby5pZCA9IHRleDtcbiAgICAgICAgdGV4dHVyZUluZm8uaW1nID0gaW1nO1xuICAgICAgICB0ZXh0dXJlSW5mby51c2VQcmVtdWx0cGx5ID0gdXNlUHJlbXVsdGlwbHk7XG4gICAgICAgIHRoaXMuX3RleHR1cmVzLnB1c2hCYWNrKHRleHR1cmVJbmZvKTtcbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2sodGV4dHVyZUluZm8pO1xuICAgIH07XG4gICAgaW1nLnNyYyA9IGZpbGVOYW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIOeUu+WDj+OBruino+aUvlxuICAgKlxuICAgKiDphY3liJfjgavlrZjlnKjjgZnjgovnlLvlg4/lhajjgabjgpLop6PmlL7jgZnjgovjgIJcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlVGV4dHVyZXMoKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl90ZXh0dXJlcy5nZXRTaXplKCk7IGkrKykge1xuICAgICAgdGhpcy5fdGV4dHVyZXMuc2V0KGksIG51bGwpO1xuICAgIH1cblxuICAgIHRoaXMuX3RleHR1cmVzLmNsZWFyKCk7XG4gIH1cblxuICAvKipcbiAgICog55S75YOP44Gu6Kej5pS+XG4gICAqXG4gICAqIOaMh+WumuOBl+OBn+ODhuOCr+OCueODgeODo+OBrueUu+WDj+OCkuino+aUvuOBmeOCi+OAglxuICAgKiBAcGFyYW0gdGV4dHVyZSDop6PmlL7jgZnjgovjg4bjgq/jgrnjg4Hjg6NcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlVGV4dHVyZUJ5VGV4dHVyZSh0ZXh0dXJlOiBXZWJHTFRleHR1cmUpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3RleHR1cmVzLmdldFNpemUoKTsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5fdGV4dHVyZXMuYXQoaSkuaWQgIT0gdGV4dHVyZSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fdGV4dHVyZXMuc2V0KGksIG51bGwpO1xuICAgICAgdGhpcy5fdGV4dHVyZXMucmVtb3ZlKGkpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOeUu+WDj+OBruino+aUvlxuICAgKlxuICAgKiDmjIflrprjgZfjgZ/lkI3liY3jga7nlLvlg4/jgpLop6PmlL7jgZnjgovjgIJcbiAgICogQHBhcmFtIGZpbGVOYW1lIOino+aUvuOBmeOCi+eUu+WDj+ODleOCoeOCpOODq+ODkeOCueWQjVxuICAgKi9cbiAgcHVibGljIHJlbGVhc2VUZXh0dXJlQnlGaWxlUGF0aChmaWxlTmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl90ZXh0dXJlcy5nZXRTaXplKCk7IGkrKykge1xuICAgICAgaWYgKHRoaXMuX3RleHR1cmVzLmF0KGkpLmZpbGVOYW1lID09IGZpbGVOYW1lKSB7XG4gICAgICAgIHRoaXMuX3RleHR1cmVzLnNldChpLCBudWxsKTtcbiAgICAgICAgdGhpcy5fdGV4dHVyZXMucmVtb3ZlKGkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfdGV4dHVyZXM6IGNzbVZlY3RvcjxUZXh0dXJlSW5mbz47XG59XG5cbi8qKlxuICog55S75YOP5oOF5aCx5qeL6YCg5L2TXG4gKi9cbmV4cG9ydCBjbGFzcyBUZXh0dXJlSW5mbyB7XG4gIGltZzogSFRNTEltYWdlRWxlbWVudDsgLy8g55S75YOPXG4gIGlkOiBXZWJHTFRleHR1cmUgPSBudWxsOyAvLyDjg4bjgq/jgrnjg4Hjg6NcbiAgd2lkdGggPSAwOyAvLyDmqKrluYVcbiAgaGVpZ2h0ID0gMDsgLy8g6auY44GVXG4gIHVzZVByZW11bHRwbHk6IGJvb2xlYW47IC8vIFByZW11bHTlh6bnkIbjgpLmnInlirnjgavjgZnjgovjgYtcbiAgZmlsZU5hbWU6IHN0cmluZzsgLy8g44OV44Kh44Kk44Or5ZCNXG59XG4iLCIvKipcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEN1YmlzbU1hdHJpeDQ0IH0gZnJvbSAnQGZyYW1ld29yay9tYXRoL2N1YmlzbW1hdHJpeDQ0JztcclxuaW1wb3J0IHsgQ3ViaXNtVmlld01hdHJpeCB9IGZyb20gJ0BmcmFtZXdvcmsvbWF0aC9jdWJpc212aWV3bWF0cml4JztcclxuXHJcbmltcG9ydCAqIGFzIExBcHBEZWZpbmUgZnJvbSAnLi9sYXBwZGVmaW5lJztcclxuaW1wb3J0IHsgbGl2ZTJkX3ZpZXcsIGdsLCBMQXBwRGVsZWdhdGUgfSBmcm9tICcuL2xhcHBkZWxlZ2F0ZSc7XHJcbmltcG9ydCB7IExBcHBMaXZlMkRNYW5hZ2VyIH0gZnJvbSAnLi9sYXBwbGl2ZTJkbWFuYWdlcic7XHJcbmltcG9ydCB7IExBcHBQYWwgfSBmcm9tICcuL2xhcHBwYWwnO1xyXG5pbXBvcnQgeyBMQXBwU3ByaXRlIH0gZnJvbSAnLi9sYXBwc3ByaXRlJztcclxuaW1wb3J0IHsgVGV4dHVyZUluZm8gfSBmcm9tICcuL2xhcHB0ZXh0dXJlbWFuYWdlcic7XHJcbmltcG9ydCB7IFRvdWNoTWFuYWdlciB9IGZyb20gJy4vdG91Y2htYW5hZ2VyJztcclxuXHJcbi8qKlxyXG4gKiDmj4/nlLvjgq/jg6njgrnjgIJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBMQXBwVmlldyB7XHJcbiAgLyoqXHJcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoZGVsZWdhdGU6IExBcHBEZWxlZ2F0ZSwgbWFuYWdlcjogTEFwcExpdmUyRE1hbmFnZXIpIHtcclxuICAgIHRoaXMuX2RlbGVnYXRlID0gZGVsZWdhdGU7XHJcbiAgICB0aGlzLl9tYW5hZ2VyID0gbWFuYWdlcjtcclxuICAgIHRoaXMuX3Byb2dyYW1JZCA9IG51bGw7XHJcbiAgICAvLyDjgr/jg4Pjg4HplqLkv4Ljga7jgqTjg5njg7Pjg4jnrqHnkIZcclxuICAgIHRoaXMuX3RvdWNoTWFuYWdlciA9IG5ldyBUb3VjaE1hbmFnZXIoKTtcclxuXHJcbiAgICAvLyDjg4fjg5DjgqTjgrnluqfmqJnjgYvjgonjgrnjgq/jg6rjg7zjg7PluqfmqJnjgavlpInmj5vjgZnjgovjgZ/jgoHjga5cclxuICAgIHRoaXMuX2RldmljZVRvU2NyZWVuID0gbmV3IEN1YmlzbU1hdHJpeDQ0KCk7XHJcblxyXG4gICAgLy8g55S76Z2i44Gu6KGo56S644Gu5ouh5aSn57iu5bCP44KE56e75YuV44Gu5aSJ5o+b44KS6KGM44GG6KGM5YiXXHJcbiAgICB0aGlzLl92aWV3TWF0cml4ID0gbmV3IEN1YmlzbVZpZXdNYXRyaXgoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWIneacn+WMluOBmeOCi+OAglxyXG4gICAqL1xyXG4gIHB1YmxpYyBpbml0aWFsaXplKCk6IHZvaWQge1xyXG4gICAgbGV0IHsgd2lkdGgsIGhlaWdodCB9ID0gbGl2ZTJkX3ZpZXc7XHJcblxyXG4gICAgLy8gbGV0IGEgPSB3aWR0aDtcclxuICAgIC8vIHdpZHRoID0gaGVpZ2h0O1xyXG4gICAgLy8gaGVpZ2h0ID0gYTtcclxuXHJcbiAgICBjb25zdCByYXRpbzogbnVtYmVyID0gd2lkdGggLyBoZWlnaHQ7XHJcbiAgICBjb25zdCBsZWZ0OiBudW1iZXIgPSAtcmF0aW87XHJcbiAgICBjb25zdCByaWdodDogbnVtYmVyID0gcmF0aW87XHJcbiAgICBjb25zdCBib3R0b206IG51bWJlciA9IExBcHBEZWZpbmUuVmlld0xvZ2ljYWxMZWZ0O1xyXG4gICAgY29uc3QgdG9wOiBudW1iZXIgPSBMQXBwRGVmaW5lLlZpZXdMb2dpY2FsUmlnaHQ7XHJcblxyXG4gICAgdGhpcy5fdmlld01hdHJpeC5zZXRTY3JlZW5SZWN0KGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCk7IC8vIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+eUu+mdouOBruevhOWbsuOAgiBY44Gu5bem56uv44CBWOOBruWPs+err+OAgVnjga7kuIvnq6/jgIFZ44Gu5LiK56uvXHJcbiAgICB0aGlzLl92aWV3TWF0cml4LnNjYWxlKExBcHBEZWZpbmUuVmlld1NjYWxlLCBMQXBwRGVmaW5lLlZpZXdTY2FsZSk7XHJcblxyXG4gICAgdGhpcy5fZGV2aWNlVG9TY3JlZW4ubG9hZElkZW50aXR5KCk7XHJcbiAgICBpZiAod2lkdGggPiBoZWlnaHQpIHtcclxuICAgICAgY29uc3Qgc2NyZWVuVzogbnVtYmVyID0gTWF0aC5hYnMocmlnaHQgLSBsZWZ0KTtcclxuICAgICAgdGhpcy5fZGV2aWNlVG9TY3JlZW4uc2NhbGVSZWxhdGl2ZShzY3JlZW5XIC8gd2lkdGgsIC1zY3JlZW5XIC8gd2lkdGgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3Qgc2NyZWVuSDogbnVtYmVyID0gTWF0aC5hYnModG9wIC0gYm90dG9tKTtcclxuICAgICAgdGhpcy5fZGV2aWNlVG9TY3JlZW4uc2NhbGVSZWxhdGl2ZShzY3JlZW5IIC8gaGVpZ2h0LCAtc2NyZWVuSCAvIGhlaWdodCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLl9kZXZpY2VUb1NjcmVlbi50cmFuc2xhdGVSZWxhdGl2ZSgtd2lkdGggKiAwLjUsIC1oZWlnaHQgKiAwLjUpO1xyXG5cclxuICAgIC8vIOihqOekuuevhOWbsuOBruioreWumlxyXG4gICAgdGhpcy5fdmlld01hdHJpeC5zZXRNYXhTY2FsZShMQXBwRGVmaW5lLlZpZXdNYXhTY2FsZSk7IC8vIOmZkOeVjOaLoeW8teeOh1xyXG4gICAgdGhpcy5fdmlld01hdHJpeC5zZXRNaW5TY2FsZShMQXBwRGVmaW5lLlZpZXdNaW5TY2FsZSk7IC8vIOmZkOeVjOe4ruWwj+eOh1xyXG5cclxuICAgIC8vIOihqOekuuOBp+OBjeOCi+acgOWkp+evhOWbslxyXG4gICAgdGhpcy5fdmlld01hdHJpeC5zZXRNYXhTY3JlZW5SZWN0KFxyXG4gICAgICBMQXBwRGVmaW5lLlZpZXdMb2dpY2FsTWF4TGVmdCxcclxuICAgICAgTEFwcERlZmluZS5WaWV3TG9naWNhbE1heFJpZ2h0LFxyXG4gICAgICBMQXBwRGVmaW5lLlZpZXdMb2dpY2FsTWF4Qm90dG9tLFxyXG4gICAgICBMQXBwRGVmaW5lLlZpZXdMb2dpY2FsTWF4VG9wXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6Kej5pS+44GZ44KLXHJcbiAgICovXHJcbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLl92aWV3TWF0cml4ID0gbnVsbDtcclxuICAgIHRoaXMuX3RvdWNoTWFuYWdlciA9IG51bGw7XHJcbiAgICB0aGlzLl9kZXZpY2VUb1NjcmVlbiA9IG51bGw7XHJcblxyXG4gICAgZ2wuZGVsZXRlUHJvZ3JhbSh0aGlzLl9wcm9ncmFtSWQpO1xyXG4gICAgdGhpcy5fcHJvZ3JhbUlkID0gbnVsbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaPj+eUu+OBmeOCi+OAglxyXG4gICAqL1xyXG4gIHB1YmxpYyByZW5kZXIoKTogdm9pZCB7XHJcbiAgICBnbC51c2VQcm9ncmFtKHRoaXMuX3Byb2dyYW1JZCk7XHJcblxyXG4gICAgZ2wuZmx1c2goKTtcclxuXHJcbiAgICB0aGlzLl9tYW5hZ2VyLnNldFZpZXdNYXRyaXgodGhpcy5fdmlld01hdHJpeCk7XHJcblxyXG4gICAgdGhpcy5fbWFuYWdlci5vblVwZGF0ZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog55S75YOP44Gu5Yid5pyf5YyW44KS6KGM44GG44CCXHJcbiAgICovXHJcbiAgcHVibGljIGluaXRpYWxpemVTcHJpdGUoKTogdm9pZCB7XHJcbiAgICAvLyDjgrfjgqfjg7zjg4Djg7zjgpLkvZzmiJBcclxuICAgIGlmICh0aGlzLl9wcm9ncmFtSWQgPT0gbnVsbCkge1xyXG4gICAgICB0aGlzLl9wcm9ncmFtSWQgPSB0aGlzLl9kZWxlZ2F0ZS5jcmVhdGVTaGFkZXIoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCv+ODg+ODgeOBleOCjOOBn+aZguOBq+WRvOOBsOOCjOOCi+OAglxyXG4gICAqXHJcbiAgICogQHBhcmFtIHBvaW50WCDjgrnjgq/jg6rjg7zjg7NY5bqn5qiZXHJcbiAgICogQHBhcmFtIHBvaW50WSDjgrnjgq/jg6rjg7zjg7NZ5bqn5qiZXHJcbiAgICovXHJcbiAgcHVibGljIG9uVG91Y2hlc0JlZ2FuKHBvaW50WDogbnVtYmVyLCBwb2ludFk6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5fdG91Y2hNYW5hZ2VyLnRvdWNoZXNCZWdhbihwb2ludFgsIHBvaW50WSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjgr/jg4Pjg4HjgZfjgabjgYTjgovjgajjgY3jgavjg53jgqTjg7Pjgr/jgYzli5XjgYTjgZ/jgonlkbzjgbDjgozjgovjgIJcclxuICAgKlxyXG4gICAqIEBwYXJhbSBwb2ludFgg44K544Kv44Oq44O844OzWOW6p+aomVxyXG4gICAqIEBwYXJhbSBwb2ludFkg44K544Kv44Oq44O844OzWeW6p+aomVxyXG4gICAqL1xyXG4gIHB1YmxpYyBvblRvdWNoZXNNb3ZlZChwb2ludFg6IG51bWJlciwgcG9pbnRZOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGNvbnN0IHZpZXdYOiBudW1iZXIgPSB0aGlzLnRyYW5zZm9ybVZpZXdYKHRoaXMuX3RvdWNoTWFuYWdlci5nZXRYKCkpO1xyXG4gICAgY29uc3Qgdmlld1k6IG51bWJlciA9IHRoaXMudHJhbnNmb3JtVmlld1kodGhpcy5fdG91Y2hNYW5hZ2VyLmdldFkoKSk7XHJcblxyXG4gICAgdGhpcy5fdG91Y2hNYW5hZ2VyLnRvdWNoZXNNb3ZlZChwb2ludFgsIHBvaW50WSk7XHJcblxyXG4gICAgdGhpcy5fbWFuYWdlci5vbkRyYWcodmlld1gsIHZpZXdZKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCv+ODg+ODgeOBjOe1guS6huOBl+OBn+OCieWRvOOBsOOCjOOCi+OAglxyXG4gICAqXHJcbiAgICogQHBhcmFtIHBvaW50WCDjgrnjgq/jg6rjg7zjg7NY5bqn5qiZXHJcbiAgICogQHBhcmFtIHBvaW50WSDjgrnjgq/jg6rjg7zjg7NZ5bqn5qiZXHJcbiAgICovXHJcbiAgcHVibGljIG9uVG91Y2hlc0VuZGVkKHBvaW50WDogbnVtYmVyLCBwb2ludFk6IG51bWJlcik6IHZvaWQge1xyXG4gICAgLy8g44K/44OD44OB57WC5LqGXHJcbiAgICB0aGlzLl9tYW5hZ2VyLm9uRHJhZygwLjAsIDAuMCk7XHJcblxyXG4gICAge1xyXG4gICAgICAvLyDjgrfjg7PjgrDjg6vjgr/jg4Pjg5dcclxuICAgICAgY29uc3QgeDogbnVtYmVyID0gdGhpcy5fZGV2aWNlVG9TY3JlZW4udHJhbnNmb3JtWChcclxuICAgICAgICB0aGlzLl90b3VjaE1hbmFnZXIuZ2V0WCgpXHJcbiAgICAgICk7IC8vIOirlueQhuW6p+aomeWkieaPm+OBl+OBn+W6p+aomeOCkuWPluW+l+OAglxyXG4gICAgICBjb25zdCB5OiBudW1iZXIgPSB0aGlzLl9kZXZpY2VUb1NjcmVlbi50cmFuc2Zvcm1ZKFxyXG4gICAgICAgIHRoaXMuX3RvdWNoTWFuYWdlci5nZXRZKClcclxuICAgICAgKTsgLy8g6KuW55CG5bqn5qiZ5aSJ5YyW44GX44Gf5bqn5qiZ44KS5Y+W5b6X44CCXHJcblxyXG4gICAgICBpZiAoTEFwcERlZmluZS5EZWJ1Z1RvdWNoTG9nRW5hYmxlKSB7XHJcbiAgICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoYFtBUFBddG91Y2hlc0VuZGVkIHg6ICR7eH0geTogJHt5fWApO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuX21hbmFnZXIub25UYXAoeCwgeSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBY5bqn5qiZ44KSVmlld+W6p+aomeOBq+WkieaPm+OBmeOCi+OAglxyXG4gICAqXHJcbiAgICogQHBhcmFtIGRldmljZVgg44OH44OQ44Kk44K5WOW6p+aomVxyXG4gICAqL1xyXG4gIHB1YmxpYyB0cmFuc2Zvcm1WaWV3WChkZXZpY2VYOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgY29uc3Qgc2NyZWVuWDogbnVtYmVyID0gdGhpcy5fZGV2aWNlVG9TY3JlZW4udHJhbnNmb3JtWChkZXZpY2VYKTsgLy8g6KuW55CG5bqn5qiZ5aSJ5o+b44GX44Gf5bqn5qiZ44KS5Y+W5b6X44CCXHJcbiAgICByZXR1cm4gdGhpcy5fdmlld01hdHJpeC5pbnZlcnRUcmFuc2Zvcm1YKHNjcmVlblgpOyAvLyDmi6HlpKfjgIHnuK7lsI/jgIHnp7vli5Xlvozjga7lgKTjgIJcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFnluqfmqJnjgpJWaWV35bqn5qiZ44Gr5aSJ5o+b44GZ44KL44CCXHJcbiAgICpcclxuICAgKiBAcGFyYW0gZGV2aWNlWSDjg4fjg5DjgqTjgrlZ5bqn5qiZXHJcbiAgICovXHJcbiAgcHVibGljIHRyYW5zZm9ybVZpZXdZKGRldmljZVk6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICBjb25zdCBzY3JlZW5ZOiBudW1iZXIgPSB0aGlzLl9kZXZpY2VUb1NjcmVlbi50cmFuc2Zvcm1ZKGRldmljZVkpOyAvLyDoq5bnkIbluqfmqJnlpInmj5vjgZfjgZ/luqfmqJnjgpLlj5blvpfjgIJcclxuICAgIHJldHVybiB0aGlzLl92aWV3TWF0cml4LmludmVydFRyYW5zZm9ybVkoc2NyZWVuWSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBY5bqn5qiZ44KSU2NyZWVu5bqn5qiZ44Gr5aSJ5o+b44GZ44KL44CCXHJcbiAgICogQHBhcmFtIGRldmljZVgg44OH44OQ44Kk44K5WOW6p+aomVxyXG4gICAqL1xyXG4gIHB1YmxpYyB0cmFuc2Zvcm1TY3JlZW5YKGRldmljZVg6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fZGV2aWNlVG9TY3JlZW4udHJhbnNmb3JtWChkZXZpY2VYKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFnluqfmqJnjgpJTY3JlZW7luqfmqJnjgavlpInmj5vjgZnjgovjgIJcclxuICAgKlxyXG4gICAqIEBwYXJhbSBkZXZpY2VZIOODh+ODkOOCpOOCuVnluqfmqJlcclxuICAgKi9cclxuICBwdWJsaWMgdHJhbnNmb3JtU2NyZWVuWShkZXZpY2VZOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2RldmljZVRvU2NyZWVuLnRyYW5zZm9ybVkoZGV2aWNlWSk7XHJcbiAgfVxyXG5cclxuICBfbWFuYWdlcjogTEFwcExpdmUyRE1hbmFnZXI7XHJcbiAgX2RlbGVnYXRlOiBMQXBwRGVsZWdhdGU7XHJcbiAgX3RvdWNoTWFuYWdlcjogVG91Y2hNYW5hZ2VyOyAvLyDjgr/jg4Pjg4Hjg57jg43jg7zjgrjjg6Pjg7xcclxuICBfZGV2aWNlVG9TY3JlZW46IEN1YmlzbU1hdHJpeDQ0OyAvLyDjg4fjg5DjgqTjgrnjgYvjgonjgrnjgq/jg6rjg7zjg7Pjgbjjga7ooYzliJdcclxuICBfdmlld01hdHJpeDogQ3ViaXNtVmlld01hdHJpeDsgLy8gdmlld01hdHJpeFxyXG4gIF9wcm9ncmFtSWQ6IFdlYkdMUHJvZ3JhbTsgLy8g44K344Kn44O844OASURcclxuICBfY2hhbmdlTW9kZWw6IGJvb2xlYW47IC8vIOODouODh+ODq+WIh+OCiuabv+OBiOODleODqeOCsFxyXG4gIF9pc0NsaWNrOiBib29sZWFuOyAvLyDjgq/jg6rjg4Pjgq/kuK1cclxufVxyXG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBMQXBwUGFsIH0gZnJvbSAnLi9sYXBwcGFsJztcblxuZXhwb3J0IGNsYXNzIExBcHBXYXZGaWxlSGFuZGxlciB7XG4gIHB1YmxpYyB1cGRhdGUoZGVsdGFUaW1lU2Vjb25kczogbnVtYmVyKSB7XG4gICAgbGV0IGdvYWxPZmZzZXQ6IG51bWJlcjtcbiAgICBsZXQgcm1zOiBudW1iZXI7XG5cbiAgICAvLyDjg4fjg7zjgr/jg63jg7zjg4nliY0v44OV44Kh44Kk44Or5pyr5bC+44Gr6YGU44GX44Gf5aC05ZCI44Gv5pu05paw44GX44Gq44GEXG4gICAgaWYgKFxuICAgICAgdGhpcy5fcGNtRGF0YSA9PSBudWxsIHx8XG4gICAgICB0aGlzLl9zYW1wbGVPZmZzZXQgPj0gdGhpcy5fd2F2RmlsZUluZm8uX3NhbXBsZXNQZXJDaGFubmVsXG4gICAgKSB7XG4gICAgICB0aGlzLl9sYXN0Um1zID0gMC4wO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIOe1jOmBjuaZgumWk+W+jOOBrueKtuaFi+OCkuS/neaMgVxuICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyArPSBkZWx0YVRpbWVTZWNvbmRzO1xuICAgIGdvYWxPZmZzZXQgPSBNYXRoLmZsb29yKFxuICAgICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzICogdGhpcy5fd2F2RmlsZUluZm8uX3NhbXBsaW5nUmF0ZVxuICAgICk7XG4gICAgaWYgKGdvYWxPZmZzZXQgPiB0aGlzLl93YXZGaWxlSW5mby5fc2FtcGxlc1BlckNoYW5uZWwpIHtcbiAgICAgIGdvYWxPZmZzZXQgPSB0aGlzLl93YXZGaWxlSW5mby5fc2FtcGxlc1BlckNoYW5uZWw7XG4gICAgfVxuXG4gICAgLy8gUk1T6KiI5risXG4gICAgcm1zID0gMC4wO1xuICAgIGZvciAoXG4gICAgICBsZXQgY2hhbm5lbENvdW50ID0gMDtcbiAgICAgIGNoYW5uZWxDb3VudCA8IHRoaXMuX3dhdkZpbGVJbmZvLl9udW1iZXJPZkNoYW5uZWxzO1xuICAgICAgY2hhbm5lbENvdW50KytcbiAgICApIHtcbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBzYW1wbGVDb3VudCA9IHRoaXMuX3NhbXBsZU9mZnNldDtcbiAgICAgICAgc2FtcGxlQ291bnQgPCBnb2FsT2Zmc2V0O1xuICAgICAgICBzYW1wbGVDb3VudCsrXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgcGNtID0gdGhpcy5fcGNtRGF0YVtjaGFubmVsQ291bnRdW3NhbXBsZUNvdW50XTtcbiAgICAgICAgcm1zICs9IHBjbSAqIHBjbTtcbiAgICAgIH1cbiAgICB9XG4gICAgcm1zID0gTWF0aC5zcXJ0KFxuICAgICAgcm1zIC9cbiAgICAgICAgKHRoaXMuX3dhdkZpbGVJbmZvLl9udW1iZXJPZkNoYW5uZWxzICpcbiAgICAgICAgICAoZ29hbE9mZnNldCAtIHRoaXMuX3NhbXBsZU9mZnNldCkpXG4gICAgKTtcblxuICAgIHRoaXMuX2xhc3RSbXMgPSBybXM7XG4gICAgdGhpcy5fc2FtcGxlT2Zmc2V0ID0gZ29hbE9mZnNldDtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHB1YmxpYyBzdGFydChmaWxlUGF0aDogc3RyaW5nKTogdm9pZCB7XG4gICAgLy8g44K144Oz44OX44Or5L2N5Y+C54Wn5L2N572u44KS5Yid5pyf5YyWXG4gICAgdGhpcy5fc2FtcGxlT2Zmc2V0ID0gMDtcbiAgICB0aGlzLl91c2VyVGltZVNlY29uZHMgPSAwLjA7XG5cbiAgICAvLyBSTVPlgKTjgpLjg6rjgrvjg4Pjg4hcbiAgICB0aGlzLl9sYXN0Um1zID0gMC4wO1xuXG4gICAgaWYgKCF0aGlzLmxvYWRXYXZGaWxlKGZpbGVQYXRoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXRSbXMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbGFzdFJtcztcbiAgfVxuXG4gIHB1YmxpYyBsb2FkV2F2RmlsZShmaWxlUGF0aDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgbGV0IHJldCA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMuX3BjbURhdGEgIT0gbnVsbCkge1xuICAgICAgdGhpcy5yZWxlYXNlUGNtRGF0YSgpO1xuICAgIH1cblxuICAgIC8vIOODleOCoeOCpOODq+ODreODvOODiVxuICAgIGNvbnN0IGFzeW5jRmlsZUxvYWQgPSBhc3luYyAoKSA9PiB7XG4gICAgICByZXR1cm4gZmV0Y2goZmlsZVBhdGgpLnRoZW4ocmVzcG9uY2UgPT4ge1xuICAgICAgICByZXR1cm4gcmVzcG9uY2UuYXJyYXlCdWZmZXIoKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBhc3luY1dhdkZpbGVNYW5hZ2VyID0gKGFzeW5jICgpID0+IHtcbiAgICAgIHRoaXMuX2J5dGVSZWFkZXIuX2ZpbGVCeXRlID0gYXdhaXQgYXN5bmNGaWxlTG9hZCgpO1xuICAgICAgdGhpcy5fYnl0ZVJlYWRlci5fZmlsZURhdGFWaWV3ID0gbmV3IERhdGFWaWV3KHRoaXMuX2J5dGVSZWFkZXIuX2ZpbGVCeXRlKTtcbiAgICAgIHRoaXMuX2J5dGVSZWFkZXIuX2ZpbGVTaXplID0gdGhpcy5fYnl0ZVJlYWRlci5fZmlsZUJ5dGUuYnl0ZUxlbmd0aDtcbiAgICAgIHRoaXMuX2J5dGVSZWFkZXIuX3JlYWRPZmZzZXQgPSAwO1xuXG4gICAgICAvLyDjg5XjgqHjgqTjg6vjg63jg7zjg4njgavlpLHmlZfjgZfjgabjgYTjgovjgYvjgIHlhYjpoK3jga7jgrfjgrDjg43jg4Hjg6NcIlJJRkZcIuOCkuWFpeOCjOOCi+OCteOCpOOCuuOCguOBquOBhOWgtOWQiOOBr+WkseaVl1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLl9ieXRlUmVhZGVyLl9maWxlQnl0ZSA9PSBudWxsIHx8XG4gICAgICAgIHRoaXMuX2J5dGVSZWFkZXIuX2ZpbGVTaXplIDwgNFxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8g44OV44Kh44Kk44Or5ZCNXG4gICAgICB0aGlzLl93YXZGaWxlSW5mby5fZmlsZU5hbWUgPSBmaWxlUGF0aDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8g44K344Kw44ON44OB44OjIFwiUklGRlwiXG4gICAgICAgIGlmICghdGhpcy5fYnl0ZVJlYWRlci5nZXRDaGVja1NpZ25hdHVyZSgnUklGRicpKSB7XG4gICAgICAgICAgcmV0ID0gZmFsc2U7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZmluZCBTaWduZXR1cmUgXCJSSUZGXCIuJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8g44OV44Kh44Kk44Or44K144Kk44K6LTjvvIjoqq3jgb/po5vjgbDjgZfvvIlcbiAgICAgICAgdGhpcy5fYnl0ZVJlYWRlci5nZXQzMkxpdHRsZUVuZGlhbigpO1xuICAgICAgICAvLyDjgrfjgrDjg43jg4Hjg6MgXCJXQVZFXCJcbiAgICAgICAgaWYgKCF0aGlzLl9ieXRlUmVhZGVyLmdldENoZWNrU2lnbmF0dXJlKCdXQVZFJykpIHtcbiAgICAgICAgICByZXQgPSBmYWxzZTtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBmaW5kIFNpZ25ldHVyZSBcIldBVkVcIi4nKTtcbiAgICAgICAgfVxuICAgICAgICAvLyDjgrfjgrDjg43jg4Hjg6MgXCJmbXQgXCJcbiAgICAgICAgaWYgKCF0aGlzLl9ieXRlUmVhZGVyLmdldENoZWNrU2lnbmF0dXJlKCdmbXQgJykpIHtcbiAgICAgICAgICByZXQgPSBmYWxzZTtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBmaW5kIFNpZ25ldHVyZSBcImZtdFwiLicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGZtdOODgeODo+ODs+OCr+OCteOCpOOCulxuICAgICAgICBjb25zdCBmbXRDaHVua1NpemUgPSB0aGlzLl9ieXRlUmVhZGVyLmdldDMyTGl0dGxlRW5kaWFuKCk7XG4gICAgICAgIC8vIOODleOCqeODvOODnuODg+ODiElE44GvMe+8iOODquODi+OColBDTe+8ieS7peWkluWPl+OBkeS7mOOBkeOBquOBhFxuICAgICAgICBpZiAodGhpcy5fYnl0ZVJlYWRlci5nZXQxNkxpdHRsZUVuZGlhbigpICE9IDEpIHtcbiAgICAgICAgICByZXQgPSBmYWxzZTtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZpbGUgaXMgbm90IGxpbmVhciBQQ00uJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8g44OB44Oj44Oz44ON44Or5pWwXG4gICAgICAgIHRoaXMuX3dhdkZpbGVJbmZvLl9udW1iZXJPZkNoYW5uZWxzID1cbiAgICAgICAgICB0aGlzLl9ieXRlUmVhZGVyLmdldDE2TGl0dGxlRW5kaWFuKCk7XG4gICAgICAgIC8vIOOCteODs+ODl+ODquODs+OCsOODrOODvOODiFxuICAgICAgICB0aGlzLl93YXZGaWxlSW5mby5fc2FtcGxpbmdSYXRlID0gdGhpcy5fYnl0ZVJlYWRlci5nZXQzMkxpdHRsZUVuZGlhbigpO1xuICAgICAgICAvLyDjg4fjg7zjgr/pgJ/luqZbYnl0ZS9zZWNd77yI6Kqt44G/6aOb44Gw44GX77yJXG4gICAgICAgIHRoaXMuX2J5dGVSZWFkZXIuZ2V0MzJMaXR0bGVFbmRpYW4oKTtcbiAgICAgICAgLy8g44OW44Ot44OD44Kv44K144Kk44K677yI6Kqt44G/6aOb44Gw44GX77yJXG4gICAgICAgIHRoaXMuX2J5dGVSZWFkZXIuZ2V0MTZMaXR0bGVFbmRpYW4oKTtcbiAgICAgICAgLy8g6YeP5a2Q5YyW44OT44OD44OI5pWwXG4gICAgICAgIHRoaXMuX3dhdkZpbGVJbmZvLl9iaXRzUGVyU2FtcGxlID0gdGhpcy5fYnl0ZVJlYWRlci5nZXQxNkxpdHRsZUVuZGlhbigpO1xuICAgICAgICAvLyBmbXTjg4Hjg6Pjg7Pjgq/jga7mi6HlvLXpg6jliIbjga7oqq3jgb/po5vjgbDjgZdcbiAgICAgICAgaWYgKGZtdENodW5rU2l6ZSA+IDE2KSB7XG4gICAgICAgICAgdGhpcy5fYnl0ZVJlYWRlci5fcmVhZE9mZnNldCArPSBmbXRDaHVua1NpemUgLSAxNjtcbiAgICAgICAgfVxuICAgICAgICAvLyBcImRhdGFcIuODgeODo+ODs+OCr+OBjOWHuuePvuOBmeOCi+OBvuOBp+iqreOBv+mjm+OBsOOBl1xuICAgICAgICB3aGlsZSAoXG4gICAgICAgICAgIXRoaXMuX2J5dGVSZWFkZXIuZ2V0Q2hlY2tTaWduYXR1cmUoJ2RhdGEnKSAmJlxuICAgICAgICAgIHRoaXMuX2J5dGVSZWFkZXIuX3JlYWRPZmZzZXQgPCB0aGlzLl9ieXRlUmVhZGVyLl9maWxlU2l6ZVxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLl9ieXRlUmVhZGVyLl9yZWFkT2Zmc2V0ICs9XG4gICAgICAgICAgICB0aGlzLl9ieXRlUmVhZGVyLmdldDMyTGl0dGxlRW5kaWFuKCkgKyA0O1xuICAgICAgICB9XG4gICAgICAgIC8vIOODleOCoeOCpOODq+WGheOBq1wiZGF0YVwi44OB44Oj44Oz44Kv44GM5Ye654++44GX44Gq44GL44Gj44GfXG4gICAgICAgIGlmICh0aGlzLl9ieXRlUmVhZGVyLl9yZWFkT2Zmc2V0ID49IHRoaXMuX2J5dGVSZWFkZXIuX2ZpbGVTaXplKSB7XG4gICAgICAgICAgcmV0ID0gZmFsc2U7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZmluZCBcImRhdGFcIiBDaHVuay4nKTtcbiAgICAgICAgfVxuICAgICAgICAvLyDjgrXjg7Pjg5fjg6vmlbBcbiAgICAgICAge1xuICAgICAgICAgIGNvbnN0IGRhdGFDaHVua1NpemUgPSB0aGlzLl9ieXRlUmVhZGVyLmdldDMyTGl0dGxlRW5kaWFuKCk7XG4gICAgICAgICAgdGhpcy5fd2F2RmlsZUluZm8uX3NhbXBsZXNQZXJDaGFubmVsID1cbiAgICAgICAgICAgIChkYXRhQ2h1bmtTaXplICogOCkgL1xuICAgICAgICAgICAgKHRoaXMuX3dhdkZpbGVJbmZvLl9iaXRzUGVyU2FtcGxlICpcbiAgICAgICAgICAgICAgdGhpcy5fd2F2RmlsZUluZm8uX251bWJlck9mQ2hhbm5lbHMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIOmgmOWfn+eiuuS/nVxuICAgICAgICB0aGlzLl9wY21EYXRhID0gbmV3IEFycmF5KHRoaXMuX3dhdkZpbGVJbmZvLl9udW1iZXJPZkNoYW5uZWxzKTtcbiAgICAgICAgZm9yIChcbiAgICAgICAgICBsZXQgY2hhbm5lbENvdW50ID0gMDtcbiAgICAgICAgICBjaGFubmVsQ291bnQgPCB0aGlzLl93YXZGaWxlSW5mby5fbnVtYmVyT2ZDaGFubmVscztcbiAgICAgICAgICBjaGFubmVsQ291bnQrK1xuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLl9wY21EYXRhW2NoYW5uZWxDb3VudF0gPSBuZXcgRmxvYXQzMkFycmF5KFxuICAgICAgICAgICAgdGhpcy5fd2F2RmlsZUluZm8uX3NhbXBsZXNQZXJDaGFubmVsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyDms6LlvaLjg4fjg7zjgr/lj5blvpdcbiAgICAgICAgZm9yIChcbiAgICAgICAgICBsZXQgc2FtcGxlQ291bnQgPSAwO1xuICAgICAgICAgIHNhbXBsZUNvdW50IDwgdGhpcy5fd2F2RmlsZUluZm8uX3NhbXBsZXNQZXJDaGFubmVsO1xuICAgICAgICAgIHNhbXBsZUNvdW50KytcbiAgICAgICAgKSB7XG4gICAgICAgICAgZm9yIChcbiAgICAgICAgICAgIGxldCBjaGFubmVsQ291bnQgPSAwO1xuICAgICAgICAgICAgY2hhbm5lbENvdW50IDwgdGhpcy5fd2F2RmlsZUluZm8uX251bWJlck9mQ2hhbm5lbHM7XG4gICAgICAgICAgICBjaGFubmVsQ291bnQrK1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5fcGNtRGF0YVtjaGFubmVsQ291bnRdW3NhbXBsZUNvdW50XSA9IHRoaXMuZ2V0UGNtU2FtcGxlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0ID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICB9XG4gICAgfSkoKTtcblxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICBwdWJsaWMgZ2V0UGNtU2FtcGxlKCk6IG51bWJlciB7XG4gICAgbGV0IHBjbTMyO1xuXG4gICAgLy8gMzLjg5Pjg4Pjg4jluYXjgavmi6HlvLXjgZfjgabjgYvjgoktMe+9njHjga7nr4Tlm7LjgavkuLjjgoHjgotcbiAgICBzd2l0Y2ggKHRoaXMuX3dhdkZpbGVJbmZvLl9iaXRzUGVyU2FtcGxlKSB7XG4gICAgICBjYXNlIDg6XG4gICAgICAgIHBjbTMyID0gdGhpcy5fYnl0ZVJlYWRlci5nZXQ4KCkgLSAxMjg7XG4gICAgICAgIHBjbTMyIDw8PSAyNDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDE2OlxuICAgICAgICBwY20zMiA9IHRoaXMuX2J5dGVSZWFkZXIuZ2V0MTZMaXR0bGVFbmRpYW4oKSA8PCAxNjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI0OlxuICAgICAgICBwY20zMiA9IHRoaXMuX2J5dGVSZWFkZXIuZ2V0MjRMaXR0bGVFbmRpYW4oKSA8PCA4O1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIC8vIOWvvuW/nOOBl+OBpuOBhOOBquOBhOODk+ODg+ODiOW5hVxuICAgICAgICBwY20zMiA9IDA7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBwY20zMiAvIDIxNDc0ODM2NDc7IC8vTnVtYmVyLk1BWF9WQUxVRTtcbiAgfVxuXG4gIHB1YmxpYyByZWxlYXNlUGNtRGF0YSgpOiB2b2lkIHtcbiAgICBmb3IgKFxuICAgICAgbGV0IGNoYW5uZWxDb3VudCA9IDA7XG4gICAgICBjaGFubmVsQ291bnQgPCB0aGlzLl93YXZGaWxlSW5mby5fbnVtYmVyT2ZDaGFubmVscztcbiAgICAgIGNoYW5uZWxDb3VudCsrXG4gICAgKSB7XG4gICAgICBkZWxldGUgdGhpcy5fcGNtRGF0YVtjaGFubmVsQ291bnRdO1xuICAgIH1cbiAgICBkZWxldGUgdGhpcy5fcGNtRGF0YTtcbiAgICB0aGlzLl9wY21EYXRhID0gbnVsbDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3BjbURhdGEgPSBudWxsO1xuICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyA9IDAuMDtcbiAgICB0aGlzLl9sYXN0Um1zID0gMC4wO1xuICAgIHRoaXMuX3NhbXBsZU9mZnNldCA9IDAuMDtcbiAgICB0aGlzLl93YXZGaWxlSW5mbyA9IG5ldyBXYXZGaWxlSW5mbygpO1xuICAgIHRoaXMuX2J5dGVSZWFkZXIgPSBuZXcgQnl0ZVJlYWRlcigpO1xuICB9XG5cbiAgX3BjbURhdGE6IEFycmF5PEZsb2F0MzJBcnJheT47XG4gIF91c2VyVGltZVNlY29uZHM6IG51bWJlcjtcbiAgX2xhc3RSbXM6IG51bWJlcjtcbiAgX3NhbXBsZU9mZnNldDogbnVtYmVyO1xuICBfd2F2RmlsZUluZm86IFdhdkZpbGVJbmZvO1xuICBfYnl0ZVJlYWRlcjogQnl0ZVJlYWRlcjtcbiAgX2xvYWRGaWxldG9CeXRlcyA9IChhcnJheUJ1ZmZlcjogQXJyYXlCdWZmZXIsIGxlbmd0aDogbnVtYmVyKTogdm9pZCA9PiB7XG4gICAgdGhpcy5fYnl0ZVJlYWRlci5fZmlsZUJ5dGUgPSBhcnJheUJ1ZmZlcjtcbiAgICB0aGlzLl9ieXRlUmVhZGVyLl9maWxlRGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcodGhpcy5fYnl0ZVJlYWRlci5fZmlsZUJ5dGUpO1xuICAgIHRoaXMuX2J5dGVSZWFkZXIuX2ZpbGVTaXplID0gbGVuZ3RoO1xuICB9O1xufVxuXG5leHBvcnQgY2xhc3MgV2F2RmlsZUluZm8ge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9maWxlTmFtZSA9ICcnO1xuICAgIHRoaXMuX251bWJlck9mQ2hhbm5lbHMgPSAwO1xuICAgIHRoaXMuX2JpdHNQZXJTYW1wbGUgPSAwO1xuICAgIHRoaXMuX3NhbXBsaW5nUmF0ZSA9IDA7XG4gICAgdGhpcy5fc2FtcGxlc1BlckNoYW5uZWwgPSAwO1xuICB9XG5cbiAgX2ZpbGVOYW1lOiBzdHJpbmc7IC8vLzwg44OV44Kh44Kk44Or5ZCNXG4gIF9udW1iZXJPZkNoYW5uZWxzOiBudW1iZXI7IC8vLzwg44OB44Oj44Oz44ON44Or5pWwXG4gIF9iaXRzUGVyU2FtcGxlOiBudW1iZXI7IC8vLzwg44K144Oz44OX44Or44GC44Gf44KK44OT44OD44OI5pWwXG4gIF9zYW1wbGluZ1JhdGU6IG51bWJlcjsgLy8vPCDjgrXjg7Pjg5fjg6rjg7PjgrDjg6zjg7zjg4hcbiAgX3NhbXBsZXNQZXJDaGFubmVsOiBudW1iZXI7IC8vLzwgMeODgeODo+ODs+ODjeODq+OBguOBn+OCiue3j+OCteODs+ODl+ODq+aVsFxufVxuXG5leHBvcnQgY2xhc3MgQnl0ZVJlYWRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2ZpbGVCeXRlID0gbnVsbDtcbiAgICB0aGlzLl9maWxlRGF0YVZpZXcgPSBudWxsO1xuICAgIHRoaXMuX2ZpbGVTaXplID0gMDtcbiAgICB0aGlzLl9yZWFkT2Zmc2V0ID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAYnJpZWYgOOODk+ODg+ODiOiqreOBv+i+vOOBv1xuICAgKiBAcmV0dXJuIENzbTo6Y3NtVWludDgg6Kqt44G/5Y+W44Gj44GfOOODk+ODg+ODiOWApFxuICAgKi9cbiAgcHVibGljIGdldDgoKTogbnVtYmVyIHtcbiAgICBjb25zdCByZXQgPSB0aGlzLl9maWxlRGF0YVZpZXcuZ2V0VWludDgodGhpcy5fcmVhZE9mZnNldCk7XG4gICAgdGhpcy5fcmVhZE9mZnNldCsrO1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICogQGJyaWVmIDE244OT44OD44OI6Kqt44G/6L6844G/77yI44Oq44OI44Or44Ko44Oz44OH44Kj44Ki44Oz77yJXG4gICAqIEByZXR1cm4gQ3NtOjpjc21VaW50MTYg6Kqt44G/5Y+W44Gj44GfMTbjg5Pjg4Pjg4jlgKRcbiAgICovXG4gIHB1YmxpYyBnZXQxNkxpdHRsZUVuZGlhbigpOiBudW1iZXIge1xuICAgIGNvbnN0IHJldCA9XG4gICAgICAodGhpcy5fZmlsZURhdGFWaWV3LmdldFVpbnQ4KHRoaXMuX3JlYWRPZmZzZXQgKyAxKSA8PCA4KSB8XG4gICAgICB0aGlzLl9maWxlRGF0YVZpZXcuZ2V0VWludDgodGhpcy5fcmVhZE9mZnNldCk7XG4gICAgdGhpcy5fcmVhZE9mZnNldCArPSAyO1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICogQGJyaWVmIDI044OT44OD44OI6Kqt44G/6L6844G/77yI44Oq44OI44Or44Ko44Oz44OH44Kj44Ki44Oz77yJXG4gICAqIEByZXR1cm4gQ3NtOjpjc21VaW50MzIg6Kqt44G/5Y+W44Gj44GfMjTjg5Pjg4Pjg4jlgKTvvIjkuIvkvY0yNOODk+ODg+ODiOOBq+ioreWumu+8iVxuICAgKi9cbiAgcHVibGljIGdldDI0TGl0dGxlRW5kaWFuKCk6IG51bWJlciB7XG4gICAgY29uc3QgcmV0ID1cbiAgICAgICh0aGlzLl9maWxlRGF0YVZpZXcuZ2V0VWludDgodGhpcy5fcmVhZE9mZnNldCArIDIpIDw8IDE2KSB8XG4gICAgICAodGhpcy5fZmlsZURhdGFWaWV3LmdldFVpbnQ4KHRoaXMuX3JlYWRPZmZzZXQgKyAxKSA8PCA4KSB8XG4gICAgICB0aGlzLl9maWxlRGF0YVZpZXcuZ2V0VWludDgodGhpcy5fcmVhZE9mZnNldCk7XG4gICAgdGhpcy5fcmVhZE9mZnNldCArPSAzO1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICogQGJyaWVmIDMy44OT44OD44OI6Kqt44G/6L6844G/77yI44Oq44OI44Or44Ko44Oz44OH44Kj44Ki44Oz77yJXG4gICAqIEByZXR1cm4gQ3NtOjpjc21VaW50MzIg6Kqt44G/5Y+W44Gj44GfMzLjg5Pjg4Pjg4jlgKRcbiAgICovXG4gIHB1YmxpYyBnZXQzMkxpdHRsZUVuZGlhbigpOiBudW1iZXIge1xuICAgIGNvbnN0IHJldCA9XG4gICAgICAodGhpcy5fZmlsZURhdGFWaWV3LmdldFVpbnQ4KHRoaXMuX3JlYWRPZmZzZXQgKyAzKSA8PCAyNCkgfFxuICAgICAgKHRoaXMuX2ZpbGVEYXRhVmlldy5nZXRVaW50OCh0aGlzLl9yZWFkT2Zmc2V0ICsgMikgPDwgMTYpIHxcbiAgICAgICh0aGlzLl9maWxlRGF0YVZpZXcuZ2V0VWludDgodGhpcy5fcmVhZE9mZnNldCArIDEpIDw8IDgpIHxcbiAgICAgIHRoaXMuX2ZpbGVEYXRhVmlldy5nZXRVaW50OCh0aGlzLl9yZWFkT2Zmc2V0KTtcbiAgICB0aGlzLl9yZWFkT2Zmc2V0ICs9IDQ7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAYnJpZWYg44K344Kw44ON44OB44Oj44Gu5Y+W5b6X44Go5Y+C54Wn5paH5a2X5YiX44Go44Gu5LiA6Ie044OB44Kn44OD44KvXG4gICAqIEBwYXJhbVtpbl0gcmVmZXJlbmNlIOaknOafu+WvvuixoeOBruOCt+OCsOODjeODgeODo+aWh+Wtl+WIl1xuICAgKiBAcmV0dmFsICB0cnVlICAgIOS4gOiHtOOBl+OBpuOBhOOCi1xuICAgKiBAcmV0dmFsICBmYWxzZSAgIOS4gOiHtOOBl+OBpuOBhOOBquOBhFxuICAgKi9cbiAgcHVibGljIGdldENoZWNrU2lnbmF0dXJlKHJlZmVyZW5jZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgY29uc3QgZ2V0U2lnbmF0dXJlOiBVaW50OEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoNCk7XG4gICAgY29uc3QgcmVmZXJlbmNlU3RyaW5nOiBVaW50OEFycmF5ID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHJlZmVyZW5jZSk7XG4gICAgaWYgKHJlZmVyZW5jZS5sZW5ndGggIT0gNCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGxldCBzaWduYXR1cmVPZmZzZXQgPSAwOyBzaWduYXR1cmVPZmZzZXQgPCA0OyBzaWduYXR1cmVPZmZzZXQrKykge1xuICAgICAgZ2V0U2lnbmF0dXJlW3NpZ25hdHVyZU9mZnNldF0gPSB0aGlzLmdldDgoKTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIGdldFNpZ25hdHVyZVswXSA9PSByZWZlcmVuY2VTdHJpbmdbMF0gJiZcbiAgICAgIGdldFNpZ25hdHVyZVsxXSA9PSByZWZlcmVuY2VTdHJpbmdbMV0gJiZcbiAgICAgIGdldFNpZ25hdHVyZVsyXSA9PSByZWZlcmVuY2VTdHJpbmdbMl0gJiZcbiAgICAgIGdldFNpZ25hdHVyZVszXSA9PSByZWZlcmVuY2VTdHJpbmdbM11cbiAgICApO1xuICB9XG5cbiAgX2ZpbGVCeXRlOiBBcnJheUJ1ZmZlcjsgLy8vPCDjg63jg7zjg4njgZfjgZ/jg5XjgqHjgqTjg6vjga7jg5DjgqTjg4jliJdcbiAgX2ZpbGVEYXRhVmlldzogRGF0YVZpZXc7XG4gIF9maWxlU2l6ZTogbnVtYmVyOyAvLy88IOODleOCoeOCpOODq+OCteOCpOOCulxuICBfcmVhZE9mZnNldDogbnVtYmVyOyAvLy88IOODleOCoeOCpOODq+WPgueFp+S9jee9rlxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuZXhwb3J0IGNsYXNzIFRvdWNoTWFuYWdlciB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3N0YXJ0WCA9IDAuMDtcbiAgICB0aGlzLl9zdGFydFkgPSAwLjA7XG4gICAgdGhpcy5fbGFzdFggPSAwLjA7XG4gICAgdGhpcy5fbGFzdFkgPSAwLjA7XG4gICAgdGhpcy5fbGFzdFgxID0gMC4wO1xuICAgIHRoaXMuX2xhc3RZMSA9IDAuMDtcbiAgICB0aGlzLl9sYXN0WDIgPSAwLjA7XG4gICAgdGhpcy5fbGFzdFkyID0gMC4wO1xuICAgIHRoaXMuX2xhc3RUb3VjaERpc3RhbmNlID0gMC4wO1xuICAgIHRoaXMuX2RlbHRhWCA9IDAuMDtcbiAgICB0aGlzLl9kZWx0YVkgPSAwLjA7XG4gICAgdGhpcy5fc2NhbGUgPSAxLjA7XG4gICAgdGhpcy5fdG91Y2hTaW5nbGUgPSBmYWxzZTtcbiAgICB0aGlzLl9mbGlwQXZhaWxhYmxlID0gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgZ2V0Q2VudGVyWCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sYXN0WDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRDZW50ZXJZKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2xhc3RZO1xuICB9XG5cbiAgcHVibGljIGdldERlbHRhWCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9kZWx0YVg7XG4gIH1cblxuICBwdWJsaWMgZ2V0RGVsdGFZKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2RlbHRhWTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRTdGFydFgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhcnRYO1xuICB9XG5cbiAgcHVibGljIGdldFN0YXJ0WSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9zdGFydFk7XG4gIH1cblxuICBwdWJsaWMgZ2V0U2NhbGUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc2NhbGU7XG4gIH1cblxuICBwdWJsaWMgZ2V0WCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sYXN0WDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRZKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2xhc3RZO1xuICB9XG5cbiAgcHVibGljIGdldFgxKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2xhc3RYMTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRZMSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sYXN0WTE7XG4gIH1cblxuICBwdWJsaWMgZ2V0WDIoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbGFzdFgyO1xuICB9XG5cbiAgcHVibGljIGdldFkyKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2xhc3RZMjtcbiAgfVxuXG4gIHB1YmxpYyBpc1NpbmdsZVRvdWNoKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl90b3VjaFNpbmdsZTtcbiAgfVxuXG4gIHB1YmxpYyBpc0ZsaWNrQXZhaWxhYmxlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9mbGlwQXZhaWxhYmxlO1xuICB9XG5cbiAgcHVibGljIGRpc2FibGVGbGljaygpOiB2b2lkIHtcbiAgICB0aGlzLl9mbGlwQXZhaWxhYmxlID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICog44K/44OD44OB6ZaL5aeL5pmC44Kk44OZ44Oz44OIXG4gICAqIEBwYXJhbSBkZXZpY2VYIOOCv+ODg+ODgeOBl+OBn+eUu+mdouOBrnjjga7lgKRcbiAgICogQHBhcmFtIGRldmljZVkg44K/44OD44OB44GX44Gf55S76Z2i44GueeOBruWApFxuICAgKi9cbiAgcHVibGljIHRvdWNoZXNCZWdhbihkZXZpY2VYOiBudW1iZXIsIGRldmljZVk6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX2xhc3RYID0gZGV2aWNlWDtcbiAgICB0aGlzLl9sYXN0WSA9IGRldmljZVk7XG4gICAgdGhpcy5fc3RhcnRYID0gZGV2aWNlWDtcbiAgICB0aGlzLl9zdGFydFkgPSBkZXZpY2VZO1xuICAgIHRoaXMuX2xhc3RUb3VjaERpc3RhbmNlID0gLTEuMDtcbiAgICB0aGlzLl9mbGlwQXZhaWxhYmxlID0gdHJ1ZTtcbiAgICB0aGlzLl90b3VjaFNpbmdsZSA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICog44OJ44Op44OD44Kw5pmC44Gu44Kk44OZ44Oz44OIXG4gICAqIEBwYXJhbSBkZXZpY2VYIOOCv+ODg+ODgeOBl+OBn+eUu+mdouOBrnjjga7lgKRcbiAgICogQHBhcmFtIGRldmljZVkg44K/44OD44OB44GX44Gf55S76Z2i44GueeOBruWApFxuICAgKi9cbiAgcHVibGljIHRvdWNoZXNNb3ZlZChkZXZpY2VYOiBudW1iZXIsIGRldmljZVk6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX2xhc3RYID0gZGV2aWNlWDtcbiAgICB0aGlzLl9sYXN0WSA9IGRldmljZVk7XG4gICAgdGhpcy5fbGFzdFRvdWNoRGlzdGFuY2UgPSAtMS4wO1xuICAgIHRoaXMuX3RvdWNoU2luZ2xlID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Xjg6rjg4Pjgq/jga7ot53pm6LmuKzlrppcbiAgICogQHJldHVybiDjg5Xjg6rjg4Pjgq/ot53pm6JcbiAgICovXG4gIHB1YmxpYyBnZXRGbGlja0Rpc3RhbmNlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuY2FsY3VsYXRlRGlzdGFuY2UoXG4gICAgICB0aGlzLl9zdGFydFgsXG4gICAgICB0aGlzLl9zdGFydFksXG4gICAgICB0aGlzLl9sYXN0WCxcbiAgICAgIHRoaXMuX2xhc3RZXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDngrnvvJHjgYvjgonngrnvvJLjgbjjga7ot53pm6LjgpLmsYLjgoHjgotcbiAgICpcbiAgICogQHBhcmFtIHgxIO+8keOBpOebruOBruOCv+ODg+ODgeOBl+OBn+eUu+mdouOBrnjjga7lgKRcbiAgICogQHBhcmFtIHkxIO+8keOBpOebruOBruOCv+ODg+ODgeOBl+OBn+eUu+mdouOBrnnjga7lgKRcbiAgICogQHBhcmFtIHgyIO+8kuOBpOebruOBruOCv+ODg+ODgeOBl+OBn+eUu+mdouOBrnjjga7lgKRcbiAgICogQHBhcmFtIHkyIO+8kuOBpOebruOBruOCv+ODg+ODgeOBl+OBn+eUu+mdouOBrnnjga7lgKRcbiAgICovXG4gIHB1YmxpYyBjYWxjdWxhdGVEaXN0YW5jZShcbiAgICB4MTogbnVtYmVyLFxuICAgIHkxOiBudW1iZXIsXG4gICAgeDI6IG51bWJlcixcbiAgICB5MjogbnVtYmVyXG4gICk6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGguc3FydCgoeDEgLSB4MikgKiAoeDEgLSB4MikgKyAoeTEgLSB5MikgKiAoeTEgLSB5MikpO1xuICB9XG5cbiAgLyoqXG4gICAqIO+8kuOBpOebruOBruWApOOBi+OCieOAgeenu+WLlemHj+OCkuaxguOCgeOCi+OAglxuICAgKiDpgZXjgYbmlrnlkJHjga7loLTlkIjjga/np7vli5Xph4/vvJDjgILlkIzjgZjmlrnlkJHjga7loLTlkIjjga/jgIHntbblr77lgKTjgYzlsI/jgZXjgYTmlrnjga7lgKTjgpLlj4LnhafjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIHYxIO+8keOBpOebruOBruenu+WLlemHj1xuICAgKiBAcGFyYW0gdjIg77yS44Gk55uu44Gu56e75YuV6YePXG4gICAqXG4gICAqIEByZXR1cm4g5bCP44GV44GE5pa544Gu56e75YuV6YePXG4gICAqL1xuICBwdWJsaWMgY2FsY3VsYXRlTW92aW5nQW1vdW50KHYxOiBudW1iZXIsIHYyOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGlmICh2MSA+IDAuMCAhPSB2MiA+IDAuMCkge1xuICAgICAgcmV0dXJuIDAuMDtcbiAgICB9XG5cbiAgICBjb25zdCBzaWduOiBudW1iZXIgPSB2MSA+IDAuMCA/IDEuMCA6IC0xLjA7XG4gICAgY29uc3QgYWJzb2x1dGVWYWx1ZTEgPSBNYXRoLmFicyh2MSk7XG4gICAgY29uc3QgYWJzb2x1dGVWYWx1ZTIgPSBNYXRoLmFicyh2Mik7XG4gICAgcmV0dXJuIChcbiAgICAgIHNpZ24gKiAoYWJzb2x1dGVWYWx1ZTEgPCBhYnNvbHV0ZVZhbHVlMiA/IGFic29sdXRlVmFsdWUxIDogYWJzb2x1dGVWYWx1ZTIpXG4gICAgKTtcbiAgfVxuXG4gIF9zdGFydFk6IG51bWJlcjsgLy8g44K/44OD44OB44KS6ZaL5aeL44GX44Gf5pmC44GueOOBruWApFxuICBfc3RhcnRYOiBudW1iZXI7IC8vIOOCv+ODg+ODgeOCkumWi+Wni+OBl+OBn+aZguOBrnnjga7lgKRcbiAgX2xhc3RYOiBudW1iZXI7IC8vIOOCt+ODs+OCsOODq+OCv+ODg+ODgeaZguOBrnjjga7lgKRcbiAgX2xhc3RZOiBudW1iZXI7IC8vIOOCt+ODs+OCsOODq+OCv+ODg+ODgeaZguOBrnnjga7lgKRcbiAgX2xhc3RYMTogbnVtYmVyOyAvLyDjg4Djg5bjg6vjgr/jg4Pjg4HmmYLjga7kuIDjgaTnm67jga5444Gu5YCkXG4gIF9sYXN0WTE6IG51bWJlcjsgLy8g44OA44OW44Or44K/44OD44OB5pmC44Gu5LiA44Gk55uu44GueeOBruWApFxuICBfbGFzdFgyOiBudW1iZXI7IC8vIOODgOODluODq+OCv+ODg+ODgeaZguOBruS6jOOBpOebruOBrnjjga7lgKRcbiAgX2xhc3RZMjogbnVtYmVyOyAvLyDjg4Djg5bjg6vjgr/jg4Pjg4HmmYLjga7kuozjgaTnm67jga5544Gu5YCkXG4gIF9sYXN0VG91Y2hEaXN0YW5jZTogbnVtYmVyOyAvLyAy5pys5Lul5LiK44Gn44K/44OD44OB44GX44Gf44Go44GN44Gu5oyH44Gu6Led6ZuiXG4gIF9kZWx0YVg6IG51bWJlcjsgLy8g5YmN5Zue44Gu5YCk44GL44KJ5LuK5Zue44Gu5YCk44G444GueOOBruenu+WLlei3nembouOAglxuICBfZGVsdGFZOiBudW1iZXI7IC8vIOWJjeWbnuOBruWApOOBi+OCieS7iuWbnuOBruWApOOBuOOBrnnjga7np7vli5Xot53pm6LjgIJcbiAgX3NjYWxlOiBudW1iZXI7IC8vIOOBk+OBruODleODrOODvOODoOOBp+aOm+OBkeWQiOOCj+OBm+OCi+aLoeWkp+eOh+OAguaLoeWkp+aTjeS9nOS4reS7peWkluOBrzHjgIJcbiAgX3RvdWNoU2luZ2xlOiBib29sZWFuOyAvLyDjgrfjg7PjgrDjg6vjgr/jg4Pjg4HmmYLjga90cnVlXG4gIF9mbGlwQXZhaWxhYmxlOiBib29sZWFuOyAvLyDjg5Xjg6rjg4Pjg5fjgYzmnInlirnjgYvjganjgYbjgYtcbn1cbiIsInZhciBnbG9iYWwgPVxuICAodHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbFRoaXMpIHx8XG4gICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZikgfHxcbiAgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbClcblxudmFyIHN1cHBvcnQgPSB7XG4gIHNlYXJjaFBhcmFtczogJ1VSTFNlYXJjaFBhcmFtcycgaW4gZ2xvYmFsLFxuICBpdGVyYWJsZTogJ1N5bWJvbCcgaW4gZ2xvYmFsICYmICdpdGVyYXRvcicgaW4gU3ltYm9sLFxuICBibG9iOlxuICAgICdGaWxlUmVhZGVyJyBpbiBnbG9iYWwgJiZcbiAgICAnQmxvYicgaW4gZ2xvYmFsICYmXG4gICAgKGZ1bmN0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3IEJsb2IoKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9KSgpLFxuICBmb3JtRGF0YTogJ0Zvcm1EYXRhJyBpbiBnbG9iYWwsXG4gIGFycmF5QnVmZmVyOiAnQXJyYXlCdWZmZXInIGluIGdsb2JhbFxufVxuXG5mdW5jdGlvbiBpc0RhdGFWaWV3KG9iaikge1xuICByZXR1cm4gb2JqICYmIERhdGFWaWV3LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKG9iailcbn1cblxuaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIpIHtcbiAgdmFyIHZpZXdDbGFzc2VzID0gW1xuICAgICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50MzJBcnJheV0nLFxuICAgICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nXG4gIF1cblxuICB2YXIgaXNBcnJheUJ1ZmZlclZpZXcgPVxuICAgIEFycmF5QnVmZmVyLmlzVmlldyB8fFxuICAgIGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB2aWV3Q2xhc3Nlcy5pbmRleE9mKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopKSA+IC0xXG4gICAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVOYW1lKG5hbWUpIHtcbiAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgIG5hbWUgPSBTdHJpbmcobmFtZSlcbiAgfVxuICBpZiAoL1teYS16MC05XFwtIyQlJicqKy5eX2B8fiFdL2kudGVzdChuYW1lKSB8fCBuYW1lID09PSAnJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyIGluIGhlYWRlciBmaWVsZCBuYW1lOiBcIicgKyBuYW1lICsgJ1wiJylcbiAgfVxuICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpXG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8vIEJ1aWxkIGEgZGVzdHJ1Y3RpdmUgaXRlcmF0b3IgZm9yIHRoZSB2YWx1ZSBsaXN0XG5mdW5jdGlvbiBpdGVyYXRvckZvcihpdGVtcykge1xuICB2YXIgaXRlcmF0b3IgPSB7XG4gICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmFsdWUgPSBpdGVtcy5zaGlmdCgpXG4gICAgICByZXR1cm4ge2RvbmU6IHZhbHVlID09PSB1bmRlZmluZWQsIHZhbHVlOiB2YWx1ZX1cbiAgICB9XG4gIH1cblxuICBpZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICAgIGl0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBpdGVyYXRvclxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpdGVyYXRvclxufVxuXG5leHBvcnQgZnVuY3Rpb24gSGVhZGVycyhoZWFkZXJzKSB7XG4gIHRoaXMubWFwID0ge31cblxuICBpZiAoaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMpIHtcbiAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIHZhbHVlKVxuICAgIH0sIHRoaXMpXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShoZWFkZXJzKSkge1xuICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbihoZWFkZXIpIHtcbiAgICAgIHRoaXMuYXBwZW5kKGhlYWRlclswXSwgaGVhZGVyWzFdKVxuICAgIH0sIHRoaXMpXG4gIH0gZWxzZSBpZiAoaGVhZGVycykge1xuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgdGhpcy5hcHBlbmQobmFtZSwgaGVhZGVyc1tuYW1lXSlcbiAgICB9LCB0aGlzKVxuICB9XG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gIHZhbHVlID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG4gIHZhciBvbGRWYWx1ZSA9IHRoaXMubWFwW25hbWVdXG4gIHRoaXMubWFwW25hbWVdID0gb2xkVmFsdWUgPyBvbGRWYWx1ZSArICcsICcgKyB2YWx1ZSA6IHZhbHVlXG59XG5cbkhlYWRlcnMucHJvdG90eXBlWydkZWxldGUnXSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgZGVsZXRlIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgcmV0dXJuIHRoaXMuaGFzKG5hbWUpID8gdGhpcy5tYXBbbmFtZV0gOiBudWxsXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHRoaXMubWFwLmhhc093blByb3BlcnR5KG5vcm1hbGl6ZU5hbWUobmFtZSkpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaywgdGhpc0FyZykge1xuICBmb3IgKHZhciBuYW1lIGluIHRoaXMubWFwKSB7XG4gICAgaWYgKHRoaXMubWFwLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHRoaXMubWFwW25hbWVdLCBuYW1lLCB0aGlzKVxuICAgIH1cbiAgfVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpdGVtcyA9IFtdXG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgIGl0ZW1zLnB1c2gobmFtZSlcbiAgfSlcbiAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZW1zID0gW11cbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaXRlbXMucHVzaCh2YWx1ZSlcbiAgfSlcbiAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpdGVtcyA9IFtdXG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgIGl0ZW1zLnB1c2goW25hbWUsIHZhbHVlXSlcbiAgfSlcbiAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxufVxuXG5pZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICBIZWFkZXJzLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gSGVhZGVycy5wcm90b3R5cGUuZW50cmllc1xufVxuXG5mdW5jdGlvbiBjb25zdW1lZChib2R5KSB7XG4gIGlmIChib2R5LmJvZHlVc2VkKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpKVxuICB9XG4gIGJvZHkuYm9keVVzZWQgPSB0cnVlXG59XG5cbmZ1bmN0aW9uIGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlc29sdmUocmVhZGVyLnJlc3VsdClcbiAgICB9XG4gICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlamVjdChyZWFkZXIuZXJyb3IpXG4gICAgfVxuICB9KVxufVxuXG5mdW5jdGlvbiByZWFkQmxvYkFzQXJyYXlCdWZmZXIoYmxvYikge1xuICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKVxuICByZXR1cm4gcHJvbWlzZVxufVxuXG5mdW5jdGlvbiByZWFkQmxvYkFzVGV4dChibG9iKSB7XG4gIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgcmVhZGVyLnJlYWRBc1RleHQoYmxvYilcbiAgcmV0dXJuIHByb21pc2Vcbn1cblxuZnVuY3Rpb24gcmVhZEFycmF5QnVmZmVyQXNUZXh0KGJ1Zikge1xuICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1ZilcbiAgdmFyIGNoYXJzID0gbmV3IEFycmF5KHZpZXcubGVuZ3RoKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmlldy5sZW5ndGg7IGkrKykge1xuICAgIGNoYXJzW2ldID0gU3RyaW5nLmZyb21DaGFyQ29kZSh2aWV3W2ldKVxuICB9XG4gIHJldHVybiBjaGFycy5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBidWZmZXJDbG9uZShidWYpIHtcbiAgaWYgKGJ1Zi5zbGljZSkge1xuICAgIHJldHVybiBidWYuc2xpY2UoMClcbiAgfSBlbHNlIHtcbiAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1Zi5ieXRlTGVuZ3RoKVxuICAgIHZpZXcuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZikpXG4gICAgcmV0dXJuIHZpZXcuYnVmZmVyXG4gIH1cbn1cblxuZnVuY3Rpb24gQm9keSgpIHtcbiAgdGhpcy5ib2R5VXNlZCA9IGZhbHNlXG5cbiAgdGhpcy5faW5pdEJvZHkgPSBmdW5jdGlvbihib2R5KSB7XG4gICAgLypcbiAgICAgIGZldGNoLW1vY2sgd3JhcHMgdGhlIFJlc3BvbnNlIG9iamVjdCBpbiBhbiBFUzYgUHJveHkgdG9cbiAgICAgIHByb3ZpZGUgdXNlZnVsIHRlc3QgaGFybmVzcyBmZWF0dXJlcyBzdWNoIGFzIGZsdXNoLiBIb3dldmVyLCBvblxuICAgICAgRVM1IGJyb3dzZXJzIHdpdGhvdXQgZmV0Y2ggb3IgUHJveHkgc3VwcG9ydCBwb2xseWZpbGxzIG11c3QgYmUgdXNlZDtcbiAgICAgIHRoZSBwcm94eS1wb2xseWZpbGwgaXMgdW5hYmxlIHRvIHByb3h5IGFuIGF0dHJpYnV0ZSB1bmxlc3MgaXQgZXhpc3RzXG4gICAgICBvbiB0aGUgb2JqZWN0IGJlZm9yZSB0aGUgUHJveHkgaXMgY3JlYXRlZC4gVGhpcyBjaGFuZ2UgZW5zdXJlc1xuICAgICAgUmVzcG9uc2UuYm9keVVzZWQgZXhpc3RzIG9uIHRoZSBpbnN0YW5jZSwgd2hpbGUgbWFpbnRhaW5pbmcgdGhlXG4gICAgICBzZW1hbnRpYyBvZiBzZXR0aW5nIFJlcXVlc3QuYm9keVVzZWQgaW4gdGhlIGNvbnN0cnVjdG9yIGJlZm9yZVxuICAgICAgX2luaXRCb2R5IGlzIGNhbGxlZC5cbiAgICAqL1xuICAgIHRoaXMuYm9keVVzZWQgPSB0aGlzLmJvZHlVc2VkXG4gICAgdGhpcy5fYm9keUluaXQgPSBib2R5XG4gICAgaWYgKCFib2R5KSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9ICcnXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5ibG9iICYmIEJsb2IucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlCbG9iID0gYm9keVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5mb3JtRGF0YSAmJiBGb3JtRGF0YS5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgdGhpcy5fYm9keUZvcm1EYXRhID0gYm9keVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHkudG9TdHJpbmcoKVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiBzdXBwb3J0LmJsb2IgJiYgaXNEYXRhVmlldyhib2R5KSkge1xuICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyID0gYnVmZmVyQ2xvbmUoYm9keS5idWZmZXIpXG4gICAgICAvLyBJRSAxMC0xMSBjYW4ndCBoYW5kbGUgYSBEYXRhVmlldyBib2R5LlxuICAgICAgdGhpcy5fYm9keUluaXQgPSBuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgKEFycmF5QnVmZmVyLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpIHx8IGlzQXJyYXlCdWZmZXJWaWV3KGJvZHkpKSkge1xuICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyID0gYnVmZmVyQ2xvbmUoYm9keSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5ID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGJvZHkpXG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSkge1xuICAgICAgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04JylcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUJsb2IgJiYgdGhpcy5fYm9keUJsb2IudHlwZSkge1xuICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCB0aGlzLl9ib2R5QmxvYi50eXBlKVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PVVURi04JylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoc3VwcG9ydC5ibG9iKSB7XG4gICAgdGhpcy5ibG9iID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICAgIHJldHVybiByZWplY3RlZFxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QmxvYilcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIGJsb2InKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keVRleHRdKSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmFycmF5QnVmZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgIHZhciBpc0NvbnN1bWVkID0gY29uc3VtZWQodGhpcylcbiAgICAgICAgaWYgKGlzQ29uc3VtZWQpIHtcbiAgICAgICAgICByZXR1cm4gaXNDb25zdW1lZFxuICAgICAgICB9XG4gICAgICAgIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcodGhpcy5fYm9keUFycmF5QnVmZmVyKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoXG4gICAgICAgICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIuYnVmZmVyLnNsaWNlKFxuICAgICAgICAgICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIuYnl0ZU9mZnNldCxcbiAgICAgICAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyLmJ5dGVPZmZzZXQgKyB0aGlzLl9ib2R5QXJyYXlCdWZmZXIuYnl0ZUxlbmd0aFxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcilcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmxvYigpLnRoZW4ocmVhZEJsb2JBc0FycmF5QnVmZmVyKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRoaXMudGV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgIHJldHVybiByZWFkQmxvYkFzVGV4dCh0aGlzLl9ib2R5QmxvYilcbiAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZWFkQXJyYXlCdWZmZXJBc1RleHQodGhpcy5fYm9keUFycmF5QnVmZmVyKSlcbiAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIHRleHQnKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlUZXh0KVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdXBwb3J0LmZvcm1EYXRhKSB7XG4gICAgdGhpcy5mb3JtRGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oZGVjb2RlKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuanNvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKEpTT04ucGFyc2UpXG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIVFRQIG1ldGhvZHMgd2hvc2UgY2FwaXRhbGl6YXRpb24gc2hvdWxkIGJlIG5vcm1hbGl6ZWRcbnZhciBtZXRob2RzID0gWydERUxFVEUnLCAnR0VUJywgJ0hFQUQnLCAnT1BUSU9OUycsICdQT1NUJywgJ1BVVCddXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU1ldGhvZChtZXRob2QpIHtcbiAgdmFyIHVwY2FzZWQgPSBtZXRob2QudG9VcHBlckNhc2UoKVxuICByZXR1cm4gbWV0aG9kcy5pbmRleE9mKHVwY2FzZWQpID4gLTEgPyB1cGNhc2VkIDogbWV0aG9kXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZXF1ZXN0KGlucHV0LCBvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZXF1ZXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1BsZWFzZSB1c2UgdGhlIFwibmV3XCIgb3BlcmF0b3IsIHRoaXMgRE9NIG9iamVjdCBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uJylcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gIHZhciBib2R5ID0gb3B0aW9ucy5ib2R5XG5cbiAgaWYgKGlucHV0IGluc3RhbmNlb2YgUmVxdWVzdCkge1xuICAgIGlmIChpbnB1dC5ib2R5VXNlZCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJylcbiAgICB9XG4gICAgdGhpcy51cmwgPSBpbnB1dC51cmxcbiAgICB0aGlzLmNyZWRlbnRpYWxzID0gaW5wdXQuY3JlZGVudGlhbHNcbiAgICBpZiAoIW9wdGlvbnMuaGVhZGVycykge1xuICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMoaW5wdXQuaGVhZGVycylcbiAgICB9XG4gICAgdGhpcy5tZXRob2QgPSBpbnB1dC5tZXRob2RcbiAgICB0aGlzLm1vZGUgPSBpbnB1dC5tb2RlXG4gICAgdGhpcy5zaWduYWwgPSBpbnB1dC5zaWduYWxcbiAgICBpZiAoIWJvZHkgJiYgaW5wdXQuX2JvZHlJbml0ICE9IG51bGwpIHtcbiAgICAgIGJvZHkgPSBpbnB1dC5fYm9keUluaXRcbiAgICAgIGlucHV0LmJvZHlVc2VkID0gdHJ1ZVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLnVybCA9IFN0cmluZyhpbnB1dClcbiAgfVxuXG4gIHRoaXMuY3JlZGVudGlhbHMgPSBvcHRpb25zLmNyZWRlbnRpYWxzIHx8IHRoaXMuY3JlZGVudGlhbHMgfHwgJ3NhbWUtb3JpZ2luJ1xuICBpZiAob3B0aW9ucy5oZWFkZXJzIHx8ICF0aGlzLmhlYWRlcnMpIHtcbiAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gIH1cbiAgdGhpcy5tZXRob2QgPSBub3JtYWxpemVNZXRob2Qob3B0aW9ucy5tZXRob2QgfHwgdGhpcy5tZXRob2QgfHwgJ0dFVCcpXG4gIHRoaXMubW9kZSA9IG9wdGlvbnMubW9kZSB8fCB0aGlzLm1vZGUgfHwgbnVsbFxuICB0aGlzLnNpZ25hbCA9IG9wdGlvbnMuc2lnbmFsIHx8IHRoaXMuc2lnbmFsXG4gIHRoaXMucmVmZXJyZXIgPSBudWxsXG5cbiAgaWYgKCh0aGlzLm1ldGhvZCA9PT0gJ0dFVCcgfHwgdGhpcy5tZXRob2QgPT09ICdIRUFEJykgJiYgYm9keSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JvZHkgbm90IGFsbG93ZWQgZm9yIEdFVCBvciBIRUFEIHJlcXVlc3RzJylcbiAgfVxuICB0aGlzLl9pbml0Qm9keShib2R5KVxuXG4gIGlmICh0aGlzLm1ldGhvZCA9PT0gJ0dFVCcgfHwgdGhpcy5tZXRob2QgPT09ICdIRUFEJykge1xuICAgIGlmIChvcHRpb25zLmNhY2hlID09PSAnbm8tc3RvcmUnIHx8IG9wdGlvbnMuY2FjaGUgPT09ICduby1jYWNoZScpIHtcbiAgICAgIC8vIFNlYXJjaCBmb3IgYSAnXycgcGFyYW1ldGVyIGluIHRoZSBxdWVyeSBzdHJpbmdcbiAgICAgIHZhciByZVBhcmFtU2VhcmNoID0gLyhbPyZdKV89W14mXSovXG4gICAgICBpZiAocmVQYXJhbVNlYXJjaC50ZXN0KHRoaXMudXJsKSkge1xuICAgICAgICAvLyBJZiBpdCBhbHJlYWR5IGV4aXN0cyB0aGVuIHNldCB0aGUgdmFsdWUgd2l0aCB0aGUgY3VycmVudCB0aW1lXG4gICAgICAgIHRoaXMudXJsID0gdGhpcy51cmwucmVwbGFjZShyZVBhcmFtU2VhcmNoLCAnJDFfPScgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE90aGVyd2lzZSBhZGQgYSBuZXcgJ18nIHBhcmFtZXRlciB0byB0aGUgZW5kIHdpdGggdGhlIGN1cnJlbnQgdGltZVxuICAgICAgICB2YXIgcmVRdWVyeVN0cmluZyA9IC9cXD8vXG4gICAgICAgIHRoaXMudXJsICs9IChyZVF1ZXJ5U3RyaW5nLnRlc3QodGhpcy51cmwpID8gJyYnIDogJz8nKSArICdfPScgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5SZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFJlcXVlc3QodGhpcywge2JvZHk6IHRoaXMuX2JvZHlJbml0fSlcbn1cblxuZnVuY3Rpb24gZGVjb2RlKGJvZHkpIHtcbiAgdmFyIGZvcm0gPSBuZXcgRm9ybURhdGEoKVxuICBib2R5XG4gICAgLnRyaW0oKVxuICAgIC5zcGxpdCgnJicpXG4gICAgLmZvckVhY2goZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGlmIChieXRlcykge1xuICAgICAgICB2YXIgc3BsaXQgPSBieXRlcy5zcGxpdCgnPScpXG4gICAgICAgIHZhciBuYW1lID0gc3BsaXQuc2hpZnQoKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICB2YXIgdmFsdWUgPSBzcGxpdC5qb2luKCc9JykucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgZm9ybS5hcHBlbmQoZGVjb2RlVVJJQ29tcG9uZW50KG5hbWUpLCBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKVxuICAgICAgfVxuICAgIH0pXG4gIHJldHVybiBmb3JtXG59XG5cbmZ1bmN0aW9uIHBhcnNlSGVhZGVycyhyYXdIZWFkZXJzKSB7XG4gIHZhciBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKVxuICAvLyBSZXBsYWNlIGluc3RhbmNlcyBvZiBcXHJcXG4gYW5kIFxcbiBmb2xsb3dlZCBieSBhdCBsZWFzdCBvbmUgc3BhY2Ugb3IgaG9yaXpvbnRhbCB0YWIgd2l0aCBhIHNwYWNlXG4gIC8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM3MjMwI3NlY3Rpb24tMy4yXG4gIHZhciBwcmVQcm9jZXNzZWRIZWFkZXJzID0gcmF3SGVhZGVycy5yZXBsYWNlKC9cXHI/XFxuW1xcdCBdKy9nLCAnICcpXG4gIC8vIEF2b2lkaW5nIHNwbGl0IHZpYSByZWdleCB0byB3b3JrIGFyb3VuZCBhIGNvbW1vbiBJRTExIGJ1ZyB3aXRoIHRoZSBjb3JlLWpzIDMuNi4wIHJlZ2V4IHBvbHlmaWxsXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9naXRodWIvZmV0Y2gvaXNzdWVzLzc0OFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNzUxXG4gIHByZVByb2Nlc3NlZEhlYWRlcnNcbiAgICAuc3BsaXQoJ1xccicpXG4gICAgLm1hcChmdW5jdGlvbihoZWFkZXIpIHtcbiAgICAgIHJldHVybiBoZWFkZXIuaW5kZXhPZignXFxuJykgPT09IDAgPyBoZWFkZXIuc3Vic3RyKDEsIGhlYWRlci5sZW5ndGgpIDogaGVhZGVyXG4gICAgfSlcbiAgICAuZm9yRWFjaChmdW5jdGlvbihsaW5lKSB7XG4gICAgICB2YXIgcGFydHMgPSBsaW5lLnNwbGl0KCc6JylcbiAgICAgIHZhciBrZXkgPSBwYXJ0cy5zaGlmdCgpLnRyaW0oKVxuICAgICAgaWYgKGtleSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBwYXJ0cy5qb2luKCc6JykudHJpbSgpXG4gICAgICAgIGhlYWRlcnMuYXBwZW5kKGtleSwgdmFsdWUpXG4gICAgICB9XG4gICAgfSlcbiAgcmV0dXJuIGhlYWRlcnNcbn1cblxuQm9keS5jYWxsKFJlcXVlc3QucHJvdG90eXBlKVxuXG5leHBvcnQgZnVuY3Rpb24gUmVzcG9uc2UoYm9keUluaXQsIG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlc3BvbnNlKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1BsZWFzZSB1c2UgdGhlIFwibmV3XCIgb3BlcmF0b3IsIHRoaXMgRE9NIG9iamVjdCBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uJylcbiAgfVxuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge31cbiAgfVxuXG4gIHRoaXMudHlwZSA9ICdkZWZhdWx0J1xuICB0aGlzLnN0YXR1cyA9IG9wdGlvbnMuc3RhdHVzID09PSB1bmRlZmluZWQgPyAyMDAgOiBvcHRpb25zLnN0YXR1c1xuICB0aGlzLm9rID0gdGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwXG4gIHRoaXMuc3RhdHVzVGV4dCA9IG9wdGlvbnMuc3RhdHVzVGV4dCA9PT0gdW5kZWZpbmVkID8gJycgOiAnJyArIG9wdGlvbnMuc3RhdHVzVGV4dFxuICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gIHRoaXMudXJsID0gb3B0aW9ucy51cmwgfHwgJydcbiAgdGhpcy5faW5pdEJvZHkoYm9keUluaXQpXG59XG5cbkJvZHkuY2FsbChSZXNwb25zZS5wcm90b3R5cGUpXG5cblJlc3BvbnNlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFJlc3BvbnNlKHRoaXMuX2JvZHlJbml0LCB7XG4gICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICBzdGF0dXNUZXh0OiB0aGlzLnN0YXR1c1RleHQsXG4gICAgaGVhZGVyczogbmV3IEhlYWRlcnModGhpcy5oZWFkZXJzKSxcbiAgICB1cmw6IHRoaXMudXJsXG4gIH0pXG59XG5cblJlc3BvbnNlLmVycm9yID0gZnVuY3Rpb24oKSB7XG4gIHZhciByZXNwb25zZSA9IG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiAwLCBzdGF0dXNUZXh0OiAnJ30pXG4gIHJlc3BvbnNlLnR5cGUgPSAnZXJyb3InXG4gIHJldHVybiByZXNwb25zZVxufVxuXG52YXIgcmVkaXJlY3RTdGF0dXNlcyA9IFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF1cblxuUmVzcG9uc2UucmVkaXJlY3QgPSBmdW5jdGlvbih1cmwsIHN0YXR1cykge1xuICBpZiAocmVkaXJlY3RTdGF0dXNlcy5pbmRleE9mKHN0YXR1cykgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgc3RhdHVzIGNvZGUnKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiBzdGF0dXMsIGhlYWRlcnM6IHtsb2NhdGlvbjogdXJsfX0pXG59XG5cbmV4cG9ydCB2YXIgRE9NRXhjZXB0aW9uID0gZ2xvYmFsLkRPTUV4Y2VwdGlvblxudHJ5IHtcbiAgbmV3IERPTUV4Y2VwdGlvbigpXG59IGNhdGNoIChlcnIpIHtcbiAgRE9NRXhjZXB0aW9uID0gZnVuY3Rpb24obWVzc2FnZSwgbmFtZSkge1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2VcbiAgICB0aGlzLm5hbWUgPSBuYW1lXG4gICAgdmFyIGVycm9yID0gRXJyb3IobWVzc2FnZSlcbiAgICB0aGlzLnN0YWNrID0gZXJyb3Iuc3RhY2tcbiAgfVxuICBET01FeGNlcHRpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpXG4gIERPTUV4Y2VwdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBET01FeGNlcHRpb25cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZldGNoKGlucHV0LCBpbml0KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KGlucHV0LCBpbml0KVxuXG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsICYmIHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybiByZWplY3QobmV3IERPTUV4Y2VwdGlvbignQWJvcnRlZCcsICdBYm9ydEVycm9yJykpXG4gICAgfVxuXG4gICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpXG5cbiAgICBmdW5jdGlvbiBhYm9ydFhocigpIHtcbiAgICAgIHhoci5hYm9ydCgpXG4gICAgfVxuXG4gICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgIHN0YXR1czogeGhyLnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHBhcnNlSGVhZGVycyh4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkgfHwgJycpXG4gICAgICB9XG4gICAgICBvcHRpb25zLnVybCA9ICdyZXNwb25zZVVSTCcgaW4geGhyID8geGhyLnJlc3BvbnNlVVJMIDogb3B0aW9ucy5oZWFkZXJzLmdldCgnWC1SZXF1ZXN0LVVSTCcpXG4gICAgICB2YXIgYm9keSA9ICdyZXNwb25zZScgaW4geGhyID8geGhyLnJlc3BvbnNlIDogeGhyLnJlc3BvbnNlVGV4dFxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgcmVzb2x2ZShuZXcgUmVzcG9uc2UoYm9keSwgb3B0aW9ucykpXG4gICAgICB9LCAwKVxuICAgIH1cblxuICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgICAgfSwgMClcbiAgICB9XG5cbiAgICB4aHIub250aW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgICAgfSwgMClcbiAgICB9XG5cbiAgICB4aHIub25hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBET01FeGNlcHRpb24oJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpKVxuICAgICAgfSwgMClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaXhVcmwodXJsKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gdXJsID09PSAnJyAmJiBnbG9iYWwubG9jYXRpb24uaHJlZiA/IGdsb2JhbC5sb2NhdGlvbi5ocmVmIDogdXJsXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiB1cmxcbiAgICAgIH1cbiAgICB9XG5cbiAgICB4aHIub3BlbihyZXF1ZXN0Lm1ldGhvZCwgZml4VXJsKHJlcXVlc3QudXJsKSwgdHJ1ZSlcblxuICAgIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnaW5jbHVkZScpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlXG4gICAgfSBlbHNlIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnb21pdCcpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSBmYWxzZVxuICAgIH1cblxuICAgIGlmICgncmVzcG9uc2VUeXBlJyBpbiB4aHIpIHtcbiAgICAgIGlmIChzdXBwb3J0LmJsb2IpIHtcbiAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdibG9iJ1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgc3VwcG9ydC5hcnJheUJ1ZmZlciAmJlxuICAgICAgICByZXF1ZXN0LmhlYWRlcnMuZ2V0KCdDb250ZW50LVR5cGUnKSAmJlxuICAgICAgICByZXF1ZXN0LmhlYWRlcnMuZ2V0KCdDb250ZW50LVR5cGUnKS5pbmRleE9mKCdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nKSAhPT0gLTFcbiAgICAgICkge1xuICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2FycmF5YnVmZmVyJ1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpbml0ICYmIHR5cGVvZiBpbml0LmhlYWRlcnMgPT09ICdvYmplY3QnICYmICEoaW5pdC5oZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycykpIHtcbiAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGluaXQuaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIG5vcm1hbGl6ZVZhbHVlKGluaXQuaGVhZGVyc1tuYW1lXSkpXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXF1ZXN0LmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCB2YWx1ZSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsKSB7XG4gICAgICByZXF1ZXN0LnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0WGhyKVxuXG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIERPTkUgKHN1Y2Nlc3Mgb3IgZmFpbHVyZSlcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgcmVxdWVzdC5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydFhocilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHhoci5zZW5kKHR5cGVvZiByZXF1ZXN0Ll9ib2R5SW5pdCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogcmVxdWVzdC5fYm9keUluaXQpXG4gIH0pXG59XG5cbmZldGNoLnBvbHlmaWxsID0gdHJ1ZVxuXG5pZiAoIWdsb2JhbC5mZXRjaCkge1xuICBnbG9iYWwuZmV0Y2ggPSBmZXRjaFxuICBnbG9iYWwuSGVhZGVycyA9IEhlYWRlcnNcbiAgZ2xvYmFsLlJlcXVlc3QgPSBSZXF1ZXN0XG4gIGdsb2JhbC5SZXNwb25zZSA9IFJlc3BvbnNlXG59XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgZGVmaW5pdGlvbikge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9IiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiXSwibmFtZXMiOlsiQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkIiwiT2JqZWN0IiwiZnJlZXplIiwiSGl0QXJlYVByZWZpeCIsIkhpdEFyZWFIZWFkIiwiSGl0QXJlYUJvZHkiLCJQYXJ0c0lkQ29yZSIsIlBhcnRzQXJtUHJlZml4IiwiUGFydHNBcm1MUHJlZml4IiwiUGFydHNBcm1SUHJlZml4IiwiUGFyYW1BbmdsZVgiLCJQYXJhbUFuZ2xlWSIsIlBhcmFtQW5nbGVaIiwiUGFyYW1FeWVMT3BlbiIsIlBhcmFtRXllTFNtaWxlIiwiUGFyYW1FeWVST3BlbiIsIlBhcmFtRXllUlNtaWxlIiwiUGFyYW1FeWVCYWxsWCIsIlBhcmFtRXllQmFsbFkiLCJQYXJhbUV5ZUJhbGxGb3JtIiwiUGFyYW1Ccm93TFkiLCJQYXJhbUJyb3dSWSIsIlBhcmFtQnJvd0xYIiwiUGFyYW1Ccm93UlgiLCJQYXJhbUJyb3dMQW5nbGUiLCJQYXJhbUJyb3dSQW5nbGUiLCJQYXJhbUJyb3dMRm9ybSIsIlBhcmFtQnJvd1JGb3JtIiwiUGFyYW1Nb3V0aEZvcm0iLCJQYXJhbU1vdXRoT3BlblkiLCJQYXJhbUNoZWVrIiwiUGFyYW1Cb2R5QW5nbGVYIiwiUGFyYW1Cb2R5QW5nbGVZIiwiUGFyYW1Cb2R5QW5nbGVaIiwiUGFyYW1CcmVhdGgiLCJQYXJhbUFybUxBIiwiUGFyYW1Bcm1SQSIsIlBhcmFtQXJtTEIiLCJQYXJhbUFybVJCIiwiUGFyYW1IYW5kTCIsIlBhcmFtSGFuZFIiLCJQYXJhbUhhaXJGcm9udCIsIlBhcmFtSGFpclNpZGUiLCJQYXJhbUhhaXJCYWNrIiwiUGFyYW1IYWlyRmx1ZmZ5IiwiUGFyYW1TaG91bGRlclkiLCJQYXJhbUJ1c3RYIiwiUGFyYW1CdXN0WSIsIlBhcmFtQmFzZVgiLCJQYXJhbUJhc2VZIiwiUGFyYW1OT05FIiwiTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIiwiJCIsIkNTTV9MT0dfTEVWRUxfVkVSQk9TRSIsIkNTTV9MT0dfTEVWRUxfREVCVUciLCJDU01fTE9HX0xFVkVMX0lORk8iLCJDU01fTE9HX0xFVkVMX1dBUk5JTkciLCJDU01fTE9HX0xFVkVMX0VSUk9SIiwiQ1NNX0xPR19MRVZFTF9PRkYiLCJDU01fTE9HX0xFVkVMIiwiRnJlcXVlc3ROb2RlIiwiRmlsZVJlZmVyZW5jZXMiLCJVc2VyRGF0YSIsIk5hbWUiLCJGaWxlUGF0aCIsIklkcyIsIlNvdW5kUGF0aCIsIkZhZGVJblRpbWUiLCJGYWRlT3V0VGltZSIsIkxpcFN5bmMiLCJFeWVCbGluayIsImJ1ZmZlciIsInNpemUiLCJfanNvbiIsIkN1YmlzbUpzb24iLCJjcmVhdGUiLCJfanNvblZhbHVlIiwiY3NtVmVjdG9yIiwicHVzaEJhY2siLCJnZXRSb290IiwiZ2V0VmFsdWVCeVN0cmluZyIsInJlbGVhc2UiLCJkZWxldGUiLCJ0aGlzIiwiR2V0SnNvbiIsImdldE1vZGVsRmlsZU5hbWUiLCJpc0V4aXN0TW9kZWxGaWxlIiwiYXQiLCJGcmVxdWVzdE5vZGVfTW9jIiwiZ2V0UmF3U3RyaW5nIiwiZ2V0VGV4dHVyZUNvdW50IiwiaXNFeGlzdFRleHR1cmVGaWxlcyIsIkZyZXF1ZXN0Tm9kZV9UZXh0dXJlcyIsImdldFNpemUiLCJnZXRUZXh0dXJlRGlyZWN0b3J5IiwiZ2V0VGV4dHVyZUZpbGVOYW1lIiwiaW5kZXgiLCJnZXRWYWx1ZUJ5SW5kZXgiLCJnZXRIaXRBcmVhc0NvdW50IiwiaXNFeGlzdEhpdEFyZWFzIiwiRnJlcXVlc3ROb2RlX0hpdEFyZWFzIiwiZ2V0SGl0QXJlYUlkIiwiQ3ViaXNtRnJhbWV3b3JrIiwiZ2V0SWRNYW5hZ2VyIiwiZ2V0SWQiLCJnZXRIaXRBcmVhTmFtZSIsImdldFBoeXNpY3NGaWxlTmFtZSIsImlzRXhpc3RQaHlzaWNzRmlsZSIsIkZyZXF1ZXN0Tm9kZV9QaHlzaWNzIiwiZ2V0UG9zZUZpbGVOYW1lIiwiaXNFeGlzdFBvc2VGaWxlIiwiRnJlcXVlc3ROb2RlX1Bvc2UiLCJnZXRFeHByZXNzaW9uQ291bnQiLCJpc0V4aXN0RXhwcmVzc2lvbkZpbGUiLCJGcmVxdWVzdE5vZGVfRXhwcmVzc2lvbnMiLCJnZXRFeHByZXNzaW9uTmFtZSIsImdldEV4cHJlc3Npb25GaWxlTmFtZSIsImdldE1vdGlvbkdyb3VwQ291bnQiLCJpc0V4aXN0TW90aW9uR3JvdXBzIiwiRnJlcXVlc3ROb2RlX01vdGlvbnMiLCJnZXRLZXlzIiwiZ2V0TW90aW9uR3JvdXBOYW1lIiwiZ2V0TW90aW9uQ291bnQiLCJncm91cE5hbWUiLCJpc0V4aXN0TW90aW9uR3JvdXBOYW1lIiwiZ2V0TW90aW9uRmlsZU5hbWUiLCJnZXRNb3Rpb25Tb3VuZEZpbGVOYW1lIiwiaXNFeGlzdE1vdGlvblNvdW5kRmlsZSIsImdldE1vdGlvbkZhZGVJblRpbWVWYWx1ZSIsImlzRXhpc3RNb3Rpb25GYWRlSW4iLCJ0b0Zsb2F0IiwiZ2V0TW90aW9uRmFkZU91dFRpbWVWYWx1ZSIsImlzRXhpc3RNb3Rpb25GYWRlT3V0IiwiZ2V0VXNlckRhdGFGaWxlIiwiaXNFeGlzdFVzZXJEYXRhRmlsZSIsImdldExheW91dE1hcCIsIm91dExheW91dE1hcCIsIm1hcCIsImdldE1hcCIsInJldCIsIml0ZSIsImJlZ2luIiwibm90RXF1YWwiLCJlbmQiLCJwcmVJbmNyZW1lbnQiLCJzZXRWYWx1ZSIsInB0ciIsImZpcnN0Iiwic2Vjb25kIiwiZ2V0RXllQmxpbmtQYXJhbWV0ZXJDb3VudCIsImlzRXhpc3RFeWVCbGlua1BhcmFtZXRlcnMiLCJudW0iLCJpIiwiRnJlcXVlc3ROb2RlX0dyb3VwcyIsInJlZkkiLCJpc051bGwiLCJpc0Vycm9yIiwiZ2V0VmVjdG9yIiwiZ2V0RXllQmxpbmtQYXJhbWV0ZXJJZCIsImdldExpcFN5bmNQYXJhbWV0ZXJDb3VudCIsImlzRXhpc3RMaXBTeW5jUGFyYW1ldGVycyIsImdldExpcFN5bmNQYXJhbWV0ZXJJZCIsIm5vZGUiLCJJQ3ViaXNtTW9kZWxTZXR0aW5nIiwiQ3ViaXNtTW9kZWxTZXR0aW5nSnNvbiIsIl9jdXJyZW50VGltZSIsIkN1YmlzbUJyZWF0aCIsImluc3RhbmNlIiwic2V0UGFyYW1ldGVycyIsImJyZWF0aFBhcmFtZXRlcnMiLCJfYnJlYXRoUGFyYW1ldGVycyIsImdldFBhcmFtZXRlcnMiLCJ1cGRhdGVQYXJhbWV0ZXJzIiwibW9kZWwiLCJkZWx0YVRpbWVTZWNvbmRzIiwidCIsImRhdGEiLCJhZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQiLCJwYXJhbWV0ZXJJZCIsIm9mZnNldCIsInBlYWsiLCJNYXRoIiwic2luIiwiY3ljbGUiLCJ3ZWlnaHQiLCJCcmVhdGhQYXJhbWV0ZXJEYXRhIiwidW5kZWZpbmVkIiwiRXllU3RhdGUiLCJtb2RlbFNldHRpbmciLCJfYmxpbmtpbmdTdGF0ZSIsIkV5ZVN0YXRlX0ZpcnN0IiwiX25leHRCbGlua2luZ1RpbWUiLCJfc3RhdGVTdGFydFRpbWVTZWNvbmRzIiwiX2JsaW5raW5nSW50ZXJ2YWxTZWNvbmRzIiwiX2Nsb3NpbmdTZWNvbmRzIiwiX2Nsb3NlZFNlY29uZHMiLCJfb3BlbmluZ1NlY29uZHMiLCJfdXNlclRpbWVTZWNvbmRzIiwiX3BhcmFtZXRlcklkcyIsIkN1YmlzbUV5ZUJsaW5rIiwiZXllQmxpbmsiLCJzZXRCbGlua2luZ0ludGVydmFsIiwiYmxpbmtpbmdJbnRlcnZhbCIsInNldEJsaW5raW5nU2V0dGluZyIsImNsb3NpbmciLCJjbG9zZWQiLCJvcGVuaW5nIiwic2V0UGFyYW1ldGVySWRzIiwicGFyYW1ldGVySWRzIiwiZ2V0UGFyYW1ldGVySWRzIiwicGFyYW1ldGVyVmFsdWUiLCJFeWVTdGF0ZV9DbG9zaW5nIiwiRXllU3RhdGVfQ2xvc2VkIiwiRXllU3RhdGVfT3BlbmluZyIsIkV5ZVN0YXRlX0ludGVydmFsIiwiZGV0ZXJtaW5OZXh0QmxpbmtpbmdUaW1pbmciLCJDbG9zZUlmWmVybyIsInNldFBhcmFtZXRlclZhbHVlQnlJZCIsInIiLCJyYW5kb20iLCJGYWRlSW4iLCJMaW5rIiwiX2ZhZGVUaW1lU2Vjb25kcyIsIl9sYXN0TW9kZWwiLCJfcGFydEdyb3VwcyIsIl9wYXJ0R3JvdXBDb3VudHMiLCJwb3NlM2pzb24iLCJDdWJpc21Qb3NlIiwianNvbiIsInJvb3QiLCJwb3NlTGlzdEluZm8iLCJwb3NlQ291bnQiLCJwb3NlSW5kZXgiLCJpZExpc3RJbmZvIiwiaWRDb3VudCIsImdyb3VwQ291bnQiLCJncm91cEluZGV4IiwicGFydEluZm8iLCJwYXJ0RGF0YSIsIlBhcnREYXRhIiwicGFydElkIiwibGlua0xpc3RJbmZvIiwibGlua0NvdW50IiwibGlua0luZGV4IiwibGlua1BhcnQiLCJsaW5rSWQiLCJnZXRTdHJpbmciLCJsaW5rIiwiY2xvbmUiLCJwb3NlIiwicmVzZXQiLCJiZWdpbkluZGV4IiwicGFydEdyb3VwQ291bnQiLCJkb0ZhZGUiLCJjb3B5UGFydE9wYWNpdGllcyIsImoiLCJpbml0aWFsaXplIiwicGFydHNJbmRleCIsInBhcnRJbmRleCIsInBhcmFtSW5kZXgiLCJwYXJhbWV0ZXJJbmRleCIsInNldFBhcnRPcGFjaXR5QnlJbmRleCIsInNldFBhcmFtZXRlclZhbHVlQnlJbmRleCIsImsiLCJvcGFjaXR5IiwiZ2V0UGFydE9wYWNpdHlCeUluZGV4IiwibGlua1BhcnRJbmRleCIsInZpc2libGVQYXJ0SW5kZXgiLCJuZXdPcGFjaXR5IiwiZ2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4IiwiYTEiLCJ2IiwiYXNzaWdubWVudCIsImdldFBhcmFtZXRlckluZGV4IiwiZ2V0UGFydEluZGV4IiwiY2xvbmVQYXJ0RGF0YSIsImluY3JlbWVudCIsImlkIiwiX2lkIiwiY3NtU3RyaW5nIiwiaXNFcXVhbCIsImMiLCJzIiwiQ3ViaXNtSWQiLCJpc05vdEVxdWFsIiwiX2lkcyIsInNldCIsInJlZ2lzdGVySWRzIiwiaWRzIiwibGVuZ3RoIiwicmVnaXN0ZXJJZCIsInJlc3VsdCIsImZpbmRJZCIsImlzRXhpc3QiLCJDdWJpc21JZE1hbmFnZXIiLCJlbmRQdHIiLCJ0ZXN0QyIsInNsaWNlIiwidGVzdCIsInN1YnN0cmluZyIsIm51bWJlciIsIk51bWJlciIsImlzTmFOIiwiZCIsInBhcnNlRmxvYXQiLCJOYU4iLCJzX2lzU3RhcnRlZCIsInNfaXNJbml0aWFsaXplZCIsInNfb3B0aW9uIiwic19jdWJpc21JZE1hbmFnZXIiLCJDb25zdGFudCIsInZlcnRleE9mZnNldCIsInZlcnRleFN0ZXAiLCJhZGRyZXNzIiwic3RhcnRVcCIsIm9wdGlvbiIsIkN1YmlzbUxvZ0luZm8iLCJMaXZlMkRDdWJpc21Db3JlIiwiTG9nZ2luZyIsImNzbVNldExvZ0Z1bmN0aW9uIiwibG9nRnVuY3Rpb24iLCJ2ZXJzaW9uIiwiVmVyc2lvbiIsImNzbUdldFZlcnNpb24iLCJtYWpvciIsIm1pbm9yIiwicGF0Y2giLCJ2ZXJzaW9uTnVtYmVyIiwiY2xlYW5VcCIsIkNTTV9BU1NFUlQiLCJDdWJpc21Mb2dXYXJuaW5nIiwiVmFsdWUiLCJzdGF0aWNJbml0aWFsaXplTm90Rm9yQ2xpZW50Q2FsbCIsImRpc3Bvc2UiLCJzdGF0aWNSZWxlYXNlTm90Rm9yQ2xpZW50Q2FsbCIsIkN1YmlzbVJlbmRlcmVyIiwic3RhdGljUmVsZWFzZSIsImlzU3RhcnRlZCIsImlzSW5pdGlhbGl6ZWQiLCJjb3JlTG9nRnVuY3Rpb24iLCJtZXNzYWdlIiwiY3NtR2V0TG9nRnVuY3Rpb24iLCJnZXRMb2dnaW5nTGV2ZWwiLCJsb2dnaW5nTGV2ZWwiLCJMb2dMZXZlbCIsIkxvZ0xldmVsX09mZiIsIk9wdGlvbiIsImNzbURlbGV0ZSIsInJhbmdlIiwidmFsdWUiLCJtaW4iLCJtYXgiLCJ4IiwiY29zIiwiYWJzIiwic3FydCIsImNicnQiLCJjeCIsImlzTmVnYXRpdmVOdW1iZXIiLCJJbmZpbml0eSIsImV4cCIsImxvZyIsImdldEVhc2luZ1NpbmUiLCJQSSIsImxlZnQiLCJyaWdodCIsImRlZ3JlZXNUb1JhZGlhbiIsImRlZ3JlZXMiLCJyYWRpYW5Ub0RlZ3JlZXMiLCJyYWRpYW4iLCJkaXJlY3Rpb25Ub1JhZGlhbiIsImZyb20iLCJ0byIsImF0YW4yIiwieSIsImRpcmVjdGlvblRvRGVncmVlcyIsImRlZ3JlZSIsInJhZGlhblRvRGlyZWN0aW9uIiwidG90YWxBbmdsZSIsIkN1YmlzbVZlY3RvcjIiLCJxdWFkcmF0aWNFcXVhdGlvbiIsImEiLCJiIiwiQ3ViaXNtTWF0aCIsIkVwc2lsb24iLCJjYXJkYW5vQWxnb3JpdGhtRm9yQmV6aWVyIiwiYmEiLCJjYSIsInAiLCJwMyIsInEiLCJxMiIsImRpc2NyaW1pbmFudCIsInRocmVzaG9sZCIsImNlbnRlciIsIm1wMyIsIm1wMzMiLCJjb3NwaGkiLCJwaGkiLCJhY29zIiwidDEiLCJyb290MiIsInJvb3QzIiwic2QiLCJyb290MSIsIl90ciIsIkZsb2F0MzJBcnJheSIsImxvYWRJZGVudGl0eSIsIm11bHRpcGx5IiwiZHN0Iiwic2V0TWF0cml4IiwidHIiLCJnZXRBcnJheSIsImdldFNjYWxlWCIsImdldFNjYWxlWSIsImdldFRyYW5zbGF0ZVgiLCJnZXRUcmFuc2xhdGVZIiwidHJhbnNmb3JtWCIsInNyYyIsInRyYW5zZm9ybVkiLCJpbnZlcnRUcmFuc2Zvcm1YIiwiaW52ZXJ0VHJhbnNmb3JtWSIsInRyYW5zbGF0ZVJlbGF0aXZlIiwidHIxIiwiQ3ViaXNtTWF0cml4NDQiLCJ0cmFuc2xhdGUiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInNjYWxlUmVsYXRpdmUiLCJzY2FsZSIsIm11bHRpcGx5QnlNYXRyaXgiLCJtIiwiY2xvbmVNYXRyaXgiLCJ3IiwiaCIsIl93aWR0aCIsIl9oZWlnaHQiLCJzZXRIZWlnaHQiLCJzZXRXaWR0aCIsInNjYWxlWCIsInNjYWxlWSIsInNldFBvc2l0aW9uIiwic2V0Q2VudGVyUG9zaXRpb24iLCJjZW50ZXJYIiwiY2VudGVyWSIsInRvcCIsInNldFkiLCJib3R0b20iLCJzZXRYIiwic2V0dXBGcm9tTGF5b3V0IiwibGF5b3V0Iiwia2V5IiwiQ3ViaXNtTW9kZWxNYXRyaXgiLCJfZmFjZVRhcmdldFgiLCJfZmFjZVRhcmdldFkiLCJfZmFjZVgiLCJfZmFjZVkiLCJfZmFjZVZYIiwiX2ZhY2VWWSIsIl9sYXN0VGltZVNlY29uZHMiLCJ1cGRhdGUiLCJtYXhWIiwiZGVsdGFUaW1lV2VpZ2h0IiwibWF4QSIsInRpbWVUb01heFNwZWVkIiwiZHgiLCJkeSIsInZ5IiwiYXgiLCJheSIsImN1clYiLCJnZXRYIiwiZ2V0WSIsIkN1YmlzbVRhcmdldFBvaW50IiwiYWRkIiwidmVjdG9yMiIsInN1YnN0cmFjdCIsIm11bHRpcGx5QnlTY2FsZXIiLCJzY2FsYXIiLCJkaXZpc2lvbiIsImRpdmlzaW9uQnlTY2FsYXIiLCJnZXRMZW5ndGgiLCJnZXREaXN0YW5jZVdpdGgiLCJkb3QiLCJub3JtYWxpemUiLCJwb3ciLCJyaHMiLCJfc2NyZWVuTGVmdCIsIl9zY3JlZW5SaWdodCIsIl9zY3JlZW5Ub3AiLCJfc2NyZWVuQm90dG9tIiwiX21heExlZnQiLCJfbWF4UmlnaHQiLCJfbWF4VG9wIiwiX21heEJvdHRvbSIsIl9tYXhTY2FsZSIsIl9taW5TY2FsZSIsImFkanVzdFRyYW5zbGF0ZSIsImFkanVzdFNjYWxlIiwiY3kiLCJtYXhTY2FsZSIsImdldE1heFNjYWxlIiwibWluU2NhbGUiLCJnZXRNaW5TY2FsZSIsInRhcmdldFNjYWxlIiwidHIyIiwidHIzIiwic2V0U2NyZWVuUmVjdCIsInNldE1heFNjcmVlblJlY3QiLCJzZXRNYXhTY2FsZSIsInNldE1pblNjYWxlIiwiaXNNYXhTY2FsZSIsImlzTWluU2NhbGUiLCJnZXRTY3JlZW5MZWZ0IiwiZ2V0U2NyZWVuUmlnaHQiLCJnZXRTY3JlZW5Cb3R0b20iLCJnZXRTY3JlZW5Ub3AiLCJnZXRNYXhMZWZ0IiwiZ2V0TWF4UmlnaHQiLCJnZXRNYXhCb3R0b20iLCJnZXRNYXhUb3AiLCJDdWJpc21WaWV3TWF0cml4IiwibW9jIiwiX21vYyIsIl9tb2RlbENvdW50IiwibW9jQnl0ZXMiLCJjdWJpc21Nb2MiLCJNb2MiLCJmcm9tQXJyYXlCdWZmZXIiLCJDdWJpc21Nb2MiLCJfcmVsZWFzZSIsImNyZWF0ZU1vZGVsIiwiY3ViaXNtTW9kZWwiLCJNb2RlbCIsImZyb21Nb2MiLCJDdWJpc21Nb2RlbCIsImRlbGV0ZU1vZGVsIiwiX21vZGVsIiwiX3BhcmFtZXRlclZhbHVlcyIsIl9wYXJhbWV0ZXJNYXhpbXVtVmFsdWVzIiwiX3BhcmFtZXRlck1pbmltdW1WYWx1ZXMiLCJfcGFydE9wYWNpdGllcyIsIl9zYXZlZFBhcmFtZXRlcnMiLCJfZHJhd2FibGVJZHMiLCJfcGFydElkcyIsIl9ub3RFeGlzdFBhcnRJZCIsImNzbU1hcCIsIl9ub3RFeGlzdFBhcmFtZXRlcklkIiwiX25vdEV4aXN0UGFyYW1ldGVyVmFsdWVzIiwiX25vdEV4aXN0UGFydE9wYWNpdGllcyIsImRyYXdhYmxlcyIsInJlc2V0RHluYW1pY0ZsYWdzIiwiZ2V0Q2FudmFzV2lkdGgiLCJjYW52YXNpbmZvIiwiQ2FudmFzV2lkdGgiLCJQaXhlbHNQZXJVbml0IiwiZ2V0Q2FudmFzSGVpZ2h0IiwiQ2FudmFzSGVpZ2h0Iiwic2F2ZVBhcmFtZXRlcnMiLCJwYXJhbWV0ZXJDb3VudCIsInBhcmFtZXRlcnMiLCJjb3VudCIsInNhdmVkUGFyYW1ldGVyQ291bnQiLCJnZXRNb2RlbCIsInBhcnRDb3VudCIsInBhcnRzIiwiZ2V0VmFsdWUiLCJhcHBlbmRLZXkiLCJnZXRQYXJ0Q291bnQiLCJzZXRQYXJ0T3BhY2l0eUJ5SWQiLCJnZXRQYXJ0T3BhY2l0eUJ5SWQiLCJnZXRQYXJhbWV0ZXJDb3VudCIsImdldFBhcmFtZXRlck1heGltdW1WYWx1ZSIsIm1heGltdW1WYWx1ZXMiLCJnZXRQYXJhbWV0ZXJNaW5pbXVtVmFsdWUiLCJtaW5pbXVtVmFsdWVzIiwiZ2V0UGFyYW1ldGVyRGVmYXVsdFZhbHVlIiwiZGVmYXVsdFZhbHVlcyIsImdldFBhcmFtZXRlclZhbHVlQnlJZCIsImFkZFBhcmFtZXRlclZhbHVlQnlJbmRleCIsIm11bHRpcGx5UGFyYW1ldGVyVmFsdWVCeUlkIiwibXVsdGlwbHlQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgiLCJnZXREcmF3YWJsZUluZGV4IiwiZHJhd2FibGVJZCIsImRyYXdhYmxlQ291bnQiLCJkcmF3YWJsZUluZGV4IiwiZ2V0RHJhd2FibGVDb3VudCIsImdldERyYXdhYmxlSWQiLCJnZXREcmF3YWJsZVJlbmRlck9yZGVycyIsInJlbmRlck9yZGVycyIsImdldERyYXdhYmxlVGV4dHVyZUluZGljZXMiLCJ0ZXh0dXJlSW5kaWNlcyIsImdldERyYXdhYmxlRHluYW1pY0ZsYWdWZXJ0ZXhQb3NpdGlvbnNEaWRDaGFuZ2UiLCJkeW5hbWljRmxhZ3MiLCJVdGlscyIsImhhc1ZlcnRleFBvc2l0aW9uc0RpZENoYW5nZUJpdCIsImdldERyYXdhYmxlVmVydGV4SW5kZXhDb3VudCIsImluZGV4Q291bnRzIiwiZ2V0RHJhd2FibGVWZXJ0ZXhDb3VudCIsInZlcnRleENvdW50cyIsImdldERyYXdhYmxlVmVydGljZXMiLCJnZXREcmF3YWJsZVZlcnRleFBvc2l0aW9ucyIsImdldERyYXdhYmxlVmVydGV4SW5kaWNlcyIsImluZGljZXMiLCJ2ZXJ0ZXhQb3NpdGlvbnMiLCJnZXREcmF3YWJsZVZlcnRleFV2cyIsInZlcnRleFV2cyIsImdldERyYXdhYmxlT3BhY2l0eSIsIm9wYWNpdGllcyIsImdldERyYXdhYmxlQ3VsbGluZyIsImNvbnN0YW50RmxhZ3MiLCJoYXNJc0RvdWJsZVNpZGVkQml0IiwiZ2V0RHJhd2FibGVCbGVuZE1vZGUiLCJoYXNCbGVuZEFkZGl0aXZlQml0IiwiQ3ViaXNtQmxlbmRNb2RlIiwiQ3ViaXNtQmxlbmRNb2RlX0FkZGl0aXZlIiwiaGFzQmxlbmRNdWx0aXBsaWNhdGl2ZUJpdCIsIkN1YmlzbUJsZW5kTW9kZV9NdWx0aXBsaWNhdGl2ZSIsIkN1YmlzbUJsZW5kTW9kZV9Ob3JtYWwiLCJnZXREcmF3YWJsZUludmVydGVkTWFza0JpdCIsImhhc0lzSW52ZXJ0ZWRNYXNrQml0IiwiZ2V0RHJhd2FibGVNYXNrcyIsIm1hc2tzIiwiZ2V0RHJhd2FibGVNYXNrQ291bnRzIiwibWFza0NvdW50cyIsImlzVXNpbmdNYXNraW5nIiwiZ2V0RHJhd2FibGVEeW5hbWljRmxhZ0lzVmlzaWJsZSIsImhhc0lzVmlzaWJsZUJpdCIsImdldERyYXdhYmxlRHluYW1pY0ZsYWdWaXNpYmlsaXR5RGlkQ2hhbmdlIiwiaGFzVmlzaWJpbGl0eURpZENoYW5nZUJpdCIsImdldERyYXdhYmxlRHluYW1pY0ZsYWdPcGFjaXR5RGlkQ2hhbmdlIiwiaGFzT3BhY2l0eURpZENoYW5nZUJpdCIsImdldERyYXdhYmxlRHluYW1pY0ZsYWdSZW5kZXJPcmRlckRpZENoYW5nZSIsImhhc1JlbmRlck9yZGVyRGlkQ2hhbmdlQml0IiwibG9hZFBhcmFtZXRlcnMiLCJ2YWx1ZXMiLCJwcmVwYXJlQ2FwYWNpdHkiLCJwYXJ0SWRzIiwiZHJhd2FibGVJZHMiLCJDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZSIsIl91c2VyRGF0YU5vZGVzIiwiX2FydE1lc2hVc2VyRGF0YU5vZGUiLCJDdWJpc21Nb2RlbFVzZXJEYXRhIiwicGFyc2VVc2VyRGF0YSIsIm1vZGVsVXNlckRhdGEiLCJnZXRBcnRNZXNoVXNlckRhdGFzIiwiQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb24iLCJ0eXBlT2ZBcnRNZXNoIiwibm9kZUNvdW50IiwiZ2V0VXNlckRhdGFDb3VudCIsImFkZE5vZGUiLCJ0YXJnZXRJZCIsImdldFVzZXJEYXRhSWQiLCJ0YXJnZXRUeXBlIiwiZ2V0VXNlckRhdGFUYXJnZXRUeXBlIiwiZ2V0VXNlckRhdGFWYWx1ZSIsIk1ldGEiLCJ0b0ludCIsImdldFRvdGFsVXNlckRhdGFTaXplIiwibG9hZE1vdGlvbiIsIm5hbWUiLCJvbkZpbmlzaGVkTW90aW9uSGFuZGxlciIsIkN1YmlzbU1vdGlvbiIsIl9tb3Rpb25NYW5hZ2VyIiwiX2V4cHJlc3Npb25NYW5hZ2VyIiwiX2V5ZUJsaW5rIiwiX2JyZWF0aCIsIl9tb2RlbE1hdHJpeCIsIl9wb3NlIiwiX2RyYWdNYW5hZ2VyIiwiX3BoeXNpY3MiLCJfbW9kZWxVc2VyRGF0YSIsIl9pbml0aWFsaXplZCIsIl91cGRhdGluZyIsIl9vcGFjaXR5IiwiX2xpcHN5bmMiLCJfbGFzdExpcFN5bmNWYWx1ZSIsIl9kcmFnWCIsIl9kcmFnWSIsIl9hY2NlbGVyYXRpb25YIiwiX2FjY2VsZXJhdGlvblkiLCJfYWNjZWxlcmF0aW9uWiIsIl9kZWJ1Z01vZGUiLCJfcmVuZGVyZXIiLCJDdWJpc21Nb3Rpb25NYW5hZ2VyIiwic2V0RXZlbnRDYWxsYmFjayIsIkN1YmlzbVVzZXJNb2RlbCIsImN1YmlzbURlZmF1bHRNb3Rpb25FdmVudENhbGxiYWNrIiwic2V0SW5pdGlhbGl6ZWQiLCJpc1VwZGF0aW5nIiwic2V0VXBkYXRpbmciLCJzZXREcmFnZ2luZyIsInNldEFjY2VsZXJhdGlvbiIsInoiLCJnZXRNb2RlbE1hdHJpeCIsInNldE9wYWNpdHkiLCJnZXRPcGFjaXR5IiwibG9hZE1vZGVsIiwiQ3ViaXNtTG9nRXJyb3IiLCJsb2FkRXhwcmVzc2lvbiIsIkN1YmlzbUV4cHJlc3Npb25Nb3Rpb24iLCJsb2FkUG9zZSIsImxvYWRVc2VyRGF0YSIsImxvYWRQaHlzaWNzIiwiQ3ViaXNtUGh5c2ljcyIsImlzSGl0IiwicG9pbnRYIiwicG9pbnRZIiwiZHJhd0luZGV4IiwidmVydGljZXMiLCJ0eCIsInR5IiwiZ2V0UmVuZGVyZXIiLCJjcmVhdGVSZW5kZXJlciIsImRlbGV0ZVJlbmRlcmVyIiwiQ3ViaXNtUmVuZGVyZXJfV2ViR0wiLCJtb3Rpb25FdmVudEZpcmVkIiwiZXZlbnRWYWx1ZSIsImNhbGxlciIsImN1c3RvbURhdGEiLCJzZXRGaW5pc2hlZE1vdGlvbkhhbmRsZXIiLCJfb25GaW5pc2hlZE1vdGlvbiIsImdldEZpbmlzaGVkTW90aW9uSGFuZGxlciIsIl9mYWRlSW5TZWNvbmRzIiwiX2ZhZGVPdXRTZWNvbmRzIiwiX3dlaWdodCIsIl9vZmZzZXRTZWNvbmRzIiwiX2ZpcmVkRXZlbnRWYWx1ZXMiLCJtb3Rpb24iLCJtb3Rpb25RdWV1ZUVudHJ5IiwidXNlclRpbWVTZWNvbmRzIiwiaXNBdmFpbGFibGUiLCJpc0ZpbmlzaGVkIiwic2V0SXNTdGFydGVkIiwic2V0U3RhcnRUaW1lIiwic2V0RmFkZUluU3RhcnRUaW1lIiwiZHVyYXRpb24iLCJnZXREdXJhdGlvbiIsImdldEVuZFRpbWUiLCJzZXRFbmRUaW1lIiwiZ2V0U3RhcnRUaW1lIiwiZmFkZVdlaWdodCIsImdldEZhZGVJblN0YXJ0VGltZSIsInNldFN0YXRlIiwiZG9VcGRhdGVQYXJhbWV0ZXJzIiwic2V0SXNGaW5pc2hlZCIsInNldEZhZGVJblRpbWUiLCJmYWRlSW5TZWNvbmRzIiwic2V0RmFkZU91dFRpbWUiLCJmYWRlT3V0U2Vjb25kcyIsImdldEZhZGVPdXRUaW1lIiwiZ2V0RmFkZUluVGltZSIsInNldFdlaWdodCIsImdldFdlaWdodCIsImdldExvb3BEdXJhdGlvbiIsInNldE9mZnNldFRpbWUiLCJvZmZzZXRTZWNvbmRzIiwiZ2V0RmlyZWRFdmVudCIsImJlZm9yZUNoZWNrVGltZVNlY29uZHMiLCJtb3Rpb25UaW1lU2Vjb25kcyIsIkFDdWJpc21Nb3Rpb24iLCJFeHByZXNzaW9uQmxlbmRUeXBlIiwiRXhwcmVzc2lvbktleVBhcmFtZXRlcnMiLCJFeHByZXNzaW9uS2V5QmxlbmQiLCJfcGFyYW1ldGVycyIsImV4cHJlc3Npb24iLCJibGVuZFR5cGUiLCJwYXJhbSIsIkV4cHJlc3Npb25CbGVuZFR5cGVfQWRkIiwiRXhwcmVzc2lvbkJsZW5kVHlwZV9NdWx0aXBseSIsIkV4cHJlc3Npb25CbGVuZFR5cGVfT3ZlcndyaXRlIiwiaXRlbSIsIkV4cHJlc3Npb25QYXJhbWV0ZXIiLCJwYXJhbWV0ZXIiLCJsZXJwUG9pbnRzIiwiQ3ViaXNtTW90aW9uUG9pbnQiLCJ0aW1lIiwibGluZWFyRXZhbHVhdGUiLCJwb2ludHMiLCJiZXppZXJFdmFsdWF0ZSIsInAwMSIsInAxMiIsInAyMyIsInAwMTIiLCJwMTIzIiwiYmV6aWVyRXZhbHVhdGVDYXJkYW5vSW50ZXJwcmV0YXRpb24iLCJ4MSIsIngyIiwiY3gxIiwiY3gyIiwic3RlcHBlZEV2YWx1YXRlIiwiaW52ZXJzZVN0ZXBwZWRFdmFsdWF0ZSIsImV2YWx1YXRlQ3VydmUiLCJtb3Rpb25EYXRhIiwiY3VydmUiLCJjdXJ2ZXMiLCJ0YXJnZXQiLCJ0b3RhbFNlZ21lbnRDb3VudCIsImJhc2VTZWdtZW50SW5kZXgiLCJzZWdtZW50Q291bnQiLCJwb2ludFBvc2l0aW9uIiwic2VnbWVudHMiLCJiYXNlUG9pbnRJbmRleCIsInNlZ21lbnRUeXBlIiwiQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUiLCJDdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9CZXppZXIiLCJzZWdtZW50IiwiZXZhbHVhdGUiLCJnZXQiLCJfc291cmNlRnJhbWVSYXRlIiwiX2xvb3BEdXJhdGlvblNlY29uZHMiLCJfaXNMb29wIiwiX2lzTG9vcEZhZGVJbiIsIl9sYXN0V2VpZ2h0IiwiX21vdGlvbkRhdGEiLCJfbW9kZWxDdXJ2ZUlkRXllQmxpbmsiLCJfbW9kZWxDdXJ2ZUlkTGlwU3luYyIsIl9leWVCbGlua1BhcmFtZXRlcklkcyIsIl9saXBTeW5jUGFyYW1ldGVySWRzIiwicGFyc2UiLCJmcHMiLCJ0aW1lT2Zmc2V0U2Vjb25kcyIsImxpcFN5bmNWYWx1ZSIsIk1BWF9WQUxVRSIsImV5ZUJsaW5rVmFsdWUiLCJNYXhUYXJnZXRTaXplIiwibGlwU3luY0ZsYWdzIiwiZXllQmxpbmtGbGFncyIsIkN1YmlzbUxvZ0RlYnVnIiwidG1wRmFkZUluIiwidG1wRmFkZU91dCIsImN1cnZlQ291bnQiLCJ0eXBlIiwiQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQiLCJDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9Nb2RlbCIsIkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X1BhcmFtZXRlciIsInNvdXJjZVZhbHVlIiwiZmFkZUluVGltZSIsImZhZGVPdXRUaW1lIiwiZmluIiwiZm91dCIsIkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X1BhcnRPcGFjaXR5Iiwic2V0SXNMb29wIiwibG9vcCIsImlzTG9vcCIsInNldElzTG9vcEZhZGVJbiIsImxvb3BGYWRlSW4iLCJpc0xvb3BGYWRlSW4iLCJzZXRQYXJhbWV0ZXJGYWRlSW5UaW1lIiwic2V0UGFyYW1ldGVyRmFkZU91dFRpbWUiLCJnZXRQYXJhbWV0ZXJGYWRlSW5UaW1lIiwiZ2V0UGFyYW1ldGVyRmFkZU91dFRpbWUiLCJzZXRFZmZlY3RJZHMiLCJleWVCbGlua1BhcmFtZXRlcklkcyIsImxpcFN5bmNQYXJhbWV0ZXJJZHMiLCJtb3Rpb25Kc29uIiwiQ3ViaXNtTW90aW9uRGF0YSIsIkN1YmlzbU1vdGlvbkpzb24iLCJnZXRNb3Rpb25EdXJhdGlvbiIsImlzTW90aW9uTG9vcCIsImdldE1vdGlvbkN1cnZlQ291bnQiLCJnZXRNb3Rpb25GcHMiLCJldmVudENvdW50IiwiZ2V0RXZlbnRDb3VudCIsImFyZUJlemllcnNSZXN0cnVjdGVkIiwiZ2V0RXZhbHVhdGlvbk9wdGlvbkZsYWciLCJFdmFsdWF0aW9uT3B0aW9uRmxhZyIsIkV2YWx1YXRpb25PcHRpb25GbGFnX0FyZUJlemllcnNSaXN0cmljdGVkIiwiaXNFeGlzdE1vdGlvbkZhZGVJblRpbWUiLCJnZXRNb3Rpb25GYWRlSW5UaW1lIiwiaXNFeGlzdE1vdGlvbkZhZGVPdXRUaW1lIiwiZ2V0TW90aW9uRmFkZU91dFRpbWUiLCJ1cGRhdGVTaXplIiwiQ3ViaXNtTW90aW9uQ3VydmUiLCJnZXRNb3Rpb25Ub3RhbFNlZ21lbnRDb3VudCIsIkN1YmlzbU1vdGlvblNlZ21lbnQiLCJnZXRNb3Rpb25Ub3RhbFBvaW50Q291bnQiLCJldmVudHMiLCJDdWJpc21Nb3Rpb25FdmVudCIsInRvdGFsUG9pbnRDb3VudCIsImdldE1vdGlvbkN1cnZlVGFyZ2V0IiwiZ2V0TW90aW9uQ3VydmVJZCIsImlzRXhpc3RNb3Rpb25DdXJ2ZUZhZGVJblRpbWUiLCJnZXRNb3Rpb25DdXJ2ZUZhZGVJblRpbWUiLCJpc0V4aXN0TW90aW9uQ3VydmVGYWRlT3V0VGltZSIsImdldE1vdGlvbkN1cnZlRmFkZU91dFRpbWUiLCJzZWdtZW50UG9zaXRpb24iLCJnZXRNb3Rpb25DdXJ2ZVNlZ21lbnRDb3VudCIsImdldE1vdGlvbkN1cnZlU2VnbWVudCIsImUiLCJjb25zb2xlIiwiQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfTGluZWFyIiwiQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfU3RlcHBlZCIsIkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0ludmVyc2VTdGVwcGVkIiwidXNlcmRhdGFjb3VudCIsImZpcmVUaW1lIiwiZ2V0RXZlbnRUaW1lIiwiZ2V0RXZlbnRWYWx1ZSIsInUiLCJDdXJ2ZXMiLCJTZWdtZW50cyIsInRvQm9vbGVhbiIsImZsYWdUeXBlIiwiY3VydmVJbmRleCIsInNlZ21lbnRJbmRleCIsImdldFRvdGFsRXZlbnRWYWx1ZVNpemUiLCJ1c2VyRGF0YUluZGV4IiwiX2N1cnJlbnRQcmlvcml0eSIsIl9yZXNlcnZlUHJpb3JpdHkiLCJnZXRDdXJyZW50UHJpb3JpdHkiLCJnZXRSZXNlcnZlUHJpb3JpdHkiLCJzZXRSZXNlcnZlUHJpb3JpdHkiLCJ2YWwiLCJzdGFydE1vdGlvblByaW9yaXR5IiwiYXV0b0RlbGV0ZSIsInByaW9yaXR5Iiwic3RhcnRNb3Rpb24iLCJ1cGRhdGVNb3Rpb24iLCJ1cGRhdGVkIiwiZG9VcGRhdGVNb3Rpb24iLCJyZXNlcnZlTW90aW9uIiwiQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyIiwiX2F1dG9EZWxldGUiLCJfbW90aW9uIiwiX2F2YWlsYWJsZSIsIl9maW5pc2hlZCIsIl9zdGFydGVkIiwiX3N0YXJ0VGltZVNlY29uZHMiLCJfZmFkZUluU3RhcnRUaW1lU2Vjb25kcyIsIl9lbmRUaW1lU2Vjb25kcyIsIl9zdGF0ZVRpbWVTZWNvbmRzIiwiX3N0YXRlV2VpZ2h0IiwiX2xhc3RFdmVudENoZWNrU2Vjb25kcyIsIl9tb3Rpb25RdWV1ZUVudHJ5SGFuZGxlIiwiX2lzVHJpZ2dlcmVkRmFkZU91dCIsInNldEZhZGVPdXQiLCJzdGFydEZhZGVPdXQiLCJuZXdFbmRUaW1lU2Vjb25kcyIsInN0YXJ0VGltZSIsImVuZFRpbWUiLCJmIiwic2V0SXNBdmFpbGFibGUiLCJ0aW1lU2Vjb25kcyIsImdldFN0YXRlVGltZSIsImdldFN0YXRlV2VpZ2h0IiwiZ2V0TGFzdENoZWNrRXZlbnRTZWNvbmRzIiwic2V0TGFzdENoZWNrRXZlbnRTZWNvbmRzIiwiY2hlY2tTZWNvbmRzIiwiaXNUcmlnZ2VyZWRGYWRlT3V0IiwiZ2V0RmFkZU91dFNlY29uZHMiLCJDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5IiwiX2V2ZW50Q2FsbEJhY2siLCJfZXZlbnRDdXN0b21EYXRhIiwiX21vdGlvbnMiLCJJbnZhbGlkTW90aW9uUXVldWVFbnRyeUhhbmRsZVZhbHVlIiwiZXJhc2UiLCJpc0ZpbmlzaGVkQnlIYW5kbGUiLCJtb3Rpb25RdWV1ZUVudHJ5TnVtYmVyIiwic3RvcEFsbE1vdGlvbnMiLCJnZXRDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5IiwiY2FsbGJhY2siLCJmaXJlZExpc3QiLCJQaHlzaWNzVHlwZVRhZ0FuZ2xlIiwiX3BoeXNpY3NSaWciLCJfb3B0aW9ucyIsIk9wdGlvbnMiLCJncmF2aXR5Iiwid2luZCIsInBoeXNpY3MiLCJyYWRBbmdsZSIsIm91dHB1dFZhbHVlIiwiY3VycmVudFNldHRpbmciLCJjdXJyZW50SW5wdXQiLCJjdXJyZW50T3V0cHV0IiwiY3VycmVudFBhcnRpY2xlcyIsInBhcmFtZXRlck1heGltdW1WYWx1ZSIsInBhcmFtZXRlck1pbmltdW1WYWx1ZSIsInBhcmFtZXRlckRlZmF1bHRWYWx1ZSIsInRvdGFsVHJhbnNsYXRpb24iLCJzZXR0aW5nSW5kZXgiLCJzdWJSaWdDb3VudCIsImFuZ2xlIiwic2V0dGluZ3MiLCJpbnB1dHMiLCJiYXNlSW5wdXRJbmRleCIsIm91dHB1dHMiLCJiYXNlT3V0cHV0SW5kZXgiLCJwYXJ0aWNsZXMiLCJiYXNlUGFydGljbGVJbmRleCIsImlucHV0Q291bnQiLCJzb3VyY2VQYXJhbWV0ZXJJbmRleCIsInNvdXJjZSIsImdldE5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZSIsIm5vcm1hbGl6YXRpb25Qb3NpdGlvbiIsIm5vcm1hbGl6YXRpb25BbmdsZSIsInJlZmxlY3QiLCJ1cGRhdGVQYXJ0aWNsZXMiLCJwYXJ0aWNsZUNvdW50IiwibWF4aW11bSIsIm91dHB1dENvdW50IiwicGFydGljbGVJbmRleCIsInZlcnRleEluZGV4IiwiZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleCIsImRlc3RpbmF0aW9uIiwidHJhbnNsYXRpb24iLCJwb3NpdGlvbiIsIm91dFBhcmFtZXRlclZhbHVlIiwicHJvdG90eXBlIiwiSlNPTiIsInN0cmluZ2lmeSIsInN1YmFycmF5IiwidXBkYXRlT3V0cHV0UGFyYW1ldGVyVmFsdWUiLCJvdXRQYXJhbUluZGV4Iiwic2V0T3B0aW9ucyIsIm9wdGlvbnMiLCJnZXRPcHRpb24iLCJwaHlzaWNzSnNvbiIsIkN1YmlzbVBoeXNpY3NSaWciLCJDdWJpc21QaHlzaWNzSnNvbiIsImdldEdyYXZpdHkiLCJnZXRXaW5kIiwiZ2V0U3ViUmlnQ291bnQiLCJDdWJpc21QaHlzaWNzU3ViUmlnIiwiZ2V0VG90YWxJbnB1dENvdW50IiwiQ3ViaXNtUGh5c2ljc0lucHV0IiwiZ2V0VG90YWxPdXRwdXRDb3VudCIsIkN1YmlzbVBoeXNpY3NPdXRwdXQiLCJnZXRWZXJ0ZXhDb3VudCIsIkN1YmlzbVBoeXNpY3NQYXJ0aWNsZSIsImlucHV0SW5kZXgiLCJvdXRwdXRJbmRleCIsIm1pbmltdW0iLCJnZXROb3JtYWxpemF0aW9uUG9zaXRpb25NaW5pbXVtVmFsdWUiLCJnZXROb3JtYWxpemF0aW9uUG9zaXRpb25NYXhpbXVtVmFsdWUiLCJkZWZhbHV0IiwiZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uRGVmYXVsdFZhbHVlIiwiZ2V0Tm9ybWFsaXphdGlvbkFuZ2xlTWluaW11bVZhbHVlIiwiZ2V0Tm9ybWFsaXphdGlvbkFuZ2xlTWF4aW11bVZhbHVlIiwiZ2V0Tm9ybWFsaXphdGlvbkFuZ2xlRGVmYXVsdFZhbHVlIiwiZ2V0SW5wdXRDb3VudCIsImdldElucHV0V2VpZ2h0IiwiZ2V0SW5wdXRSZWZsZWN0IiwiZ2V0SW5wdXRUeXBlIiwiQ3ViaXNtUGh5c2ljc1NvdXJjZSIsIkN1YmlzbVBoeXNpY3NTb3VyY2VfWCIsImdldElucHV0VHJhbnNsYXRpb25YRnJvbU5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZSIsIkN1YmlzbVBoeXNpY3NTb3VyY2VfWSIsImdldElucHV0VHJhbnNsYXRpb25ZRnJvbU5vcm1hbGl6ZWRQYXJhbXRlclZhbHVlIiwiQ3ViaXNtUGh5c2ljc1NvdXJjZV9BbmdsZSIsImdldElucHV0QW5nbGVGcm9tTm9ybWFsaXplZFBhcmFtZXRlclZhbHVlIiwiQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGUiLCJDdWJpc21QaHlzaWNzVGFyZ2V0VHlwZV9QYXJhbWV0ZXIiLCJnZXRJbnB1dFNvdXJjZUlkIiwiZ2V0T3V0cHV0Q291bnQiLCJnZXRPdXRwdXRWZXJ0ZXhJbmRleCIsImFuZ2xlU2NhbGUiLCJnZXRPdXRwdXRBbmdsZVNjYWxlIiwiZ2V0T3V0cHV0V2VpZ2h0IiwiZ2V0T3V0cHV0RGVzdGluYXRpb25JZCIsImdldE91dHB1dFR5cGUiLCJnZXRPdXRwdXRUcmFuc2xhdGlvblgiLCJnZXRTY2FsZSIsImdldE91dHB1dFNjYWxlVHJhbnNsYXRpb25YIiwiZ2V0T3V0cHV0VHJhbnNsYXRpb25ZIiwiZ2V0T3V0cHV0U2NhbGVUcmFuc2xhdGlvblkiLCJnZXRPdXRwdXRBbmdsZSIsImdldE91dHB1dFNjYWxlQW5nbGUiLCJnZXRPdXRwdXRSZWZsZWN0IiwiZ2V0UGFydGljbGVDb3VudCIsIm1vYmlsaXR5IiwiZ2V0UGFydGljbGVNb2JpbGl0eSIsImRlbGF5IiwiZ2V0UGFydGljbGVEZWxheSIsImFjY2VsZXJhdGlvbiIsImdldFBhcnRpY2xlQWNjZWxlcmF0aW9uIiwicmFkaXVzIiwiZ2V0UGFydGljbGVSYWRpdXMiLCJnZXRQYXJ0aWNsZVBvc2l0aW9uIiwic3RyYW5kIiwiaW5pdGlhbFBvc2l0aW9uIiwibGFzdFBvc2l0aW9uIiwibGFzdEdyYXZpdHkiLCJ2ZWxvY2l0eSIsImZvcmNlIiwidGFyZ2V0VHJhbnNsYXRpb24iLCJ0YXJnZXRBbmdsZSIsImlzSW52ZXJ0ZWQiLCJub3JtYWxpemVQYXJhbWV0ZXJWYWx1ZSIsIm5vcm1hbGl6YWl0aW9uUG9zaXRpb24iLCJwYXJlbnRHcmF2aXR5IiwidHJhbnNsYXRpb25TY2FsZSIsInN0cmFuZENvdW50Iiwid2luZERpcmVjdGlvbiIsInRocmVzaG9sZFZhbHVlIiwiYWlyUmVzaXN0YW5jZSIsInRvdGFsUmFkaWFuIiwiY3VycmVudEdyYXZpdHkiLCJkaXJlY3Rpb24iLCJuZXdEaXJlY3Rpb24iLCJwYXJhbWV0ZXJWYWx1ZU1pbmltdW0iLCJwYXJhbWV0ZXJWYWx1ZU1heGltdW0iLCJvdXRwdXQiLCJ2YWx1ZUJlbG93TWluaW11bSIsInZhbHVlRXhjZWVkZWRNYXhpbXVtIiwicGFyYW1ldGVyTWluaW11bSIsInBhcmFtZXRlck1heGltdW0iLCJwYXJhbWV0ZXJEZWZhdWx0Iiwibm9ybWFsaXplZE1pbmltdW0iLCJub3JtYWxpemVkTWF4aW11bSIsIm5vcm1hbGl6ZWREZWZhdWx0IiwibWF4VmFsdWUiLCJtaW5WYWx1ZSIsIm1pbk5vcm1WYWx1ZSIsIm1heE5vcm1WYWx1ZSIsIm1pZGRsZU5vcm1WYWx1ZSIsIm1pZGRsZVZhbHVlIiwiZ2V0UmFuZ2VWYWx1ZSIsInBhcmFtVmFsdWUiLCJzaWduIiwibkxlbmd0aCIsInBMZW5ndGgiLCJQaHlzaWNzSnNvbkVmZmVjdGl2ZUZvcmNlcyIsIkN1YmlzbVBoeXNpY3NQYXJhbWV0ZXIiLCJDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbiIsIlBvc2l0aW9uIiwiQW5nbGUiLCJUeXBlIiwiRWZmZWN0aXZlRm9yY2VzIiwiR3Jhdml0eSIsIldpbmQiLCJQaHlzaWNzU2V0dGluZ3MiLCJOb3JtYWxpemF0aW9uIiwiTWluaW11bSIsIk1heGltdW0iLCJEZWZhdWx0IiwiUmVmbGVjdCIsIldlaWdodCIsIklucHV0IiwiT3V0cHV0IiwiVmVydGljZXMiLCJwaHlzaWNzU2V0dGluZ0luZGV4IiwiX2lzQ3VsbGluZyIsIl9pc1ByZW11bHRpcGxpZWRBbHBoYSIsIl9hbmlzb3J0b3B5IiwiX21vZGVsQ29sb3IiLCJDdWJpc21UZXh0dXJlQ29sb3IiLCJfbXZwTWF0cml4NHg0IiwicmVuZGVyZXIiLCJkcmF3TW9kZWwiLCJkb0RyYXdNb2RlbCIsInNldE12cE1hdHJpeCIsIm1hdHJpeDQ0IiwiZ2V0TXZwTWF0cml4Iiwic2V0TW9kZWxDb2xvciIsInJlZCIsImdyZWVuIiwiYmx1ZSIsImFscGhhIiwiUiIsIkciLCJCIiwiQSIsImdldE1vZGVsQ29sb3IiLCJzZXRJc1ByZW11bHRpcGxpZWRBbHBoYSIsImVuYWJsZSIsImlzUHJlbXVsdGlwbGllZEFscGhhIiwic2V0SXNDdWxsaW5nIiwiY3VsbGluZyIsImlzQ3VsbGluZyIsInNldEFuaXNvdHJvcHkiLCJuIiwiZ2V0QW5pc290cm9weSIsInNfaW5zdGFuY2UiLCJzX3ZpZXdwb3J0Iiwic19mYm8iLCJfbWFza1JlbmRlclRleHR1cmUiLCJfY29sb3JCdWZmZXIiLCJfY3VycmVudEZyYW1lTm8iLCJfY2xpcHBpbmdNYXNrQnVmZmVyU2l6ZSIsIl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzayIsIl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdyIsIl9jaGFubmVsQ29sb3JzIiwiX3RtcEJvdW5kc09uTW9kZWwiLCJjc21SZWN0IiwiX3RtcE1hdHJpeCIsIl90bXBNYXRyaXhGb3JNYXNrIiwiX3RtcE1hdHJpeEZvckRyYXciLCJfbWFza1RleHR1cmUiLCJ0bXAiLCJnZXRDaGFubmVsRmxhZ0FzQ29sb3IiLCJjaGFubmVsTm8iLCJnZXRNYXNrUmVuZGVyVGV4dHVyZSIsInRleHR1cmUiLCJmcmFtZU5vIiwiZ2wiLCJjcmVhdGVUZXh0dXJlIiwiYmluZFRleHR1cmUiLCJURVhUVVJFXzJEIiwidGV4SW1hZ2UyRCIsIlJHQkEiLCJVTlNJR05FRF9CWVRFIiwidGV4UGFyYW1ldGVyaSIsIlRFWFRVUkVfV1JBUF9TIiwiQ0xBTVBfVE9fRURHRSIsIlRFWFRVUkVfV1JBUF9UIiwiVEVYVFVSRV9NSU5fRklMVEVSIiwiTElORUFSIiwiVEVYVFVSRV9NQUdfRklMVEVSIiwiY3JlYXRlRnJhbWVidWZmZXIiLCJiaW5kRnJhbWVidWZmZXIiLCJGUkFNRUJVRkZFUiIsImZyYW1lYnVmZmVyVGV4dHVyZTJEIiwiQ09MT1JfQVRUQUNITUVOVDAiLCJDdWJpc21SZW5kZXJUZXh0dXJlUmVzb3VyY2UiLCJzZXRHTCIsImNhbGNDbGlwcGVkRHJhd1RvdGFsQm91bmRzIiwiY2xpcHBpbmdDb250ZXh0IiwiY2xpcHBlZERyYXdUb3RhbE1pblgiLCJjbGlwcGVkRHJhd1RvdGFsTWluWSIsImNsaXBwZWREcmF3VG90YWxNYXhYIiwiTUlOX1ZBTFVFIiwiY2xpcHBlZERyYXdUb3RhbE1heFkiLCJjbGlwcGVkRHJhd0NvdW50IiwiX2NsaXBwZWREcmF3YWJsZUluZGV4TGlzdCIsImNsaXBwZWREcmF3YWJsZUluZGV4IiwiZHJhd2FibGVWZXJ0ZXhDb3VudCIsImRyYXdhYmxlVmVydGV4ZXMiLCJtaW5YIiwibWluWSIsIm1heFgiLCJtYXhZIiwicGkiLCJfYWxsQ2xpcHBlZERyYXdSZWN0Iiwid2lkdGgiLCJoZWlnaHQiLCJfaXNVc2luZyIsImRlbGV0ZUZyYW1lYnVmZmVyIiwiZGVsZXRlVGV4dHVyZSIsImRyYXdhYmxlTWFza3MiLCJkcmF3YWJsZU1hc2tDb3VudHMiLCJmaW5kU2FtZUNsaXAiLCJDdWJpc21DbGlwcGluZ0NvbnRleHQiLCJhZGRDbGlwcGVkRHJhd2FibGUiLCJzZXR1cENsaXBwaW5nQ29udGV4dCIsInVzaW5nQ2xpcENvdW50IiwiY2xpcEluZGV4IiwiY2MiLCJ2aWV3cG9ydCIsInByZURyYXciLCJzZXR1cExheW91dEJvdW5kcyIsImNsZWFyQ29sb3IiLCJjbGVhciIsIkNPTE9SX0JVRkZFUl9CSVQiLCJjbGlwQ29udGV4dCIsImFsbENsaXBlZERyYXdSZWN0IiwibGF5b3V0Qm91bmRzT25UZXgwMSIsIl9sYXlvdXRCb3VuZHMiLCJzZXRSZWN0IiwiZXhwYW5kIiwiX21hdHJpeEZvck1hc2siLCJfbWF0cml4Rm9yRHJhdyIsImNsaXBEcmF3Q291bnQiLCJfY2xpcHBpbmdJZENvdW50IiwiY2xpcERyYXdJbmRleCIsIl9jbGlwcGluZ0lkTGlzdCIsInNldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2siLCJkcmF3TWVzaCIsInNhbWVDb3VudCIsImNsaXBJZCIsImRpdiIsIm1vZCIsImN1ckNsaXBJbmRleCIsImxheW91dENvdW50IiwiX2xheW91dENoYW5uZWxObyIsInhwb3MiLCJ5cG9zIiwiZ2V0Q29sb3JCdWZmZXIiLCJnZXRDbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdyIsInNldENsaXBwaW5nTWFza0J1ZmZlclNpemUiLCJnZXRDbGlwcGluZ01hc2tCdWZmZXJTaXplIiwiQ3ViaXNtQ2xpcHBpbmdNYW5hZ2VyX1dlYkdMIiwibWFuYWdlciIsImNsaXBwaW5nRHJhd2FibGVJbmRpY2VzIiwiY2xpcENvdW50IiwiX293bmVyIiwicHVzaCIsImdldENsaXBwaW5nTWFuYWdlciIsInNldEdsIiwiX3NoYWRlclNldHMiLCJnZXRJbnN0YW5jZSIsIkN1YmlzbVNoYWRlcl9XZWJHTCIsImRlbGV0ZUluc3RhbmNlIiwicmVsZWFzZVNoYWRlclByb2dyYW0iLCJzZXR1cFNoYWRlclByb2dyYW0iLCJ0ZXh0dXJlSWQiLCJ2ZXJ0ZXhDb3VudCIsInZlcnRleEFycmF5IiwiaW5kZXhBcnJheSIsInV2QXJyYXkiLCJidWZmZXJEYXRhIiwiY29sb3JCbGVuZE1vZGUiLCJiYXNlQ29sb3IiLCJtYXRyaXg0eDQiLCJpbnZlcnRlZE1hc2siLCJTUkNfQ09MT1IiLCJEU1RfQ09MT1IiLCJTUkNfQUxQSEEiLCJEU1RfQUxQSEEiLCJnZW5lcmF0ZVNoYWRlcnMiLCJnZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrIiwic2hhZGVyU2V0IiwiU2hhZGVyTmFtZXMiLCJTaGFkZXJOYW1lc19TZXR1cE1hc2siLCJ1c2VQcm9ncmFtIiwic2hhZGVyUHJvZ3JhbSIsImFjdGl2ZVRleHR1cmUiLCJURVhUVVJFMCIsInVuaWZvcm0xaSIsInNhbXBsZXJUZXh0dXJlMExvY2F0aW9uIiwidmVydGV4IiwiY3JlYXRlQnVmZmVyIiwiYmluZEJ1ZmZlciIsIkFSUkFZX0JVRkZFUiIsIkRZTkFNSUNfRFJBVyIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwiYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbiIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJGTE9BVCIsInV2IiwiYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbiIsImNvbG9yQ2hhbm5lbCIsInVuaWZvcm00ZiIsInVuaWZvcm1DaGFubmVsRmxhZ0xvY2F0aW9uIiwidW5pZm9ybU1hdHJpeDRmdiIsInVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24iLCJyZWN0IiwidW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uIiwiZ2V0UmlnaHQiLCJnZXRCb3R0b20iLCJaRVJPIiwiT05FX01JTlVTX1NSQ19DT0xPUiIsIk9ORV9NSU5VU19TUkNfQUxQSEEiLCJtYXNrZWQiLCJnZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3IiwiQ3ViaXNtU2hhZGVyU2V0IiwiU2hhZGVyTmFtZXNfTm9ybWFsUHJlbXVsdGlwbGllZEFscGhhIiwiT05FIiwiU2hhZGVyTmFtZXNfQWRkUHJlbXVsdGlwbGllZEFscGhhIiwiU2hhZGVyTmFtZXNfTXVsdFByZW11bHRpcGxpZWRBbHBoYSIsIlRFWFRVUkUxIiwidGV4Iiwic2FtcGxlclRleHR1cmUxTG9jYXRpb24iLCJ1bmlmb3JtTWF0cml4TG9jYXRpb24iLCJFTEVNRU5UX0FSUkFZX0JVRkZFUiIsImJsZW5kRnVuY1NlcGFyYXRlIiwiZGVsZXRlUHJvZ3JhbSIsImxvYWRTaGFkZXJQcm9ncmFtIiwidmVydGV4U2hhZGVyU3JjU2V0dXBNYXNrIiwiZnJhZ21lbnRTaGFkZXJTcmNzZXR1cE1hc2siLCJ2ZXJ0ZXhTaGFkZXJTcmMiLCJmcmFnbWVudFNoYWRlclNyY1ByZW11bHRpcGxpZWRBbHBoYSIsInZlcnRleFNoYWRlclNyY01hc2tlZCIsImZyYWdtZW50U2hhZGVyU3JjTWFza1ByZW11bHRpcGxpZWRBbHBoYSIsImZyYWdtZW50U2hhZGVyU3JjTWFza0ludmVydGVkUHJlbXVsdGlwbGllZEFscGhhIiwiZ2V0QXR0cmliTG9jYXRpb24iLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJ2ZXJ0ZXhTaGFkZXJTb3VyY2UiLCJmcmFnbWVudFNoYWRlclNvdXJjZSIsImNyZWF0ZVByb2dyYW0iLCJ2ZXJ0U2hhZGVyIiwiY29tcGlsZVNoYWRlclNvdXJjZSIsIlZFUlRFWF9TSEFERVIiLCJmcmFnU2hhZGVyIiwiRlJBR01FTlRfU0hBREVSIiwiYXR0YWNoU2hhZGVyIiwibGlua1Byb2dyYW0iLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiTElOS19TVEFUVVMiLCJkZWxldGVTaGFkZXIiLCJzaGFkZXJUeXBlIiwic2hhZGVyU291cmNlIiwic2hhZGVyIiwiY3JlYXRlU2hhZGVyIiwiY29tcGlsZVNoYWRlciIsImdldFNoYWRlckluZm9Mb2ciLCJnZXRTaGFkZXJQYXJhbWV0ZXIiLCJDT01QSUxFX1NUQVRVUyIsIl9jbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrIiwiX2NsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXciLCJfY2xpcHBpbmdNYW5hZ2VyIiwiZmlyc3REcmF3IiwiX3RleHR1cmVzIiwiX3NvcnRlZERyYXdhYmxlSW5kZXhMaXN0IiwiX2J1ZmZlckRhdGEiLCJXZWJHTEJ1ZmZlciIsInJlc2l6ZSIsIm1vZGVsVGV4dHVyZU5vIiwiZ2xUZXh0dXJlIiwiZ2V0QmluZGVkVGV4dHVyZXMiLCJkZWxldGVCdWZmZXIiLCJyZW5kZXJPcmRlciIsIm9yZGVyIiwic2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdyIsInRleHR1cmVObyIsImluZGV4Q291bnQiLCJDVUxMX0ZBQ0UiLCJkaXNhYmxlIiwiZnJvbnRGYWNlIiwiQ0NXIiwiZHJhd3RleHR1cmUiLCJtb2RlbENvbG9yUkdCQSIsImRyYXdFbGVtZW50cyIsIlRSSUFOR0xFUyIsIlVOU0lHTkVEX1NIT1JUIiwiZG9TdGF0aWNSZWxlYXNlIiwic2V0UmVuZGVyU3RhdGUiLCJmYm8iLCJnZXRFeHRlbnNpb24iLCJTQ0lTU09SX1RFU1QiLCJTVEVOQ0lMX1RFU1QiLCJERVBUSF9URVNUIiwiQ1ciLCJCTEVORCIsImNvbG9yTWFzayIsImNsaXAiLCJjc21QYWlyIiwiX2tleVZhbHVlcyIsIl9kdW1teVZhbHVlIiwiX3NpemUiLCJBcnJheSIsImZvdW5kIiwibmV3U2l6ZSIsImZpdFRvU2l6ZSIsIkRlZmF1bHRTaXplIiwiaXRlcmF0b3IiLCJfaW5kZXgiLCJzcGxpY2UiLCJkdW1wQXNJbnQiLCJpZHgiLCJfbWFwIiwicHJlRGVjcmVtZW50IiwiZGVjcmVtZW50IiwiaXRlb2xkIiwiZ2V0Q2VudGVyWCIsImdldENlbnRlclkiLCJhcHBlbmQiLCJzdWJzdHIiLCJleHBhbnNpb24iLCJnZXRCeXRlcyIsImVuY29kZVVSSUNvbXBvbmVudCIsInJlcGxhY2UiLCJpc0xlc3MiLCJpc0dyZWF0IiwiaXNFbXB0eSIsImluaXRpYWxDYXBhY2l0eSIsIl9wdHIiLCJfY2FwYWNpdHkiLCJzX2RlZmF1bHRTaXplIiwiYXNzaWduIiwiY2FsbFBsYWNlbWVudE5ldyIsInN1YiIsImluc2VydCIsImRzdFNpIiwic3JjU2kiLCJzcmNFaSIsImFkZENvdW50IiwiYWRkU2l6ZSIsIl92ZWN0b3IiLCJyZW1vdmUiLCJnZXRPZmZzZXQiLCJuZXdWZWN0b3IiLCJzdWJzdGl0dXRpb24iLCJDdWJpc21Mb2dQcmludCIsImxldmVsIiwiZm10IiwiYXJncyIsIkN1YmlzbURlYnVnIiwicHJpbnQiLCJDdWJpc21Mb2dQcmludEluIiwiZXhwciIsImFzc2VydCIsIkN1YmlzbUxvZ1ZlcmJvc2UiLCJMb2dMZXZlbF9WZXJib3NlIiwiTG9nTGV2ZWxfRGVidWciLCJMb2dMZXZlbF9JbmZvIiwiTG9nTGV2ZWxfV2FybmluZyIsIkxvZ0xldmVsX0Vycm9yIiwibG9nTGV2ZWwiLCJmb3JtYXQiLCJsb2dQcmludCIsImR1bXBCeXRlcyIsIkNTTV9KU09OX0VSUk9SX1RZUEVfTUlTTUFUQ0giLCJkZWZhdWx0VmFsdWUiLCJpbmRlbnQiLCJlcnJvclZhbHVlIiwic2V0RXJyb3JOb3RGb3JDbGllbnRDYWxsIiwibnVsbFZhbHVlIiwic19kdW1teUtleXMiLCJpc0Jvb2wiLCJpc0Zsb2F0IiwiaXNTdHJpbmciLCJpc0FycmF5IiwiaXNNYXAiLCJlcXVhbHMiLCJpc1N0YXRpYyIsImVycm9yU3RyIiwiSnNvbkVycm9yIiwiSnNvbkJvb2xlYW4iLCJ0cnVlVmFsdWUiLCJmYWxzZVZhbHVlIiwiSnNvbk51bGx2YWx1ZSIsIl9lcnJvciIsIl9saW5lQ291bnQiLCJfcm9vdCIsInBhcnNlQnl0ZXMiLCJhcnJheUJ1ZmZlclRvU3RyaW5nIiwidWludDhBcnJheSIsIlVpbnQ4QXJyYXkiLCJzdHIiLCJsZW4iLCJwYWQiLCJ0b1N0cmluZyIsImRlY29kZVVSSUNvbXBvbmVudCIsInN0cmJ1ZiIsImVuZFBvcyIsImRlY29kZUJ1ZmZlciIsInBhcnNlVmFsdWUiLCJKc29uU3RyaW5nIiwiZ2V0UGFyc2VFcnJvciIsImNoZWNrRW5kT2ZGaWxlIiwib3V0RW5kUG9zIiwibyIsImFmdGVyU3RyaW5nIiwic3RydG9kIiwiaW5kZXhPZiIsIkpzb25GbG9hdCIsInBhcnNlU3RyaW5nIiwicGFyc2VBcnJheSIsInBhcnNlT2JqZWN0Iiwic3RyaW5nIiwiYnVmU3RhcnQiLCJKc29uTWFwIiwibG9jYWxSZXRFbmRQb3MyIiwib2siLCJGT1JfTE9PUCIsIkZPUl9MT09QMiIsInB1dCIsIkZPUl9MT09QMyIsIkpzb25BcnJheSIsImxvY2FsUmV0RW5kcG9zMiIsIl92YWx1ZSIsIl9zdHJpbmdCdWZmZXIiLCJwYXJzZUludCIsInJvdW5kIiwiX2Jvb2xWYWx1ZSIsIl9pc1N0YXRpYyIsIl9hcnJheSIsInN0cmluZ0J1ZmZlciIsIml0ZXIiLCJfa2V5cyIsIlZpZXdTY2FsZSIsIlZpZXdNYXhTY2FsZSIsIlZpZXdNaW5TY2FsZSIsIlZpZXdMb2dpY2FsTGVmdCIsIlZpZXdMb2dpY2FsUmlnaHQiLCJWaWV3TG9naWNhbEJvdHRvbSIsIlZpZXdMb2dpY2FsVG9wIiwiVmlld0xvZ2ljYWxNYXhMZWZ0IiwiVmlld0xvZ2ljYWxNYXhSaWdodCIsIlZpZXdMb2dpY2FsTWF4Qm90dG9tIiwiVmlld0xvZ2ljYWxNYXhUb3AiLCJNb3Rpb25Hcm91cElkbGUiLCJNb3Rpb25Hcm91cFRhcEJvZHkiLCJIaXRBcmVhTmFtZUhlYWQiLCJIaXRBcmVhTmFtZUJvZHkiLCJQcmlvcml0eU5vbmUiLCJQcmlvcml0eUlkbGUiLCJQcmlvcml0eU5vcm1hbCIsIlByaW9yaXR5Rm9yY2UiLCJEZWJ1Z0xvZ0VuYWJsZSIsIkRlYnVnVG91Y2hMb2dFbmFibGUiLCJDdWJpc21Mb2dnaW5nTGV2ZWwiLCJsaXZlMmRfdmlldyIsImZyYW1lQnVmZmVyIiwiYXBpIiwiX2FwaSIsIl9jYXB0dXJlZCIsIl9tb3VzZVgiLCJfbW91c2VZIiwiX2lzRW5kIiwiX2N1YmlzbU9wdGlvbiIsIl9tYW5hZ2VyIiwiTEFwcExpdmUyRE1hbmFnZXIiLCJfdmlldyIsIkxBcHBWaWV3IiwiX3RleHR1cmVNYW5hZ2VyIiwiTEFwcFRleHR1cmVNYW5hZ2VyIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiZ2V0Q29udGV4dCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImdldFBhcmFtZXRlciIsIkZSQU1FQlVGRkVSX0JJTkRJTkciLCJibGVuZEZ1bmMiLCJpbml0aWFsaXplQ3ViaXNtIiwiYWxlcnQiLCJvblJlc2l6ZSIsIl9yZXNpemVDYW52YXMiLCJpbml0aWFsaXplU3ByaXRlIiwicnVuIiwiTEFwcFBhbCIsInVwZGF0ZVRpbWUiLCJkZXB0aEZ1bmMiLCJMRVFVQUwiLCJERVBUSF9CVUZGRVJfQklUIiwiY2xlYXJEZXB0aCIsInJlbmRlciIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInZlcnRleFNoYWRlcklkIiwicHJpbnRNZXNzYWdlIiwiZnJhZ21lbnRTaGFkZXJJZCIsInByb2dyYW1JZCIsImdldFZpZXciLCJnZXRUZXh0dXJlTWFuYWdlciIsIkxBcHBEZWZpbmUiLCJvblRvdWNoQmVnYW4iLCJwb3NYIiwiY2hhbmdlZFRvdWNoZXMiLCJwYWdlWCIsInBvc1kiLCJwYWdlWSIsIm9uVG91Y2hlc0JlZ2FuIiwib25Ub3VjaE1vdmVkIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50WCIsImNsaWVudFkiLCJvblRvdWNoZXNNb3ZlZCIsIm9uVG91Y2hFbmRlZCIsIm9uVG91Y2hlc0VuZGVkIiwiZ2V0TWFuYWdlciIsIkxBcHBEZWxlZ2F0ZSIsImRlbGVnYXRlIiwiX2ZpbmlzaGVkTW90aW9uIiwic2VsZiIsIl9kZWxlZ2F0ZSIsIl92aWV3TWF0cml4IiwiY2hhbmdlU2NlbmUiLCJfc2NhbGUiLCJfeCIsIl95IiwicmVsZWFzZUFsbE1vZGVsIiwib25EcmFnIiwib25UYXAiLCJfb25UYXAiLCJ0b0ZpeGVkIiwiaGl0VGVzdCIsInNldFJhbmRvbUV4cHJlc3Npb24iLCJzdGFydFJhbmRvbU1vdGlvbiIsIm9uVXBkYXRlIiwicHJvamVjdGlvbiIsImRyYXciLCJwYXRoIiwibW9kZWxQYXRoIiwibW9kZWxKc29uTmFtZSIsIkxBcHBNb2RlbCIsImxvYWRBc3NldHMiLCJzZXRWaWV3TWF0cml4Iiwic2V0T25UYXAiLCJjYWxsIiwiTG9hZFN0ZXAiLCJfbW9kZWxTZXR0aW5nIiwiX21vZGVsSG9tZURpciIsIl9leWVCbGlua0lkcyIsIl9saXBTeW5jSWRzIiwiX2V4cHJlc3Npb25zIiwiX2hpdEFyZWEiLCJfdXNlckFyZWEiLCJfaWRQYXJhbUFuZ2xlWCIsIl9pZFBhcmFtQW5nbGVZIiwiX2lkUGFyYW1BbmdsZVoiLCJfaWRQYXJhbUV5ZUJhbGxYIiwiX2lkUGFyYW1FeWVCYWxsWSIsIl9pZFBhcmFtQm9keUFuZ2xlWCIsIl9zdGF0ZSIsIkxvYWRBc3NldHMiLCJfZXhwcmVzc2lvbkNvdW50IiwiX3RleHR1cmVDb3VudCIsIl9tb3Rpb25Db3VudCIsIl9hbGxNb3Rpb25Db3VudCIsIl93YXZGaWxlSGFuZGxlciIsIkxBcHBXYXZGaWxlSGFuZGxlciIsImRpciIsImZpbGVOYW1lIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJhcnJheUJ1ZmZlciIsInNldHRpbmciLCJieXRlTGVuZ3RoIiwiTG9hZE1vZGVsIiwic2V0dXBNb2RlbCIsImdldE1vZGVsU2V0dGluZyIsIm1vZGVsRmlsZU5hbWUiLCJMb2FkRXhwcmVzc2lvbiIsImxvYWRDdWJpc21FeHByZXNzaW9uIiwiV2FpdExvYWRNb2RlbCIsImV4cHJlc3Npb25OYW1lIiwiZXhwcmVzc2lvbkZpbGVOYW1lIiwiTG9hZFBoeXNpY3MiLCJsb2FkQ3ViaXNtUGh5c2ljcyIsIldhaXRMb2FkRXhwcmVzc2lvbiIsInBoeXNpY3NGaWxlTmFtZSIsIkxvYWRQb3NlIiwibG9hZEN1YmlzbVBvc2UiLCJXYWl0TG9hZFBoeXNpY3MiLCJwb3NlRmlsZU5hbWUiLCJTZXR1cEV5ZUJsaW5rIiwic2V0dXBFeWVCbGluayIsIldhaXRMb2FkUG9zZSIsIlNldHVwQnJlYXRoIiwic2V0dXBCcmVhdGgiLCJMb2FkVXNlckRhdGEiLCJ1c2VyRGF0YUZpbGUiLCJTZXR1cEV5ZUJsaW5rSWRzIiwic2V0dXBFeWVCbGlua0lkcyIsIldhaXRMb2FkVXNlckRhdGEiLCJleWVCbGlua0lkQ291bnQiLCJTZXR1cExpcFN5bmNJZHMiLCJzZXR1cExpcFN5bmNJZHMiLCJsaXBTeW5jSWRDb3VudCIsIlNldHVwTGF5b3V0Iiwic2V0dXBMYXlvdXQiLCJMb2FkTW90aW9uIiwibG9hZEN1YmlzbU1vdGlvbiIsIldhaXRMb2FkTW90aW9uIiwiZ3JvdXAiLCJtb3Rpb25Hcm91cENvdW50IiwiZW5kc1dpdGgiLCJwcmVMb2FkTW90aW9uR3JvdXAiLCJMb2FkVGV4dHVyZSIsInNldHVwVGV4dHVyZXMiLCJtb2RlbFRleHR1cmVOdW1iZXIiLCJ0ZXh0dXJlUGF0aCIsImNyZWF0ZVRleHR1cmVGcm9tUG5nRmlsZSIsInRleHR1cmVJbmZvIiwiQ29tcGxldGVTZXR1cCIsIldhaXRMb2FkVGV4dHVyZSIsInJlbG9hZFJlbmRlcmVyIiwiZ2V0RGVsdGFUaW1lIiwibW90aW9uVXBkYXRlZCIsImdldFJtcyIsIm5vIiwibW90aW9uRmlsZU5hbWUiLCJmYWRlVGltZSIsInZvaWNlIiwibG9jYWxlQ29tcGFyZSIsInN0YXJ0IiwiZmxvb3IiLCJzZXRFeHByZXNzaW9uIiwiZXhwcmVzc2lvbklkIiwidGlja1Jlc2V0RXhwcmVzc2lvbiIsImhpdEFyZW5hTmFtZSIsImRyYXdJZCIsInRtcE1vdGlvbiIsInJlbGVhc2VNb3Rpb25zIiwicmVsZWFzZUV4cHJlc3Npb25zIiwiZG9EcmF3IiwibWF0cml4IiwibG9hZEZpbGVBc0J5dGVzIiwiZmlsZVBhdGgiLCJzX2RlbHRhVGltZSIsInNfY3VycmVudEZyYW1lIiwiRGF0ZSIsIm5vdyIsInNfbGFzdEZyYW1lIiwibGFzdFVwZGF0ZSIsInVzZVByZW11bHRpcGx5IiwidXNlUHJlbXVsdHBseSIsImltZyIsIkltYWdlIiwib25sb2FkIiwiTElORUFSX01JUE1BUF9MSU5FQVIiLCJwaXhlbFN0b3JlaSIsIlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCIsImdlbmVyYXRlTWlwbWFwIiwiVGV4dHVyZUluZm8iLCJyZWxlYXNlVGV4dHVyZXMiLCJyZWxlYXNlVGV4dHVyZUJ5VGV4dHVyZSIsInJlbGVhc2VUZXh0dXJlQnlGaWxlUGF0aCIsIl9wcm9ncmFtSWQiLCJfdG91Y2hNYW5hZ2VyIiwiVG91Y2hNYW5hZ2VyIiwiX2RldmljZVRvU2NyZWVuIiwicmF0aW8iLCJzY3JlZW5XIiwic2NyZWVuSCIsImZsdXNoIiwidG91Y2hlc0JlZ2FuIiwidmlld1giLCJ0cmFuc2Zvcm1WaWV3WCIsInZpZXdZIiwidHJhbnNmb3JtVmlld1kiLCJ0b3VjaGVzTW92ZWQiLCJkZXZpY2VYIiwic2NyZWVuWCIsImRldmljZVkiLCJzY3JlZW5ZIiwidHJhbnNmb3JtU2NyZWVuWCIsInRyYW5zZm9ybVNjcmVlblkiLCJfbG9hZEZpbGV0b0J5dGVzIiwiX2J5dGVSZWFkZXIiLCJfZmlsZUJ5dGUiLCJfZmlsZURhdGFWaWV3IiwiRGF0YVZpZXciLCJfZmlsZVNpemUiLCJfcGNtRGF0YSIsIl9sYXN0Um1zIiwiX3NhbXBsZU9mZnNldCIsIl93YXZGaWxlSW5mbyIsIldhdkZpbGVJbmZvIiwiQnl0ZVJlYWRlciIsImdvYWxPZmZzZXQiLCJybXMiLCJfc2FtcGxlc1BlckNoYW5uZWwiLCJfc2FtcGxpbmdSYXRlIiwiY2hhbm5lbENvdW50IiwiX251bWJlck9mQ2hhbm5lbHMiLCJzYW1wbGVDb3VudCIsInBjbSIsImxvYWRXYXZGaWxlIiwicmVsZWFzZVBjbURhdGEiLCJyZXNwb25jZSIsIl9yZWFkT2Zmc2V0IiwiX2ZpbGVOYW1lIiwiZ2V0Q2hlY2tTaWduYXR1cmUiLCJFcnJvciIsImdldDMyTGl0dGxlRW5kaWFuIiwiZm10Q2h1bmtTaXplIiwiZ2V0MTZMaXR0bGVFbmRpYW4iLCJfYml0c1BlclNhbXBsZSIsImRhdGFDaHVua1NpemUiLCJnZXRQY21TYW1wbGUiLCJwY20zMiIsImdldDgiLCJnZXQyNExpdHRsZUVuZGlhbiIsImdldFVpbnQ4IiwicmVmZXJlbmNlIiwiZ2V0U2lnbmF0dXJlIiwicmVmZXJlbmNlU3RyaW5nIiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJzaWduYXR1cmVPZmZzZXQiLCJfc3RhcnRYIiwiX3N0YXJ0WSIsIl9sYXN0WCIsIl9sYXN0WSIsIl9sYXN0WDEiLCJfbGFzdFkxIiwiX2xhc3RYMiIsIl9sYXN0WTIiLCJfbGFzdFRvdWNoRGlzdGFuY2UiLCJfZGVsdGFYIiwiX2RlbHRhWSIsIl90b3VjaFNpbmdsZSIsIl9mbGlwQXZhaWxhYmxlIiwiZ2V0RGVsdGFYIiwiZ2V0RGVsdGFZIiwiZ2V0U3RhcnRYIiwiZ2V0U3RhcnRZIiwiZ2V0WDEiLCJnZXRZMSIsImdldFgyIiwiZ2V0WTIiLCJpc1NpbmdsZVRvdWNoIiwiaXNGbGlja0F2YWlsYWJsZSIsImRpc2FibGVGbGljayIsImdldEZsaWNrRGlzdGFuY2UiLCJjYWxjdWxhdGVEaXN0YW5jZSIsInkxIiwieTIiLCJjYWxjdWxhdGVNb3ZpbmdBbW91bnQiLCJ2MSIsInYyIiwiYWJzb2x1dGVWYWx1ZTEiLCJhYnNvbHV0ZVZhbHVlMiIsImdsb2JhbCIsImdsb2JhbFRoaXMiLCJzdXBwb3J0IiwiU3ltYm9sIiwiQmxvYiIsInZpZXdDbGFzc2VzIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsIm9iaiIsIm5vcm1hbGl6ZU5hbWUiLCJTdHJpbmciLCJUeXBlRXJyb3IiLCJ0b0xvd2VyQ2FzZSIsIm5vcm1hbGl6ZVZhbHVlIiwiaXRlcmF0b3JGb3IiLCJpdGVtcyIsIm5leHQiLCJzaGlmdCIsImRvbmUiLCJIZWFkZXJzIiwiaGVhZGVycyIsImZvckVhY2giLCJoZWFkZXIiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiY29uc3VtZWQiLCJib2R5VXNlZCIsIlByb21pc2UiLCJyZWplY3QiLCJmaWxlUmVhZGVyUmVhZHkiLCJyZWFkZXIiLCJyZXNvbHZlIiwib25lcnJvciIsImVycm9yIiwicmVhZEJsb2JBc0FycmF5QnVmZmVyIiwiYmxvYiIsIkZpbGVSZWFkZXIiLCJwcm9taXNlIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJidWZmZXJDbG9uZSIsImJ1ZiIsInZpZXciLCJCb2R5IiwiX2luaXRCb2R5IiwiX2JvZHlJbml0IiwiX2JvZHlUZXh0IiwiaXNQcm90b3R5cGVPZiIsIl9ib2R5QmxvYiIsIkZvcm1EYXRhIiwiX2JvZHlGb3JtRGF0YSIsIlVSTFNlYXJjaFBhcmFtcyIsIl9ib2R5QXJyYXlCdWZmZXIiLCJyZWplY3RlZCIsImJ5dGVPZmZzZXQiLCJ0ZXh0IiwicmVhZEFzVGV4dCIsImNoYXJzIiwiZnJvbUNoYXJDb2RlIiwiam9pbiIsInJlYWRBcnJheUJ1ZmZlckFzVGV4dCIsImZvcm1EYXRhIiwiZGVjb2RlIiwib2xkVmFsdWUiLCJoYXMiLCJoYXNPd25Qcm9wZXJ0eSIsInRoaXNBcmciLCJrZXlzIiwiZW50cmllcyIsIm1ldGhvZHMiLCJSZXF1ZXN0IiwiaW5wdXQiLCJtZXRob2QiLCJ1cGNhc2VkIiwidXJsIiwiY3JlZGVudGlhbHMiLCJtb2RlIiwic2lnbmFsIiwidG9VcHBlckNhc2UiLCJyZWZlcnJlciIsImNhY2hlIiwicmVQYXJhbVNlYXJjaCIsImdldFRpbWUiLCJmb3JtIiwidHJpbSIsInNwbGl0IiwiYnl0ZXMiLCJSZXNwb25zZSIsImJvZHlJbml0Iiwic3RhdHVzIiwic3RhdHVzVGV4dCIsInJlZGlyZWN0U3RhdHVzZXMiLCJyZWRpcmVjdCIsIlJhbmdlRXJyb3IiLCJsb2NhdGlvbiIsIkRPTUV4Y2VwdGlvbiIsImVyciIsInN0YWNrIiwiY29uc3RydWN0b3IiLCJpbml0IiwicmVxdWVzdCIsImFib3J0ZWQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsImFib3J0WGhyIiwiYWJvcnQiLCJyYXdIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwibGluZSIsInJlc3BvbnNlVVJMIiwicmVzcG9uc2VUZXh0Iiwic2V0VGltZW91dCIsIm9udGltZW91dCIsIm9uYWJvcnQiLCJvcGVuIiwiaHJlZiIsImZpeFVybCIsIndpdGhDcmVkZW50aWFscyIsInJlc3BvbnNlVHlwZSIsInNldFJlcXVlc3RIZWFkZXIiLCJhZGRFdmVudExpc3RlbmVyIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzZW5kIiwicG9seWZpbGwiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImRlZmluaXRpb24iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJwcm9wIiwidG9TdHJpbmdUYWciLCJyZXNldEV4cHJlc3Npb24iLCJSZXNldEV4cHJlc3Npb24iLCJtb3ZlIiwidG91Y2hNb3ZlZCIsImRvd24iLCJ0b3VjaEVuZGVkIiwibGl2ZWFwaSIsIm9ucmVzaXplIiwic3R5bGUiLCJjbG9zZSIsInNldFhZIiwiY2hhbmdlTW9kZWwiLCJ0aW1lciIsImxpc3QiLCJnZXRFeHByZXNzaW9ucyIsImNsZWFySW50ZXJ2YWwiLCJmaXhQb3MiLCJlbGVtZW50IiwiYWN0dWFsTGVmdCIsIm9mZnNldExlZnQiLCJjdXJyZW50Iiwib2Zmc2V0UGFyZW50IiwiZ2V0RWxlbWVudExlZnQiLCJhY3R1YWxUb3AiLCJvZmZzZXRUb3AiLCJnZXRFbGVtZW50VG9wIiwiZml4WCIsImZpeFkiLCJ3aWR0aDEiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiaGVpZ2h0MSIsImlubmVySGVpZ2h0IiwiZnVuIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsImdldE1vdGlvbnMiLCJjb3VudDEiLCJsaXN0MSIsImNvdW50MiIsIml0ZW0xIiwiZmlsZSIsInN0YXJ0RXhwcmVzc2lvbiIsIm5ldyIsIkxpdmUyZEFQSSJdLCJzb3VyY2VSb290IjoiIn0=